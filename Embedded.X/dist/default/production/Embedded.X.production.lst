

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 29 19:51:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F884
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	dabs	1,0x7E,2
    77  0000                     
    78                           ; Version 2.05
    79                           ; Generated 20/12/2018 GMT
    80                           ; 
    81                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC16F884 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  008F                     	;# 
   157  0090                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0093                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  0105                     	;# 
   176  0107                     	;# 
   177  0108                     	;# 
   178  0109                     	;# 
   179  010C                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  010F                     	;# 
   184  0185                     	;# 
   185  0187                     	;# 
   186  0188                     	;# 
   187  0189                     	;# 
   188  018C                     	;# 
   189  018D                     	;# 
   190  0000                     	;# 
   191  0001                     	;# 
   192  0002                     	;# 
   193  0003                     	;# 
   194  0004                     	;# 
   195  0005                     	;# 
   196  0006                     	;# 
   197  0007                     	;# 
   198  0008                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0013                     	;# 
   211  0014                     	;# 
   212  0015                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  001D                     	;# 
   223  001E                     	;# 
   224  001F                     	;# 
   225  0081                     	;# 
   226  0085                     	;# 
   227  0086                     	;# 
   228  0087                     	;# 
   229  0088                     	;# 
   230  0089                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  008F                     	;# 
   235  0090                     	;# 
   236  0091                     	;# 
   237  0092                     	;# 
   238  0093                     	;# 
   239  0093                     	;# 
   240  0093                     	;# 
   241  0094                     	;# 
   242  0095                     	;# 
   243  0096                     	;# 
   244  0097                     	;# 
   245  0098                     	;# 
   246  0099                     	;# 
   247  009A                     	;# 
   248  009B                     	;# 
   249  009C                     	;# 
   250  009D                     	;# 
   251  009E                     	;# 
   252  009F                     	;# 
   253  0105                     	;# 
   254  0107                     	;# 
   255  0108                     	;# 
   256  0109                     	;# 
   257  010C                     	;# 
   258  010C                     	;# 
   259  010D                     	;# 
   260  010E                     	;# 
   261  010F                     	;# 
   262  0185                     	;# 
   263  0187                     	;# 
   264  0188                     	;# 
   265  0189                     	;# 
   266  018C                     	;# 
   267  018D                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  000E                     	;# 
   284  000F                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0013                     	;# 
   289  0014                     	;# 
   290  0015                     	;# 
   291  0015                     	;# 
   292  0016                     	;# 
   293  0017                     	;# 
   294  0018                     	;# 
   295  0019                     	;# 
   296  001A                     	;# 
   297  001B                     	;# 
   298  001B                     	;# 
   299  001C                     	;# 
   300  001D                     	;# 
   301  001E                     	;# 
   302  001F                     	;# 
   303  0081                     	;# 
   304  0085                     	;# 
   305  0086                     	;# 
   306  0087                     	;# 
   307  0088                     	;# 
   308  0089                     	;# 
   309  008C                     	;# 
   310  008D                     	;# 
   311  008E                     	;# 
   312  008F                     	;# 
   313  0090                     	;# 
   314  0091                     	;# 
   315  0092                     	;# 
   316  0093                     	;# 
   317  0093                     	;# 
   318  0093                     	;# 
   319  0094                     	;# 
   320  0095                     	;# 
   321  0096                     	;# 
   322  0097                     	;# 
   323  0098                     	;# 
   324  0099                     	;# 
   325  009A                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  009F                     	;# 
   331  0105                     	;# 
   332  0107                     	;# 
   333  0108                     	;# 
   334  0109                     	;# 
   335  010C                     	;# 
   336  010C                     	;# 
   337  010D                     	;# 
   338  010E                     	;# 
   339  010F                     	;# 
   340  0185                     	;# 
   341  0187                     	;# 
   342  0188                     	;# 
   343  0189                     	;# 
   344  018C                     	;# 
   345  018D                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000D                     	;# 
   360  000E                     	;# 
   361  000E                     	;# 
   362  000F                     	;# 
   363  0010                     	;# 
   364  0011                     	;# 
   365  0012                     	;# 
   366  0013                     	;# 
   367  0014                     	;# 
   368  0015                     	;# 
   369  0015                     	;# 
   370  0016                     	;# 
   371  0017                     	;# 
   372  0018                     	;# 
   373  0019                     	;# 
   374  001A                     	;# 
   375  001B                     	;# 
   376  001B                     	;# 
   377  001C                     	;# 
   378  001D                     	;# 
   379  001E                     	;# 
   380  001F                     	;# 
   381  0081                     	;# 
   382  0085                     	;# 
   383  0086                     	;# 
   384  0087                     	;# 
   385  0088                     	;# 
   386  0089                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  008F                     	;# 
   391  0090                     	;# 
   392  0091                     	;# 
   393  0092                     	;# 
   394  0093                     	;# 
   395  0093                     	;# 
   396  0093                     	;# 
   397  0094                     	;# 
   398  0095                     	;# 
   399  0096                     	;# 
   400  0097                     	;# 
   401  0098                     	;# 
   402  0099                     	;# 
   403  009A                     	;# 
   404  009B                     	;# 
   405  009C                     	;# 
   406  009D                     	;# 
   407  009E                     	;# 
   408  009F                     	;# 
   409  0105                     	;# 
   410  0107                     	;# 
   411  0108                     	;# 
   412  0109                     	;# 
   413  010C                     	;# 
   414  010C                     	;# 
   415  010D                     	;# 
   416  010E                     	;# 
   417  010F                     	;# 
   418  0185                     	;# 
   419  0187                     	;# 
   420  0188                     	;# 
   421  0189                     	;# 
   422  018C                     	;# 
   423  018D                     	;# 
   424  0000                     	;# 
   425  0001                     	;# 
   426  0002                     	;# 
   427  0003                     	;# 
   428  0004                     	;# 
   429  0005                     	;# 
   430  0006                     	;# 
   431  0007                     	;# 
   432  0008                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  000E                     	;# 
   440  000F                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0013                     	;# 
   445  0014                     	;# 
   446  0015                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0017                     	;# 
   450  0018                     	;# 
   451  0019                     	;# 
   452  001A                     	;# 
   453  001B                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001D                     	;# 
   457  001E                     	;# 
   458  001F                     	;# 
   459  0081                     	;# 
   460  0085                     	;# 
   461  0086                     	;# 
   462  0087                     	;# 
   463  0088                     	;# 
   464  0089                     	;# 
   465  008C                     	;# 
   466  008D                     	;# 
   467  008E                     	;# 
   468  008F                     	;# 
   469  0090                     	;# 
   470  0091                     	;# 
   471  0092                     	;# 
   472  0093                     	;# 
   473  0093                     	;# 
   474  0093                     	;# 
   475  0094                     	;# 
   476  0095                     	;# 
   477  0096                     	;# 
   478  0097                     	;# 
   479  0098                     	;# 
   480  0099                     	;# 
   481  009A                     	;# 
   482  009B                     	;# 
   483  009C                     	;# 
   484  009D                     	;# 
   485  009E                     	;# 
   486  009F                     	;# 
   487  0105                     	;# 
   488  0107                     	;# 
   489  0108                     	;# 
   490  0109                     	;# 
   491  010C                     	;# 
   492  010C                     	;# 
   493  010D                     	;# 
   494  010E                     	;# 
   495  010F                     	;# 
   496  0185                     	;# 
   497  0187                     	;# 
   498  0188                     	;# 
   499  0189                     	;# 
   500  018C                     	;# 
   501  018D                     	;# 
   502                           
   503                           	psect	idataBANK0
   504  0930                     __pidataBANK0:	
   505                           
   506                           ;initializer for _randx
   507  0930  3401               	retlw	1
   508  0931  3400               	retlw	0
   509  0932  3400               	retlw	0
   510  0933  3400               	retlw	0
   511                           
   512                           	psect	idataBANK1
   513  0003                     __pidataBANK1:	
   514                           
   515                           ;initializer for _timerPrescaler
   516  0003  3410               	retlw	16
   517                           
   518                           	psect	stringtext
   519  0100                     __pstringtext:	
   520  0100                     stringtab:	
   521  0100                     __stringtab:	
   522                           
   523                           ;	String table - string pointers are 2 bytes each
   524  0100  1BFF               	btfsc	btemp+1,7
   525  0101  290A               	ljmp	stringcode
   526  0102  1383               	bcf	3,7
   527  0103  187F               	btfsc	btemp+1,0
   528  0104  1783               	bsf	3,7
   529  0105  0800               	movf	0,w
   530  0106  0A84               	incf	4,f
   531  0107  1903               	skipnz
   532  0108  0AFF               	incf	btemp+1,f
   533  0109  0008               	return
   534  010A                     stringcode:	
   535  010A  087F               	movf	btemp+1,w
   536  010B  397F               	andlw	127
   537  010C  008A               	movwf	10
   538  010D  0804               	movf	4,w
   539  010E  0A84               	incf	4,f
   540  010F  1903               	skipnz
   541  0110  0AFF               	incf	btemp+1,f
   542  0111  0082               	movwf	2
   543  0112                     __stringbase:	
   544  0112                     __end_of__stringtab:	
   545  0112                     _logoImage:	
   546  0112  3400               	retlw	0
   547  0113  3400               	retlw	0
   548  0114  3400               	retlw	0
   549  0115  3400               	retlw	0
   550  0116  3400               	retlw	0
   551  0117  3400               	retlw	0
   552  0118  3400               	retlw	0
   553  0119  3400               	retlw	0
   554  011A  3400               	retlw	0
   555  011B  3400               	retlw	0
   556  011C  3400               	retlw	0
   557  011D  3400               	retlw	0
   558  011E  3400               	retlw	0
   559  011F  3400               	retlw	0
   560  0120  3400               	retlw	0
   561  0121  3400               	retlw	0
   562  0122  3400               	retlw	0
   563  0123  3400               	retlw	0
   564  0124  3400               	retlw	0
   565  0125  3400               	retlw	0
   566  0126  3400               	retlw	0
   567  0127  3400               	retlw	0
   568  0128  3400               	retlw	0
   569  0129  3400               	retlw	0
   570  012A  3400               	retlw	0
   571  012B  3400               	retlw	0
   572  012C  3400               	retlw	0
   573  012D  3400               	retlw	0
   574  012E  3400               	retlw	0
   575  012F  3400               	retlw	0
   576  0130  34C0               	retlw	192
   577  0131  3420               	retlw	32
   578  0132  3420               	retlw	32
   579  0133  3420               	retlw	32
   580  0134  3420               	retlw	32
   581  0135  3420               	retlw	32
   582  0136  3460               	retlw	96
   583  0137  3440               	retlw	64
   584  0138  3440               	retlw	64
   585  0139  34C0               	retlw	192
   586  013A  3480               	retlw	128
   587  013B  3480               	retlw	128
   588  013C  3400               	retlw	0
   589  013D  3400               	retlw	0
   590  013E  3400               	retlw	0
   591  013F  3400               	retlw	0
   592  0140  3400               	retlw	0
   593  0141  3400               	retlw	0
   594  0142  3400               	retlw	0
   595  0143  3400               	retlw	0
   596  0144  3400               	retlw	0
   597  0145  3480               	retlw	128
   598  0146  3480               	retlw	128
   599  0147  3480               	retlw	128
   600  0148  3480               	retlw	128
   601  0149  3480               	retlw	128
   602  014A  3480               	retlw	128
   603  014B  3400               	retlw	0
   604  014C  3400               	retlw	0
   605  014D  3400               	retlw	0
   606  014E  3400               	retlw	0
   607  014F  3400               	retlw	0
   608  0150  3400               	retlw	0
   609  0151  3400               	retlw	0
   610  0152  3400               	retlw	0
   611  0153  3400               	retlw	0
   612  0154  3400               	retlw	0
   613  0155  3400               	retlw	0
   614  0156  3400               	retlw	0
   615  0157  3400               	retlw	0
   616  0158  3400               	retlw	0
   617  0159  3400               	retlw	0
   618  015A  3400               	retlw	0
   619  015B  3400               	retlw	0
   620  015C  3400               	retlw	0
   621  015D  3400               	retlw	0
   622  015E  3400               	retlw	0
   623  015F  3400               	retlw	0
   624  0160  3400               	retlw	0
   625  0161  3400               	retlw	0
   626  0162  3400               	retlw	0
   627  0163  3400               	retlw	0
   628  0164  3400               	retlw	0
   629  0165  3400               	retlw	0
   630  0166  3400               	retlw	0
   631  0167  3400               	retlw	0
   632  0168  3400               	retlw	0
   633  0169  3400               	retlw	0
   634  016A  3400               	retlw	0
   635  016B  3400               	retlw	0
   636  016C  3400               	retlw	0
   637  016D  3400               	retlw	0
   638  016E  3400               	retlw	0
   639  016F  3480               	retlw	128
   640  0170  3480               	retlw	128
   641  0171  34C0               	retlw	192
   642  0172  3440               	retlw	64
   643  0173  3440               	retlw	64
   644  0174  3440               	retlw	64
   645  0175  3440               	retlw	64
   646  0176  3440               	retlw	64
   647  0177  3440               	retlw	64
   648  0178  3440               	retlw	64
   649  0179  3440               	retlw	64
   650  017A  3440               	retlw	64
   651  017B  3440               	retlw	64
   652  017C  3440               	retlw	64
   653  017D  3440               	retlw	64
   654  017E  34C0               	retlw	192
   655  017F  3400               	retlw	0
   656  0180  3400               	retlw	0
   657  0181  3400               	retlw	0
   658  0182  3400               	retlw	0
   659  0183  3400               	retlw	0
   660  0184  3400               	retlw	0
   661  0185  3400               	retlw	0
   662  0186  3400               	retlw	0
   663  0187  3400               	retlw	0
   664  0188  3400               	retlw	0
   665  0189  3400               	retlw	0
   666  018A  3400               	retlw	0
   667  018B  3400               	retlw	0
   668  018C  3400               	retlw	0
   669  018D  3400               	retlw	0
   670  018E  3400               	retlw	0
   671  018F  3400               	retlw	0
   672  0190  3400               	retlw	0
   673  0191  3400               	retlw	0
   674  0192  3400               	retlw	0
   675  0193  3400               	retlw	0
   676  0194  3400               	retlw	0
   677  0195  3400               	retlw	0
   678  0196  3400               	retlw	0
   679  0197  3400               	retlw	0
   680  0198  3400               	retlw	0
   681  0199  3400               	retlw	0
   682  019A  3400               	retlw	0
   683  019B  3400               	retlw	0
   684  019C  3400               	retlw	0
   685  019D  3400               	retlw	0
   686  019E  3400               	retlw	0
   687  019F  3400               	retlw	0
   688  01A0  3400               	retlw	0
   689  01A1  3400               	retlw	0
   690  01A2  3400               	retlw	0
   691  01A3  3400               	retlw	0
   692  01A4  3400               	retlw	0
   693  01A5  3400               	retlw	0
   694  01A6  3400               	retlw	0
   695  01A7  3400               	retlw	0
   696  01A8  3400               	retlw	0
   697  01A9  3400               	retlw	0
   698  01AA  3400               	retlw	0
   699  01AB  3400               	retlw	0
   700  01AC  3400               	retlw	0
   701  01AD  3400               	retlw	0
   702  01AE  3400               	retlw	0
   703  01AF  3400               	retlw	0
   704  01B0  3401               	retlw	1
   705  01B1  3401               	retlw	1
   706  01B2  3402               	retlw	2
   707  01B3  3402               	retlw	2
   708  01B4  3404               	retlw	4
   709  01B5  3404               	retlw	4
   710  01B6  3404               	retlw	4
   711  01B7  3404               	retlw	4
   712  01B8  3404               	retlw	4
   713  01B9  3404               	retlw	4
   714  01BA  3404               	retlw	4
   715  01BB  3404               	retlw	4
   716  01BC  3405               	retlw	5
   717  01BD  347E               	retlw	126
   718  01BE  3484               	retlw	132
   719  01BF  3484               	retlw	132
   720  01C0  3486               	retlw	134
   721  01C1  3482               	retlw	130
   722  01C2  3482               	retlw	130
   723  01C3  3442               	retlw	66
   724  01C4  3431               	retlw	49
   725  01C5  3400               	retlw	0
   726  01C6  3400               	retlw	0
   727  01C7  3400               	retlw	0
   728  01C8  3400               	retlw	0
   729  01C9  3400               	retlw	0
   730  01CA  341F               	retlw	31
   731  01CB  3400               	retlw	0
   732  01CC  3400               	retlw	0
   733  01CD  3400               	retlw	0
   734  01CE  3400               	retlw	0
   735  01CF  3400               	retlw	0
   736  01D0  3400               	retlw	0
   737  01D1  3400               	retlw	0
   738  01D2  3400               	retlw	0
   739  01D3  3400               	retlw	0
   740  01D4  3400               	retlw	0
   741  01D5  3400               	retlw	0
   742  01D6  3400               	retlw	0
   743  01D7  3400               	retlw	0
   744  01D8  3400               	retlw	0
   745  01D9  3400               	retlw	0
   746  01DA  3400               	retlw	0
   747  01DB  3400               	retlw	0
   748  01DC  3400               	retlw	0
   749  01DD  3400               	retlw	0
   750  01DE  3400               	retlw	0
   751  01DF  3400               	retlw	0
   752  01E0  3480               	retlw	128
   753  01E1  3480               	retlw	128
   754  01E2  3440               	retlw	64
   755  01E3  3440               	retlw	64
   756  01E4  3420               	retlw	32
   757  01E5  3420               	retlw	32
   758  01E6  3410               	retlw	16
   759  01E7  3408               	retlw	8
   760  01E8  3408               	retlw	8
   761  01E9  340C               	retlw	12
   762  01EA  3402               	retlw	2
   763  01EB  3402               	retlw	2
   764  01EC  3401               	retlw	1
   765  01ED  3401               	retlw	1
   766  01EE  3401               	retlw	1
   767  01EF  3400               	retlw	0
   768  01F0  3400               	retlw	0
   769  01F1  3400               	retlw	0
   770  01F2  3400               	retlw	0
   771  01F3  3400               	retlw	0
   772  01F4  3400               	retlw	0
   773  01F5  3400               	retlw	0
   774  01F6  3400               	retlw	0
   775  01F7  3400               	retlw	0
   776  01F8  3400               	retlw	0
   777  01F9  3400               	retlw	0
   778  01FA  3400               	retlw	0
   779  01FB  3400               	retlw	0
   780  01FC  3400               	retlw	0
   781  01FD  3400               	retlw	0
   782  01FE  3403               	retlw	3
   783  01FF  340C               	retlw	12
   784  0200  34F0               	retlw	240
   785  0201  3400               	retlw	0
   786  0202  3400               	retlw	0
   787  0203  3400               	retlw	0
   788  0204  3400               	retlw	0
   789  0205  3400               	retlw	0
   790  0206  3400               	retlw	0
   791  0207  3400               	retlw	0
   792  0208  3400               	retlw	0
   793  0209  3400               	retlw	0
   794  020A  3400               	retlw	0
   795  020B  3400               	retlw	0
   796  020C  3400               	retlw	0
   797  020D  3400               	retlw	0
   798  020E  3400               	retlw	0
   799  020F  3400               	retlw	0
   800  0210  3400               	retlw	0
   801  0211  3400               	retlw	0
   802  0212  3400               	retlw	0
   803  0213  3400               	retlw	0
   804  0214  3400               	retlw	0
   805  0215  3400               	retlw	0
   806  0216  3400               	retlw	0
   807  0217  3400               	retlw	0
   808  0218  3400               	retlw	0
   809  0219  3400               	retlw	0
   810  021A  3400               	retlw	0
   811  021B  3400               	retlw	0
   812  021C  3400               	retlw	0
   813  021D  3400               	retlw	0
   814  021E  3400               	retlw	0
   815  021F  3400               	retlw	0
   816  0220  3400               	retlw	0
   817  0221  3400               	retlw	0
   818  0222  3400               	retlw	0
   819  0223  3400               	retlw	0
   820  0224  3400               	retlw	0
   821  0225  3400               	retlw	0
   822  0226  3400               	retlw	0
   823  0227  3400               	retlw	0
   824  0228  3400               	retlw	0
   825  0229  3400               	retlw	0
   826  022A  3400               	retlw	0
   827  022B  3400               	retlw	0
   828  022C  3400               	retlw	0
   829  022D  3400               	retlw	0
   830  022E  3400               	retlw	0
   831  022F  3400               	retlw	0
   832  0230  3400               	retlw	0
   833  0231  3400               	retlw	0
   834  0232  3400               	retlw	0
   835  0233  3400               	retlw	0
   836  0234  3400               	retlw	0
   837  0235  3400               	retlw	0
   838  0236  3400               	retlw	0
   839  0237  3400               	retlw	0
   840  0238  3400               	retlw	0
   841  0239  3400               	retlw	0
   842  023A  3400               	retlw	0
   843  023B  3400               	retlw	0
   844  023C  3400               	retlw	0
   845  023D  3400               	retlw	0
   846  023E  3400               	retlw	0
   847  023F  3400               	retlw	0
   848  0240  3400               	retlw	0
   849  0241  3400               	retlw	0
   850  0242  3400               	retlw	0
   851  0243  3400               	retlw	0
   852  0244  3400               	retlw	0
   853  0245  3400               	retlw	0
   854  0246  3400               	retlw	0
   855  0247  3400               	retlw	0
   856  0248  3400               	retlw	0
   857  0249  3400               	retlw	0
   858  024A  3400               	retlw	0
   859  024B  3400               	retlw	0
   860  024C  3400               	retlw	0
   861  024D  3400               	retlw	0
   862  024E  3400               	retlw	0
   863  024F  3400               	retlw	0
   864  0250  3400               	retlw	0
   865  0251  3400               	retlw	0
   866  0252  3400               	retlw	0
   867  0253  3480               	retlw	128
   868  0254  3480               	retlw	128
   869  0255  3440               	retlw	64
   870  0256  3420               	retlw	32
   871  0257  3410               	retlw	16
   872  0258  3408               	retlw	8
   873  0259  3408               	retlw	8
   874  025A  3408               	retlw	8
   875  025B  3404               	retlw	4
   876  025C  3404               	retlw	4
   877  025D  3402               	retlw	2
   878  025E  3402               	retlw	2
   879  025F  3401               	retlw	1
   880  0260  3400               	retlw	0
   881  0261  3400               	retlw	0
   882  0262  3400               	retlw	0
   883  0263  3400               	retlw	0
   884  0264  3400               	retlw	0
   885  0265  3400               	retlw	0
   886  0266  3400               	retlw	0
   887  0267  3400               	retlw	0
   888  0268  3400               	retlw	0
   889  0269  3400               	retlw	0
   890  026A  3400               	retlw	0
   891  026B  3400               	retlw	0
   892  026C  3400               	retlw	0
   893  026D  3400               	retlw	0
   894  026E  3400               	retlw	0
   895  026F  3400               	retlw	0
   896  0270  3400               	retlw	0
   897  0271  3400               	retlw	0
   898  0272  3400               	retlw	0
   899  0273  3400               	retlw	0
   900  0274  3400               	retlw	0
   901  0275  3400               	retlw	0
   902  0276  3400               	retlw	0
   903  0277  3400               	retlw	0
   904  0278  3400               	retlw	0
   905  0279  3400               	retlw	0
   906  027A  3400               	retlw	0
   907  027B  3400               	retlw	0
   908  027C  3400               	retlw	0
   909  027D  3400               	retlw	0
   910  027E  3400               	retlw	0
   911  027F  3400               	retlw	0
   912  0280  343F               	retlw	63
   913  0281  3400               	retlw	0
   914  0282  3400               	retlw	0
   915  0283  3400               	retlw	0
   916  0284  3480               	retlw	128
   917  0285  3400               	retlw	0
   918  0286  3400               	retlw	0
   919  0287  3400               	retlw	0
   920  0288  3400               	retlw	0
   921  0289  3400               	retlw	0
   922  028A  3400               	retlw	0
   923  028B  3400               	retlw	0
   924  028C  3400               	retlw	0
   925  028D  3400               	retlw	0
   926  028E  3400               	retlw	0
   927  028F  3400               	retlw	0
   928  0290  3400               	retlw	0
   929  0291  3400               	retlw	0
   930  0292  3400               	retlw	0
   931  0293  3400               	retlw	0
   932  0294  3400               	retlw	0
   933  0295  3400               	retlw	0
   934  0296  3400               	retlw	0
   935  0297  3400               	retlw	0
   936  0298  3400               	retlw	0
   937  0299  3400               	retlw	0
   938  029A  3400               	retlw	0
   939  029B  3400               	retlw	0
   940  029C  3400               	retlw	0
   941  029D  3400               	retlw	0
   942  029E  3400               	retlw	0
   943  029F  3400               	retlw	0
   944  02A0  3400               	retlw	0
   945  02A1  34F8               	retlw	248
   946  02A2  3408               	retlw	8
   947  02A3  3404               	retlw	4
   948  02A4  3404               	retlw	4
   949  02A5  3404               	retlw	4
   950  02A6  3404               	retlw	4
   951  02A7  3404               	retlw	4
   952  02A8  3404               	retlw	4
   953  02A9  3404               	retlw	4
   954  02AA  3404               	retlw	4
   955  02AB  3404               	retlw	4
   956  02AC  3404               	retlw	4
   957  02AD  3404               	retlw	4
   958  02AE  3404               	retlw	4
   959  02AF  3404               	retlw	4
   960  02B0  3404               	retlw	4
   961  02B1  3404               	retlw	4
   962  02B2  3404               	retlw	4
   963  02B3  3404               	retlw	4
   964  02B4  3404               	retlw	4
   965  02B5  3404               	retlw	4
   966  02B6  3404               	retlw	4
   967  02B7  3404               	retlw	4
   968  02B8  3404               	retlw	4
   969  02B9  3488               	retlw	136
   970  02BA  3488               	retlw	136
   971  02BB  3488               	retlw	136
   972  02BC  3408               	retlw	8
   973  02BD  3408               	retlw	8
   974  02BE  3408               	retlw	8
   975  02BF  3410               	retlw	16
   976  02C0  3410               	retlw	16
   977  02C1  3410               	retlw	16
   978  02C2  3410               	retlw	16
   979  02C3  3420               	retlw	32
   980  02C4  3420               	retlw	32
   981  02C5  3420               	retlw	32
   982  02C6  3440               	retlw	64
   983  02C7  3440               	retlw	64
   984  02C8  3480               	retlw	128
   985  02C9  3480               	retlw	128
   986  02CA  3480               	retlw	128
   987  02CB  3440               	retlw	64
   988  02CC  3430               	retlw	48
   989  02CD  3408               	retlw	8
   990  02CE  3408               	retlw	8
   991  02CF  3408               	retlw	8
   992  02D0  3404               	retlw	4
   993  02D1  3402               	retlw	2
   994  02D2  3401               	retlw	1
   995  02D3  3400               	retlw	0
   996  02D4  3400               	retlw	0
   997  02D5  3400               	retlw	0
   998  02D6  3400               	retlw	0
   999  02D7  3400               	retlw	0
  1000  02D8  3400               	retlw	0
  1001  02D9  3400               	retlw	0
  1002  02DA  3400               	retlw	0
  1003  02DB  3400               	retlw	0
  1004  02DC  3400               	retlw	0
  1005  02DD  3400               	retlw	0
  1006  02DE  3400               	retlw	0
  1007  02DF  3400               	retlw	0
  1008  02E0  3400               	retlw	0
  1009  02E1  3400               	retlw	0
  1010  02E2  3400               	retlw	0
  1011  02E3  3400               	retlw	0
  1012  02E4  3400               	retlw	0
  1013  02E5  3400               	retlw	0
  1014  02E6  3400               	retlw	0
  1015  02E7  3480               	retlw	128
  1016  02E8  3480               	retlw	128
  1017  02E9  3460               	retlw	96
  1018  02EA  3430               	retlw	48
  1019  02EB  340C               	retlw	12
  1020  02EC  3406               	retlw	6
  1021  02ED  3402               	retlw	2
  1022  02EE  343E               	retlw	62
  1023  02EF  3400               	retlw	0
  1024  02F0  3400               	retlw	0
  1025  02F1  3480               	retlw	128
  1026  02F2  3400               	retlw	0
  1027  02F3  3400               	retlw	0
  1028  02F4  3400               	retlw	0
  1029  02F5  3400               	retlw	0
  1030  02F6  3400               	retlw	0
  1031  02F7  3400               	retlw	0
  1032  02F8  3400               	retlw	0
  1033  02F9  3400               	retlw	0
  1034  02FA  3400               	retlw	0
  1035  02FB  3400               	retlw	0
  1036  02FC  3400               	retlw	0
  1037  02FD  3400               	retlw	0
  1038  02FE  3400               	retlw	0
  1039  02FF  3400               	retlw	0
  1040  0300  3400               	retlw	0
  1041  0301  3400               	retlw	0
  1042  0302  3400               	retlw	0
  1043  0303  3400               	retlw	0
  1044  0304  3403               	retlw	3
  1045  0305  343C               	retlw	60
  1046  0306  34C0               	retlw	192
  1047  0307  3400               	retlw	0
  1048  0308  3400               	retlw	0
  1049  0309  3400               	retlw	0
  1050  030A  3400               	retlw	0
  1051  030B  3400               	retlw	0
  1052  030C  3400               	retlw	0
  1053  030D  3400               	retlw	0
  1054  030E  3400               	retlw	0
  1055  030F  3400               	retlw	0
  1056  0310  3400               	retlw	0
  1057  0311  3400               	retlw	0
  1058  0312  3400               	retlw	0
  1059  0313  3400               	retlw	0
  1060  0314  3400               	retlw	0
  1061  0315  3400               	retlw	0
  1062  0316  3400               	retlw	0
  1063  0317  3400               	retlw	0
  1064  0318  3400               	retlw	0
  1065  0319  3400               	retlw	0
  1066  031A  3400               	retlw	0
  1067  031B  3400               	retlw	0
  1068  031C  3400               	retlw	0
  1069  031D  3400               	retlw	0
  1070  031E  3400               	retlw	0
  1071  031F  3400               	retlw	0
  1072  0320  3400               	retlw	0
  1073  0321  34FF               	retlw	255
  1074  0322  3400               	retlw	0
  1075  0323  3400               	retlw	0
  1076  0324  3400               	retlw	0
  1077  0325  3400               	retlw	0
  1078  0326  343C               	retlw	60
  1079  0327  3424               	retlw	36
  1080  0328  3424               	retlw	36
  1081  0329  3424               	retlw	36
  1082  032A  3424               	retlw	36
  1083  032B  3424               	retlw	36
  1084  032C  3424               	retlw	36
  1085  032D  3424               	retlw	36
  1086  032E  3424               	retlw	36
  1087  032F  3428               	retlw	40
  1088  0330  3428               	retlw	40
  1089  0331  3438               	retlw	56
  1090  0332  3418               	retlw	24
  1091  0333  3418               	retlw	24
  1092  0334  341C               	retlw	28
  1093  0335  3424               	retlw	36
  1094  0336  3426               	retlw	38
  1095  0337  3431               	retlw	49
  1096  0338  3419               	retlw	25
  1097  0339  340C               	retlw	12
  1098  033A  3403               	retlw	3
  1099  033B  3400               	retlw	0
  1100  033C  3400               	retlw	0
  1101  033D  3400               	retlw	0
  1102  033E  3400               	retlw	0
  1103  033F  3480               	retlw	128
  1104  0340  3480               	retlw	128
  1105  0341  3440               	retlw	64
  1106  0342  3440               	retlw	64
  1107  0343  3420               	retlw	32
  1108  0344  3430               	retlw	48
  1109  0345  3408               	retlw	8
  1110  0346  3408               	retlw	8
  1111  0347  3406               	retlw	6
  1112  0348  3401               	retlw	1
  1113  0349  3400               	retlw	0
  1114  034A  3401               	retlw	1
  1115  034B  3401               	retlw	1
  1116  034C  3401               	retlw	1
  1117  034D  3402               	retlw	2
  1118  034E  3404               	retlw	4
  1119  034F  3408               	retlw	8
  1120  0350  3408               	retlw	8
  1121  0351  3410               	retlw	16
  1122  0352  3420               	retlw	32
  1123  0353  3440               	retlw	64
  1124  0354  3480               	retlw	128
  1125  0355  3400               	retlw	0
  1126  0356  3400               	retlw	0
  1127  0357  3400               	retlw	0
  1128  0358  3400               	retlw	0
  1129  0359  3400               	retlw	0
  1130  035A  3400               	retlw	0
  1131  035B  3430               	retlw	48
  1132  035C  3438               	retlw	56
  1133  035D  3428               	retlw	40
  1134  035E  3424               	retlw	36
  1135  035F  3424               	retlw	36
  1136  0360  3414               	retlw	20
  1137  0361  3414               	retlw	20
  1138  0362  340C               	retlw	12
  1139  0363  340C               	retlw	12
  1140  0364  3406               	retlw	6
  1141  0365  3406               	retlw	6
  1142  0366  3405               	retlw	5
  1143  0367  3405               	retlw	5
  1144  0368  3404               	retlw	4
  1145  0369  3404               	retlw	4
  1146  036A  3404               	retlw	4
  1147  036B  3404               	retlw	4
  1148  036C  3404               	retlw	4
  1149  036D  3402               	retlw	2
  1150  036E  3402               	retlw	2
  1151  036F  3403               	retlw	3
  1152  0370  3401               	retlw	1
  1153  0371  3400               	retlw	0
  1154  0372  3400               	retlw	0
  1155  0373  3400               	retlw	0
  1156  0374  3400               	retlw	0
  1157  0375  3400               	retlw	0
  1158  0376  3400               	retlw	0
  1159  0377  3400               	retlw	0
  1160  0378  3400               	retlw	0
  1161  0379  3400               	retlw	0
  1162  037A  3400               	retlw	0
  1163  037B  3400               	retlw	0
  1164  037C  3400               	retlw	0
  1165  037D  3400               	retlw	0
  1166  037E  3400               	retlw	0
  1167  037F  3400               	retlw	0
  1168  0380  3400               	retlw	0
  1169  0381  3400               	retlw	0
  1170  0382  3400               	retlw	0
  1171  0383  3400               	retlw	0
  1172  0384  3400               	retlw	0
  1173  0385  3400               	retlw	0
  1174  0386  34FF               	retlw	255
  1175  0387  3400               	retlw	0
  1176  0388  3400               	retlw	0
  1177  0389  3400               	retlw	0
  1178  038A  3400               	retlw	0
  1179  038B  3400               	retlw	0
  1180  038C  3400               	retlw	0
  1181  038D  3400               	retlw	0
  1182  038E  3400               	retlw	0
  1183  038F  3400               	retlw	0
  1184  0390  3400               	retlw	0
  1185  0391  3400               	retlw	0
  1186  0392  3400               	retlw	0
  1187  0393  3400               	retlw	0
  1188  0394  3400               	retlw	0
  1189  0395  3400               	retlw	0
  1190  0396  3400               	retlw	0
  1191  0397  3400               	retlw	0
  1192  0398  3400               	retlw	0
  1193  0399  3400               	retlw	0
  1194  039A  3400               	retlw	0
  1195  039B  3400               	retlw	0
  1196  039C  3400               	retlw	0
  1197  039D  3400               	retlw	0
  1198  039E  3400               	retlw	0
  1199  039F  3400               	retlw	0
  1200  03A0  3400               	retlw	0
  1201  03A1  3407               	retlw	7
  1202  03A2  3408               	retlw	8
  1203  03A3  3408               	retlw	8
  1204  03A4  3410               	retlw	16
  1205  03A5  3410               	retlw	16
  1206  03A6  3430               	retlw	48
  1207  03A7  3420               	retlw	32
  1208  03A8  3420               	retlw	32
  1209  03A9  3420               	retlw	32
  1210  03AA  3440               	retlw	64
  1211  03AB  3440               	retlw	64
  1212  03AC  3440               	retlw	64
  1213  03AD  3440               	retlw	64
  1214  03AE  3440               	retlw	64
  1215  03AF  3440               	retlw	64
  1216  03B0  3440               	retlw	64
  1217  03B1  3440               	retlw	64
  1218  03B2  3440               	retlw	64
  1219  03B3  3420               	retlw	32
  1220  03B4  3420               	retlw	32
  1221  03B5  3410               	retlw	16
  1222  03B6  3410               	retlw	16
  1223  03B7  3408               	retlw	8
  1224  03B8  3408               	retlw	8
  1225  03B9  3408               	retlw	8
  1226  03BA  3404               	retlw	4
  1227  03BB  3402               	retlw	2
  1228  03BC  3402               	retlw	2
  1229  03BD  3401               	retlw	1
  1230  03BE  3401               	retlw	1
  1231  03BF  3400               	retlw	0
  1232  03C0  3400               	retlw	0
  1233  03C1  3400               	retlw	0
  1234  03C2  3400               	retlw	0
  1235  03C3  3400               	retlw	0
  1236  03C4  3400               	retlw	0
  1237  03C5  3400               	retlw	0
  1238  03C6  3400               	retlw	0
  1239  03C7  3400               	retlw	0
  1240  03C8  3400               	retlw	0
  1241  03C9  3400               	retlw	0
  1242  03CA  3400               	retlw	0
  1243  03CB  3400               	retlw	0
  1244  03CC  3400               	retlw	0
  1245  03CD  3480               	retlw	128
  1246  03CE  34E0               	retlw	224
  1247  03CF  3418               	retlw	24
  1248  03D0  3408               	retlw	8
  1249  03D1  3408               	retlw	8
  1250  03D2  3404               	retlw	4
  1251  03D3  34FC               	retlw	252
  1252  03D4  3401               	retlw	1
  1253  03D5  3402               	retlw	2
  1254  03D6  340C               	retlw	12
  1255  03D7  3408               	retlw	8
  1256  03D8  3430               	retlw	48
  1257  03D9  34C0               	retlw	192
  1258  03DA  3400               	retlw	0
  1259  03DB  3400               	retlw	0
  1260  03DC  3400               	retlw	0
  1261  03DD  3400               	retlw	0
  1262  03DE  3400               	retlw	0
  1263  03DF  3400               	retlw	0
  1264  03E0  3400               	retlw	0
  1265  03E1  3400               	retlw	0
  1266  03E2  3400               	retlw	0
  1267  03E3  3400               	retlw	0
  1268  03E4  3400               	retlw	0
  1269  03E5  3400               	retlw	0
  1270  03E6  3400               	retlw	0
  1271  03E7  3400               	retlw	0
  1272  03E8  3400               	retlw	0
  1273  03E9  3400               	retlw	0
  1274  03EA  3400               	retlw	0
  1275  03EB  3400               	retlw	0
  1276  03EC  3400               	retlw	0
  1277  03ED  3400               	retlw	0
  1278  03EE  3400               	retlw	0
  1279  03EF  3400               	retlw	0
  1280  03F0  3400               	retlw	0
  1281  03F1  3400               	retlw	0
  1282  03F2  3400               	retlw	0
  1283  03F3  3400               	retlw	0
  1284  03F4  3400               	retlw	0
  1285  03F5  3400               	retlw	0
  1286  03F6  3400               	retlw	0
  1287  03F7  3400               	retlw	0
  1288  03F8  3400               	retlw	0
  1289  03F9  3400               	retlw	0
  1290  03FA  3400               	retlw	0
  1291  03FB  3400               	retlw	0
  1292  03FC  3400               	retlw	0
  1293  03FD  3400               	retlw	0
  1294  03FE  3400               	retlw	0
  1295  03FF  3400               	retlw	0
  1296  0400  3400               	retlw	0
  1297  0401  3400               	retlw	0
  1298  0402  3480               	retlw	128
  1299  0403  3480               	retlw	128
  1300  0404  3460               	retlw	96
  1301  0405  3430               	retlw	48
  1302  0406  341F               	retlw	31
  1303  0407  3400               	retlw	0
  1304  0408  3400               	retlw	0
  1305  0409  3400               	retlw	0
  1306  040A  3400               	retlw	0
  1307  040B  3400               	retlw	0
  1308  040C  3400               	retlw	0
  1309  040D  3400               	retlw	0
  1310  040E  3400               	retlw	0
  1311  040F  3400               	retlw	0
  1312  0410  3400               	retlw	0
  1313  0411  3400               	retlw	0
  1314  0412  3400               	retlw	0
  1315  0413  3400               	retlw	0
  1316  0414  3400               	retlw	0
  1317  0415  3400               	retlw	0
  1318  0416  3400               	retlw	0
  1319  0417  3400               	retlw	0
  1320  0418  3400               	retlw	0
  1321  0419  3400               	retlw	0
  1322  041A  3400               	retlw	0
  1323  041B  3400               	retlw	0
  1324  041C  3400               	retlw	0
  1325  041D  3400               	retlw	0
  1326  041E  3400               	retlw	0
  1327  041F  3400               	retlw	0
  1328  0420  3400               	retlw	0
  1329  0421  3400               	retlw	0
  1330  0422  3400               	retlw	0
  1331  0423  3400               	retlw	0
  1332  0424  3400               	retlw	0
  1333  0425  3400               	retlw	0
  1334  0426  3400               	retlw	0
  1335  0427  3400               	retlw	0
  1336  0428  3400               	retlw	0
  1337  0429  3400               	retlw	0
  1338  042A  3400               	retlw	0
  1339  042B  3400               	retlw	0
  1340  042C  3400               	retlw	0
  1341  042D  3400               	retlw	0
  1342  042E  3400               	retlw	0
  1343  042F  3400               	retlw	0
  1344  0430  3400               	retlw	0
  1345  0431  3400               	retlw	0
  1346  0432  3400               	retlw	0
  1347  0433  3400               	retlw	0
  1348  0434  3400               	retlw	0
  1349  0435  3400               	retlw	0
  1350  0436  3400               	retlw	0
  1351  0437  3400               	retlw	0
  1352  0438  3400               	retlw	0
  1353  0439  3400               	retlw	0
  1354  043A  3400               	retlw	0
  1355  043B  34F0               	retlw	240
  1356  043C  3418               	retlw	24
  1357  043D  3408               	retlw	8
  1358  043E  3408               	retlw	8
  1359  043F  3408               	retlw	8
  1360  0440  3408               	retlw	8
  1361  0441  3408               	retlw	8
  1362  0442  3408               	retlw	8
  1363  0443  3418               	retlw	24
  1364  0444  3410               	retlw	16
  1365  0445  3430               	retlw	48
  1366  0446  34E0               	retlw	224
  1367  0447  34C0               	retlw	192
  1368  0448  3440               	retlw	64
  1369  0449  3470               	retlw	112
  1370  044A  3450               	retlw	80
  1371  044B  3448               	retlw	72
  1372  044C  3446               	retlw	70
  1373  044D  3441               	retlw	65
  1374  044E  3420               	retlw	32
  1375  044F  341C               	retlw	28
  1376  0450  340C               	retlw	12
  1377  0451  3400               	retlw	0
  1378  0452  3400               	retlw	0
  1379  0453  3401               	retlw	1
  1380  0454  3400               	retlw	0
  1381  0455  3400               	retlw	0
  1382  0456  3400               	retlw	0
  1383  0457  3400               	retlw	0
  1384  0458  3400               	retlw	0
  1385  0459  3400               	retlw	0
  1386  045A  3401               	retlw	1
  1387  045B  3403               	retlw	3
  1388  045C  3402               	retlw	2
  1389  045D  3404               	retlw	4
  1390  045E  3408               	retlw	8
  1391  045F  3408               	retlw	8
  1392  0460  3408               	retlw	8
  1393  0461  3408               	retlw	8
  1394  0462  3408               	retlw	8
  1395  0463  3408               	retlw	8
  1396  0464  3408               	retlw	8
  1397  0465  3408               	retlw	8
  1398  0466  3408               	retlw	8
  1399  0467  3408               	retlw	8
  1400  0468  3408               	retlw	8
  1401  0469  3408               	retlw	8
  1402  046A  3408               	retlw	8
  1403  046B  3408               	retlw	8
  1404  046C  3408               	retlw	8
  1405  046D  3408               	retlw	8
  1406  046E  3408               	retlw	8
  1407  046F  3408               	retlw	8
  1408  0470  3408               	retlw	8
  1409  0471  3408               	retlw	8
  1410  0472  3408               	retlw	8
  1411  0473  3408               	retlw	8
  1412  0474  3408               	retlw	8
  1413  0475  3408               	retlw	8
  1414  0476  3404               	retlw	4
  1415  0477  3404               	retlw	4
  1416  0478  3404               	retlw	4
  1417  0479  3404               	retlw	4
  1418  047A  3404               	retlw	4
  1419  047B  3404               	retlw	4
  1420  047C  3404               	retlw	4
  1421  047D  3404               	retlw	4
  1422  047E  3402               	retlw	2
  1423  047F  3402               	retlw	2
  1424  0480  3401               	retlw	1
  1425  0481  3401               	retlw	1
  1426  0482  3400               	retlw	0
  1427  0483  3400               	retlw	0
  1428  0484  3400               	retlw	0
  1429  0485  3400               	retlw	0
  1430  0486  3400               	retlw	0
  1431  0487  3400               	retlw	0
  1432  0488  3400               	retlw	0
  1433  0489  3400               	retlw	0
  1434  048A  3400               	retlw	0
  1435  048B  3400               	retlw	0
  1436  048C  3400               	retlw	0
  1437  048D  3400               	retlw	0
  1438  048E  3400               	retlw	0
  1439  048F  3400               	retlw	0
  1440  0490  3400               	retlw	0
  1441  0491  3400               	retlw	0
  1442  0492  3400               	retlw	0
  1443  0493  3400               	retlw	0
  1444  0494  3400               	retlw	0
  1445  0495  3400               	retlw	0
  1446  0496  3400               	retlw	0
  1447  0497  3400               	retlw	0
  1448  0498  3400               	retlw	0
  1449  0499  3400               	retlw	0
  1450  049A  3400               	retlw	0
  1451  049B  3400               	retlw	0
  1452  049C  3400               	retlw	0
  1453  049D  3400               	retlw	0
  1454  049E  3400               	retlw	0
  1455  049F  3400               	retlw	0
  1456  04A0  3400               	retlw	0
  1457  04A1  3400               	retlw	0
  1458  04A2  3400               	retlw	0
  1459  04A3  3400               	retlw	0
  1460  04A4  3400               	retlw	0
  1461  04A5  3400               	retlw	0
  1462  04A6  3400               	retlw	0
  1463  04A7  3400               	retlw	0
  1464  04A8  3400               	retlw	0
  1465  04A9  3400               	retlw	0
  1466  04AA  3400               	retlw	0
  1467  04AB  3400               	retlw	0
  1468  04AC  3400               	retlw	0
  1469  04AD  3400               	retlw	0
  1470  04AE  3400               	retlw	0
  1471  04AF  3400               	retlw	0
  1472  04B0  3400               	retlw	0
  1473  04B1  3400               	retlw	0
  1474  04B2  3400               	retlw	0
  1475  04B3  3400               	retlw	0
  1476  04B4  3400               	retlw	0
  1477  04B5  3400               	retlw	0
  1478  04B6  3400               	retlw	0
  1479  04B7  3400               	retlw	0
  1480  04B8  3400               	retlw	0
  1481  04B9  3400               	retlw	0
  1482  04BA  3400               	retlw	0
  1483  04BB  3401               	retlw	1
  1484  04BC  3401               	retlw	1
  1485  04BD  3401               	retlw	1
  1486  04BE  3401               	retlw	1
  1487  04BF  3401               	retlw	1
  1488  04C0  3401               	retlw	1
  1489  04C1  3401               	retlw	1
  1490  04C2  3401               	retlw	1
  1491  04C3  3401               	retlw	1
  1492  04C4  3401               	retlw	1
  1493  04C5  3401               	retlw	1
  1494  04C6  3400               	retlw	0
  1495  04C7  3400               	retlw	0
  1496  04C8  3400               	retlw	0
  1497  04C9  3400               	retlw	0
  1498  04CA  3400               	retlw	0
  1499  04CB  3400               	retlw	0
  1500  04CC  3400               	retlw	0
  1501  04CD  3400               	retlw	0
  1502  04CE  3400               	retlw	0
  1503  04CF  3400               	retlw	0
  1504  04D0  3400               	retlw	0
  1505  04D1  3400               	retlw	0
  1506  04D2  3400               	retlw	0
  1507  04D3  3400               	retlw	0
  1508  04D4  3400               	retlw	0
  1509  04D5  3400               	retlw	0
  1510  04D6  3400               	retlw	0
  1511  04D7  3400               	retlw	0
  1512  04D8  3400               	retlw	0
  1513  04D9  3400               	retlw	0
  1514  04DA  3400               	retlw	0
  1515  04DB  3400               	retlw	0
  1516  04DC  3400               	retlw	0
  1517  04DD  3400               	retlw	0
  1518  04DE  3400               	retlw	0
  1519  04DF  3400               	retlw	0
  1520  04E0  3400               	retlw	0
  1521  04E1  3400               	retlw	0
  1522  04E2  3400               	retlw	0
  1523  04E3  3400               	retlw	0
  1524  04E4  3400               	retlw	0
  1525  04E5  3400               	retlw	0
  1526  04E6  3400               	retlw	0
  1527  04E7  3400               	retlw	0
  1528  04E8  3400               	retlw	0
  1529  04E9  3400               	retlw	0
  1530  04EA  3400               	retlw	0
  1531  04EB  3400               	retlw	0
  1532  04EC  3400               	retlw	0
  1533  04ED  3400               	retlw	0
  1534  04EE  3400               	retlw	0
  1535  04EF  3400               	retlw	0
  1536  04F0  3400               	retlw	0
  1537  04F1  3400               	retlw	0
  1538  04F2  3400               	retlw	0
  1539  04F3  3400               	retlw	0
  1540  04F4  3400               	retlw	0
  1541  04F5  3400               	retlw	0
  1542  04F6  3400               	retlw	0
  1543  04F7  3400               	retlw	0
  1544  04F8  3400               	retlw	0
  1545  04F9  3400               	retlw	0
  1546  04FA  3400               	retlw	0
  1547  04FB  3400               	retlw	0
  1548  04FC  3400               	retlw	0
  1549  04FD  3400               	retlw	0
  1550  04FE  3400               	retlw	0
  1551  04FF  3400               	retlw	0
  1552  0500  3400               	retlw	0
  1553  0501  3400               	retlw	0
  1554  0502  3400               	retlw	0
  1555  0503  3400               	retlw	0
  1556  0504  3400               	retlw	0
  1557  0505  3400               	retlw	0
  1558  0506  3400               	retlw	0
  1559  0507  3400               	retlw	0
  1560  0508  3400               	retlw	0
  1561  0509  3400               	retlw	0
  1562  050A  3400               	retlw	0
  1563  050B  3400               	retlw	0
  1564  050C  3400               	retlw	0
  1565  050D  3400               	retlw	0
  1566  050E  3400               	retlw	0
  1567  050F  3400               	retlw	0
  1568  0510  3400               	retlw	0
  1569  0511  3400               	retlw	0
  1570  0512                     __end_of_logoImage:	
  1571  0512                     _Tetris_playerStartingPosition:	
  1572  0512  3408               	retlw	8
  1573  0513  3402               	retlw	2
  1574  0514                     __end_of_Tetris_playerStartingPosition:	
  1575  0514                     _Tetris_unitPivot:	
  1576  0514  3403               	retlw	3
  1577  0515  3402               	retlw	2
  1578  0516                     __end_of_Tetris_unitPivot:	
  1579  0516                     _Tetris_units:	
  1580  0516  3449               	retlw	73
  1581  0517  3402               	retlw	2
  1582  0518  3410               	retlw	16
  1583  0519  3400               	retlw	0
  1584  051A  3410               	retlw	16
  1585  051B  3400               	retlw	0
  1586  051C  3410               	retlw	16
  1587  051D  3400               	retlw	0
  1588  051E  3410               	retlw	16
  1589  051F  3400               	retlw	0
  1590  0520  3400               	retlw	0
  1591  0521  3400               	retlw	0
  1592  0522  3400               	retlw	0
  1593  0523  3400               	retlw	0
  1594  0524  343C               	retlw	60
  1595  0525  3400               	retlw	0
  1596  0526  3400               	retlw	0
  1597  0527  3400               	retlw	0
  1598  0528  3400               	retlw	0
  1599  0529  3400               	retlw	0
  1600  052A  3400               	retlw	0
  1601  052B  3400               	retlw	0
  1602  052C  3400               	retlw	0
  1603  052D  3400               	retlw	0
  1604  052E  3400               	retlw	0
  1605  052F  3400               	retlw	0
  1606  0530  3400               	retlw	0
  1607  0531  3400               	retlw	0
  1608  0532  3400               	retlw	0
  1609  0533  3400               	retlw	0
  1610  0534  3400               	retlw	0
  1611  0535  3400               	retlw	0
  1612  0536  3400               	retlw	0
  1613  0537  3400               	retlw	0
  1614  0538  344F               	retlw	79
  1615  0539  3401               	retlw	1
  1616  053A  3400               	retlw	0
  1617  053B  3400               	retlw	0
  1618  053C  3418               	retlw	24
  1619  053D  3400               	retlw	0
  1620  053E  3418               	retlw	24
  1621  053F  3400               	retlw	0
  1622  0540  3400               	retlw	0
  1623  0541  3400               	retlw	0
  1624  0542  3400               	retlw	0
  1625  0543  3400               	retlw	0
  1626  0544  3400               	retlw	0
  1627  0545  3400               	retlw	0
  1628  0546  3400               	retlw	0
  1629  0547  3400               	retlw	0
  1630  0548  3400               	retlw	0
  1631  0549  3400               	retlw	0
  1632  054A  3400               	retlw	0
  1633  054B  3400               	retlw	0
  1634  054C  3400               	retlw	0
  1635  054D  3400               	retlw	0
  1636  054E  3400               	retlw	0
  1637  054F  3400               	retlw	0
  1638  0550  3400               	retlw	0
  1639  0551  3400               	retlw	0
  1640  0552  3400               	retlw	0
  1641  0553  3400               	retlw	0
  1642  0554  3400               	retlw	0
  1643  0555  3400               	retlw	0
  1644  0556  3400               	retlw	0
  1645  0557  3400               	retlw	0
  1646  0558  3400               	retlw	0
  1647  0559  3400               	retlw	0
  1648  055A  3454               	retlw	84
  1649  055B  3404               	retlw	4
  1650  055C  3400               	retlw	0
  1651  055D  3400               	retlw	0
  1652  055E  3410               	retlw	16
  1653  055F  3400               	retlw	0
  1654  0560  3438               	retlw	56
  1655  0561  3400               	retlw	0
  1656  0562  3400               	retlw	0
  1657  0563  3400               	retlw	0
  1658  0564  3400               	retlw	0
  1659  0565  3400               	retlw	0
  1660  0566  3410               	retlw	16
  1661  0567  3400               	retlw	0
  1662  0568  3418               	retlw	24
  1663  0569  3400               	retlw	0
  1664  056A  3410               	retlw	16
  1665  056B  3400               	retlw	0
  1666  056C  3400               	retlw	0
  1667  056D  3400               	retlw	0
  1668  056E  3400               	retlw	0
  1669  056F  3400               	retlw	0
  1670  0570  3438               	retlw	56
  1671  0571  3400               	retlw	0
  1672  0572  3410               	retlw	16
  1673  0573  3400               	retlw	0
  1674  0574  3400               	retlw	0
  1675  0575  3400               	retlw	0
  1676  0576  3410               	retlw	16
  1677  0577  3400               	retlw	0
  1678  0578  3430               	retlw	48
  1679  0579  3400               	retlw	0
  1680  057A  3410               	retlw	16
  1681  057B  3400               	retlw	0
  1682  057C  344C               	retlw	76
  1683  057D  3404               	retlw	4
  1684  057E  3400               	retlw	0
  1685  057F  3400               	retlw	0
  1686  0580  3410               	retlw	16
  1687  0581  3400               	retlw	0
  1688  0582  3410               	retlw	16
  1689  0583  3400               	retlw	0
  1690  0584  3418               	retlw	24
  1691  0585  3400               	retlw	0
  1692  0586  3400               	retlw	0
  1693  0587  3400               	retlw	0
  1694  0588  3408               	retlw	8
  1695  0589  3400               	retlw	0
  1696  058A  3438               	retlw	56
  1697  058B  3400               	retlw	0
  1698  058C  3400               	retlw	0
  1699  058D  3400               	retlw	0
  1700  058E  3400               	retlw	0
  1701  058F  3400               	retlw	0
  1702  0590  3430               	retlw	48
  1703  0591  3400               	retlw	0
  1704  0592  3410               	retlw	16
  1705  0593  3400               	retlw	0
  1706  0594  3410               	retlw	16
  1707  0595  3400               	retlw	0
  1708  0596  3400               	retlw	0
  1709  0597  3400               	retlw	0
  1710  0598  3400               	retlw	0
  1711  0599  3400               	retlw	0
  1712  059A  3438               	retlw	56
  1713  059B  3400               	retlw	0
  1714  059C  3420               	retlw	32
  1715  059D  3400               	retlw	0
  1716  059E  344A               	retlw	74
  1717  059F  3404               	retlw	4
  1718  05A0  3400               	retlw	0
  1719  05A1  3400               	retlw	0
  1720  05A2  3410               	retlw	16
  1721  05A3  3400               	retlw	0
  1722  05A4  3410               	retlw	16
  1723  05A5  3400               	retlw	0
  1724  05A6  3430               	retlw	48
  1725  05A7  3400               	retlw	0
  1726  05A8  3400               	retlw	0
  1727  05A9  3400               	retlw	0
  1728  05AA  3420               	retlw	32
  1729  05AB  3400               	retlw	0
  1730  05AC  3438               	retlw	56
  1731  05AD  3400               	retlw	0
  1732  05AE  3400               	retlw	0
  1733  05AF  3400               	retlw	0
  1734  05B0  3400               	retlw	0
  1735  05B1  3400               	retlw	0
  1736  05B2  3418               	retlw	24
  1737  05B3  3400               	retlw	0
  1738  05B4  3410               	retlw	16
  1739  05B5  3400               	retlw	0
  1740  05B6  3410               	retlw	16
  1741  05B7  3400               	retlw	0
  1742  05B8  3400               	retlw	0
  1743  05B9  3400               	retlw	0
  1744  05BA  3420               	retlw	32
  1745  05BB  3400               	retlw	0
  1746  05BC  3438               	retlw	56
  1747  05BD  3400               	retlw	0
  1748  05BE  3400               	retlw	0
  1749  05BF  3400               	retlw	0
  1750  05C0  3453               	retlw	83
  1751  05C1  3402               	retlw	2
  1752  05C2  3400               	retlw	0
  1753  05C3  3400               	retlw	0
  1754  05C4  3418               	retlw	24
  1755  05C5  3400               	retlw	0
  1756  05C6  3430               	retlw	48
  1757  05C7  3400               	retlw	0
  1758  05C8  3400               	retlw	0
  1759  05C9  3400               	retlw	0
  1760  05CA  3400               	retlw	0
  1761  05CB  3400               	retlw	0
  1762  05CC  3410               	retlw	16
  1763  05CD  3400               	retlw	0
  1764  05CE  3418               	retlw	24
  1765  05CF  3400               	retlw	0
  1766  05D0  3408               	retlw	8
  1767  05D1  3400               	retlw	0
  1768  05D2  3400               	retlw	0
  1769  05D3  3400               	retlw	0
  1770  05D4  3400               	retlw	0
  1771  05D5  3400               	retlw	0
  1772  05D6  3400               	retlw	0
  1773  05D7  3400               	retlw	0
  1774  05D8  3400               	retlw	0
  1775  05D9  3400               	retlw	0
  1776  05DA  3400               	retlw	0
  1777  05DB  3400               	retlw	0
  1778  05DC  3400               	retlw	0
  1779  05DD  3400               	retlw	0
  1780  05DE  3400               	retlw	0
  1781  05DF  3400               	retlw	0
  1782  05E0  3400               	retlw	0
  1783  05E1  3400               	retlw	0
  1784  05E2  345A               	retlw	90
  1785  05E3  3402               	retlw	2
  1786  05E4  3400               	retlw	0
  1787  05E5  3400               	retlw	0
  1788  05E6  3430               	retlw	48
  1789  05E7  3400               	retlw	0
  1790  05E8  3418               	retlw	24
  1791  05E9  3400               	retlw	0
  1792  05EA  3400               	retlw	0
  1793  05EB  3400               	retlw	0
  1794  05EC  3400               	retlw	0
  1795  05ED  3400               	retlw	0
  1796  05EE  3408               	retlw	8
  1797  05EF  3400               	retlw	0
  1798  05F0  3418               	retlw	24
  1799  05F1  3400               	retlw	0
  1800  05F2  3410               	retlw	16
  1801  05F3  3400               	retlw	0
  1802  05F4  3400               	retlw	0
  1803  05F5  3400               	retlw	0
  1804  05F6  3400               	retlw	0
  1805  05F7  3400               	retlw	0
  1806  05F8  3400               	retlw	0
  1807  05F9  3400               	retlw	0
  1808  05FA  3400               	retlw	0
  1809  05FB  3400               	retlw	0
  1810  05FC  3400               	retlw	0
  1811  05FD  3400               	retlw	0
  1812  05FE  3400               	retlw	0
  1813  05FF  3400               	retlw	0
  1814  0600  3400               	retlw	0
  1815  0601  3400               	retlw	0
  1816  0602  3400               	retlw	0
  1817  0603  3400               	retlw	0
  1818  0604                     __end_of_Tetris_units:	
  1819  000E                     _TMR1	set	14
  1820  000B                     _INTCONbits	set	11
  1821  0003                     _STATUSbits	set	3
  1822  0007                     _PORTC	set	7
  1823  0008                     _PORTD	set	8
  1824  0006                     _PORTB	set	6
  1825  0005                     _PORTA	set	5
  1826  0039                     _RC1	set	57
  1827  0038                     _RC0	set	56
  1828  0041                     _RD1	set	65
  1829  0040                     _RD0	set	64
  1830  003A                     _RC2	set	58
  1831  003B                     _RC3	set	59
  1832  0031                     _RB1	set	49
  1833  0034                     _RB4	set	52
  1834  0033                     _RB3	set	51
  1835  0032                     _RB2	set	50
  1836  005F                     _GIE	set	95
  1837  0060                     _TMR1IF	set	96
  1838  0059                     _INTF	set	89
  1839  005C                     _INTE	set	92
  1840  0085                     _T1CKPS1	set	133
  1841  0084                     _T1CKPS0	set	132
  1842  0080                     _TMR1ON	set	128
  1843  005E                     _PEIE	set	94
  1844  0081                     _TMR1CS	set	129
  1845  0087                     _TRISC	set	135
  1846  0088                     _TRISD	set	136
  1847  0085                     _TRISA	set	133
  1848  0095                     _WPUB	set	149
  1849  0086                     _TRISB	set	134
  1850  040E                     _INTEDG	set	1038
  1851  040F                     _nRBPU	set	1039
  1852  0460                     _TMR1IE	set	1120
  1853  047E                     _IRCF2	set	1150
  1854  047D                     _IRCF1	set	1149
  1855  047C                     _IRCF0	set	1148
  1856  010C                     _EEDATA	set	268
  1857  010D                     _EEADR	set	269
  1858  018D                     _EECON2	set	397
  1859  018C                     _EECON1	set	396
  1860  018C                     _EECON1bits	set	396
  1861  0188                     _ANSEL	set	392
  1862  0189                     _ANSELH	set	393
  1863                           
  1864                           ; #config settings
  1865  0000                     
  1866                           	psect	cinit
  1867  000D                     start_initialization:	
  1868  000D                     __initialization:	
  1869                           
  1870                           ; Initialize objects allocated to BANK1
  1871  000D  1683               	bsf	3,5	;RP0=1, select bank1
  1872  000E  1303               	bcf	3,6	;RP1=0, select bank1
  1873  000F  118A  2003  118A   	fcall	__pidataBANK1	;fetch initializer
  1874  0012  00E4               	movwf	__pdataBANK1& (0+127)
  1875                           
  1876                           ; Initialize objects allocated to BANK0
  1877  0013  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0014  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0015  158A  2130  118A   	fcall	__pidataBANK0	;fetch initializer
  1880  0018  00C7               	movwf	__pdataBANK0& (0+127)
  1881  0019  158A  2131  118A   	fcall	__pidataBANK0+1	;fetch initializer
  1882  001C  00C8               	movwf	(__pdataBANK0+1)& (0+127)
  1883  001D  158A  2132  118A   	fcall	__pidataBANK0+2	;fetch initializer
  1884  0020  00C9               	movwf	(__pdataBANK0+2)& (0+127)
  1885  0021  158A  2133         	fcall	__pidataBANK0+3	;fetch initializer
  1886  0023  00CA               	movwf	(__pdataBANK0+3)& (0+127)
  1887                           
  1888                           ; Clear objects allocated to BANK1
  1889  0024  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0025  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0026  01E3               	clrf	__pbssBANK1& (0+127)
  1892                           
  1893                           ; Clear objects allocated to COMMON
  1894  0027  01FA               	clrf	__pbssCOMMON& (0+127)
  1895  0028                     end_of_initialization:	
  1896                           ;End of C runtime variable initialization code
  1897                           
  1898  0028                     __end_of__initialization:	
  1899  0028  0183               	clrf	3
  1900  0029  118A  282B         	ljmp	_main	;jump to C main() function
  1901                           
  1902                           	psect	bssEEDATA
  1903  0000                     __pbssEEDATA:	
  1904  0000                     _highscore:	
  1905  0000  0000               	db	0
  1906  0001                     _uniqueSeed:	
  1907  0001  0000               	db	0
  1908  0002  0000               	db	0
  1909                           
  1910                           	psect	bssCOMMON
  1911  007A                     __pbssCOMMON:	
  1912  007A                     InterruptHandler@timerInterruptCounter:	
  1913  007A                     	ds	1
  1914                           
  1915                           	psect	dataBANK0
  1916  0047                     __pdataBANK0:	
  1917  0047                     _randx:	
  1918  0047                     	ds	4
  1919                           
  1920                           	psect	bssBANK1
  1921  00E3                     __pbssBANK1:	
  1922  00E3                     _updateReady:	
  1923  00E3                     	ds	1
  1924                           
  1925                           	psect	dataBANK1
  1926  00E4                     __pdataBANK1:	
  1927  00E4                     _timerPrescaler:	
  1928  00E4                     	ds	1
  1929                           
  1930                           	psect	cstackBANK1
  1931  00A0                     __pcstackBANK1:	
  1932  00A0                     main@buttons:	
  1933                           
  1934                           ; 4 bytes @ 0x0
  1935  00A0                     	ds	4
  1936  00A4                     main@tetrisGame:	
  1937                           
  1938                           ; 63 bytes @ 0x4
  1939  00A4                     	ds	63
  1940                           
  1941                           	psect	cstackCOMMON
  1942  0070                     __pcstackCOMMON:	
  1943  0070                     ?_Buttons_SetupPortsAndInterrups:	
  1944  0070                     ?_LCD_SetupPorts:	
  1945                           ; 1 bytes @ 0x0
  1946                           
  1947  0070                     ?_LCD_Reset:	
  1948                           ; 1 bytes @ 0x0
  1949                           
  1950  0070                     ?_LCD_SegmentSelection:	
  1951                           ; 1 bytes @ 0x0
  1952                           
  1953  0070                     ?_LCD_Clear:	
  1954                           ; 1 bytes @ 0x0
  1955                           
  1956  0070                     ?_LCD_TurnOn:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0070                     ?_Buttons_Clear:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0070                     ?_Buttons_Update:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0070                     ?_Tetris_MovePlayerLeft:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0070                     ?_Tetris_MovePlayerRight:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0070                     ?_Tetris_RotatePlayer:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0070                     ?_Tetris_UpdateGame:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0070                     ?_DrawTetris:	
  1978                           ; 1 bytes @ 0x0
  1979                           
  1980  0070                     ?_Tetris_MovePlayerDown:	
  1981                           ; 1 bytes @ 0x0
  1982                           
  1983  0070                     ?_Tetris_ClearFilledRows:	
  1984                           ; 1 bytes @ 0x0
  1985                           
  1986  0070                     ?_LCD_ReadStatus:	
  1987                           ; 1 bytes @ 0x0
  1988                           
  1989  0070                     ?_LCD_SetX:	
  1990                           ; 1 bytes @ 0x0
  1991                           
  1992  0070                     ?_LCD_SetY:	
  1993                           ; 1 bytes @ 0x0
  1994                           
  1995  0070                     ?_LCD_SetZ:	
  1996                           ; 1 bytes @ 0x0
  1997                           
  1998  0070                     ?_SetupOscillator:	
  1999                           ; 1 bytes @ 0x0
  2000                           
  2001  0070                     ?_SetupTimer:	
  2002                           ; 1 bytes @ 0x0
  2003                           
  2004  0070                     ?_ResetTimer:	
  2005                           ; 1 bytes @ 0x0
  2006                           
  2007  0070                     ?_InterruptHandler:	
  2008                           ; 1 bytes @ 0x0
  2009                           
  2010  0070                     ??_InterruptHandler:	
  2011                           ; 1 bytes @ 0x0
  2012                           
  2013  0070                     ?_SetupRandomness:	
  2014                           ; 1 bytes @ 0x0
  2015                           
  2016  0070                     ?_main:	
  2017                           ; 1 bytes @ 0x0
  2018                           
  2019  0070                     ?_Tetris_PlayerTopmostY:	
  2020                           ; 1 bytes @ 0x0
  2021                           
  2022  0070                     ?_Tetris_PlayerOverlapsEnvironment:	
  2023                           ; 1 bytes @ 0x0
  2024                           
  2025  0070                     ?_Tetris_PlayerTouchingLeftBound:	
  2026                           ; 1 bytes @ 0x0
  2027                           
  2028  0070                     ?_Tetris_PlayerTouchingRightBound:	
  2029                           ; 1 bytes @ 0x0
  2030                           
  2031  0070                     ?_Tetris_RemovePlayerFromTable:	
  2032                           ; 1 bytes @ 0x0
  2033                           
  2034  0070                     ?_Tetris_ApplyPlayerToTable:	
  2035                           ; 1 bytes @ 0x0
  2036                           
  2037  0070                     ?_Tetris_UpdatePlayerUnitBits:	
  2038                           ; 1 bytes @ 0x0
  2039                           
  2040  0070                     ?_Tetris_PlayerUnitBitsAreValid:	
  2041                           ; 1 bytes @ 0x0
  2042                           
  2043  0070                     ?_Tetris_ScoreForRowsCleared:	
  2044                           ; 1 bytes @ 0x0
  2045                           
  2046  0070                     ?_Buttons_SetupPortB:	
  2047                           ; 1 bytes @ 0x0
  2048                           
  2049  0070                     ?_Buttons_SetupInterrupts:	
  2050                           ; 1 bytes @ 0x0
  2051                           
  2052  0070                     ?_LCD_IsBusy:	
  2053                           ; 1 bytes @ 0x0
  2054                           
  2055  0070                     ?_LCD_BlockWhileBusy:	
  2056                           ; 1 bytes @ 0x0
  2057                           
  2058  0070                     ?_LCD_WriteData:	
  2059                           ; 1 bytes @ 0x0
  2060                           
  2061                           
  2062                           ; 1 bytes @ 0x0
  2063  0070                     	ds	3
  2064  0073                     ??_Buttons_SetupPortsAndInterrups:	
  2065  0073                     ??_LCD_SetupPorts:	
  2066                           ; 1 bytes @ 0x3
  2067                           
  2068  0073                     ??_LCD_SegmentSelection:	
  2069                           ; 1 bytes @ 0x3
  2070                           
  2071  0073                     ?_memset:	
  2072                           ; 1 bytes @ 0x3
  2073                           
  2074  0073                     ??_LCD_ReadStatus:	
  2075                           ; 1 bytes @ 0x3
  2076                           
  2077  0073                     ??_SetupOscillator:	
  2078                           ; 1 bytes @ 0x3
  2079                           
  2080  0073                     ??_SetupTimer:	
  2081                           ; 1 bytes @ 0x3
  2082                           
  2083  0073                     ??_ResetTimer:	
  2084                           ; 1 bytes @ 0x3
  2085                           
  2086  0073                     ??_Tetris_PlayerTopmostY:	
  2087                           ; 1 bytes @ 0x3
  2088                           
  2089  0073                     ??_Tetris_PlayerTouchingLeftBound:	
  2090                           ; 1 bytes @ 0x3
  2091                           
  2092  0073                     ??_Tetris_PlayerTouchingRightBound:	
  2093                           ; 1 bytes @ 0x3
  2094                           
  2095  0073                     ?_Tetris_CountUnitBits:	
  2096                           ; 1 bytes @ 0x3
  2097                           
  2098  0073                     ?_Tetris_ShiftTableDown:	
  2099                           ; 1 bytes @ 0x3
  2100                           
  2101  0073                     ??_Tetris_ScoreForRowsCleared:	
  2102                           ; 1 bytes @ 0x3
  2103                           
  2104  0073                     ??_Buttons_SetupPortB:	
  2105                           ; 1 bytes @ 0x3
  2106                           
  2107  0073                     ??_Buttons_SetupInterrupts:	
  2108                           ; 1 bytes @ 0x3
  2109                           
  2110  0073                     ?_Buttons_UpdateButton:	
  2111                           ; 1 bytes @ 0x3
  2112                           
  2113  0073                     ?___eecpymem:	
  2114                           ; 1 bytes @ 0x3
  2115                           
  2116  0073                     ?___memcpyee:	
  2117                           ; 1 bytes @ 0x3
  2118                           
  2119  0073                     ??___lmul:	
  2120                           ; 1 bytes @ 0x3
  2121                           
  2122  0073                     ?___lbmod:	
  2123                           ; 1 bytes @ 0x3
  2124                           
  2125  0073                     Tetris_UpdatePlayerUnitBits@i_332:	
  2126                           ; 1 bytes @ 0x3
  2127                           
  2128  0073                     Tetris_ShiftTableDown@upto:	
  2129                           ; 1 bytes @ 0x3
  2130                           
  2131  0073                     Buttons_UpdateButton@nHeld:	
  2132                           ; 1 bytes @ 0x3
  2133                           
  2134  0073                     LCD_SegmentSelection@segments:	
  2135                           ; 1 bytes @ 0x3
  2136                           
  2137  0073                     ___eecpymem@from:	
  2138                           ; 1 bytes @ 0x3
  2139                           
  2140  0073                     ___memcpyee@from:	
  2141                           ; 1 bytes @ 0x3
  2142                           
  2143  0073                     ___lbmod@divisor:	
  2144                           ; 1 bytes @ 0x3
  2145                           
  2146  0073                     Tetris_CountUnitBits@unitBits:	
  2147                           ; 1 bytes @ 0x3
  2148                           
  2149  0073                     memset@c:	
  2150                           ; 2 bytes @ 0x3
  2151                           
  2152                           
  2153                           ; 2 bytes @ 0x3
  2154  0073                     	ds	1
  2155  0074                     ??_Tetris_ShiftTableDown:	
  2156  0074                     ??_Buttons_UpdateButton:	
  2157                           ; 1 bytes @ 0x4
  2158                           
  2159  0074                     ??___lbmod:	
  2160                           ; 1 bytes @ 0x4
  2161                           
  2162  0074                     Tetris_UpdatePlayerUnitBits@i_333:	
  2163                           ; 1 bytes @ 0x4
  2164                           
  2165  0074                     LCD_ReadStatus@status:	
  2166                           ; 1 bytes @ 0x4
  2167                           
  2168  0074                     ___eecpymem@size:	
  2169                           ; 1 bytes @ 0x4
  2170                           
  2171  0074                     ___memcpyee@size:	
  2172                           ; 1 bytes @ 0x4
  2173                           
  2174  0074                     ___lmul@product:	
  2175                           ; 1 bytes @ 0x4
  2176                           
  2177                           
  2178                           ; 4 bytes @ 0x4
  2179  0074                     	ds	1
  2180  0075                     ??_Tetris_CountUnitBits:	
  2181  0075                     ??_LCD_IsBusy:	
  2182                           ; 1 bytes @ 0x5
  2183                           
  2184  0075                     ??___eecpymem:	
  2185                           ; 1 bytes @ 0x5
  2186                           
  2187  0075                     ??___memcpyee:	
  2188                           ; 1 bytes @ 0x5
  2189                           
  2190  0075                     Tetris_PlayerTopmostY@player:	
  2191                           ; 1 bytes @ 0x5
  2192                           
  2193  0075                     Tetris_UpdatePlayerUnitBits@i:	
  2194                           ; 1 bytes @ 0x5
  2195                           
  2196  0075                     Tetris_ScoreForRowsCleared@rowsCleared:	
  2197                           ; 1 bytes @ 0x5
  2198                           
  2199  0075                     Buttons_UpdateButton@button:	
  2200                           ; 1 bytes @ 0x5
  2201                           
  2202  0075                     memset@n:	
  2203                           ; 1 bytes @ 0x5
  2204                           
  2205                           
  2206                           ; 2 bytes @ 0x5
  2207  0075                     	ds	1
  2208  0076                     ??_Buttons_Update:	
  2209  0076                     Tetris_PlayerOverlapsEnvironment@start:	
  2210                           ; 1 bytes @ 0x6
  2211                           
  2212  0076                     Tetris_RemovePlayerFromTable@start:	
  2213                           ; 1 bytes @ 0x6
  2214                           
  2215  0076                     Tetris_ApplyPlayerToTable@start:	
  2216                           ; 1 bytes @ 0x6
  2217                           
  2218  0076                     Tetris_UpdatePlayerUnitBits@shift:	
  2219                           ; 1 bytes @ 0x6
  2220                           
  2221  0076                     Buttons_Update@buttons:	
  2222                           ; 1 bytes @ 0x6
  2223                           
  2224  0076                     _LCD_IsBusy$584:	
  2225                           ; 1 bytes @ 0x6
  2226                           
  2227  0076                     ___eecpymem@cp:	
  2228                           ; 1 bytes @ 0x6
  2229                           
  2230  0076                     ___memcpyee@ptr:	
  2231                           ; 1 bytes @ 0x6
  2232                           
  2233                           
  2234                           ; 1 bytes @ 0x6
  2235  0076                     	ds	1
  2236  0077                     ??_memset:	
  2237  0077                     Tetris_PlayerOverlapsEnvironment@i:	
  2238                           ; 1 bytes @ 0x7
  2239                           
  2240  0077                     Tetris_PlayerTouchingLeftBound@player:	
  2241                           ; 1 bytes @ 0x7
  2242                           
  2243  0077                     Tetris_PlayerTouchingRightBound@player:	
  2244                           ; 1 bytes @ 0x7
  2245                           
  2246  0077                     Tetris_RemovePlayerFromTable@game:	
  2247                           ; 1 bytes @ 0x7
  2248                           
  2249  0077                     Tetris_ApplyPlayerToTable@i:	
  2250                           ; 1 bytes @ 0x7
  2251                           
  2252  0077                     Tetris_UpdatePlayerUnitBits@player:	
  2253                           ; 1 bytes @ 0x7
  2254                           
  2255  0077                     LCD_IsBusy@status:	
  2256                           ; 1 bytes @ 0x7
  2257                           
  2258  0077                     ___eecpymem@to:	
  2259                           ; 1 bytes @ 0x7
  2260                           
  2261  0077                     ___memcpyee@to:	
  2262                           ; 1 bytes @ 0x7
  2263                           
  2264  0077                     ___lbmod@dividend:	
  2265                           ; 1 bytes @ 0x7
  2266                           
  2267                           
  2268                           ; 1 bytes @ 0x7
  2269  0077                     	ds	1
  2270  0078                     ?_Tetris_SetPlayerUnit:	
  2271  0078                     ??_LCD_BlockWhileBusy:	
  2272                           ; 1 bytes @ 0x8
  2273                           
  2274  0078                     ?_LCD_Write:	
  2275                           ; 1 bytes @ 0x8
  2276                           
  2277  0078                     ??___awmod:	
  2278                           ; 1 bytes @ 0x8
  2279                           
  2280  0078                     ?___eetoi:	
  2281                           ; 1 bytes @ 0x8
  2282                           
  2283  0078                     Tetris_PlayerOverlapsEnvironment@game:	
  2284                           ; 2 bytes @ 0x8
  2285                           
  2286  0078                     Tetris_PlayerTouchingLeftBound@i:	
  2287                           ; 1 bytes @ 0x8
  2288                           
  2289  0078                     Tetris_PlayerTouchingRightBound@i:	
  2290                           ; 1 bytes @ 0x8
  2291                           
  2292  0078                     Tetris_RemovePlayerFromTable@i:	
  2293                           ; 1 bytes @ 0x8
  2294                           
  2295  0078                     Tetris_ApplyPlayerToTable@i_312:	
  2296                           ; 1 bytes @ 0x8
  2297                           
  2298  0078                     LCD_Write@data:	
  2299                           ; 1 bytes @ 0x8
  2300                           
  2301  0078                     ___lbmod@counter:	
  2302                           ; 1 bytes @ 0x8
  2303                           
  2304  0078                     memset@p:	
  2305                           ; 1 bytes @ 0x8
  2306                           
  2307  0078                     Tetris_SetPlayerUnit@unit:	
  2308                           ; 1 bytes @ 0x8
  2309                           
  2310                           
  2311                           ; 2 bytes @ 0x8
  2312  0078                     	ds	1
  2313  0079                     ??_LCD_Write:	
  2314  0079                     ??___wmul:	
  2315                           ; 1 bytes @ 0x9
  2316                           
  2317  0079                     Tetris_ApplyPlayerToTable@game:	
  2318                           ; 1 bytes @ 0x9
  2319                           
  2320  0079                     LCD_Write@mode:	
  2321                           ; 1 bytes @ 0x9
  2322                           
  2323  0079                     ___lbmod@rem:	
  2324                           ; 1 bytes @ 0x9
  2325                           
  2326  0079                     memset@p1:	
  2327                           ; 1 bytes @ 0x9
  2328                           
  2329                           
  2330                           ; 1 bytes @ 0x9
  2331  0079                     	ds	1
  2332  007A                     ??_srand:	
  2333  007A                     ??_LCD_Reset:	
  2334                           ; 1 bytes @ 0xA
  2335                           
  2336  007A                     ??_Tetris_ResetGame:	
  2337                           ; 1 bytes @ 0xA
  2338                           
  2339  007A                     ??_Buttons_Clear:	
  2340                           ; 1 bytes @ 0xA
  2341                           
  2342  007A                     ??_SetupRandomness:	
  2343                           ; 1 bytes @ 0xA
  2344                           
  2345  007A                     ??_Tetris_SetPlayerUnit:	
  2346                           ; 1 bytes @ 0xA
  2347                           
  2348                           
  2349                           	psect	cstackBANK0
  2350  0020                     __pcstackBANK0:	
  2351                           ; 1 bytes @ 0xA
  2352                           
  2353  0020                     ??_LCD_TurnOn:	
  2354  0020                     ??_LCD_SetX:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0020                     ??_LCD_SetY:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0020                     ??_LCD_SetZ:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363  0020                     ??_Tetris_PlayerOverlapsEnvironment:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366  0020                     ??_Tetris_RemovePlayerFromTable:	
  2367                           ; 1 bytes @ 0x0
  2368                           
  2369  0020                     ??_Tetris_ApplyPlayerToTable:	
  2370                           ; 1 bytes @ 0x0
  2371                           
  2372  0020                     ??_Tetris_UpdatePlayerUnitBits:	
  2373                           ; 1 bytes @ 0x0
  2374                           
  2375  0020                     ??_LCD_WriteData:	
  2376                           ; 1 bytes @ 0x0
  2377                           
  2378  0020                     ??___eetoi:	
  2379                           ; 1 bytes @ 0x0
  2380                           
  2381  0020                     ?___lmul:	
  2382                           ; 1 bytes @ 0x0
  2383                           
  2384  0020                     Tetris_ShiftTableDown@gameTable:	
  2385                           ; 4 bytes @ 0x0
  2386                           
  2387  0020                     Buttons_Clear@buttons:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0020                     Tetris_CountUnitBits@mask:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  0020                     ___lmul@multiplier:	
  2394                           ; 2 bytes @ 0x0
  2395                           
  2396                           
  2397                           ; 4 bytes @ 0x0
  2398  0020                     	ds	1
  2399  0021                     Tetris_ShiftTableDown@i:	
  2400  0021                     LCD_WriteData@data:	
  2401                           ; 1 bytes @ 0x1
  2402                           
  2403  0021                     LCD_SetY@y:	
  2404                           ; 1 bytes @ 0x1
  2405                           
  2406  0021                     LCD_SetX@x:	
  2407                           ; 1 bytes @ 0x1
  2408                           
  2409  0021                     LCD_SetZ@z:	
  2410                           ; 1 bytes @ 0x1
  2411                           
  2412                           
  2413                           ; 1 bytes @ 0x1
  2414  0021                     	ds	1
  2415  0022                     ??_LCD_Clear:	
  2416  0022                     ??_Tetris_ClearFilledRows:	
  2417                           ; 1 bytes @ 0x2
  2418                           
  2419  0022                     ?_DrawTetrisGameColumn:	
  2420                           ; 1 bytes @ 0x2
  2421                           
  2422  0022                     Tetris_CountUnitBits@result:	
  2423                           ; 1 bytes @ 0x2
  2424                           
  2425  0022                     DrawTetrisGameColumn@x:	
  2426                           ; 1 bytes @ 0x2
  2427                           
  2428  0022                     ___eetoi@addr:	
  2429                           ; 1 bytes @ 0x2
  2430                           
  2431                           
  2432                           ; 1 bytes @ 0x2
  2433  0022                     	ds	1
  2434  0023                     Tetris_CountUnitBits@j:	
  2435  0023                     LCD_Clear@y:	
  2436                           ; 1 bytes @ 0x3
  2437                           
  2438  0023                     DrawTetrisGameColumn@rightMask:	
  2439                           ; 1 bytes @ 0x3
  2440                           
  2441  0023                     ___eetoi@data:	
  2442                           ; 2 bytes @ 0x3
  2443                           
  2444                           
  2445                           ; 2 bytes @ 0x3
  2446  0023                     	ds	1
  2447  0024                     Tetris_CountUnitBits@i:	
  2448  0024                     LCD_Clear@x:	
  2449                           ; 1 bytes @ 0x4
  2450                           
  2451  0024                     ___lmul@multiplicand:	
  2452                           ; 1 bytes @ 0x4
  2453                           
  2454                           
  2455                           ; 4 bytes @ 0x4
  2456  0024                     	ds	1
  2457  0025                     ?_srand:	
  2458  0025                     ??_Tetris_PlayerUnitBitsAreValid:	
  2459                           ; 1 bytes @ 0x5
  2460                           
  2461  0025                     ?___itoee:	
  2462                           ; 1 bytes @ 0x5
  2463                           
  2464  0025                     DrawTetrisGameColumn@leftMask:	
  2465                           ; 2 bytes @ 0x5
  2466                           
  2467  0025                     ___itoee@data:	
  2468                           ; 2 bytes @ 0x5
  2469                           
  2470  0025                     srand@x:	
  2471                           ; 2 bytes @ 0x5
  2472                           
  2473                           
  2474                           ; 2 bytes @ 0x5
  2475  0025                     	ds	1
  2476  0026                     Tetris_ClearFilledRows@rowsCleared:	
  2477                           
  2478                           ; 1 bytes @ 0x6
  2479  0026                     	ds	1
  2480  0027                     ??_DrawTetrisGameColumn:	
  2481  0027                     ??___itoee:	
  2482                           ; 1 bytes @ 0x7
  2483                           
  2484  0027                     Tetris_ClearFilledRows@gameTable:	
  2485                           ; 1 bytes @ 0x7
  2486                           
  2487                           
  2488                           ; 1 bytes @ 0x7
  2489  0027                     	ds	1
  2490  0028                     ?_rand:	
  2491  0028                     Tetris_ClearFilledRows@i:	
  2492                           ; 2 bytes @ 0x8
  2493                           
  2494                           
  2495                           ; 1 bytes @ 0x8
  2496  0028                     	ds	1
  2497  0029                     Tetris_PlayerUnitBitsAreValid@player:	
  2498  0029                     DrawTetrisGameColumn@tetrisGame:	
  2499                           ; 1 bytes @ 0x9
  2500                           
  2501  0029                     ___itoee@addr:	
  2502                           ; 1 bytes @ 0x9
  2503                           
  2504                           
  2505                           ; 1 bytes @ 0x9
  2506  0029                     	ds	1
  2507  002A                     ??_rand:	
  2508  002A                     Tetris_SetPlayerUnit@player:	
  2509                           ; 1 bytes @ 0xA
  2510                           
  2511  002A                     DrawTetrisGameColumn@tableY:	
  2512                           ; 1 bytes @ 0xA
  2513                           
  2514                           
  2515                           ; 1 bytes @ 0xA
  2516  002A                     	ds	1
  2517  002B                     DrawTetrisGameColumn@gameRow:	
  2518                           
  2519                           ; 2 bytes @ 0xB
  2520  002B                     	ds	1
  2521  002C                     ??_Tetris_MovePlayerLeft:	
  2522  002C                     ??_Tetris_MovePlayerRight:	
  2523                           ; 1 bytes @ 0xC
  2524                           
  2525  002C                     ??_Tetris_RotatePlayer:	
  2526                           ; 1 bytes @ 0xC
  2527                           
  2528  002C                     ??_Tetris_MovePlayerDown:	
  2529                           ; 1 bytes @ 0xC
  2530                           
  2531  002C                     ?_Tetris_GetRandomUnit:	
  2532                           ; 1 bytes @ 0xC
  2533                           
  2534                           
  2535                           ; 2 bytes @ 0xC
  2536  002C                     	ds	1
  2537  002D                     Tetris_MovePlayerDown@game:	
  2538  002D                     DrawTetrisGameColumn@i:	
  2539                           ; 1 bytes @ 0xD
  2540                           
  2541                           
  2542                           ; 1 bytes @ 0xD
  2543  002D                     	ds	1
  2544  002E                     Tetris_MovePlayerLeft@i:	
  2545  002E                     Tetris_MovePlayerRight@i:	
  2546                           ; 1 bytes @ 0xE
  2547                           
  2548  002E                     DrawTetrisGameColumn@y:	
  2549                           ; 1 bytes @ 0xE
  2550                           
  2551                           
  2552                           ; 1 bytes @ 0xE
  2553  002E                     	ds	1
  2554  002F                     ?___awmod:	
  2555  002F                     Tetris_MovePlayerLeft@i_447:	
  2556                           ; 2 bytes @ 0xF
  2557                           
  2558  002F                     Tetris_MovePlayerRight@i_461:	
  2559                           ; 1 bytes @ 0xF
  2560                           
  2561  002F                     DrawTetrisGameColumn@lcdRow:	
  2562                           ; 1 bytes @ 0xF
  2563                           
  2564  002F                     ___awmod@divisor:	
  2565                           ; 1 bytes @ 0xF
  2566                           
  2567                           
  2568                           ; 2 bytes @ 0xF
  2569  002F                     	ds	1
  2570  0030                     ??_DrawTetris:	
  2571  0030                     Tetris_MovePlayerLeft@game:	
  2572                           ; 1 bytes @ 0x10
  2573                           
  2574  0030                     Tetris_MovePlayerRight@game:	
  2575                           ; 1 bytes @ 0x10
  2576                           
  2577                           
  2578                           ; 1 bytes @ 0x10
  2579  0030                     	ds	1
  2580  0031                     DrawTetris@tetrisGame:	
  2581  0031                     ___awmod@dividend:	
  2582                           ; 1 bytes @ 0x11
  2583                           
  2584                           
  2585                           ; 2 bytes @ 0x11
  2586  0031                     	ds	1
  2587  0032                     Tetris_RotatePlayer@oldRotation:	
  2588  0032                     DrawTetris@leftMask:	
  2589                           ; 1 bytes @ 0x12
  2590                           
  2591                           
  2592                           ; 2 bytes @ 0x12
  2593  0032                     	ds	1
  2594  0033                     Tetris_RotatePlayer@game:	
  2595  0033                     ___awmod@counter:	
  2596                           ; 1 bytes @ 0x13
  2597                           
  2598                           
  2599                           ; 1 bytes @ 0x13
  2600  0033                     	ds	1
  2601  0034                     ___awmod@sign:	
  2602  0034                     DrawTetris@rightMask:	
  2603                           ; 1 bytes @ 0x14
  2604                           
  2605                           
  2606                           ; 2 bytes @ 0x14
  2607  0034                     	ds	1
  2608  0035                     ?___wmul:	
  2609  0035                     ___wmul@multiplier:	
  2610                           ; 2 bytes @ 0x15
  2611                           
  2612                           
  2613                           ; 2 bytes @ 0x15
  2614  0035                     	ds	1
  2615  0036                     DrawTetris@x:	
  2616                           
  2617                           ; 1 bytes @ 0x16
  2618  0036                     	ds	1
  2619  0037                     ___wmul@multiplicand:	
  2620                           
  2621                           ; 2 bytes @ 0x17
  2622  0037                     	ds	2
  2623  0039                     ___wmul@product:	
  2624                           
  2625                           ; 2 bytes @ 0x19
  2626  0039                     	ds	2
  2627  003B                     ??_Tetris_GetRandomUnit:	
  2628                           
  2629                           ; 1 bytes @ 0x1B
  2630  003B                     	ds	2
  2631  003D                     ?_Tetris_ResetPlayer:	
  2632  003D                     Tetris_ResetPlayer@playerUnit:	
  2633                           ; 1 bytes @ 0x1D
  2634                           
  2635                           
  2636                           ; 2 bytes @ 0x1D
  2637  003D                     	ds	2
  2638  003F                     ??_Tetris_ResetPlayer:	
  2639                           
  2640                           ; 1 bytes @ 0x1F
  2641  003F                     	ds	2
  2642  0041                     Tetris_ResetPlayer@player:	
  2643                           
  2644                           ; 1 bytes @ 0x21
  2645  0041                     	ds	1
  2646  0042                     ?_Tetris_ResetGame:	
  2647  0042                     ??_Tetris_UpdateGame:	
  2648                           ; 1 bytes @ 0x22
  2649                           
  2650  0042                     Tetris_ResetGame@playerUnit:	
  2651                           ; 1 bytes @ 0x22
  2652                           
  2653                           
  2654                           ; 2 bytes @ 0x22
  2655  0042                     	ds	2
  2656  0044                     Tetris_ResetGame@game:	
  2657  0044                     Tetris_UpdateGame@rowsCleared:	
  2658                           ; 1 bytes @ 0x24
  2659                           
  2660                           
  2661                           ; 1 bytes @ 0x24
  2662  0044                     	ds	1
  2663  0045                     Tetris_UpdateGame@game:	
  2664                           
  2665                           ; 1 bytes @ 0x25
  2666  0045                     	ds	1
  2667  0046                     ??_main:	
  2668                           
  2669                           ; 1 bytes @ 0x26
  2670  0046                     	ds	1
  2671                           
  2672                           	psect	maintext
  2673  002B                     __pmaintext:	
  2674 ;;
  2675 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2676 ;;
  2677 ;; *************** function _main *****************
  2678 ;; Defined at:
  2679 ;;		line 99 in file "main.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;		None
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  tetrisGame     63    4[BANK1 ] struct .
  2684 ;;  buttons         4    0[BANK1 ] struct .
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : B00/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2694 ;;      Params:         0       0       0       0
  2695 ;;      Locals:         0       0      67       0
  2696 ;;      Temps:          0       1       0       0
  2697 ;;      Totals:         0       1      67       0
  2698 ;;Total ram usage:       68 bytes
  2699 ;; Hardware stack levels required when called:    8
  2700 ;; This function calls:
  2701 ;;		_Buttons_Clear
  2702 ;;		_Buttons_SetupPortsAndInterrups
  2703 ;;		_Buttons_Update
  2704 ;;		_DrawTetris
  2705 ;;		_LCD_Clear
  2706 ;;		_LCD_Reset
  2707 ;;		_LCD_SegmentSelection
  2708 ;;		_LCD_SetupPorts
  2709 ;;		_LCD_TurnOn
  2710 ;;		_ResetTimer
  2711 ;;		_SetupOscillator
  2712 ;;		_SetupRandomness
  2713 ;;		_SetupTimer
  2714 ;;		_Tetris_GetRandomUnit
  2715 ;;		_Tetris_MovePlayerLeft
  2716 ;;		_Tetris_MovePlayerRight
  2717 ;;		_Tetris_ResetGame
  2718 ;;		_Tetris_RotatePlayer
  2719 ;;		_Tetris_UpdateGame
  2720 ;; This function is called by:
  2721 ;;		Startup code after reset
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           
  2726                           ;psect for function _main
  2727  002B                     _main:	
  2728                           
  2729                           ;main.c: 103:     SetupOscillator();
  2730                           
  2731                           ;incstack = 0
  2732                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2733  002B  118A  20FA  118A   	fcall	_SetupOscillator
  2734                           
  2735                           ;main.c: 104:     SetupRandomness();
  2736  002E  158A  22A9  118A   	fcall	_SetupRandomness
  2737                           
  2738                           ;main.c: 106:     Buttons_SetupPortsAndInterrups();
  2739  0031  158A  213F  118A   	fcall	_Buttons_SetupPortsAndInterrups
  2740                           
  2741                           ;main.c: 108:     LCD_SetupPorts();
  2742  0034  158A  2329  118A   	fcall	_LCD_SetupPorts
  2743                           
  2744                           ;main.c: 109:     LCD_Reset();
  2745  0037  158A  221F  118A   	fcall	_LCD_Reset
  2746                           
  2747                           ;main.c: 110:     LCD_SegmentSelection(LCD_BOTH_SEGMENTS);
  2748  003A  3003               	movlw	3
  2749  003B  158A  21C8  118A   	fcall	_LCD_SegmentSelection
  2750                           
  2751                           ;main.c: 111:     LCD_Clear();
  2752  003E  158A  23D8  118A   	fcall	_LCD_Clear
  2753                           
  2754                           ;main.c: 112:     LCD_TurnOn();
  2755  0041  158A  214C  118A   	fcall	_LCD_TurnOn
  2756                           
  2757                           ;main.c: 114:     Buttons buttons;;main.c: 115:     Tetris_Game tetrisGame;;main.c: 117:
      +                               SetupTimer();
  2758  0044  158A  2161  118A   	fcall	_SetupTimer
  2759  0047                     l3234:	
  2760                           
  2761                           ;main.c: 120:     {;main.c: 121:         Tetris_ResetGame(&tetrisGame, Tetris_GetRandomU
      +                          nit());
  2762  0047  158A  23FD  118A   	fcall	_Tetris_GetRandomUnit
  2763  004A  1283               	bcf	3,5	;RP0=0, select bank0
  2764  004B  1303               	bcf	3,6	;RP1=0, select bank0
  2765  004C  082C               	movf	?_Tetris_GetRandomUnit,w
  2766  004D  00C2               	movwf	Tetris_ResetGame@playerUnit
  2767  004E  082D               	movf	?_Tetris_GetRandomUnit+1,w
  2768  004F  00C3               	movwf	Tetris_ResetGame@playerUnit+1
  2769  0050  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2770  0051  158A  22C8  118A   	fcall	_Tetris_ResetGame
  2771                           
  2772                           ;main.c: 122:         Buttons_Clear(&buttons);
  2773  0054  30A0               	movlw	(low (main@buttons| 0))& (0+255)
  2774  0055  158A  219D  118A   	fcall	_Buttons_Clear
  2775                           
  2776                           ;main.c: 123:         ResetTimer();
  2777  0058  158A  2134  118A   	fcall	_ResetTimer
  2778  005B                     l3240:	
  2779                           
  2780                           ;main.c: 126:         {;main.c: 127:             Buttons_Update(&buttons);
  2781  005B  30A0               	movlw	(low (main@buttons| 0))& (0+255)
  2782  005C  158A  2428  118A   	fcall	_Buttons_Update
  2783                           
  2784                           ;main.c: 129:             if (buttons.left.pressed)
  2785  005F  1683               	bsf	3,5	;RP0=1, select bank1
  2786  0060  1303               	bcf	3,6	;RP1=0, select bank1
  2787  0061  1C20               	btfss	main@buttons^(0+128),0
  2788  0062  2867               	goto	l3246
  2789                           
  2790                           ;main.c: 130:                 Tetris_MovePlayerLeft(&tetrisGame);
  2791  0063  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2792  0064  158A  27A9  118A   	fcall	_Tetris_MovePlayerLeft
  2793  0067                     l3246:	
  2794                           
  2795                           ;main.c: 131:             if (buttons.right.pressed)
  2796  0067  1683               	bsf	3,5	;RP0=1, select bank1
  2797  0068  1303               	bcf	3,6	;RP1=0, select bank1
  2798  0069  1C21               	btfss	(main@buttons^(0+128)+1),0
  2799  006A  286F               	goto	l3250
  2800                           
  2801                           ;main.c: 132:                 Tetris_MovePlayerRight(&tetrisGame);
  2802  006B  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2803  006C  118A  279E  118A   	fcall	_Tetris_MovePlayerRight
  2804  006F                     l3250:	
  2805                           
  2806                           ;main.c: 133:             if (buttons.rotate.pressed)
  2807  006F  1683               	bsf	3,5	;RP0=1, select bank1
  2808  0070  1303               	bcf	3,6	;RP1=0, select bank1
  2809  0071  1C23               	btfss	(main@buttons^(0+128)+3),0
  2810  0072  2877               	goto	l3254
  2811                           
  2812                           ;main.c: 134:                 Tetris_RotatePlayer(&tetrisGame);
  2813  0073  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2814  0074  118A  272E  118A   	fcall	_Tetris_RotatePlayer
  2815  0077                     l3254:	
  2816                           
  2817                           ;main.c: 136:             if (buttons.down.held)
  2818  0077  1683               	bsf	3,5	;RP0=1, select bank1
  2819  0078  1303               	bcf	3,6	;RP1=0, select bank1
  2820  0079  1CA2               	btfss	(main@buttons^(0+128)+2),1
  2821  007A  287E               	goto	l3258
  2822                           
  2823                           ;main.c: 137:                 timerPrescaler = FAST_TIMER_PRESCALER;
  2824  007B  01E4               	clrf	_timerPrescaler^(0+128)
  2825  007C  0AE4               	incf	_timerPrescaler^(0+128),f
  2826  007D  2886               	goto	l3260
  2827  007E                     l3258:	
  2828                           
  2829                           ;main.c: 139:                 timerPrescaler = DEFAULT_TIMER_PRESCALER;
  2830  007E  3010               	movlw	16
  2831  007F  1283               	bcf	3,5	;RP0=0, select bank0
  2832  0080  1303               	bcf	3,6	;RP1=0, select bank0
  2833  0081  00C6               	movwf	??_main
  2834  0082  0846               	movf	??_main,w
  2835  0083  1683               	bsf	3,5	;RP0=1, select bank1
  2836  0084  1303               	bcf	3,6	;RP1=0, select bank1
  2837  0085  00E4               	movwf	_timerPrescaler^(0+128)
  2838  0086                     l3260:	
  2839                           
  2840                           ;main.c: 141:             if (updateReady)
  2841  0086  0863               	movf	_updateReady^(0+128),w
  2842  0087  1903               	btfsc	3,2
  2843  0088  2891               	goto	l3268
  2844                           
  2845                           ;main.c: 142:             {;main.c: 143:                 updateReady = 0;
  2846  0089  01E3               	clrf	_updateReady^(0+128)
  2847                           
  2848                           ;main.c: 144:                 if (Tetris_UpdateGame(&tetrisGame) == TETRIS_GAME_OVER)
  2849  008A  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2850  008B  158A  2710  118A   	fcall	_Tetris_UpdateGame
  2851  008E  3A00               	xorlw	0
  2852  008F  1903               	btfsc	3,2
  2853  0090  2847               	goto	l3234
  2854  0091                     l3268:	
  2855                           
  2856                           ;main.c: 148:             DrawTetris(&tetrisGame);
  2857  0091  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2858  0092  158A  24E2  118A   	fcall	_DrawTetris
  2859  0095  285B               	goto	l3240
  2860  0096                     __end_of_main:	
  2861                           
  2862                           	psect	text1
  2863  0F10                     __ptext1:	
  2864 ;; *************** function _Tetris_UpdateGame *****************
  2865 ;; Defined at:
  2866 ;;		line 350 in file "../Tetris/Tetris.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  game            1    wreg     PTR struct .
  2869 ;;		 -> main@tetrisGame(63), 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;  game            1   37[BANK0 ] PTR struct .
  2872 ;;		 -> main@tetrisGame(63), 
  2873 ;;  rowsCleared     1   36[BANK0 ] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      enum E60
  2876 ;; Registers used:
  2877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2883 ;;      Params:         0       0       0       0
  2884 ;;      Locals:         0       2       0       0
  2885 ;;      Temps:          0       2       0       0
  2886 ;;      Totals:         0       4       0       0
  2887 ;;Total ram usage:        4 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; Hardware stack levels required when called:    5
  2890 ;; This function calls:
  2891 ;;		_Tetris_ApplyPlayerToTable
  2892 ;;		_Tetris_ClearFilledRows
  2893 ;;		_Tetris_GetRandomUnit
  2894 ;;		_Tetris_MovePlayerDown
  2895 ;;		_Tetris_PlayerOverlapsEnvironment
  2896 ;;		_Tetris_ResetPlayer
  2897 ;;		_Tetris_ScoreForRowsCleared
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _Tetris_UpdateGame
  2905  0F10                     _Tetris_UpdateGame:	
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _Tetris_UpdateGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2909                           ;Tetris_UpdateGame@game stored from wreg
  2910  0F10  1283               	bcf	3,5	;RP0=0, select bank0
  2911  0F11  1303               	bcf	3,6	;RP1=0, select bank0
  2912  0F12  00C5               	movwf	Tetris_UpdateGame@game
  2913                           
  2914                           ;../Tetris/Tetris.c: 350: Tetris_GameState Tetris_UpdateGame(Tetris_Game *game);../Tetri
      +                          s/Tetris.c: 351: {;../Tetris/Tetris.c: 352:  if (!Tetris_MovePlayerDown(game))
  2915  0F13  0845               	movf	Tetris_UpdateGame@game,w
  2916  0F14  158A  2481  158A   	fcall	_Tetris_MovePlayerDown
  2917  0F17  3A00               	xorlw	0
  2918  0F18  1D03               	skipz
  2919  0F19  2F5A               	goto	l3194
  2920                           
  2921                           ;../Tetris/Tetris.c: 353:  {;../Tetris/Tetris.c: 354:   uint8_t rowsCleared = Tetris_Cle
      +                          arFilledRows(game->table);
  2922  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  2923  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  2924  0F1C  0845               	movf	Tetris_UpdateGame@game,w
  2925  0F1D  158A  24B1  158A   	fcall	_Tetris_ClearFilledRows
  2926  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  2927  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  2928  0F22  00C2               	movwf	??_Tetris_UpdateGame
  2929  0F23  0842               	movf	??_Tetris_UpdateGame,w
  2930  0F24  00C4               	movwf	Tetris_UpdateGame@rowsCleared
  2931                           
  2932                           ;../Tetris/Tetris.c: 355:   game->currentScore += Tetris_ScoreForRowsCleared(rowsCleared
      +                          );
  2933  0F25  0844               	movf	Tetris_UpdateGame@rowsCleared,w
  2934  0F26  158A  23B5  158A   	fcall	_Tetris_ScoreForRowsCleared
  2935  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  2937  0F2B  00C2               	movwf	??_Tetris_UpdateGame
  2938  0F2C  01C3               	clrf	??_Tetris_UpdateGame+1
  2939  0F2D  0845               	movf	Tetris_UpdateGame@game,w
  2940  0F2E  3E3D               	addlw	61
  2941  0F2F  0084               	movwf	4
  2942  0F30  0842               	movf	??_Tetris_UpdateGame,w
  2943  0F31  1383               	bcf	3,7	;select IRP bank0
  2944  0F32  0780               	addwf	0,f
  2945  0F33  0F84               	incfsz	4,f
  2946  0F34  0800               	movf	0,w
  2947  0F35  1803               	skipnc
  2948  0F36  0A00               	incf	0,w
  2949  0F37  00FF               	movwf	127
  2950  0F38  0843               	movf	??_Tetris_UpdateGame+1,w
  2951  0F39  077F               	addwf	127,w
  2952  0F3A  0080               	movwf	0
  2953  0F3B  0384               	decf	4,f
  2954                           
  2955                           ;../Tetris/Tetris.c: 357:   Tetris_ResetPlayer(&game->player, Tetris_GetRandomUnit());
  2956  0F3C  158A  23FD  158A   	fcall	_Tetris_GetRandomUnit
  2957  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  2959  0F41  082C               	movf	?_Tetris_GetRandomUnit,w
  2960  0F42  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  2961  0F43  082D               	movf	?_Tetris_GetRandomUnit+1,w
  2962  0F44  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  2963  0F45  0845               	movf	Tetris_UpdateGame@game,w
  2964  0F46  3E30               	addlw	48
  2965  0F47  158A  234C  158A   	fcall	_Tetris_ResetPlayer
  2966                           
  2967                           ;../Tetris/Tetris.c: 358:   if (Tetris_PlayerOverlapsEnvironment(game))
  2968  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0F4B  1303               	bcf	3,6	;RP1=0, select bank0
  2970  0F4C  0845               	movf	Tetris_UpdateGame@game,w
  2971  0F4D  158A  25C5  158A   	fcall	_Tetris_PlayerOverlapsEnvironment
  2972  0F50  3A00               	xorlw	0
  2973  0F51  1903               	skipnz
  2974  0F52  2F55               	goto	l3192
  2975                           
  2976                           ;../Tetris/Tetris.c: 359:    return TETRIS_GAME_OVER;
  2977  0F53  3000               	movlw	0
  2978  0F54  0008               	return
  2979  0F55                     l3192:	
  2980                           
  2981                           ;../Tetris/Tetris.c: 360:   Tetris_ApplyPlayerToTable(game);
  2982  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0F56  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0F57  0845               	movf	Tetris_UpdateGame@game,w
  2985  0F58  118A  2096         	fcall	_Tetris_ApplyPlayerToTable
  2986  0F5A                     l3194:	
  2987                           
  2988                           ;../Tetris/Tetris.c: 363:  return TETRIS_GAME_CONTINUES;
  2989  0F5A  3001               	movlw	1
  2990  0F5B  0008               	return
  2991  0F5C                     __end_of_Tetris_UpdateGame:	
  2992                           
  2993                           	psect	text2
  2994  0BB5                     __ptext2:	
  2995 ;; *************** function _Tetris_ScoreForRowsCleared *****************
  2996 ;; Defined at:
  2997 ;;		line 315 in file "../Tetris/Tetris.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  rowsCleared     1    wreg     unsigned char 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  rowsCleared     1    5[COMMON] unsigned char 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      unsigned char 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3011 ;;      Params:         0       0       0       0
  3012 ;;      Locals:         1       0       0       0
  3013 ;;      Temps:          2       0       0       0
  3014 ;;      Totals:         3       0       0       0
  3015 ;;Total ram usage:        3 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    1
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_Tetris_UpdateGame
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           
  3026                           ;psect for function _Tetris_ScoreForRowsCleared
  3027  0BB5                     _Tetris_ScoreForRowsCleared:	
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in _Tetris_ScoreForRowsCleared: [wreg-fsr0h+status,2+status,0]
  3031                           ;Tetris_ScoreForRowsCleared@rowsCleared stored from wreg
  3032  0BB5  00F5               	movwf	Tetris_ScoreForRowsCleared@rowsCleared
  3033                           
  3034                           ;../Tetris/Tetris.c: 315: static uint8_t Tetris_ScoreForRowsCleared(uint8_t rowsCleared)
      +                          ;../Tetris/Tetris.c: 316: {;../Tetris/Tetris.c: 317:  switch (rowsCleared)
  3035  0BB6  2BC1               	goto	l2390
  3036  0BB7                     l2368:	
  3037  0BB7  3000               	movlw	0
  3038  0BB8  0008               	return
  3039  0BB9                     l2372:	
  3040  0BB9  3001               	movlw	1
  3041  0BBA  0008               	return
  3042  0BBB                     l2376:	
  3043  0BBB  3003               	movlw	3
  3044  0BBC  0008               	return
  3045  0BBD                     l2380:	
  3046  0BBD  3005               	movlw	5
  3047  0BBE  0008               	return
  3048  0BBF                     l2384:	
  3049  0BBF  3007               	movlw	7
  3050  0BC0  0008               	return
  3051  0BC1                     l2390:	
  3052  0BC1  0875               	movf	Tetris_ScoreForRowsCleared@rowsCleared,w
  3053  0BC2  00F3               	movwf	??_Tetris_ScoreForRowsCleared
  3054  0BC3  01F4               	clrf	??_Tetris_ScoreForRowsCleared+1
  3055                           
  3056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3057                           ; Switch size 1, requested type "simple"
  3058                           ; Number of cases is 1, Range of values is 0 to 0
  3059                           ; switch strategies available:
  3060                           ; Name         Instructions Cycles
  3061                           ; simple_byte            4     3 (average)
  3062                           ; direct_byte            9     7 (fixed)
  3063                           ; jumptable            260     6 (fixed)
  3064                           ;	Chosen strategy is simple_byte
  3065  0BC4  0874               	movf	??_Tetris_ScoreForRowsCleared+1,w
  3066  0BC5  3A00               	xorlw	0	; case 0
  3067  0BC6  1903               	skipnz
  3068  0BC7  2BC9               	goto	l3328
  3069  0BC8  2BBF               	goto	l2384
  3070  0BC9                     l3328:	
  3071                           
  3072                           ; Switch size 1, requested type "simple"
  3073                           ; Number of cases is 4, Range of values is 0 to 3
  3074                           ; switch strategies available:
  3075                           ; Name         Instructions Cycles
  3076                           ; simple_byte           13     7 (average)
  3077                           ; direct_byte           15     7 (fixed)
  3078                           ; jumptable            260     6 (fixed)
  3079                           ;	Chosen strategy is simple_byte
  3080  0BC9  0873               	movf	??_Tetris_ScoreForRowsCleared,w
  3081  0BCA  3A00               	xorlw	0	; case 0
  3082  0BCB  1903               	skipnz
  3083  0BCC  2BB7               	goto	l2368
  3084  0BCD  3A01               	xorlw	1	; case 1
  3085  0BCE  1903               	skipnz
  3086  0BCF  2BB9               	goto	l2372
  3087  0BD0  3A03               	xorlw	3	; case 2
  3088  0BD1  1903               	skipnz
  3089  0BD2  2BBB               	goto	l2376
  3090  0BD3  3A01               	xorlw	1	; case 3
  3091  0BD4  1903               	skipnz
  3092  0BD5  2BBD               	goto	l2380
  3093  0BD6  2BBF               	goto	l2384
  3094  0BD7  0008               	return
  3095  0BD8                     __end_of_Tetris_ScoreForRowsCleared:	
  3096                           
  3097                           	psect	text3
  3098  0C81                     __ptext3:	
  3099 ;; *************** function _Tetris_MovePlayerDown *****************
  3100 ;; Defined at:
  3101 ;;		line 386 in file "../Tetris/Tetris.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;  game            1    wreg     PTR struct .
  3104 ;;		 -> main@tetrisGame(63), 
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  game            1   13[BANK0 ] PTR struct .
  3107 ;;		 -> main@tetrisGame(63), 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      unsigned char 
  3110 ;; Registers used:
  3111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3117 ;;      Params:         0       0       0       0
  3118 ;;      Locals:         0       1       0       0
  3119 ;;      Temps:          0       1       0       0
  3120 ;;      Totals:         0       2       0       0
  3121 ;;Total ram usage:        2 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    4
  3124 ;; This function calls:
  3125 ;;		_Tetris_ApplyPlayerToTable
  3126 ;;		_Tetris_PlayerOverlapsEnvironment
  3127 ;;		_Tetris_RemovePlayerFromTable
  3128 ;; This function is called by:
  3129 ;;		_Tetris_UpdateGame
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           
  3134                           ;psect for function _Tetris_MovePlayerDown
  3135  0C81                     _Tetris_MovePlayerDown:	
  3136                           
  3137                           ;incstack = 0
  3138                           ; Regs used in _Tetris_MovePlayerDown: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  3139                           ;Tetris_MovePlayerDown@game stored from wreg
  3140  0C81  1283               	bcf	3,5	;RP0=0, select bank0
  3141  0C82  1303               	bcf	3,6	;RP1=0, select bank0
  3142  0C83  00AD               	movwf	Tetris_MovePlayerDown@game
  3143                           
  3144                           ;../Tetris/Tetris.c: 386: uint8_t Tetris_MovePlayerDown(Tetris_Game *game);../Tetris/Tet
      +                          ris.c: 387: {;../Tetris/Tetris.c: 388:  Tetris_RemovePlayerFromTable(game);
  3145  0C84  082D               	movf	Tetris_MovePlayerDown@game,w
  3146  0C85  158A  2517  158A   	fcall	_Tetris_RemovePlayerFromTable
  3147                           
  3148                           ;../Tetris/Tetris.c: 389:  ++game->player.position.y;
  3149  0C88  3001               	movlw	1
  3150  0C89  1283               	bcf	3,5	;RP0=0, select bank0
  3151  0C8A  1303               	bcf	3,6	;RP1=0, select bank0
  3152  0C8B  00AC               	movwf	??_Tetris_MovePlayerDown
  3153  0C8C  082D               	movf	Tetris_MovePlayerDown@game,w
  3154  0C8D  3E31               	addlw	49
  3155  0C8E  0084               	movwf	4
  3156  0C8F  082C               	movf	??_Tetris_MovePlayerDown,w
  3157  0C90  1383               	bcf	3,7	;select IRP bank0
  3158  0C91  0780               	addwf	0,f
  3159                           
  3160                           ;../Tetris/Tetris.c: 391:  if (Tetris_PlayerOverlapsEnvironment(game) || !Tetris_ApplyPl
      +                          ayerToTable(game))
  3161  0C92  082D               	movf	Tetris_MovePlayerDown@game,w
  3162  0C93  158A  25C5  158A   	fcall	_Tetris_PlayerOverlapsEnvironment
  3163  0C96  3A00               	xorlw	0
  3164  0C97  1D03               	skipz
  3165  0C98  2CA2               	goto	l3062
  3166  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  3168  0C9B  082D               	movf	Tetris_MovePlayerDown@game,w
  3169  0C9C  118A  2096  158A   	fcall	_Tetris_ApplyPlayerToTable
  3170  0C9F  3A00               	xorlw	0
  3171  0CA0  1D03               	skipz
  3172  0CA1  2CAF               	goto	l3070
  3173  0CA2                     l3062:	
  3174                           
  3175                           ;../Tetris/Tetris.c: 392:  {;../Tetris/Tetris.c: 393:   --game->player.position.y;
  3176  0CA2  1283               	bcf	3,5	;RP0=0, select bank0
  3177  0CA3  1303               	bcf	3,6	;RP1=0, select bank0
  3178  0CA4  082D               	movf	Tetris_MovePlayerDown@game,w
  3179  0CA5  3E31               	addlw	49
  3180  0CA6  0084               	movwf	4
  3181  0CA7  3001               	movlw	1
  3182  0CA8  1383               	bcf	3,7	;select IRP bank0
  3183  0CA9  0280               	subwf	0,f
  3184                           
  3185                           ;../Tetris/Tetris.c: 394:   Tetris_ApplyPlayerToTable(game);
  3186  0CAA  082D               	movf	Tetris_MovePlayerDown@game,w
  3187  0CAB  118A  2096         	fcall	_Tetris_ApplyPlayerToTable
  3188                           
  3189                           ;../Tetris/Tetris.c: 395:   return 0;
  3190  0CAD  3000               	movlw	0
  3191  0CAE  0008               	return
  3192  0CAF                     l3070:	
  3193                           
  3194                           ;../Tetris/Tetris.c: 398:  return 1;
  3195  0CAF  3001               	movlw	1
  3196  0CB0  0008               	return
  3197  0CB1                     __end_of_Tetris_MovePlayerDown:	
  3198                           
  3199                           	psect	text4
  3200  0BFD                     __ptext4:	
  3201 ;; *************** function _Tetris_GetRandomUnit *****************
  3202 ;; Defined at:
  3203 ;;		line 327 in file "../Tetris/Tetris.c"
  3204 ;; Parameters:    Size  Location     Type
  3205 ;;		None
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;		None
  3208 ;; Return value:  Size  Location     Type
  3209 ;;                  2   12[BANK0 ] PTR const struct .
  3210 ;; Registers used:
  3211 ;;		wreg, status,2, status,0, pclath, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3217 ;;      Params:         0       0       0       0
  3218 ;;      Locals:         0       0       0       0
  3219 ;;      Temps:          0       2       0       0
  3220 ;;      Totals:         0       2       0       0
  3221 ;;Total ram usage:        2 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    3
  3224 ;; This function calls:
  3225 ;;		___awmod
  3226 ;;		___wmul
  3227 ;;		_rand
  3228 ;; This function is called by:
  3229 ;;		_main
  3230 ;;		_Tetris_UpdateGame
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _Tetris_GetRandomUnit
  3236  0BFD                     _Tetris_GetRandomUnit:	
  3237                           
  3238                           ;../Tetris/Tetris.c: 329:  return Tetris_units + (rand() % TETRIS_NUM_UNITS);
  3239                           
  3240                           ;incstack = 0
  3241                           ; Regs used in _Tetris_GetRandomUnit: [wreg+status,2+status,0+pclath+cstack]
  3242  0BFD  158A  26CB  158A   	fcall	_rand
  3243  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  3244  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  3245  0C02  0829               	movf	?_rand+1,w
  3246  0C03  00B2               	movwf	___awmod@dividend+1
  3247  0C04  0828               	movf	?_rand,w
  3248  0C05  00B1               	movwf	___awmod@dividend
  3249  0C06  3007               	movlw	7
  3250  0C07  00AF               	movwf	___awmod@divisor
  3251  0C08  3000               	movlw	0
  3252  0C09  00B0               	movwf	___awmod@divisor+1
  3253  0C0A  158A  275C  158A   	fcall	___awmod
  3254  0C0D  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0C0E  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0C0F  0830               	movf	?___awmod+1,w
  3257  0C10  00B6               	movwf	___wmul@multiplier+1
  3258  0C11  082F               	movf	?___awmod,w
  3259  0C12  00B5               	movwf	___wmul@multiplier
  3260  0C13  3022               	movlw	34
  3261  0C14  00B7               	movwf	___wmul@multiplicand
  3262  0C15  3000               	movlw	0
  3263  0C16  00B8               	movwf	___wmul@multiplicand+1
  3264  0C17  158A  2392         	fcall	___wmul
  3265  0C19  3016               	movlw	low (_Tetris_units| (0+32768))
  3266  0C1A  1283               	bcf	3,5	;RP0=0, select bank0
  3267  0C1B  1303               	bcf	3,6	;RP1=0, select bank0
  3268  0C1C  00BB               	movwf	??_Tetris_GetRandomUnit
  3269  0C1D  3085               	movlw	high (_Tetris_units| (0+32768))
  3270  0C1E  00BC               	movwf	??_Tetris_GetRandomUnit+1
  3271  0C1F  0835               	movf	?___wmul,w
  3272  0C20  073B               	addwf	??_Tetris_GetRandomUnit,w
  3273  0C21  00AC               	movwf	?_Tetris_GetRandomUnit
  3274  0C22  0836               	movf	?___wmul+1,w
  3275  0C23  1803               	skipnc
  3276  0C24  0A36               	incf	?___wmul+1,w
  3277  0C25  073C               	addwf	??_Tetris_GetRandomUnit+1,w
  3278  0C26  00AD               	movwf	?_Tetris_GetRandomUnit+1
  3279  0C27  0008               	return
  3280  0C28                     __end_of_Tetris_GetRandomUnit:	
  3281                           
  3282                           	psect	text5
  3283  0ECB                     __ptext5:	
  3284 ;; *************** function _rand *****************
  3285 ;; Defined at:
  3286 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  2    8[BANK0 ] int 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0, pclath, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3300 ;;      Params:         0       2       0       0
  3301 ;;      Locals:         0       0       0       0
  3302 ;;      Temps:          0       5       0       0
  3303 ;;      Totals:         0       7       0       0
  3304 ;;Total ram usage:        7 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    2
  3307 ;; This function calls:
  3308 ;;		___lmul
  3309 ;; This function is called by:
  3310 ;;		_Tetris_GetRandomUnit
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           
  3315                           ;psect for function _rand
  3316  0ECB                     _rand:	
  3317                           
  3318                           ;incstack = 0
  3319                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  3320  0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  3321  0ECC  1303               	bcf	3,6	;RP1=0, select bank0
  3322  0ECD  084A               	movf	_randx+3,w
  3323  0ECE  00A3               	movwf	___lmul@multiplier+3
  3324  0ECF  0849               	movf	_randx+2,w
  3325  0ED0  00A2               	movwf	___lmul@multiplier+2
  3326  0ED1  0848               	movf	_randx+1,w
  3327  0ED2  00A1               	movwf	___lmul@multiplier+1
  3328  0ED3  0847               	movf	_randx,w
  3329  0ED4  00A0               	movwf	___lmul@multiplier
  3330  0ED5  3041               	movlw	65
  3331  0ED6  00A7               	movwf	___lmul@multiplicand+3
  3332  0ED7  30C6               	movlw	198
  3333  0ED8  00A6               	movwf	___lmul@multiplicand+2
  3334  0ED9  304E               	movlw	78
  3335  0EDA  00A5               	movwf	___lmul@multiplicand+1
  3336  0EDB  306D               	movlw	109
  3337  0EDC  00A4               	movwf	___lmul@multiplicand
  3338  0EDD  158A  2647  158A   	fcall	___lmul
  3339  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  3340  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  3341  0EE2  0823               	movf	?___lmul+3,w
  3342  0EE3  00CA               	movwf	_randx+3
  3343  0EE4  0822               	movf	?___lmul+2,w
  3344  0EE5  00C9               	movwf	_randx+2
  3345  0EE6  0821               	movf	?___lmul+1,w
  3346  0EE7  00C8               	movwf	_randx+1
  3347  0EE8  0820               	movf	?___lmul,w
  3348  0EE9  00C7               	movwf	_randx
  3349  0EEA  3039               	movlw	57
  3350  0EEB  07C7               	addwf	_randx,f
  3351  0EEC  3030               	movlw	48
  3352  0EED  1803               	skipnc
  3353  0EEE  3031               	movlw	49
  3354  0EEF  07C8               	addwf	_randx+1,f
  3355  0EF0  3000               	movlw	0
  3356  0EF1  1803               	skipnc
  3357  0EF2  3001               	movlw	1
  3358  0EF3  07C9               	addwf	_randx+2,f
  3359  0EF4  3000               	movlw	0
  3360  0EF5  1803               	skipnc
  3361  0EF6  3001               	movlw	1
  3362  0EF7  07CA               	addwf	_randx+3,f
  3363  0EF8  0847               	movf	_randx,w
  3364  0EF9  00AA               	movwf	??_rand
  3365  0EFA  0848               	movf	_randx+1,w
  3366  0EFB  00AB               	movwf	??_rand+1
  3367  0EFC  0849               	movf	_randx+2,w
  3368  0EFD  00AC               	movwf	??_rand+2
  3369  0EFE  084A               	movf	_randx+3,w
  3370  0EFF  00AD               	movwf	??_rand+3
  3371  0F00  3010               	movlw	16
  3372  0F01  00AE               	movwf	??_rand+4
  3373  0F02                     u2365:	
  3374  0F02  0D2D               	rlf	??_rand+3,w
  3375  0F03  0CAD               	rrf	??_rand+3,f
  3376  0F04  0CAC               	rrf	??_rand+2,f
  3377  0F05  0CAB               	rrf	??_rand+1,f
  3378  0F06  0CAA               	rrf	??_rand,f
  3379  0F07  0BAE               	decfsz	??_rand+4,f
  3380  0F08  2F02               	goto	u2365
  3381  0F09  30FF               	movlw	255
  3382  0F0A  052A               	andwf	??_rand,w
  3383  0F0B  00A8               	movwf	?_rand
  3384  0F0C  307F               	movlw	127
  3385  0F0D  052B               	andwf	??_rand+1,w
  3386  0F0E  00A9               	movwf	?_rand+1
  3387  0F0F  0008               	return
  3388  0F10                     __end_of_rand:	
  3389                           
  3390                           	psect	text6
  3391  0E47                     __ptext6:	
  3392 ;; *************** function ___lmul *****************
  3393 ;; Defined at:
  3394 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3397 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  product         4    4[COMMON] unsigned long 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  4    0[BANK0 ] unsigned long 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3409 ;;      Params:         0       8       0       0
  3410 ;;      Locals:         4       0       0       0
  3411 ;;      Temps:          1       0       0       0
  3412 ;;      Totals:         5       8       0       0
  3413 ;;Total ram usage:       13 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    1
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_rand
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           
  3424                           ;psect for function ___lmul
  3425  0E47                     ___lmul:	
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3429  0E47  3000               	movlw	0
  3430  0E48  00F7               	movwf	___lmul@product+3
  3431  0E49  3000               	movlw	0
  3432  0E4A  00F6               	movwf	___lmul@product+2
  3433  0E4B  3000               	movlw	0
  3434  0E4C  00F5               	movwf	___lmul@product+1
  3435  0E4D  3000               	movlw	0
  3436  0E4E  00F4               	movwf	___lmul@product
  3437  0E4F                     l2906:	
  3438  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  3439  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  3440  0E51  1C20               	btfss	___lmul@multiplier,0
  3441  0E52  2E67               	goto	l2910
  3442  0E53  0824               	movf	___lmul@multiplicand,w
  3443  0E54  07F4               	addwf	___lmul@product,f
  3444  0E55  0825               	movf	___lmul@multiplicand+1,w
  3445  0E56  1103               	clrz
  3446  0E57  1803               	skipnc
  3447  0E58  3E01               	addlw	1
  3448  0E59  1D03               	btfss	3,2
  3449  0E5A  07F5               	addwf	___lmul@product+1,f
  3450  0E5B  0826               	movf	___lmul@multiplicand+2,w
  3451  0E5C  1103               	clrz
  3452  0E5D  1803               	skipnc
  3453  0E5E  3E01               	addlw	1
  3454  0E5F  1D03               	btfss	3,2
  3455  0E60  07F6               	addwf	___lmul@product+2,f
  3456  0E61  0827               	movf	___lmul@multiplicand+3,w
  3457  0E62  1103               	clrz
  3458  0E63  1803               	skipnc
  3459  0E64  3E01               	addlw	1
  3460  0E65  1D03               	btfss	3,2
  3461  0E66  07F7               	addwf	___lmul@product+3,f
  3462  0E67                     l2910:	
  3463  0E67  3001               	movlw	1
  3464  0E68  00F3               	movwf	??___lmul
  3465  0E69                     u2295:	
  3466  0E69  1003               	clrc
  3467  0E6A  0DA4               	rlf	___lmul@multiplicand,f
  3468  0E6B  0DA5               	rlf	___lmul@multiplicand+1,f
  3469  0E6C  0DA6               	rlf	___lmul@multiplicand+2,f
  3470  0E6D  0DA7               	rlf	___lmul@multiplicand+3,f
  3471  0E6E  0BF3               	decfsz	??___lmul,f
  3472  0E6F  2E69               	goto	u2295
  3473  0E70  3001               	movlw	1
  3474  0E71                     u2305:	
  3475  0E71  1003               	clrc
  3476  0E72  0CA3               	rrf	___lmul@multiplier+3,f
  3477  0E73  0CA2               	rrf	___lmul@multiplier+2,f
  3478  0E74  0CA1               	rrf	___lmul@multiplier+1,f
  3479  0E75  0CA0               	rrf	___lmul@multiplier,f
  3480  0E76  3EFF               	addlw	-1
  3481  0E77  1D03               	skipz
  3482  0E78  2E71               	goto	u2305
  3483  0E79  0823               	movf	___lmul@multiplier+3,w
  3484  0E7A  0422               	iorwf	___lmul@multiplier+2,w
  3485  0E7B  0421               	iorwf	___lmul@multiplier+1,w
  3486  0E7C  0420               	iorwf	___lmul@multiplier,w
  3487  0E7D  1D03               	skipz
  3488  0E7E  2E4F               	goto	l2906
  3489  0E7F  0877               	movf	___lmul@product+3,w
  3490  0E80  00A3               	movwf	?___lmul+3
  3491  0E81  0876               	movf	___lmul@product+2,w
  3492  0E82  00A2               	movwf	?___lmul+2
  3493  0E83  0875               	movf	___lmul@product+1,w
  3494  0E84  00A1               	movwf	?___lmul+1
  3495  0E85  0874               	movf	___lmul@product,w
  3496  0E86  00A0               	movwf	?___lmul
  3497  0E87  0008               	return
  3498  0E88                     __end_of___lmul:	
  3499                           
  3500                           	psect	text7
  3501  0B92                     __ptext7:	
  3502 ;; *************** function ___wmul *****************
  3503 ;; Defined at:
  3504 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  multiplier      2   21[BANK0 ] unsigned int 
  3507 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  product         2   25[BANK0 ] unsigned int 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  2   21[BANK0 ] unsigned int 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3519 ;;      Params:         0       4       0       0
  3520 ;;      Locals:         0       2       0       0
  3521 ;;      Temps:          0       0       0       0
  3522 ;;      Totals:         0       6       0       0
  3523 ;;Total ram usage:        6 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    1
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_Tetris_GetRandomUnit
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           
  3534                           ;psect for function ___wmul
  3535  0B92                     ___wmul:	
  3536                           
  3537                           ;incstack = 0
  3538                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3539  0B92  1283               	bcf	3,5	;RP0=0, select bank0
  3540  0B93  1303               	bcf	3,6	;RP1=0, select bank0
  3541  0B94  01B9               	clrf	___wmul@product
  3542  0B95  01BA               	clrf	___wmul@product+1
  3543  0B96                     l2260:	
  3544  0B96  1C35               	btfss	___wmul@multiplier,0
  3545  0B97  2B9E               	goto	l532
  3546  0B98  0837               	movf	___wmul@multiplicand,w
  3547  0B99  07B9               	addwf	___wmul@product,f
  3548  0B9A  1803               	skipnc
  3549  0B9B  0ABA               	incf	___wmul@product+1,f
  3550  0B9C  0838               	movf	___wmul@multiplicand+1,w
  3551  0B9D  07BA               	addwf	___wmul@product+1,f
  3552  0B9E                     l532:	
  3553  0B9E  3001               	movlw	1
  3554  0B9F                     u1545:	
  3555  0B9F  1003               	clrc
  3556  0BA0  0DB7               	rlf	___wmul@multiplicand,f
  3557  0BA1  0DB8               	rlf	___wmul@multiplicand+1,f
  3558  0BA2  3EFF               	addlw	-1
  3559  0BA3  1D03               	skipz
  3560  0BA4  2B9F               	goto	u1545
  3561  0BA5  3001               	movlw	1
  3562  0BA6                     u1555:	
  3563  0BA6  1003               	clrc
  3564  0BA7  0CB6               	rrf	___wmul@multiplier+1,f
  3565  0BA8  0CB5               	rrf	___wmul@multiplier,f
  3566  0BA9  3EFF               	addlw	-1
  3567  0BAA  1D03               	skipz
  3568  0BAB  2BA6               	goto	u1555
  3569  0BAC  0835               	movf	___wmul@multiplier,w
  3570  0BAD  0436               	iorwf	___wmul@multiplier+1,w
  3571  0BAE  1D03               	btfss	3,2
  3572  0BAF  2B96               	goto	l2260
  3573  0BB0  083A               	movf	___wmul@product+1,w
  3574  0BB1  00B6               	movwf	?___wmul+1
  3575  0BB2  0839               	movf	___wmul@product,w
  3576  0BB3  00B5               	movwf	?___wmul
  3577  0BB4  0008               	return
  3578  0BB5                     __end_of___wmul:	
  3579                           
  3580                           	psect	text8
  3581  0F5C                     __ptext8:	
  3582 ;; *************** function ___awmod *****************
  3583 ;; Defined at:
  3584 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  divisor         2   15[BANK0 ] int 
  3587 ;;  dividend        2   17[BANK0 ] int 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  sign            1   20[BANK0 ] unsigned char 
  3590 ;;  counter         1   19[BANK0 ] unsigned char 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  2   15[BANK0 ] int 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3600 ;;      Params:         0       4       0       0
  3601 ;;      Locals:         0       2       0       0
  3602 ;;      Temps:          1       0       0       0
  3603 ;;      Totals:         1       6       0       0
  3604 ;;Total ram usage:        7 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    1
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_Tetris_GetRandomUnit
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function ___awmod
  3616  0F5C                     ___awmod:	
  3617                           
  3618                           ;incstack = 0
  3619                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3620  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0F5E  01B4               	clrf	___awmod@sign
  3623  0F5F  1FB2               	btfss	___awmod@dividend+1,7
  3624  0F60  2F68               	goto	l3002
  3625  0F61  09B1               	comf	___awmod@dividend,f
  3626  0F62  09B2               	comf	___awmod@dividend+1,f
  3627  0F63  0AB1               	incf	___awmod@dividend,f
  3628  0F64  1903               	skipnz
  3629  0F65  0AB2               	incf	___awmod@dividend+1,f
  3630  0F66  01B4               	clrf	___awmod@sign
  3631  0F67  0AB4               	incf	___awmod@sign,f
  3632  0F68                     l3002:	
  3633  0F68  1FB0               	btfss	___awmod@divisor+1,7
  3634  0F69  2F6F               	goto	l3006
  3635  0F6A  09AF               	comf	___awmod@divisor,f
  3636  0F6B  09B0               	comf	___awmod@divisor+1,f
  3637  0F6C  0AAF               	incf	___awmod@divisor,f
  3638  0F6D  1903               	skipnz
  3639  0F6E  0AB0               	incf	___awmod@divisor+1,f
  3640  0F6F                     l3006:	
  3641  0F6F  082F               	movf	___awmod@divisor,w
  3642  0F70  0430               	iorwf	___awmod@divisor+1,w
  3643  0F71  1903               	btfsc	3,2
  3644  0F72  2F9C               	goto	l3024
  3645  0F73  01B3               	clrf	___awmod@counter
  3646  0F74  0AB3               	incf	___awmod@counter,f
  3647  0F75                     l3014:	
  3648  0F75  1BB0               	btfsc	___awmod@divisor+1,7
  3649  0F76  2F83               	goto	l3016
  3650  0F77  3001               	movlw	1
  3651  0F78                     u2455:	
  3652  0F78  1003               	clrc
  3653  0F79  0DAF               	rlf	___awmod@divisor,f
  3654  0F7A  0DB0               	rlf	___awmod@divisor+1,f
  3655  0F7B  3EFF               	addlw	-1
  3656  0F7C  1D03               	skipz
  3657  0F7D  2F78               	goto	u2455
  3658  0F7E  3001               	movlw	1
  3659  0F7F  00F8               	movwf	??___awmod
  3660  0F80  0878               	movf	??___awmod,w
  3661  0F81  07B3               	addwf	___awmod@counter,f
  3662  0F82  2F75               	goto	l3014
  3663  0F83                     l3016:	
  3664  0F83  0830               	movf	___awmod@divisor+1,w
  3665  0F84  0232               	subwf	___awmod@dividend+1,w
  3666  0F85  1D03               	skipz
  3667  0F86  2F89               	goto	u2475
  3668  0F87  082F               	movf	___awmod@divisor,w
  3669  0F88  0231               	subwf	___awmod@dividend,w
  3670  0F89                     u2475:	
  3671  0F89  1C03               	skipc
  3672  0F8A  2F91               	goto	l3020
  3673  0F8B  082F               	movf	___awmod@divisor,w
  3674  0F8C  02B1               	subwf	___awmod@dividend,f
  3675  0F8D  0830               	movf	___awmod@divisor+1,w
  3676  0F8E  1C03               	skipc
  3677  0F8F  03B2               	decf	___awmod@dividend+1,f
  3678  0F90  02B2               	subwf	___awmod@dividend+1,f
  3679  0F91                     l3020:	
  3680  0F91  3001               	movlw	1
  3681  0F92                     u2485:	
  3682  0F92  1003               	clrc
  3683  0F93  0CB0               	rrf	___awmod@divisor+1,f
  3684  0F94  0CAF               	rrf	___awmod@divisor,f
  3685  0F95  3EFF               	addlw	-1
  3686  0F96  1D03               	skipz
  3687  0F97  2F92               	goto	u2485
  3688  0F98  3001               	movlw	1
  3689  0F99  02B3               	subwf	___awmod@counter,f
  3690  0F9A  1D03               	btfss	3,2
  3691  0F9B  2F83               	goto	l3016
  3692  0F9C                     l3024:	
  3693  0F9C  0834               	movf	___awmod@sign,w
  3694  0F9D  1903               	btfsc	3,2
  3695  0F9E  2FA4               	goto	l3028
  3696  0F9F  09B1               	comf	___awmod@dividend,f
  3697  0FA0  09B2               	comf	___awmod@dividend+1,f
  3698  0FA1  0AB1               	incf	___awmod@dividend,f
  3699  0FA2  1903               	skipnz
  3700  0FA3  0AB2               	incf	___awmod@dividend+1,f
  3701  0FA4                     l3028:	
  3702  0FA4  0832               	movf	___awmod@dividend+1,w
  3703  0FA5  00B0               	movwf	?___awmod+1
  3704  0FA6  0831               	movf	___awmod@dividend,w
  3705  0FA7  00AF               	movwf	?___awmod
  3706  0FA8  0008               	return
  3707  0FA9                     __end_of___awmod:	
  3708                           
  3709                           	psect	text9
  3710  0CB1                     __ptext9:	
  3711 ;; *************** function _Tetris_ClearFilledRows *****************
  3712 ;; Defined at:
  3713 ;;		line 366 in file "../Tetris/Tetris.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  gameTable       1    wreg     PTR unsigned int 
  3716 ;;		 -> main@tetrisGame(63), 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  gameTable       1    7[BANK0 ] PTR unsigned int 
  3719 ;;		 -> main@tetrisGame(63), 
  3720 ;;  i               1    8[BANK0 ] unsigned char 
  3721 ;;  rowsCleared     1    6[BANK0 ] unsigned char 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  1    wreg      unsigned char 
  3724 ;; Registers used:
  3725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3731 ;;      Params:         0       0       0       0
  3732 ;;      Locals:         0       3       0       0
  3733 ;;      Temps:          0       4       0       0
  3734 ;;      Totals:         0       7       0       0
  3735 ;;Total ram usage:        7 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    2
  3738 ;; This function calls:
  3739 ;;		_Tetris_ShiftTableDown
  3740 ;; This function is called by:
  3741 ;;		_Tetris_UpdateGame
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           
  3746                           ;psect for function _Tetris_ClearFilledRows
  3747  0CB1                     _Tetris_ClearFilledRows:	
  3748                           
  3749                           ;incstack = 0
  3750                           ; Regs used in _Tetris_ClearFilledRows: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3751                           ;Tetris_ClearFilledRows@gameTable stored from wreg
  3752  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  3753  0CB2  1303               	bcf	3,6	;RP1=0, select bank0
  3754  0CB3  00A7               	movwf	Tetris_ClearFilledRows@gameTable
  3755                           
  3756                           ;../Tetris/Tetris.c: 366: uint8_t Tetris_ClearFilledRows(uint16_t *gameTable);../Tetris/
      +                          Tetris.c: 367: {;../Tetris/Tetris.c: 368:  uint8_t rowsCleared = 0;
  3757  0CB4  01A6               	clrf	Tetris_ClearFilledRows@rowsCleared
  3758                           
  3759                           ;../Tetris/Tetris.c: 370:  for (uint8_t i = 0; i < TETRIS_TABLE_HEIGHT;)
  3760  0CB5  01A8               	clrf	Tetris_ClearFilledRows@i
  3761  0CB6                     l2430:	
  3762                           
  3763                           ;../Tetris/Tetris.c: 371:  {;../Tetris/Tetris.c: 372:   if (gameTable[i] == 0xFFFF)
  3764  0CB6  0828               	movf	Tetris_ClearFilledRows@i,w
  3765  0CB7  00A2               	movwf	??_Tetris_ClearFilledRows
  3766  0CB8  0722               	addwf	??_Tetris_ClearFilledRows,w
  3767  0CB9  0727               	addwf	Tetris_ClearFilledRows@gameTable,w
  3768  0CBA  00A3               	movwf	??_Tetris_ClearFilledRows+1
  3769  0CBB  0823               	movf	??_Tetris_ClearFilledRows+1,w
  3770  0CBC  0084               	movwf	4
  3771  0CBD  1383               	bcf	3,7	;select IRP bank0
  3772  0CBE  0800               	movf	0,w
  3773  0CBF  00A4               	movwf	??_Tetris_ClearFilledRows+2
  3774  0CC0  0A84               	incf	4,f
  3775  0CC1  0800               	movf	0,w
  3776  0CC2  00A5               	movwf	??_Tetris_ClearFilledRows+3
  3777  0CC3  0A24               	incf	??_Tetris_ClearFilledRows+2,w
  3778  0CC4  1D03               	skipz
  3779  0CC5  2CD8               	goto	l2436
  3780  0CC6  0A25               	incf	??_Tetris_ClearFilledRows+3,w
  3781  0CC7  1D03               	btfss	3,2
  3782  0CC8  2CD8               	goto	l2436
  3783                           
  3784                           ;../Tetris/Tetris.c: 373:   {;../Tetris/Tetris.c: 374:    Tetris_ShiftTableDown(gameTabl
      +                          e, i);
  3785  0CC9  0828               	movf	Tetris_ClearFilledRows@i,w
  3786  0CCA  00A2               	movwf	??_Tetris_ClearFilledRows
  3787  0CCB  0822               	movf	??_Tetris_ClearFilledRows,w
  3788  0CCC  00F3               	movwf	Tetris_ShiftTableDown@upto
  3789  0CCD  0827               	movf	Tetris_ClearFilledRows@gameTable,w
  3790  0CCE  158A  2688  158A   	fcall	_Tetris_ShiftTableDown
  3791                           
  3792                           ;../Tetris/Tetris.c: 375:    ++rowsCleared;
  3793  0CD1  3001               	movlw	1
  3794  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0CD4  00A2               	movwf	??_Tetris_ClearFilledRows
  3797  0CD5  0822               	movf	??_Tetris_ClearFilledRows,w
  3798  0CD6  07A6               	addwf	Tetris_ClearFilledRows@rowsCleared,f
  3799                           
  3800                           ;../Tetris/Tetris.c: 376:   }
  3801  0CD7  2CDC               	goto	l2438
  3802  0CD8                     l2436:	
  3803                           
  3804                           ;../Tetris/Tetris.c: 378:   {;../Tetris/Tetris.c: 379:    ++i;
  3805  0CD8  3001               	movlw	1
  3806  0CD9  00A2               	movwf	??_Tetris_ClearFilledRows
  3807  0CDA  0822               	movf	??_Tetris_ClearFilledRows,w
  3808  0CDB  07A8               	addwf	Tetris_ClearFilledRows@i,f
  3809  0CDC                     l2438:	
  3810                           
  3811                           ;../Tetris/Tetris.c: 381:  }
  3812  0CDC  3018               	movlw	24
  3813  0CDD  0228               	subwf	Tetris_ClearFilledRows@i,w
  3814  0CDE  1C03               	skipc
  3815  0CDF  2CB6               	goto	l2430
  3816                           
  3817                           ;../Tetris/Tetris.c: 383:  return rowsCleared;
  3818  0CE0  0826               	movf	Tetris_ClearFilledRows@rowsCleared,w
  3819  0CE1  0008               	return
  3820  0CE2                     __end_of_Tetris_ClearFilledRows:	
  3821                           
  3822                           	psect	text10
  3823  0E88                     __ptext10:	
  3824 ;; *************** function _Tetris_ShiftTableDown *****************
  3825 ;; Defined at:
  3826 ;;		line 301 in file "../Tetris/Tetris.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  gameTable       1    wreg     PTR unsigned int 
  3829 ;;		 -> main@tetrisGame(63), 
  3830 ;;  upto            1    3[COMMON] unsigned char 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  gameTable       1    0[BANK0 ] PTR unsigned int 
  3833 ;;		 -> main@tetrisGame(63), 
  3834 ;;  i               1    1[BANK0 ] unsigned char 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3844 ;;      Params:         1       0       0       0
  3845 ;;      Locals:         0       2       0       0
  3846 ;;      Temps:          6       0       0       0
  3847 ;;      Totals:         7       2       0       0
  3848 ;;Total ram usage:        9 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    1
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_Tetris_ClearFilledRows
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           
  3859                           ;psect for function _Tetris_ShiftTableDown
  3860  0E88                     _Tetris_ShiftTableDown:	
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _Tetris_ShiftTableDown: [wreg-fsr0h+status,2+status,0]
  3864                           ;Tetris_ShiftTableDown@gameTable stored from wreg
  3865  0E88  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0E89  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0E8A  00A0               	movwf	Tetris_ShiftTableDown@gameTable
  3868                           
  3869                           ;../Tetris/Tetris.c: 301: static void Tetris_ShiftTableDown(uint16_t *gameTable, uint8_t
      +                           upto);../Tetris/Tetris.c: 302: {;../Tetris/Tetris.c: 303:  uint8_t i;;../Tetris/Tetris.
      +                          c: 305:  for (i = upto; i != 0; --i)
  3870  0E8B  0873               	movf	Tetris_ShiftTableDown@upto,w
  3871  0E8C  00F4               	movwf	??_Tetris_ShiftTableDown
  3872  0E8D  0874               	movf	??_Tetris_ShiftTableDown,w
  3873  0E8E  00A1               	movwf	Tetris_ShiftTableDown@i
  3874  0E8F                     l2184:	
  3875  0E8F  0821               	movf	Tetris_ShiftTableDown@i,w
  3876  0E90  1903               	btfsc	3,2
  3877  0E91  2EBF               	goto	l2198
  3878                           
  3879                           ;../Tetris/Tetris.c: 306:  {;../Tetris/Tetris.c: 307:   if (gameTable[i] == 0)
  3880  0E92  0821               	movf	Tetris_ShiftTableDown@i,w
  3881  0E93  00F4               	movwf	??_Tetris_ShiftTableDown
  3882  0E94  0774               	addwf	??_Tetris_ShiftTableDown,w
  3883  0E95  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3884  0E96  00F5               	movwf	??_Tetris_ShiftTableDown+1
  3885  0E97  0875               	movf	??_Tetris_ShiftTableDown+1,w
  3886  0E98  0084               	movwf	4
  3887  0E99  1383               	bcf	3,7	;select IRP bank0
  3888  0E9A  0800               	movf	0,w
  3889  0E9B  00F6               	movwf	??_Tetris_ShiftTableDown+2
  3890  0E9C  0A84               	incf	4,f
  3891  0E9D  0800               	movf	0,w
  3892  0E9E  00F7               	movwf	??_Tetris_ShiftTableDown+3
  3893  0E9F  0876               	movf	??_Tetris_ShiftTableDown+2,w
  3894  0EA0  0477               	iorwf	??_Tetris_ShiftTableDown+3,w
  3895  0EA1  1903               	btfsc	3,2
  3896  0EA2  2EBF               	goto	l2198
  3897                           
  3898                           ;../Tetris/Tetris.c: 309:   gameTable[i] = gameTable[i - 1];
  3899  0EA3  0821               	movf	Tetris_ShiftTableDown@i,w
  3900  0EA4  00F4               	movwf	??_Tetris_ShiftTableDown
  3901  0EA5  0774               	addwf	??_Tetris_ShiftTableDown,w
  3902  0EA6  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3903  0EA7  00F5               	movwf	??_Tetris_ShiftTableDown+1
  3904  0EA8  0875               	movf	??_Tetris_ShiftTableDown+1,w
  3905  0EA9  3EFE               	addlw	-2
  3906  0EAA  0084               	movwf	4
  3907  0EAB  0800               	movf	0,w
  3908  0EAC  00F6               	movwf	??_Tetris_ShiftTableDown+2
  3909  0EAD  0A84               	incf	4,f
  3910  0EAE  0800               	movf	0,w
  3911  0EAF  00F7               	movwf	??_Tetris_ShiftTableDown+3
  3912  0EB0  0821               	movf	Tetris_ShiftTableDown@i,w
  3913  0EB1  00F8               	movwf	??_Tetris_ShiftTableDown+4
  3914  0EB2  0778               	addwf	??_Tetris_ShiftTableDown+4,w
  3915  0EB3  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3916  0EB4  00F9               	movwf	??_Tetris_ShiftTableDown+5
  3917  0EB5  0879               	movf	??_Tetris_ShiftTableDown+5,w
  3918  0EB6  0084               	movwf	4
  3919  0EB7  0876               	movf	??_Tetris_ShiftTableDown+2,w
  3920  0EB8  0080               	movwf	0
  3921  0EB9  0A84               	incf	4,f
  3922  0EBA  0877               	movf	??_Tetris_ShiftTableDown+3,w
  3923  0EBB  0080               	movwf	0
  3924                           
  3925                           ;../Tetris/Tetris.c: 310:  }
  3926  0EBC  3001               	movlw	1
  3927  0EBD  02A1               	subwf	Tetris_ShiftTableDown@i,f
  3928  0EBE  2E8F               	goto	l2184
  3929  0EBF                     l2198:	
  3930                           
  3931                           ;../Tetris/Tetris.c: 312:  gameTable[i] = 0;
  3932  0EBF  0821               	movf	Tetris_ShiftTableDown@i,w
  3933  0EC0  00F4               	movwf	??_Tetris_ShiftTableDown
  3934  0EC1  0774               	addwf	??_Tetris_ShiftTableDown,w
  3935  0EC2  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3936  0EC3  00F5               	movwf	??_Tetris_ShiftTableDown+1
  3937  0EC4  0875               	movf	??_Tetris_ShiftTableDown+1,w
  3938  0EC5  0084               	movwf	4
  3939  0EC6  1383               	bcf	3,7	;select IRP bank0
  3940  0EC7  0180               	clrf	0
  3941  0EC8  0A84               	incf	4,f
  3942  0EC9  0180               	clrf	0
  3943  0ECA  0008               	return
  3944  0ECB                     __end_of_Tetris_ShiftTableDown:	
  3945                           
  3946                           	psect	text11
  3947  072E                     __ptext11:	
  3948 ;; *************** function _Tetris_RotatePlayer *****************
  3949 ;; Defined at:
  3950 ;;		line 447 in file "../Tetris/Tetris.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  game            1    wreg     PTR struct .
  3953 ;;		 -> main@tetrisGame(63), 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;  game            1   19[BANK0 ] PTR struct .
  3956 ;;		 -> main@tetrisGame(63), 
  3957 ;;  oldRotation     1   18[BANK0 ] unsigned char 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3967 ;;      Params:         0       0       0       0
  3968 ;;      Locals:         0       2       0       0
  3969 ;;      Temps:          0       6       0       0
  3970 ;;      Totals:         0       8       0       0
  3971 ;;Total ram usage:        8 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    4
  3974 ;; This function calls:
  3975 ;;		_Tetris_ApplyPlayerToTable
  3976 ;;		_Tetris_PlayerOverlapsEnvironment
  3977 ;;		_Tetris_PlayerUnitBitsAreValid
  3978 ;;		_Tetris_RemovePlayerFromTable
  3979 ;;		_Tetris_UpdatePlayerUnitBits
  3980 ;;		___lbmod
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _Tetris_RotatePlayer
  3988  072E                     _Tetris_RotatePlayer:	
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _Tetris_RotatePlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  3992                           ;Tetris_RotatePlayer@game stored from wreg
  3993  072E  1283               	bcf	3,5	;RP0=0, select bank0
  3994  072F  1303               	bcf	3,6	;RP1=0, select bank0
  3995  0730  00B3               	movwf	Tetris_RotatePlayer@game
  3996                           
  3997                           ;../Tetris/Tetris.c: 447: void Tetris_RotatePlayer(Tetris_Game *game);../Tetris/Tetris.c
      +                          : 448: {;../Tetris/Tetris.c: 449:  Tetris_RemovePlayerFromTable(game);
  3998  0731  0833               	movf	Tetris_RotatePlayer@game,w
  3999  0732  158A  2517  118A   	fcall	_Tetris_RemovePlayerFromTable
  4000                           
  4001                           ;../Tetris/Tetris.c: 451:  uint8_t oldRotation = game->player.rotation;
  4002  0735  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0736  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0737  0833               	movf	Tetris_RotatePlayer@game,w
  4005  0738  3E3C               	addlw	60
  4006  0739  0084               	movwf	4
  4007  073A  1383               	bcf	3,7	;select IRP bank0
  4008  073B  0800               	movf	0,w
  4009  073C  00AC               	movwf	??_Tetris_RotatePlayer
  4010  073D  082C               	movf	??_Tetris_RotatePlayer,w
  4011  073E  00B2               	movwf	Tetris_RotatePlayer@oldRotation
  4012                           
  4013                           ;../Tetris/Tetris.c: 452:  ++game->player.rotation;
  4014  073F  3001               	movlw	1
  4015  0740  00AC               	movwf	??_Tetris_RotatePlayer
  4016  0741  0833               	movf	Tetris_RotatePlayer@game,w
  4017  0742  3E3C               	addlw	60
  4018  0743  0084               	movwf	4
  4019  0744  082C               	movf	??_Tetris_RotatePlayer,w
  4020  0745  0780               	addwf	0,f
  4021                           
  4022                           ;../Tetris/Tetris.c: 453:  game->player.rotation %= game->player.unit->numRotations;
  4023  0746  3001               	movlw	1
  4024  0747  00AC               	movwf	??_Tetris_RotatePlayer
  4025  0748  3000               	movlw	0
  4026  0749  00AD               	movwf	??_Tetris_RotatePlayer+1
  4027  074A  0833               	movf	Tetris_RotatePlayer@game,w
  4028  074B  3E32               	addlw	50
  4029  074C  0084               	movwf	4
  4030  074D  0800               	movf	0,w
  4031  074E  00AE               	movwf	??_Tetris_RotatePlayer+2
  4032  074F  0A84               	incf	4,f
  4033  0750  0800               	movf	0,w
  4034  0751  00AF               	movwf	??_Tetris_RotatePlayer+3
  4035  0752  082C               	movf	??_Tetris_RotatePlayer,w
  4036  0753  072E               	addwf	??_Tetris_RotatePlayer+2,w
  4037  0754  0084               	movwf	4
  4038  0755  082D               	movf	??_Tetris_RotatePlayer+1,w
  4039  0756  1803               	skipnc
  4040  0757  0A2D               	incf	??_Tetris_RotatePlayer+1,w
  4041  0758  072F               	addwf	??_Tetris_RotatePlayer+3,w
  4042  0759  00FF               	movwf	127
  4043  075A  118A  2100  118A   	fcall	stringtab
  4044  075D  00B0               	movwf	??_Tetris_RotatePlayer+4
  4045  075E  0830               	movf	??_Tetris_RotatePlayer+4,w
  4046  075F  00F3               	movwf	___lbmod@divisor
  4047  0760  0833               	movf	Tetris_RotatePlayer@game,w
  4048  0761  3E3C               	addlw	60
  4049  0762  0084               	movwf	4
  4050  0763  1383               	bcf	3,7	;select IRP bank0
  4051  0764  0800               	movf	0,w
  4052  0765  158A  236F  118A   	fcall	___lbmod
  4053  0768  1283               	bcf	3,5	;RP0=0, select bank0
  4054  0769  1303               	bcf	3,6	;RP1=0, select bank0
  4055  076A  00B1               	movwf	??_Tetris_RotatePlayer+5
  4056  076B  0833               	movf	Tetris_RotatePlayer@game,w
  4057  076C  3E3C               	addlw	60
  4058  076D  0084               	movwf	4
  4059  076E  0831               	movf	??_Tetris_RotatePlayer+5,w
  4060  076F  1383               	bcf	3,7	;select IRP bank0
  4061  0770  0080               	movwf	0
  4062                           
  4063                           ;../Tetris/Tetris.c: 454:  Tetris_UpdatePlayerUnitBits(&game->player);
  4064  0771  0833               	movf	Tetris_RotatePlayer@game,w
  4065  0772  3E30               	addlw	48
  4066  0773  118A  2604  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  4067                           
  4068                           ;../Tetris/Tetris.c: 455:  if (!Tetris_PlayerUnitBitsAreValid(&game->player) || Tetris_P
      +                          layerOverlapsEnvironment(game))
  4069  0776  1283               	bcf	3,5	;RP0=0, select bank0
  4070  0777  1303               	bcf	3,6	;RP1=0, select bank0
  4071  0778  0833               	movf	Tetris_RotatePlayer@game,w
  4072  0779  3E30               	addlw	48
  4073  077A  158A  254D  118A   	fcall	_Tetris_PlayerUnitBitsAreValid
  4074  077D  3A00               	xorlw	0
  4075  077E  1903               	skipnz
  4076  077F  2F89               	goto	l3172
  4077  0780  1283               	bcf	3,5	;RP0=0, select bank0
  4078  0781  1303               	bcf	3,6	;RP1=0, select bank0
  4079  0782  0833               	movf	Tetris_RotatePlayer@game,w
  4080  0783  158A  25C5  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  4081  0786  3A00               	xorlw	0
  4082  0787  1903               	skipnz
  4083  0788  2F98               	goto	l3176
  4084  0789                     l3172:	
  4085                           
  4086                           ;../Tetris/Tetris.c: 456:  {;../Tetris/Tetris.c: 457:   game->player.rotation = oldRotat
      +                          ion;
  4087  0789  1283               	bcf	3,5	;RP0=0, select bank0
  4088  078A  1303               	bcf	3,6	;RP1=0, select bank0
  4089  078B  0832               	movf	Tetris_RotatePlayer@oldRotation,w
  4090  078C  00AC               	movwf	??_Tetris_RotatePlayer
  4091  078D  0833               	movf	Tetris_RotatePlayer@game,w
  4092  078E  3E3C               	addlw	60
  4093  078F  0084               	movwf	4
  4094  0790  082C               	movf	??_Tetris_RotatePlayer,w
  4095  0791  1383               	bcf	3,7	;select IRP bank0
  4096  0792  0080               	movwf	0
  4097                           
  4098                           ;../Tetris/Tetris.c: 458:   Tetris_UpdatePlayerUnitBits(&game->player);
  4099  0793  0833               	movf	Tetris_RotatePlayer@game,w
  4100  0794  3E30               	addlw	48
  4101  0795  118A  2604  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  4102  0798                     l3176:	
  4103                           
  4104                           ;../Tetris/Tetris.c: 461:  Tetris_ApplyPlayerToTable(game);
  4105  0798  1283               	bcf	3,5	;RP0=0, select bank0
  4106  0799  1303               	bcf	3,6	;RP1=0, select bank0
  4107  079A  0833               	movf	Tetris_RotatePlayer@game,w
  4108  079B  118A  2096         	fcall	_Tetris_ApplyPlayerToTable
  4109  079D  0008               	return
  4110  079E                     __end_of_Tetris_RotatePlayer:	
  4111                           
  4112                           	psect	text12
  4113  0B6F                     __ptext12:	
  4114 ;; *************** function ___lbmod *****************
  4115 ;; Defined at:
  4116 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lbmod.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  dividend        1    wreg     unsigned char 
  4119 ;;  divisor         1    3[COMMON] unsigned char 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  dividend        1    7[COMMON] unsigned char 
  4122 ;;  rem             1    9[COMMON] unsigned char 
  4123 ;;  counter         1    8[COMMON] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      unsigned char 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, status,0
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4133 ;;      Params:         1       0       0       0
  4134 ;;      Locals:         3       0       0       0
  4135 ;;      Temps:          3       0       0       0
  4136 ;;      Totals:         7       0       0       0
  4137 ;;Total ram usage:        7 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    1
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_Tetris_RotatePlayer
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           
  4148                           ;psect for function ___lbmod
  4149  0B6F                     ___lbmod:	
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  4153                           ;___lbmod@dividend stored from wreg
  4154  0B6F  00F7               	movwf	___lbmod@dividend
  4155  0B70  3008               	movlw	8
  4156  0B71  00F4               	movwf	??___lbmod
  4157  0B72  0874               	movf	??___lbmod,w
  4158  0B73  00F8               	movwf	___lbmod@counter
  4159  0B74  01F9               	clrf	___lbmod@rem
  4160  0B75                     l2522:	
  4161  0B75  0877               	movf	___lbmod@dividend,w
  4162  0B76  00F4               	movwf	??___lbmod
  4163  0B77  3007               	movlw	7
  4164  0B78                     u1845:	
  4165  0B78  1003               	clrc
  4166  0B79  0CF4               	rrf	??___lbmod,f
  4167  0B7A  3EFF               	addlw	-1
  4168  0B7B  1D03               	skipz
  4169  0B7C  2B78               	goto	u1845
  4170  0B7D  0879               	movf	___lbmod@rem,w
  4171  0B7E  00F5               	movwf	??___lbmod+1
  4172  0B7F  0775               	addwf	??___lbmod+1,w
  4173  0B80  0474               	iorwf	??___lbmod,w
  4174  0B81  00F6               	movwf	??___lbmod+2
  4175  0B82  0876               	movf	??___lbmod+2,w
  4176  0B83  00F9               	movwf	___lbmod@rem
  4177  0B84  1003               	clrc
  4178  0B85  0DF7               	rlf	___lbmod@dividend,f
  4179  0B86  0873               	movf	___lbmod@divisor,w
  4180  0B87  0279               	subwf	___lbmod@rem,w
  4181  0B88  1C03               	skipc
  4182  0B89  2B8C               	goto	l742
  4183  0B8A  0873               	movf	___lbmod@divisor,w
  4184  0B8B  02F9               	subwf	___lbmod@rem,f
  4185  0B8C                     l742:	
  4186  0B8C  3001               	movlw	1
  4187  0B8D  02F8               	subwf	___lbmod@counter,f
  4188  0B8E  1D03               	btfss	3,2
  4189  0B8F  2B75               	goto	l2522
  4190  0B90  0879               	movf	___lbmod@rem,w
  4191  0B91  0008               	return
  4192  0B92                     __end_of___lbmod:	
  4193                           
  4194                           	psect	text13
  4195  0D4D                     __ptext13:	
  4196 ;; *************** function _Tetris_PlayerUnitBitsAreValid *****************
  4197 ;; Defined at:
  4198 ;;		line 283 in file "../Tetris/Tetris.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;  player          1    wreg     PTR const struct .
  4201 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;  player          1    9[BANK0 ] PTR const struct .
  4204 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      unsigned char 
  4207 ;; Registers used:
  4208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4214 ;;      Params:         0       0       0       0
  4215 ;;      Locals:         0       1       0       0
  4216 ;;      Temps:          0       4       0       0
  4217 ;;      Totals:         0       5       0       0
  4218 ;;Total ram usage:        5 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		_Tetris_CountUnitBits
  4223 ;; This function is called by:
  4224 ;;		_Tetris_RotatePlayer
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _Tetris_PlayerUnitBitsAreValid
  4230  0D4D                     _Tetris_PlayerUnitBitsAreValid:	
  4231                           
  4232                           ;incstack = 0
  4233                           ; Regs used in _Tetris_PlayerUnitBitsAreValid: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath+cstack]
  4234                           ;Tetris_PlayerUnitBitsAreValid@player stored from wreg
  4235  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
  4236  0D4E  1303               	bcf	3,6	;RP1=0, select bank0
  4237  0D4F  00A9               	movwf	Tetris_PlayerUnitBitsAreValid@player
  4238                           
  4239                           ;../Tetris/Tetris.c: 283: static uint8_t Tetris_PlayerUnitBitsAreValid(const Tetris_Play
      +                          er *player);../Tetris/Tetris.c: 284: {;../Tetris/Tetris.c: 285:  return Tetris_CountUnit
      +                          Bits(player->unit->bits[player->rotation]) == Tetris_CountUnitBits(player->unitBits);
  4240  0D50  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  4241  0D51  3E04               	addlw	4
  4242  0D52  00F3               	movwf	Tetris_CountUnitBits@unitBits
  4243  0D53  3000               	movlw	0
  4244  0D54  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  4245  0D55  158A  2606  158A   	fcall	_Tetris_CountUnitBits
  4246  0D58  1283               	bcf	3,5	;RP0=0, select bank0
  4247  0D59  1303               	bcf	3,6	;RP1=0, select bank0
  4248  0D5A  00A5               	movwf	??_Tetris_PlayerUnitBitsAreValid
  4249  0D5B  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  4250  0D5C  3E02               	addlw	2
  4251  0D5D  0084               	movwf	4
  4252  0D5E  1383               	bcf	3,7	;select IRP bank0
  4253  0D5F  0800               	movf	0,w
  4254  0D60  00A6               	movwf	??_Tetris_PlayerUnitBitsAreValid+1
  4255  0D61  0A84               	incf	4,f
  4256  0D62  0800               	movf	0,w
  4257  0D63  00A7               	movwf	??_Tetris_PlayerUnitBitsAreValid+2
  4258  0D64  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  4259  0D65  3E0C               	addlw	12
  4260  0D66  0084               	movwf	4
  4261  0D67  0800               	movf	0,w
  4262  0D68  00A8               	movwf	??_Tetris_PlayerUnitBitsAreValid+3
  4263  0D69  3002               	movlw	2
  4264  0D6A                     u2515:	
  4265  0D6A  1003               	clrc
  4266  0D6B  0DA8               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,f
  4267  0D6C  3EFF               	addlw	-1
  4268  0D6D  1D03               	skipz
  4269  0D6E  2D6A               	goto	u2515
  4270  0D6F  1003               	clrc
  4271  0D70  0D28               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,w
  4272  0D71  3E02               	addlw	2
  4273  0D72  0726               	addwf	??_Tetris_PlayerUnitBitsAreValid+1,w
  4274  0D73  00F3               	movwf	Tetris_CountUnitBits@unitBits
  4275  0D74  0827               	movf	??_Tetris_PlayerUnitBitsAreValid+2,w
  4276  0D75  1803               	skipnc
  4277  0D76  3E01               	addlw	1
  4278  0D77  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  4279  0D78  158A  2606  158A   	fcall	_Tetris_CountUnitBits
  4280  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  4281  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  4282  0D7D  0625               	xorwf	??_Tetris_PlayerUnitBitsAreValid,w
  4283  0D7E  1D03               	btfss	3,2
  4284  0D7F  2D82               	goto	u2520
  4285  0D80  3001               	movlw	1
  4286  0D81  0008               	return
  4287  0D82                     u2520:	
  4288  0D82  3000               	movlw	0
  4289  0D83  0008               	return
  4290  0D84                     __end_of_Tetris_PlayerUnitBitsAreValid:	
  4291                           
  4292                           	psect	text14
  4293  0E06                     __ptext14:	
  4294 ;; *************** function _Tetris_CountUnitBits *****************
  4295 ;; Defined at:
  4296 ;;		line 247 in file "../Tetris/Tetris.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  unitBits        2    3[COMMON] PTR const unsigned int 
  4299 ;;		 -> tetrisGame.player(13), Tetris_units.bits(32), Tetris_units(238), main@tetrisGame(63), 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  j               1    3[BANK0 ] unsigned char 
  4302 ;;  mask            2    0[BANK0 ] unsigned int 
  4303 ;;  i               1    4[BANK0 ] unsigned char 
  4304 ;;  result          1    2[BANK0 ] unsigned char 
  4305 ;; Return value:  Size  Location     Type
  4306 ;;                  1    wreg      unsigned char 
  4307 ;; Registers used:
  4308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4309 ;; Tracked objects:
  4310 ;;		On entry : 0/0
  4311 ;;		On exit  : 0/0
  4312 ;;		Unchanged: 0/0
  4313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4314 ;;      Params:         2       0       0       0
  4315 ;;      Locals:         0       5       0       0
  4316 ;;      Temps:          5       0       0       0
  4317 ;;      Totals:         7       5       0       0
  4318 ;;Total ram usage:       12 bytes
  4319 ;; Hardware stack levels used:    2
  4320 ;; Hardware stack levels required when called:    1
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_Tetris_PlayerUnitBitsAreValid
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           
  4329                           ;psect for function _Tetris_CountUnitBits
  4330  0E06                     _Tetris_CountUnitBits:	
  4331                           
  4332                           ;../Tetris/Tetris.c: 247: static uint8_t Tetris_CountUnitBits(const uint16_t *unitBits);
      +                          ../Tetris/Tetris.c: 248: {;../Tetris/Tetris.c: 249:  uint8_t result = 0;
  4333                           
  4334                           ;incstack = 0
  4335                           ; Regs used in _Tetris_CountUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4336  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  4337  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  4338  0E08  01A2               	clrf	Tetris_CountUnitBits@result
  4339                           
  4340                           ;../Tetris/Tetris.c: 250:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4341  0E09  01A4               	clrf	Tetris_CountUnitBits@i
  4342  0E0A                     l2924:	
  4343                           
  4344                           ;../Tetris/Tetris.c: 251:  {;../Tetris/Tetris.c: 252:   uint16_t mask = 1;
  4345  0E0A  3001               	movlw	1
  4346  0E0B  00A0               	movwf	Tetris_CountUnitBits@mask
  4347  0E0C  3000               	movlw	0
  4348  0E0D  00A1               	movwf	Tetris_CountUnitBits@mask+1
  4349                           
  4350                           ;../Tetris/Tetris.c: 253:   for (uint8_t j = 0; j < TETRIS_TABLE_WIDTH; ++j)
  4351  0E0E  01A3               	clrf	Tetris_CountUnitBits@j
  4352  0E0F                     l2932:	
  4353                           
  4354                           ;../Tetris/Tetris.c: 254:   {;../Tetris/Tetris.c: 255:    if (unitBits[i] & mask)
  4355  0E0F  0824               	movf	Tetris_CountUnitBits@i,w
  4356  0E10  00F5               	movwf	??_Tetris_CountUnitBits
  4357  0E11  0775               	addwf	??_Tetris_CountUnitBits,w
  4358  0E12  0773               	addwf	Tetris_CountUnitBits@unitBits,w
  4359  0E13  0084               	movwf	4
  4360  0E14  0874               	movf	Tetris_CountUnitBits@unitBits+1,w
  4361  0E15  1803               	skipnc
  4362  0E16  0A74               	incf	Tetris_CountUnitBits@unitBits+1,w
  4363  0E17  00FF               	movwf	127
  4364  0E18  118A  2100  158A   	fcall	stringtab
  4365  0E1B  00F6               	movwf	??_Tetris_CountUnitBits+1
  4366  0E1C  118A  2100  158A   	fcall	stringtab
  4367  0E1F  00F7               	movwf	??_Tetris_CountUnitBits+2
  4368  0E20  0820               	movf	Tetris_CountUnitBits@mask,w
  4369  0E21  0576               	andwf	??_Tetris_CountUnitBits+1,w
  4370  0E22  00F8               	movwf	??_Tetris_CountUnitBits+3
  4371  0E23  0821               	movf	Tetris_CountUnitBits@mask+1,w
  4372  0E24  0577               	andwf	??_Tetris_CountUnitBits+2,w
  4373  0E25  00F9               	movwf	??_Tetris_CountUnitBits+4
  4374  0E26  0878               	movf	??_Tetris_CountUnitBits+3,w
  4375  0E27  0479               	iorwf	??_Tetris_CountUnitBits+4,w
  4376  0E28  1903               	btfsc	3,2
  4377  0E29  2E2E               	goto	l2936
  4378                           
  4379                           ;../Tetris/Tetris.c: 256:     ++result;
  4380  0E2A  3001               	movlw	1
  4381  0E2B  00F5               	movwf	??_Tetris_CountUnitBits
  4382  0E2C  0875               	movf	??_Tetris_CountUnitBits,w
  4383  0E2D  07A2               	addwf	Tetris_CountUnitBits@result,f
  4384  0E2E                     l2936:	
  4385                           
  4386                           ;../Tetris/Tetris.c: 257:    mask <<= 1;
  4387  0E2E  3001               	movlw	1
  4388  0E2F                     u2335:	
  4389  0E2F  1003               	clrc
  4390  0E30  0DA0               	rlf	Tetris_CountUnitBits@mask,f
  4391  0E31  0DA1               	rlf	Tetris_CountUnitBits@mask+1,f
  4392  0E32  3EFF               	addlw	-1
  4393  0E33  1D03               	skipz
  4394  0E34  2E2F               	goto	u2335
  4395                           
  4396                           ;../Tetris/Tetris.c: 258:   }
  4397  0E35  3001               	movlw	1
  4398  0E36  00F5               	movwf	??_Tetris_CountUnitBits
  4399  0E37  0875               	movf	??_Tetris_CountUnitBits,w
  4400  0E38  07A3               	addwf	Tetris_CountUnitBits@j,f
  4401  0E39  3010               	movlw	16
  4402  0E3A  0223               	subwf	Tetris_CountUnitBits@j,w
  4403  0E3B  1C03               	skipc
  4404  0E3C  2E0F               	goto	l2932
  4405                           
  4406                           ;../Tetris/Tetris.c: 259:  }
  4407  0E3D  3001               	movlw	1
  4408  0E3E  00F5               	movwf	??_Tetris_CountUnitBits
  4409  0E3F  0875               	movf	??_Tetris_CountUnitBits,w
  4410  0E40  07A4               	addwf	Tetris_CountUnitBits@i,f
  4411  0E41  3004               	movlw	4
  4412  0E42  0224               	subwf	Tetris_CountUnitBits@i,w
  4413  0E43  1C03               	skipc
  4414  0E44  2E0A               	goto	l2924
  4415                           
  4416                           ;../Tetris/Tetris.c: 260:  return result;
  4417  0E45  0822               	movf	Tetris_CountUnitBits@result,w
  4418  0E46  0008               	return
  4419  0E47                     __end_of_Tetris_CountUnitBits:	
  4420                           
  4421                           	psect	text15
  4422  0AC8                     __ptext15:	
  4423 ;; *************** function _Tetris_ResetGame *****************
  4424 ;; Defined at:
  4425 ;;		line 343 in file "../Tetris/Tetris.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  game            1    wreg     PTR struct .
  4428 ;;		 -> main@tetrisGame(63), 
  4429 ;;  playerUnit      2   34[BANK0 ] PTR const struct .
  4430 ;;		 -> Tetris_units(238), 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  game            1   36[BANK0 ] PTR struct .
  4433 ;;		 -> main@tetrisGame(63), 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4443 ;;      Params:         0       2       0       0
  4444 ;;      Locals:         0       1       0       0
  4445 ;;      Temps:          0       0       0       0
  4446 ;;      Totals:         0       3       0       0
  4447 ;;Total ram usage:        3 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    5
  4450 ;; This function calls:
  4451 ;;		_Tetris_ApplyPlayerToTable
  4452 ;;		_Tetris_ResetPlayer
  4453 ;;		_memset
  4454 ;; This function is called by:
  4455 ;;		_main
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           
  4460                           ;psect for function _Tetris_ResetGame
  4461  0AC8                     _Tetris_ResetGame:	
  4462                           
  4463                           ;incstack = 0
  4464                           ; Regs used in _Tetris_ResetGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4465                           ;Tetris_ResetGame@game stored from wreg
  4466  0AC8  1283               	bcf	3,5	;RP0=0, select bank0
  4467  0AC9  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0ACA  00C4               	movwf	Tetris_ResetGame@game
  4469                           
  4470                           ;../Tetris/Tetris.c: 343: void Tetris_ResetGame(Tetris_Game *game, const Tetris_Unit *pl
      +                          ayerUnit);../Tetris/Tetris.c: 344: {;../Tetris/Tetris.c: 345:  memset(game, 0, sizeof *g
      +                          ame);
  4471  0ACB  3000               	movlw	0
  4472  0ACC  00F3               	movwf	memset@c
  4473  0ACD  00F4               	movwf	memset@c+1
  4474  0ACE  303F               	movlw	63
  4475  0ACF  00F5               	movwf	memset@n
  4476  0AD0  3000               	movlw	0
  4477  0AD1  00F6               	movwf	memset@n+1
  4478  0AD2  0844               	movf	Tetris_ResetGame@game,w
  4479  0AD3  158A  2251  158A   	fcall	_memset
  4480                           
  4481                           ;../Tetris/Tetris.c: 346:  Tetris_ResetPlayer(&game->player, playerUnit);
  4482  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
  4483  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
  4484  0AD8  0842               	movf	Tetris_ResetGame@playerUnit,w
  4485  0AD9  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  4486  0ADA  0843               	movf	Tetris_ResetGame@playerUnit+1,w
  4487  0ADB  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  4488  0ADC  0844               	movf	Tetris_ResetGame@game,w
  4489  0ADD  3E30               	addlw	48
  4490  0ADE  158A  234C  158A   	fcall	_Tetris_ResetPlayer
  4491                           
  4492                           ;../Tetris/Tetris.c: 347:  Tetris_ApplyPlayerToTable(game);
  4493  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  4494  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  4495  0AE3  0844               	movf	Tetris_ResetGame@game,w
  4496  0AE4  118A  2096         	fcall	_Tetris_ApplyPlayerToTable
  4497  0AE6  0008               	return
  4498  0AE7                     __end_of_Tetris_ResetGame:	
  4499                           
  4500                           	psect	text16
  4501  0B4C                     __ptext16:	
  4502 ;; *************** function _Tetris_ResetPlayer *****************
  4503 ;; Defined at:
  4504 ;;		line 294 in file "../Tetris/Tetris.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;  player          1    wreg     PTR struct .
  4507 ;;		 -> main@tetrisGame(63), 
  4508 ;;  playerUnit      2   29[BANK0 ] PTR const struct .
  4509 ;;		 -> Tetris_units(238), 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  player          1   33[BANK0 ] PTR struct .
  4512 ;;		 -> main@tetrisGame(63), 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4522 ;;      Params:         0       2       0       0
  4523 ;;      Locals:         0       1       0       0
  4524 ;;      Temps:          0       2       0       0
  4525 ;;      Totals:         0       5       0       0
  4526 ;;Total ram usage:        5 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    4
  4529 ;; This function calls:
  4530 ;;		_Tetris_SetPlayerUnit
  4531 ;; This function is called by:
  4532 ;;		_Tetris_ResetGame
  4533 ;;		_Tetris_UpdateGame
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _Tetris_ResetPlayer
  4539  0B4C                     _Tetris_ResetPlayer:	
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _Tetris_ResetPlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4543                           ;Tetris_ResetPlayer@player stored from wreg
  4544  0B4C  1283               	bcf	3,5	;RP0=0, select bank0
  4545  0B4D  1303               	bcf	3,6	;RP1=0, select bank0
  4546  0B4E  00C1               	movwf	Tetris_ResetPlayer@player
  4547                           
  4548                           ;../Tetris/Tetris.c: 294: static void Tetris_ResetPlayer(Tetris_Player *player, const Te
      +                          tris_Unit *playerUnit);../Tetris/Tetris.c: 295: {;../Tetris/Tetris.c: 296:  player->posi
      +                          tion = Tetris_playerStartingPosition;
  4549  0B4F  3012               	movlw	low (_Tetris_playerStartingPosition| (0+32768))
  4550  0B50  0084               	movwf	4
  4551  0B51  3085               	movlw	high (_Tetris_playerStartingPosition| (0+32768))
  4552  0B52  00FF               	movwf	127
  4553  0B53  118A  2100  158A   	fcall	stringtab
  4554  0B56  00BF               	movwf	??_Tetris_ResetPlayer
  4555  0B57  118A  2100  158A   	fcall	stringtab
  4556  0B5A  00C0               	movwf	??_Tetris_ResetPlayer+1
  4557  0B5B  0841               	movf	Tetris_ResetPlayer@player,w
  4558  0B5C  0084               	movwf	4
  4559  0B5D  083F               	movf	??_Tetris_ResetPlayer,w
  4560  0B5E  1383               	bcf	3,7	;select IRP bank0
  4561  0B5F  0080               	movwf	0
  4562  0B60  0A84               	incf	4,f
  4563  0B61  0840               	movf	??_Tetris_ResetPlayer+1,w
  4564  0B62  0080               	movwf	0
  4565                           
  4566                           ;../Tetris/Tetris.c: 297:  player->rotation = 0;
  4567  0B63  0841               	movf	Tetris_ResetPlayer@player,w
  4568  0B64  3E0C               	addlw	12
  4569  0B65  0084               	movwf	4
  4570  0B66  0180               	clrf	0
  4571                           
  4572                           ;../Tetris/Tetris.c: 298:  Tetris_SetPlayerUnit(player, playerUnit);
  4573  0B67  083D               	movf	Tetris_ResetPlayer@playerUnit,w
  4574  0B68  00F8               	movwf	Tetris_SetPlayerUnit@unit
  4575  0B69  083E               	movf	Tetris_ResetPlayer@playerUnit+1,w
  4576  0B6A  00F9               	movwf	Tetris_SetPlayerUnit@unit+1
  4577  0B6B  0841               	movf	Tetris_ResetPlayer@player,w
  4578  0B6C  158A  21E8         	fcall	_Tetris_SetPlayerUnit
  4579  0B6E  0008               	return
  4580  0B6F                     __end_of_Tetris_ResetPlayer:	
  4581                           
  4582                           	psect	text17
  4583  09E8                     __ptext17:	
  4584 ;; *************** function _Tetris_SetPlayerUnit *****************
  4585 ;; Defined at:
  4586 ;;		line 288 in file "../Tetris/Tetris.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  player          1    wreg     PTR struct .
  4589 ;;		 -> main@tetrisGame(63), 
  4590 ;;  unit            2    8[COMMON] PTR const struct .
  4591 ;;		 -> Tetris_units(238), 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  player          1   10[BANK0 ] PTR struct .
  4594 ;;		 -> main@tetrisGame(63), 
  4595 ;; Return value:  Size  Location     Type
  4596 ;;                  1    wreg      void 
  4597 ;; Registers used:
  4598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4599 ;; Tracked objects:
  4600 ;;		On entry : 0/0
  4601 ;;		On exit  : 0/0
  4602 ;;		Unchanged: 0/0
  4603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4604 ;;      Params:         2       0       0       0
  4605 ;;      Locals:         0       1       0       0
  4606 ;;      Temps:          0       0       0       0
  4607 ;;      Totals:         2       1       0       0
  4608 ;;Total ram usage:        3 bytes
  4609 ;; Hardware stack levels used:    1
  4610 ;; Hardware stack levels required when called:    3
  4611 ;; This function calls:
  4612 ;;		_Tetris_UpdatePlayerUnitBits
  4613 ;; This function is called by:
  4614 ;;		_Tetris_ResetPlayer
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           
  4619                           ;psect for function _Tetris_SetPlayerUnit
  4620  09E8                     _Tetris_SetPlayerUnit:	
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _Tetris_SetPlayerUnit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4624                           ;Tetris_SetPlayerUnit@player stored from wreg
  4625  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  4626  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  4627  09EA  00AA               	movwf	Tetris_SetPlayerUnit@player
  4628                           
  4629                           ;../Tetris/Tetris.c: 288: static void Tetris_SetPlayerUnit(Tetris_Player *player, const 
      +                          Tetris_Unit *unit);../Tetris/Tetris.c: 289: {;../Tetris/Tetris.c: 290:  player->unit = u
      +                          nit;
  4630  09EB  082A               	movf	Tetris_SetPlayerUnit@player,w
  4631  09EC  3E02               	addlw	2
  4632  09ED  0084               	movwf	4
  4633  09EE  0878               	movf	Tetris_SetPlayerUnit@unit,w
  4634  09EF  1383               	bcf	3,7	;select IRP bank0
  4635  09F0  0080               	movwf	0
  4636  09F1  0A84               	incf	4,f
  4637  09F2  0879               	movf	Tetris_SetPlayerUnit@unit+1,w
  4638  09F3  0080               	movwf	0
  4639                           
  4640                           ;../Tetris/Tetris.c: 291:  Tetris_UpdatePlayerUnitBits(player);
  4641  09F4  082A               	movf	Tetris_SetPlayerUnit@player,w
  4642  09F5  118A  2604         	fcall	_Tetris_UpdatePlayerUnitBits
  4643  09F7  0008               	return
  4644  09F8                     __end_of_Tetris_SetPlayerUnit:	
  4645                           
  4646                           	psect	text18
  4647  0604                     __ptext18:	
  4648 ;; *************** function _Tetris_UpdatePlayerUnitBits *****************
  4649 ;; Defined at:
  4650 ;;		line 263 in file "../Tetris/Tetris.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  player          1    wreg     PTR struct .
  4653 ;;		 -> main@tetrisGame(63), 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  player          1    7[COMMON] PTR struct .
  4656 ;;		 -> main@tetrisGame(63), 
  4657 ;;  i               1    4[COMMON] unsigned char 
  4658 ;;  i               1    3[COMMON] unsigned char 
  4659 ;;  i               1    5[COMMON] unsigned char 
  4660 ;;  shift           1    6[COMMON] char 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4670 ;;      Params:         0       0       0       0
  4671 ;;      Locals:         5       0       0       0
  4672 ;;      Temps:          0      10       0       0
  4673 ;;      Totals:         5      10       0       0
  4674 ;;Total ram usage:       15 bytes
  4675 ;; Hardware stack levels used:    2
  4676 ;; Hardware stack levels required when called:    1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_Tetris_SetPlayerUnit
  4681 ;;		_Tetris_RotatePlayer
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           
  4686                           ;psect for function _Tetris_UpdatePlayerUnitBits
  4687  0604                     _Tetris_UpdatePlayerUnitBits:	
  4688                           
  4689                           ;incstack = 0
  4690                           ; Regs used in _Tetris_UpdatePlayerUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h]
  4691                           ;Tetris_UpdatePlayerUnitBits@player stored from wreg
  4692  0604  00F7               	movwf	Tetris_UpdatePlayerUnitBits@player
  4693                           
  4694                           ;../Tetris/Tetris.c: 263: static void Tetris_UpdatePlayerUnitBits(Tetris_Player *player)
      +                          ;../Tetris/Tetris.c: 264: {;../Tetris/Tetris.c: 265:  for (uint8_t i = 0; i < TETRIS_UNI
      +                          T_HEIGHT; ++i)
  4695  0605  01F5               	clrf	Tetris_UpdatePlayerUnitBits@i
  4696  0606                     l2868:	
  4697                           
  4698                           ;../Tetris/Tetris.c: 266:   player->unitBits[i] = player->unit->bits[player->rotation][i
      +                          ];
  4699  0606  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4700  0607  3E02               	addlw	2
  4701  0608  0084               	movwf	4
  4702  0609  1383               	bcf	3,7	;select IRP bank0
  4703  060A  0800               	movf	0,w
  4704  060B  1283               	bcf	3,5	;RP0=0, select bank0
  4705  060C  1303               	bcf	3,6	;RP1=0, select bank0
  4706  060D  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4707  060E  0A84               	incf	4,f
  4708  060F  0800               	movf	0,w
  4709  0610  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4710  0611  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4711  0612  3E0C               	addlw	12
  4712  0613  0084               	movwf	4
  4713  0614  0800               	movf	0,w
  4714  0615  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  4715  0616  3002               	movlw	2
  4716  0617                     u2205:	
  4717  0617  1003               	clrc
  4718  0618  0DA2               	rlf	??_Tetris_UpdatePlayerUnitBits+2,f
  4719  0619  3EFF               	addlw	-1
  4720  061A  1D03               	skipz
  4721  061B  2E17               	goto	u2205
  4722  061C  1003               	clrc
  4723  061D  0D22               	rlf	??_Tetris_UpdatePlayerUnitBits+2,w
  4724  061E  3E02               	addlw	2
  4725  061F  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4726  0620  00A3               	movwf	??_Tetris_UpdatePlayerUnitBits+3
  4727  0621  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4728  0622  1803               	skipnc
  4729  0623  3E01               	addlw	1
  4730  0624  00A4               	movwf	??_Tetris_UpdatePlayerUnitBits+4
  4731  0625  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  4732  0626  00A5               	movwf	??_Tetris_UpdatePlayerUnitBits+5
  4733  0627  0725               	addwf	??_Tetris_UpdatePlayerUnitBits+5,w
  4734  0628  0723               	addwf	??_Tetris_UpdatePlayerUnitBits+3,w
  4735  0629  0084               	movwf	4
  4736  062A  0824               	movf	??_Tetris_UpdatePlayerUnitBits+4,w
  4737  062B  1803               	skipnc
  4738  062C  0A24               	incf	??_Tetris_UpdatePlayerUnitBits+4,w
  4739  062D  00FF               	movwf	127
  4740  062E  118A  2100  118A   	fcall	stringtab
  4741  0631  00A6               	movwf	??_Tetris_UpdatePlayerUnitBits+6
  4742  0632  118A  2100  118A   	fcall	stringtab
  4743  0635  00A7               	movwf	??_Tetris_UpdatePlayerUnitBits+7
  4744  0636  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  4745  0637  00A8               	movwf	??_Tetris_UpdatePlayerUnitBits+8
  4746  0638  0728               	addwf	??_Tetris_UpdatePlayerUnitBits+8,w
  4747  0639  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4748  063A  00A9               	movwf	??_Tetris_UpdatePlayerUnitBits+9
  4749  063B  0829               	movf	??_Tetris_UpdatePlayerUnitBits+9,w
  4750  063C  3E04               	addlw	4
  4751  063D  0084               	movwf	4
  4752  063E  0826               	movf	??_Tetris_UpdatePlayerUnitBits+6,w
  4753  063F  1383               	bcf	3,7	;select IRP bank0
  4754  0640  0080               	movwf	0
  4755  0641  0A84               	incf	4,f
  4756  0642  0827               	movf	??_Tetris_UpdatePlayerUnitBits+7,w
  4757  0643  0080               	movwf	0
  4758  0644  3001               	movlw	1
  4759  0645  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4760  0646  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4761  0647  07F5               	addwf	Tetris_UpdatePlayerUnitBits@i,f
  4762  0648  3004               	movlw	4
  4763  0649  0275               	subwf	Tetris_UpdatePlayerUnitBits@i,w
  4764  064A  1C03               	skipc
  4765  064B  2E06               	goto	l2868
  4766                           
  4767                           ;../Tetris/Tetris.c: 268:  int8_t shift = 8 - player->position.x + Tetris_unitPivot.x;
  4768  064C  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4769  064D  0084               	movwf	4
  4770  064E  0800               	movf	0,w
  4771  064F  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4772  0650  3014               	movlw	low (_Tetris_unitPivot| (0+32768))
  4773  0651  0084               	movwf	4
  4774  0652  3085               	movlw	high (_Tetris_unitPivot| (0+32768))
  4775  0653  00FF               	movwf	127
  4776  0654  118A  2100  118A   	fcall	stringtab
  4777  0657  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4778  0658  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4779  0659  0221               	subwf	??_Tetris_UpdatePlayerUnitBits+1,w
  4780  065A  3E08               	addlw	8
  4781  065B  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  4782  065C  0822               	movf	??_Tetris_UpdatePlayerUnitBits+2,w
  4783  065D  00F6               	movwf	Tetris_UpdatePlayerUnitBits@shift
  4784                           
  4785                           ;../Tetris/Tetris.c: 270:  if (shift > 0)
  4786  065E  0876               	movf	Tetris_UpdatePlayerUnitBits@shift,w
  4787  065F  3A80               	xorlw	128
  4788  0660  3E7F               	addlw	-129
  4789  0661  1C03               	skipc
  4790  0662  2E80               	goto	l2890
  4791                           
  4792                           ;../Tetris/Tetris.c: 271:  {;../Tetris/Tetris.c: 272:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  4793  0663  01F3               	clrf	Tetris_UpdatePlayerUnitBits@i_332
  4794  0664                     l2884:	
  4795                           
  4796                           ;../Tetris/Tetris.c: 273:    player->unitBits[i] <<= shift;
  4797  0664  0873               	movf	Tetris_UpdatePlayerUnitBits@i_332,w
  4798  0665  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4799  0666  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4800  0667  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4801  0668  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4802  0669  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4803  066A  3E04               	addlw	4
  4804  066B  0084               	movwf	4
  4805  066C  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  4806  066D  1383               	bcf	3,7	;select IRP bank0
  4807  066E  2E74               	goto	u2230
  4808  066F                     u2235:	
  4809  066F  1003               	clrc
  4810  0670  0D80               	rlf	0,f
  4811  0671  0A84               	incf	4,f
  4812  0672  0D80               	rlf	0,f
  4813  0673  0384               	decf	4,f
  4814  0674                     u2230:	
  4815  0674  3EFF               	addlw	-1
  4816  0675  1D03               	skipz
  4817  0676  2E6F               	goto	u2235
  4818  0677  3001               	movlw	1
  4819  0678  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4820  0679  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4821  067A  07F3               	addwf	Tetris_UpdatePlayerUnitBits@i_332,f
  4822  067B  3004               	movlw	4
  4823  067C  0273               	subwf	Tetris_UpdatePlayerUnitBits@i_332,w
  4824  067D  1803               	btfsc	3,0
  4825  067E  0008               	return
  4826  067F  2E64               	goto	l2884
  4827  0680                     l2890:	
  4828                           
  4829                           ;../Tetris/Tetris.c: 276:  {;../Tetris/Tetris.c: 277:   shift = -shift;
  4830  0680  09F6               	comf	Tetris_UpdatePlayerUnitBits@shift,f
  4831  0681  0AF6               	incf	Tetris_UpdatePlayerUnitBits@shift,f
  4832                           
  4833                           ;../Tetris/Tetris.c: 278:   for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4834  0682  01F4               	clrf	Tetris_UpdatePlayerUnitBits@i_333
  4835  0683                     l2898:	
  4836                           
  4837                           ;../Tetris/Tetris.c: 279:    player->unitBits[i] >>= shift;
  4838  0683  0874               	movf	Tetris_UpdatePlayerUnitBits@i_333,w
  4839  0684  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4840  0685  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4841  0686  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4842  0687  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4843  0688  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4844  0689  3E04               	addlw	4
  4845  068A  0084               	movwf	4
  4846  068B  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  4847  068C  1383               	bcf	3,7	;select IRP bank0
  4848  068D  2E93               	goto	u2250
  4849  068E                     u2255:	
  4850  068E  0A84               	incf	4,f
  4851  068F  1003               	clrc
  4852  0690  0C80               	rrf	0,f
  4853  0691  0384               	decf	4,f
  4854  0692  0C80               	rrf	0,f
  4855  0693                     u2250:	
  4856  0693  3EFF               	addlw	-1
  4857  0694  1D03               	skipz
  4858  0695  2E8E               	goto	u2255
  4859  0696  3001               	movlw	1
  4860  0697  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4861  0698  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4862  0699  07F4               	addwf	Tetris_UpdatePlayerUnitBits@i_333,f
  4863  069A  3004               	movlw	4
  4864  069B  0274               	subwf	Tetris_UpdatePlayerUnitBits@i_333,w
  4865  069C  1803               	btfsc	3,0
  4866  069D  0008               	return
  4867  069E  2E83               	goto	l2898
  4868  069F                     __end_of_Tetris_UpdatePlayerUnitBits:	
  4869                           
  4870                           	psect	text19
  4871  079E                     __ptext19:	
  4872 ;; *************** function _Tetris_MovePlayerRight *****************
  4873 ;; Defined at:
  4874 ;;		line 424 in file "../Tetris/Tetris.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  game            1    wreg     PTR struct .
  4877 ;;		 -> main@tetrisGame(63), 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  game            1   16[BANK0 ] PTR struct .
  4880 ;;		 -> main@tetrisGame(63), 
  4881 ;;  i               1   15[BANK0 ] unsigned char 
  4882 ;;  i               1   14[BANK0 ] unsigned char 
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      void 
  4885 ;; Registers used:
  4886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4892 ;;      Params:         0       0       0       0
  4893 ;;      Locals:         0       3       0       0
  4894 ;;      Temps:          0       2       0       0
  4895 ;;      Totals:         0       5       0       0
  4896 ;;Total ram usage:        5 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    4
  4899 ;; This function calls:
  4900 ;;		_Tetris_ApplyPlayerToTable
  4901 ;;		_Tetris_PlayerOverlapsEnvironment
  4902 ;;		_Tetris_PlayerTouchingRightBound
  4903 ;;		_Tetris_RemovePlayerFromTable
  4904 ;; This function is called by:
  4905 ;;		_main
  4906 ;; This function uses a non-reentrant model
  4907 ;;
  4908                           
  4909                           
  4910                           ;psect for function _Tetris_MovePlayerRight
  4911  079E                     _Tetris_MovePlayerRight:	
  4912                           
  4913                           ;incstack = 0
  4914                           ; Regs used in _Tetris_MovePlayerRight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  4915                           ;Tetris_MovePlayerRight@game stored from wreg
  4916  079E  1283               	bcf	3,5	;RP0=0, select bank0
  4917  079F  1303               	bcf	3,6	;RP1=0, select bank0
  4918  07A0  00B0               	movwf	Tetris_MovePlayerRight@game
  4919                           
  4920                           ;../Tetris/Tetris.c: 424: void Tetris_MovePlayerRight(Tetris_Game *game);../Tetris/Tetri
      +                          s.c: 425: {;../Tetris/Tetris.c: 426:  if (Tetris_PlayerTouchingRightBound(&game->player)
      +                          )
  4921  07A1  0830               	movf	Tetris_MovePlayerRight@game,w
  4922  07A2  3E30               	addlw	48
  4923  07A3  158A  228B  118A   	fcall	_Tetris_PlayerTouchingRightBound
  4924  07A6  3A00               	xorlw	0
  4925  07A7  1D03               	btfss	3,2
  4926  07A8  0008               	return
  4927                           
  4928                           ;../Tetris/Tetris.c: 429:  Tetris_RemovePlayerFromTable(game);
  4929  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  4930  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  4931  07AB  0830               	movf	Tetris_MovePlayerRight@game,w
  4932  07AC  158A  2517  118A   	fcall	_Tetris_RemovePlayerFromTable
  4933                           
  4934                           ;../Tetris/Tetris.c: 431:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4935  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  4936  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  4937  07B1  01AE               	clrf	Tetris_MovePlayerRight@i
  4938  07B2                     l2642:	
  4939                           
  4940                           ;../Tetris/Tetris.c: 432:   game->player.unitBits[i] >>= 1;
  4941  07B2  082E               	movf	Tetris_MovePlayerRight@i,w
  4942  07B3  00AC               	movwf	??_Tetris_MovePlayerRight
  4943  07B4  072C               	addwf	??_Tetris_MovePlayerRight,w
  4944  07B5  0730               	addwf	Tetris_MovePlayerRight@game,w
  4945  07B6  00AD               	movwf	??_Tetris_MovePlayerRight+1
  4946  07B7  082D               	movf	??_Tetris_MovePlayerRight+1,w
  4947  07B8  3E34               	addlw	52
  4948  07B9  0084               	movwf	4
  4949  07BA  0A84               	incf	4,f
  4950  07BB  1003               	clrc
  4951  07BC  1383               	bcf	3,7	;select IRP bank0
  4952  07BD  0C80               	rrf	0,f
  4953  07BE  0384               	decf	4,f
  4954  07BF  0C80               	rrf	0,f
  4955  07C0  3001               	movlw	1
  4956  07C1  00AC               	movwf	??_Tetris_MovePlayerRight
  4957  07C2  082C               	movf	??_Tetris_MovePlayerRight,w
  4958  07C3  07AE               	addwf	Tetris_MovePlayerRight@i,f
  4959  07C4  3004               	movlw	4
  4960  07C5  022E               	subwf	Tetris_MovePlayerRight@i,w
  4961  07C6  1C03               	skipc
  4962  07C7  2FB2               	goto	l2642
  4963                           
  4964                           ;../Tetris/Tetris.c: 434:  if (Tetris_PlayerOverlapsEnvironment(game))
  4965  07C8  0830               	movf	Tetris_MovePlayerRight@game,w
  4966  07C9  158A  25C5  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  4967  07CC  3A00               	xorlw	0
  4968  07CD  1903               	skipnz
  4969  07CE  2FE9               	goto	l2662
  4970                           
  4971                           ;../Tetris/Tetris.c: 435:  {;../Tetris/Tetris.c: 436:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  4972  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  4973  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  4974  07D1  01AF               	clrf	Tetris_MovePlayerRight@i_461
  4975  07D2                     l2656:	
  4976                           
  4977                           ;../Tetris/Tetris.c: 437:    game->player.unitBits[i] <<= 1;
  4978  07D2  082F               	movf	Tetris_MovePlayerRight@i_461,w
  4979  07D3  00AC               	movwf	??_Tetris_MovePlayerRight
  4980  07D4  072C               	addwf	??_Tetris_MovePlayerRight,w
  4981  07D5  0730               	addwf	Tetris_MovePlayerRight@game,w
  4982  07D6  00AD               	movwf	??_Tetris_MovePlayerRight+1
  4983  07D7  082D               	movf	??_Tetris_MovePlayerRight+1,w
  4984  07D8  3E34               	addlw	52
  4985  07D9  0084               	movwf	4
  4986  07DA  1003               	clrc
  4987  07DB  1383               	bcf	3,7	;select IRP bank0
  4988  07DC  0D80               	rlf	0,f
  4989  07DD  0A84               	incf	4,f
  4990  07DE  0D80               	rlf	0,f
  4991  07DF  0384               	decf	4,f
  4992  07E0  3001               	movlw	1
  4993  07E1  00AC               	movwf	??_Tetris_MovePlayerRight
  4994  07E2  082C               	movf	??_Tetris_MovePlayerRight,w
  4995  07E3  07AF               	addwf	Tetris_MovePlayerRight@i_461,f
  4996  07E4  3004               	movlw	4
  4997  07E5  022F               	subwf	Tetris_MovePlayerRight@i_461,w
  4998  07E6  1803               	btfsc	3,0
  4999  07E7  2FF3               	goto	l2664
  5000  07E8  2FD2               	goto	l2656
  5001  07E9                     l2662:	
  5002                           
  5003                           ;../Tetris/Tetris.c: 440:  {;../Tetris/Tetris.c: 441:   ++game->player.position.x;
  5004  07E9  3001               	movlw	1
  5005  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  5006  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  5007  07EC  00AC               	movwf	??_Tetris_MovePlayerRight
  5008  07ED  0830               	movf	Tetris_MovePlayerRight@game,w
  5009  07EE  3E30               	addlw	48
  5010  07EF  0084               	movwf	4
  5011  07F0  082C               	movf	??_Tetris_MovePlayerRight,w
  5012  07F1  1383               	bcf	3,7	;select IRP bank0
  5013  07F2  0780               	addwf	0,f
  5014  07F3                     l2664:	
  5015                           
  5016                           ;../Tetris/Tetris.c: 444:  Tetris_ApplyPlayerToTable(game);
  5017  07F3  0830               	movf	Tetris_MovePlayerRight@game,w
  5018  07F4  118A  2096         	fcall	_Tetris_ApplyPlayerToTable
  5019  07F6  0008               	return
  5020  07F7                     __end_of_Tetris_MovePlayerRight:	
  5021                           
  5022                           	psect	text20
  5023  0A8B                     __ptext20:	
  5024 ;; *************** function _Tetris_PlayerTouchingRightBound *****************
  5025 ;; Defined at:
  5026 ;;		line 208 in file "../Tetris/Tetris.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  player          1    wreg     PTR struct .
  5029 ;;		 -> main@tetrisGame(63), 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  player          1    7[COMMON] PTR struct .
  5032 ;;		 -> main@tetrisGame(63), 
  5033 ;;  i               1    8[COMMON] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  1    wreg      unsigned char 
  5036 ;; Registers used:
  5037 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5043 ;;      Params:         0       0       0       0
  5044 ;;      Locals:         2       0       0       0
  5045 ;;      Temps:          4       0       0       0
  5046 ;;      Totals:         6       0       0       0
  5047 ;;Total ram usage:        6 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    1
  5050 ;; This function calls:
  5051 ;;		Nothing
  5052 ;; This function is called by:
  5053 ;;		_Tetris_MovePlayerRight
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           
  5058                           ;psect for function _Tetris_PlayerTouchingRightBound
  5059  0A8B                     _Tetris_PlayerTouchingRightBound:	
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in _Tetris_PlayerTouchingRightBound: [wreg-fsr0h+status,2+status,0]
  5063                           ;Tetris_PlayerTouchingRightBound@player stored from wreg
  5064  0A8B  00F7               	movwf	Tetris_PlayerTouchingRightBound@player
  5065                           
  5066                           ;../Tetris/Tetris.c: 208: static uint8_t Tetris_PlayerTouchingRightBound(Tetris_Player *
      +                          player);../Tetris/Tetris.c: 209: {;../Tetris/Tetris.c: 210:  for (uint8_t i = 0; i < TET
      +                          RIS_UNIT_HEIGHT; ++i)
  5067  0A8C  01F8               	clrf	Tetris_PlayerTouchingRightBound@i
  5068  0A8D                     l2342:	
  5069                           
  5070                           ;../Tetris/Tetris.c: 211:  {;../Tetris/Tetris.c: 212:   if (player->unitBits[i] & 0x0001
      +                          )
  5071  0A8D  0878               	movf	Tetris_PlayerTouchingRightBound@i,w
  5072  0A8E  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  5073  0A8F  0773               	addwf	??_Tetris_PlayerTouchingRightBound,w
  5074  0A90  0777               	addwf	Tetris_PlayerTouchingRightBound@player,w
  5075  0A91  00F4               	movwf	??_Tetris_PlayerTouchingRightBound+1
  5076  0A92  0874               	movf	??_Tetris_PlayerTouchingRightBound+1,w
  5077  0A93  3E04               	addlw	4
  5078  0A94  0084               	movwf	4
  5079  0A95  1383               	bcf	3,7	;select IRP bank0
  5080  0A96  0800               	movf	0,w
  5081  0A97  00F5               	movwf	??_Tetris_PlayerTouchingRightBound+2
  5082  0A98  0A84               	incf	4,f
  5083  0A99  0800               	movf	0,w
  5084  0A9A  00F6               	movwf	??_Tetris_PlayerTouchingRightBound+3
  5085  0A9B  1C75               	btfss	??_Tetris_PlayerTouchingRightBound+2,0
  5086  0A9C  2A9F               	goto	l2348
  5087                           
  5088                           ;../Tetris/Tetris.c: 213:    return 1;
  5089  0A9D  3001               	movlw	1
  5090  0A9E  0008               	return
  5091  0A9F                     l2348:	
  5092                           
  5093                           ;../Tetris/Tetris.c: 214:  }
  5094  0A9F  3001               	movlw	1
  5095  0AA0  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  5096  0AA1  0873               	movf	??_Tetris_PlayerTouchingRightBound,w
  5097  0AA2  07F8               	addwf	Tetris_PlayerTouchingRightBound@i,f
  5098  0AA3  3004               	movlw	4
  5099  0AA4  0278               	subwf	Tetris_PlayerTouchingRightBound@i,w
  5100  0AA5  1C03               	skipc
  5101  0AA6  2A8D               	goto	l2342
  5102                           
  5103                           ;../Tetris/Tetris.c: 216:  return 0;
  5104  0AA7  3000               	movlw	0
  5105  0AA8  0008               	return
  5106  0AA9                     __end_of_Tetris_PlayerTouchingRightBound:	
  5107                           
  5108                           	psect	text21
  5109  0FA9                     __ptext21:	
  5110 ;; *************** function _Tetris_MovePlayerLeft *****************
  5111 ;; Defined at:
  5112 ;;		line 401 in file "../Tetris/Tetris.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  game            1    wreg     PTR struct .
  5115 ;;		 -> main@tetrisGame(63), 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  game            1   16[BANK0 ] PTR struct .
  5118 ;;		 -> main@tetrisGame(63), 
  5119 ;;  i               1   15[BANK0 ] unsigned char 
  5120 ;;  i               1   14[BANK0 ] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  1    wreg      void 
  5123 ;; Registers used:
  5124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5130 ;;      Params:         0       0       0       0
  5131 ;;      Locals:         0       3       0       0
  5132 ;;      Temps:          0       2       0       0
  5133 ;;      Totals:         0       5       0       0
  5134 ;;Total ram usage:        5 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    4
  5137 ;; This function calls:
  5138 ;;		_Tetris_ApplyPlayerToTable
  5139 ;;		_Tetris_PlayerOverlapsEnvironment
  5140 ;;		_Tetris_PlayerTouchingLeftBound
  5141 ;;		_Tetris_RemovePlayerFromTable
  5142 ;; This function is called by:
  5143 ;;		_main
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _Tetris_MovePlayerLeft
  5149  0FA9                     _Tetris_MovePlayerLeft:	
  5150                           
  5151                           ;incstack = 0
  5152                           ; Regs used in _Tetris_MovePlayerLeft: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5153                           ;Tetris_MovePlayerLeft@game stored from wreg
  5154  0FA9  1283               	bcf	3,5	;RP0=0, select bank0
  5155  0FAA  1303               	bcf	3,6	;RP1=0, select bank0
  5156  0FAB  00B0               	movwf	Tetris_MovePlayerLeft@game
  5157                           
  5158                           ;../Tetris/Tetris.c: 401: void Tetris_MovePlayerLeft(Tetris_Game *game);../Tetris/Tetris
      +                          .c: 402: {;../Tetris/Tetris.c: 403:  if (Tetris_PlayerTouchingLeftBound(&game->player))
  5159  0FAC  0830               	movf	Tetris_MovePlayerLeft@game,w
  5160  0FAD  3E30               	addlw	48
  5161  0FAE  158A  226D  158A   	fcall	_Tetris_PlayerTouchingLeftBound
  5162  0FB1  3A00               	xorlw	0
  5163  0FB2  1D03               	btfss	3,2
  5164  0FB3  0008               	return
  5165                           
  5166                           ;../Tetris/Tetris.c: 406:  Tetris_RemovePlayerFromTable(game);
  5167  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  5168  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  5169  0FB6  0830               	movf	Tetris_MovePlayerLeft@game,w
  5170  0FB7  158A  2517  158A   	fcall	_Tetris_RemovePlayerFromTable
  5171                           
  5172                           ;../Tetris/Tetris.c: 408:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5173  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  5174  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  5175  0FBC  01AE               	clrf	Tetris_MovePlayerLeft@i
  5176  0FBD                     l2606:	
  5177                           
  5178                           ;../Tetris/Tetris.c: 409:   game->player.unitBits[i] <<= 1;
  5179  0FBD  082E               	movf	Tetris_MovePlayerLeft@i,w
  5180  0FBE  00AC               	movwf	??_Tetris_MovePlayerLeft
  5181  0FBF  072C               	addwf	??_Tetris_MovePlayerLeft,w
  5182  0FC0  0730               	addwf	Tetris_MovePlayerLeft@game,w
  5183  0FC1  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  5184  0FC2  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  5185  0FC3  3E34               	addlw	52
  5186  0FC4  0084               	movwf	4
  5187  0FC5  1003               	clrc
  5188  0FC6  1383               	bcf	3,7	;select IRP bank0
  5189  0FC7  0D80               	rlf	0,f
  5190  0FC8  0A84               	incf	4,f
  5191  0FC9  0D80               	rlf	0,f
  5192  0FCA  0384               	decf	4,f
  5193  0FCB  3001               	movlw	1
  5194  0FCC  00AC               	movwf	??_Tetris_MovePlayerLeft
  5195  0FCD  082C               	movf	??_Tetris_MovePlayerLeft,w
  5196  0FCE  07AE               	addwf	Tetris_MovePlayerLeft@i,f
  5197  0FCF  3004               	movlw	4
  5198  0FD0  022E               	subwf	Tetris_MovePlayerLeft@i,w
  5199  0FD1  1C03               	skipc
  5200  0FD2  2FBD               	goto	l2606
  5201                           
  5202                           ;../Tetris/Tetris.c: 411:  if (Tetris_PlayerOverlapsEnvironment(game))
  5203  0FD3  0830               	movf	Tetris_MovePlayerLeft@game,w
  5204  0FD4  158A  25C5  158A   	fcall	_Tetris_PlayerOverlapsEnvironment
  5205  0FD7  3A00               	xorlw	0
  5206  0FD8  1903               	skipnz
  5207  0FD9  2FF4               	goto	l2626
  5208                           
  5209                           ;../Tetris/Tetris.c: 412:  {;../Tetris/Tetris.c: 413:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  5210  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  5211  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  5212  0FDC  01AF               	clrf	Tetris_MovePlayerLeft@i_447
  5213  0FDD                     l2620:	
  5214                           
  5215                           ;../Tetris/Tetris.c: 414:    game->player.unitBits[i] >>= 1;
  5216  0FDD  082F               	movf	Tetris_MovePlayerLeft@i_447,w
  5217  0FDE  00AC               	movwf	??_Tetris_MovePlayerLeft
  5218  0FDF  072C               	addwf	??_Tetris_MovePlayerLeft,w
  5219  0FE0  0730               	addwf	Tetris_MovePlayerLeft@game,w
  5220  0FE1  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  5221  0FE2  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  5222  0FE3  3E34               	addlw	52
  5223  0FE4  0084               	movwf	4
  5224  0FE5  0A84               	incf	4,f
  5225  0FE6  1003               	clrc
  5226  0FE7  1383               	bcf	3,7	;select IRP bank0
  5227  0FE8  0C80               	rrf	0,f
  5228  0FE9  0384               	decf	4,f
  5229  0FEA  0C80               	rrf	0,f
  5230  0FEB  3001               	movlw	1
  5231  0FEC  00AC               	movwf	??_Tetris_MovePlayerLeft
  5232  0FED  082C               	movf	??_Tetris_MovePlayerLeft,w
  5233  0FEE  07AF               	addwf	Tetris_MovePlayerLeft@i_447,f
  5234  0FEF  3004               	movlw	4
  5235  0FF0  022F               	subwf	Tetris_MovePlayerLeft@i_447,w
  5236  0FF1  1803               	btfsc	3,0
  5237  0FF2  2FFC               	goto	l2628
  5238  0FF3  2FDD               	goto	l2620
  5239  0FF4                     l2626:	
  5240                           
  5241                           ;../Tetris/Tetris.c: 417:  {;../Tetris/Tetris.c: 418:   --game->player.position.x;
  5242  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  5243  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  5244  0FF6  0830               	movf	Tetris_MovePlayerLeft@game,w
  5245  0FF7  3E30               	addlw	48
  5246  0FF8  0084               	movwf	4
  5247  0FF9  3001               	movlw	1
  5248  0FFA  1383               	bcf	3,7	;select IRP bank0
  5249  0FFB  0280               	subwf	0,f
  5250  0FFC                     l2628:	
  5251                           
  5252                           ;../Tetris/Tetris.c: 421:  Tetris_ApplyPlayerToTable(game);
  5253  0FFC  0830               	movf	Tetris_MovePlayerLeft@game,w
  5254  0FFD  118A  2096         	fcall	_Tetris_ApplyPlayerToTable
  5255  0FFF  0008               	return
  5256  1000                     __end_of_Tetris_MovePlayerLeft:	
  5257                           
  5258                           	psect	text22
  5259  0D17                     __ptext22:	
  5260 ;; *************** function _Tetris_RemovePlayerFromTable *****************
  5261 ;; Defined at:
  5262 ;;		line 219 in file "../Tetris/Tetris.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  game            1    wreg     PTR struct .
  5265 ;;		 -> main@tetrisGame(63), 
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;  game            1    7[COMMON] PTR struct .
  5268 ;;		 -> main@tetrisGame(63), 
  5269 ;;  i               1    8[COMMON] unsigned char 
  5270 ;;  start           1    6[COMMON] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  1    wreg      void 
  5273 ;; Registers used:
  5274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5280 ;;      Params:         0       0       0       0
  5281 ;;      Locals:         3       0       0       0
  5282 ;;      Temps:          0       8       0       0
  5283 ;;      Totals:         3       8       0       0
  5284 ;;Total ram usage:       11 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    3
  5287 ;; This function calls:
  5288 ;;		_Tetris_PlayerTopmostY
  5289 ;; This function is called by:
  5290 ;;		_Tetris_MovePlayerDown
  5291 ;;		_Tetris_MovePlayerLeft
  5292 ;;		_Tetris_MovePlayerRight
  5293 ;;		_Tetris_RotatePlayer
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _Tetris_RemovePlayerFromTable
  5299  0D17                     _Tetris_RemovePlayerFromTable:	
  5300                           
  5301                           ;incstack = 0
  5302                           ; Regs used in _Tetris_RemovePlayerFromTable: [wreg-fsr0h+status,2+status,0+btemp+1+pcla
      +                          th+cstack]
  5303                           ;Tetris_RemovePlayerFromTable@game stored from wreg
  5304  0D17  00F7               	movwf	Tetris_RemovePlayerFromTable@game
  5305                           
  5306                           ;../Tetris/Tetris.c: 219: static void Tetris_RemovePlayerFromTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 220: {;../Tetris/Tetris.c: 221:  uint8_t start = Tetris_PlayerTopmostY
      +                          (&game->player);
  5307  0D18  0877               	movf	Tetris_RemovePlayerFromTable@game,w
  5308  0D19  3E30               	addlw	48
  5309  0D1A  158A  21F8  158A   	fcall	_Tetris_PlayerTopmostY
  5310  0D1D  1283               	bcf	3,5	;RP0=0, select bank0
  5311  0D1E  1303               	bcf	3,6	;RP1=0, select bank0
  5312  0D1F  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  5313  0D20  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  5314  0D21  00F6               	movwf	Tetris_RemovePlayerFromTable@start
  5315                           
  5316                           ;../Tetris/Tetris.c: 222:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5317  0D22  01F8               	clrf	Tetris_RemovePlayerFromTable@i
  5318  0D23                     l2104:	
  5319                           
  5320                           ;../Tetris/Tetris.c: 223:  {;../Tetris/Tetris.c: 224:   game->table[start + i] &= ~game-
      +                          >player.unitBits[i];
  5321  0D23  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  5322  0D24  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  5323  0D25  0720               	addwf	??_Tetris_RemovePlayerFromTable,w
  5324  0D26  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  5325  0D27  00A1               	movwf	??_Tetris_RemovePlayerFromTable+1
  5326  0D28  0821               	movf	??_Tetris_RemovePlayerFromTable+1,w
  5327  0D29  3E34               	addlw	52
  5328  0D2A  0084               	movwf	4
  5329  0D2B  1383               	bcf	3,7	;select IRP bank0
  5330  0D2C  0800               	movf	0,w
  5331  0D2D  00A2               	movwf	??_Tetris_RemovePlayerFromTable+2
  5332  0D2E  0A84               	incf	4,f
  5333  0D2F  0800               	movf	0,w
  5334  0D30  00A3               	movwf	??_Tetris_RemovePlayerFromTable+3
  5335  0D31  09A2               	comf	??_Tetris_RemovePlayerFromTable+2,f
  5336  0D32  09A3               	comf	??_Tetris_RemovePlayerFromTable+3,f
  5337  0D33  0876               	movf	Tetris_RemovePlayerFromTable@start,w
  5338  0D34  00A4               	movwf	??_Tetris_RemovePlayerFromTable+4
  5339  0D35  0724               	addwf	??_Tetris_RemovePlayerFromTable+4,w
  5340  0D36  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  5341  0D37  00A5               	movwf	??_Tetris_RemovePlayerFromTable+5
  5342  0D38  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  5343  0D39  00A6               	movwf	??_Tetris_RemovePlayerFromTable+6
  5344  0D3A  0726               	addwf	??_Tetris_RemovePlayerFromTable+6,w
  5345  0D3B  0725               	addwf	??_Tetris_RemovePlayerFromTable+5,w
  5346  0D3C  00A7               	movwf	??_Tetris_RemovePlayerFromTable+7
  5347  0D3D  0827               	movf	??_Tetris_RemovePlayerFromTable+7,w
  5348  0D3E  0084               	movwf	4
  5349  0D3F  0822               	movf	??_Tetris_RemovePlayerFromTable+2,w
  5350  0D40  0580               	andwf	0,f
  5351  0D41  0A84               	incf	4,f
  5352  0D42  0823               	movf	??_Tetris_RemovePlayerFromTable+3,w
  5353  0D43  0580               	andwf	0,f
  5354                           
  5355                           ;../Tetris/Tetris.c: 225:  }
  5356  0D44  3001               	movlw	1
  5357  0D45  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  5358  0D46  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  5359  0D47  07F8               	addwf	Tetris_RemovePlayerFromTable@i,f
  5360  0D48  3004               	movlw	4
  5361  0D49  0278               	subwf	Tetris_RemovePlayerFromTable@i,w
  5362  0D4A  1803               	btfsc	3,0
  5363  0D4B  0008               	return
  5364  0D4C  2D23               	goto	l2104
  5365  0D4D                     __end_of_Tetris_RemovePlayerFromTable:	
  5366                           
  5367                           	psect	text23
  5368  0A6D                     __ptext23:	
  5369 ;; *************** function _Tetris_PlayerTouchingLeftBound *****************
  5370 ;; Defined at:
  5371 ;;		line 197 in file "../Tetris/Tetris.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  player          1    wreg     PTR struct .
  5374 ;;		 -> main@tetrisGame(63), 
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;  player          1    7[COMMON] PTR struct .
  5377 ;;		 -> main@tetrisGame(63), 
  5378 ;;  i               1    8[COMMON] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      unsigned char 
  5381 ;; Registers used:
  5382 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5388 ;;      Params:         0       0       0       0
  5389 ;;      Locals:         2       0       0       0
  5390 ;;      Temps:          4       0       0       0
  5391 ;;      Totals:         6       0       0       0
  5392 ;;Total ram usage:        6 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    1
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_Tetris_MovePlayerLeft
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           
  5403                           ;psect for function _Tetris_PlayerTouchingLeftBound
  5404  0A6D                     _Tetris_PlayerTouchingLeftBound:	
  5405                           
  5406                           ;incstack = 0
  5407                           ; Regs used in _Tetris_PlayerTouchingLeftBound: [wreg-fsr0h+status,2+status,0]
  5408                           ;Tetris_PlayerTouchingLeftBound@player stored from wreg
  5409  0A6D  00F7               	movwf	Tetris_PlayerTouchingLeftBound@player
  5410                           
  5411                           ;../Tetris/Tetris.c: 197: static uint8_t Tetris_PlayerTouchingLeftBound(Tetris_Player *p
      +                          layer);../Tetris/Tetris.c: 198: {;../Tetris/Tetris.c: 199:  for (uint8_t i = 0; i < TETR
      +                          IS_UNIT_HEIGHT; ++i)
  5412  0A6E  01F8               	clrf	Tetris_PlayerTouchingLeftBound@i
  5413  0A6F                     l2322:	
  5414                           
  5415                           ;../Tetris/Tetris.c: 200:  {;../Tetris/Tetris.c: 201:   if (player->unitBits[i] & 0x8000
      +                          )
  5416  0A6F  0878               	movf	Tetris_PlayerTouchingLeftBound@i,w
  5417  0A70  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  5418  0A71  0773               	addwf	??_Tetris_PlayerTouchingLeftBound,w
  5419  0A72  0777               	addwf	Tetris_PlayerTouchingLeftBound@player,w
  5420  0A73  00F4               	movwf	??_Tetris_PlayerTouchingLeftBound+1
  5421  0A74  0874               	movf	??_Tetris_PlayerTouchingLeftBound+1,w
  5422  0A75  3E04               	addlw	4
  5423  0A76  0084               	movwf	4
  5424  0A77  1383               	bcf	3,7	;select IRP bank0
  5425  0A78  0800               	movf	0,w
  5426  0A79  00F5               	movwf	??_Tetris_PlayerTouchingLeftBound+2
  5427  0A7A  0A84               	incf	4,f
  5428  0A7B  0800               	movf	0,w
  5429  0A7C  00F6               	movwf	??_Tetris_PlayerTouchingLeftBound+3
  5430  0A7D  1FF6               	btfss	??_Tetris_PlayerTouchingLeftBound+3,7
  5431  0A7E  2A81               	goto	l2328
  5432                           
  5433                           ;../Tetris/Tetris.c: 202:    return 1;
  5434  0A7F  3001               	movlw	1
  5435  0A80  0008               	return
  5436  0A81                     l2328:	
  5437                           
  5438                           ;../Tetris/Tetris.c: 203:  }
  5439  0A81  3001               	movlw	1
  5440  0A82  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  5441  0A83  0873               	movf	??_Tetris_PlayerTouchingLeftBound,w
  5442  0A84  07F8               	addwf	Tetris_PlayerTouchingLeftBound@i,f
  5443  0A85  3004               	movlw	4
  5444  0A86  0278               	subwf	Tetris_PlayerTouchingLeftBound@i,w
  5445  0A87  1C03               	skipc
  5446  0A88  2A6F               	goto	l2322
  5447                           
  5448                           ;../Tetris/Tetris.c: 205:  return 0;
  5449  0A89  3000               	movlw	0
  5450  0A8A  0008               	return
  5451  0A8B                     __end_of_Tetris_PlayerTouchingLeftBound:	
  5452                           
  5453                           	psect	text24
  5454  0DC5                     __ptext24:	
  5455 ;; *************** function _Tetris_PlayerOverlapsEnvironment *****************
  5456 ;; Defined at:
  5457 ;;		line 185 in file "../Tetris/Tetris.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  game            1    wreg     PTR struct .
  5460 ;;		 -> main@tetrisGame(63), 
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  game            1    8[COMMON] PTR struct .
  5463 ;;		 -> main@tetrisGame(63), 
  5464 ;;  i               1    7[COMMON] unsigned char 
  5465 ;;  start           1    6[COMMON] unsigned char 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      unsigned char 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5475 ;;      Params:         0       0       0       0
  5476 ;;      Locals:         3       0       0       0
  5477 ;;      Temps:          0      12       0       0
  5478 ;;      Totals:         3      12       0       0
  5479 ;;Total ram usage:       15 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    3
  5482 ;; This function calls:
  5483 ;;		_Tetris_PlayerTopmostY
  5484 ;; This function is called by:
  5485 ;;		_Tetris_UpdateGame
  5486 ;;		_Tetris_MovePlayerDown
  5487 ;;		_Tetris_MovePlayerLeft
  5488 ;;		_Tetris_MovePlayerRight
  5489 ;;		_Tetris_RotatePlayer
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           
  5494                           ;psect for function _Tetris_PlayerOverlapsEnvironment
  5495  0DC5                     _Tetris_PlayerOverlapsEnvironment:	
  5496                           
  5497                           ;incstack = 0
  5498                           ; Regs used in _Tetris_PlayerOverlapsEnvironment: [wreg-fsr0h+status,2+status,0+btemp+1+
      +                          pclath+cstack]
  5499                           ;Tetris_PlayerOverlapsEnvironment@game stored from wreg
  5500  0DC5  00F8               	movwf	Tetris_PlayerOverlapsEnvironment@game
  5501                           
  5502                           ;../Tetris/Tetris.c: 185: static uint8_t Tetris_PlayerOverlapsEnvironment(Tetris_Game *g
      +                          ame);../Tetris/Tetris.c: 186: {;../Tetris/Tetris.c: 187:  uint8_t start = Tetris_PlayerT
      +                          opmostY(&game->player);
  5503  0DC6  0878               	movf	Tetris_PlayerOverlapsEnvironment@game,w
  5504  0DC7  3E30               	addlw	48
  5505  0DC8  158A  21F8  158A   	fcall	_Tetris_PlayerTopmostY
  5506  0DCB  1283               	bcf	3,5	;RP0=0, select bank0
  5507  0DCC  1303               	bcf	3,6	;RP1=0, select bank0
  5508  0DCD  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5509  0DCE  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  5510  0DCF  00F6               	movwf	Tetris_PlayerOverlapsEnvironment@start
  5511                           
  5512                           ;../Tetris/Tetris.c: 188:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5513  0DD0  01F7               	clrf	Tetris_PlayerOverlapsEnvironment@i
  5514  0DD1                     l2082:	
  5515                           
  5516                           ;../Tetris/Tetris.c: 189:  {;../Tetris/Tetris.c: 190:   if (game->player.unitBits[i] & g
      +                          ame->table[i + start])
  5517  0DD1  0877               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  5518  0DD2  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5519  0DD3  0720               	addwf	??_Tetris_PlayerOverlapsEnvironment,w
  5520  0DD4  0778               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  5521  0DD5  00A1               	movwf	??_Tetris_PlayerOverlapsEnvironment+1
  5522  0DD6  0876               	movf	Tetris_PlayerOverlapsEnvironment@start,w
  5523  0DD7  00A2               	movwf	??_Tetris_PlayerOverlapsEnvironment+2
  5524  0DD8  0722               	addwf	??_Tetris_PlayerOverlapsEnvironment+2,w
  5525  0DD9  0721               	addwf	??_Tetris_PlayerOverlapsEnvironment+1,w
  5526  0DDA  00A3               	movwf	??_Tetris_PlayerOverlapsEnvironment+3
  5527  0DDB  0823               	movf	??_Tetris_PlayerOverlapsEnvironment+3,w
  5528  0DDC  0084               	movwf	4
  5529  0DDD  1383               	bcf	3,7	;select IRP bank0
  5530  0DDE  0800               	movf	0,w
  5531  0DDF  00A4               	movwf	??_Tetris_PlayerOverlapsEnvironment+4
  5532  0DE0  0A84               	incf	4,f
  5533  0DE1  0800               	movf	0,w
  5534  0DE2  00A5               	movwf	??_Tetris_PlayerOverlapsEnvironment+5
  5535  0DE3  0877               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  5536  0DE4  00A6               	movwf	??_Tetris_PlayerOverlapsEnvironment+6
  5537  0DE5  0726               	addwf	??_Tetris_PlayerOverlapsEnvironment+6,w
  5538  0DE6  0778               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  5539  0DE7  00A7               	movwf	??_Tetris_PlayerOverlapsEnvironment+7
  5540  0DE8  0827               	movf	??_Tetris_PlayerOverlapsEnvironment+7,w
  5541  0DE9  3E34               	addlw	52
  5542  0DEA  0084               	movwf	4
  5543  0DEB  0800               	movf	0,w
  5544  0DEC  00A8               	movwf	??_Tetris_PlayerOverlapsEnvironment+8
  5545  0DED  0A84               	incf	4,f
  5546  0DEE  0800               	movf	0,w
  5547  0DEF  00A9               	movwf	??_Tetris_PlayerOverlapsEnvironment+9
  5548  0DF0  0824               	movf	??_Tetris_PlayerOverlapsEnvironment+4,w
  5549  0DF1  0528               	andwf	??_Tetris_PlayerOverlapsEnvironment+8,w
  5550  0DF2  00AA               	movwf	??_Tetris_PlayerOverlapsEnvironment+10
  5551  0DF3  0825               	movf	??_Tetris_PlayerOverlapsEnvironment+5,w
  5552  0DF4  0529               	andwf	??_Tetris_PlayerOverlapsEnvironment+9,w
  5553  0DF5  00AB               	movwf	??_Tetris_PlayerOverlapsEnvironment+11
  5554  0DF6  082A               	movf	??_Tetris_PlayerOverlapsEnvironment+10,w
  5555  0DF7  042B               	iorwf	??_Tetris_PlayerOverlapsEnvironment+11,w
  5556  0DF8  1903               	btfsc	3,2
  5557  0DF9  2DFC               	goto	l2088
  5558                           
  5559                           ;../Tetris/Tetris.c: 191:    return 1;
  5560  0DFA  3001               	movlw	1
  5561  0DFB  0008               	return
  5562  0DFC                     l2088:	
  5563                           
  5564                           ;../Tetris/Tetris.c: 192:  }
  5565  0DFC  3001               	movlw	1
  5566  0DFD  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5567  0DFE  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  5568  0DFF  07F7               	addwf	Tetris_PlayerOverlapsEnvironment@i,f
  5569  0E00  3004               	movlw	4
  5570  0E01  0277               	subwf	Tetris_PlayerOverlapsEnvironment@i,w
  5571  0E02  1C03               	skipc
  5572  0E03  2DD1               	goto	l2082
  5573                           
  5574                           ;../Tetris/Tetris.c: 194:  return 0;
  5575  0E04  3000               	movlw	0
  5576  0E05  0008               	return
  5577  0E06                     __end_of_Tetris_PlayerOverlapsEnvironment:	
  5578                           
  5579                           	psect	text25
  5580  0096                     __ptext25:	
  5581 ;; *************** function _Tetris_ApplyPlayerToTable *****************
  5582 ;; Defined at:
  5583 ;;		line 228 in file "../Tetris/Tetris.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;  game            1    wreg     PTR struct .
  5586 ;;		 -> main@tetrisGame(63), 
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;  game            1    9[COMMON] PTR struct .
  5589 ;;		 -> main@tetrisGame(63), 
  5590 ;;  i               1    8[COMMON] unsigned char 
  5591 ;;  i               1    7[COMMON] unsigned char 
  5592 ;;  start           1    6[COMMON] unsigned char 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  1    wreg      unsigned char 
  5595 ;; Registers used:
  5596 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5602 ;;      Params:         0       0       0       0
  5603 ;;      Locals:         4       0       0       0
  5604 ;;      Temps:          0       8       0       0
  5605 ;;      Totals:         4       8       0       0
  5606 ;;Total ram usage:       12 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    3
  5609 ;; This function calls:
  5610 ;;		_Tetris_PlayerTopmostY
  5611 ;; This function is called by:
  5612 ;;		_Tetris_ResetGame
  5613 ;;		_Tetris_UpdateGame
  5614 ;;		_Tetris_MovePlayerDown
  5615 ;;		_Tetris_MovePlayerLeft
  5616 ;;		_Tetris_MovePlayerRight
  5617 ;;		_Tetris_RotatePlayer
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _Tetris_ApplyPlayerToTable
  5623  0096                     _Tetris_ApplyPlayerToTable:	
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _Tetris_ApplyPlayerToTable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  5627                           ;Tetris_ApplyPlayerToTable@game stored from wreg
  5628  0096  00F9               	movwf	Tetris_ApplyPlayerToTable@game
  5629                           
  5630                           ;../Tetris/Tetris.c: 228: static uint8_t Tetris_ApplyPlayerToTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 229: {;../Tetris/Tetris.c: 230:  uint8_t start = Tetris_PlayerTopmostY
      +                          (&game->player);
  5631  0097  0879               	movf	Tetris_ApplyPlayerToTable@game,w
  5632  0098  3E30               	addlw	48
  5633  0099  158A  21F8  118A   	fcall	_Tetris_PlayerTopmostY
  5634  009C  1283               	bcf	3,5	;RP0=0, select bank0
  5635  009D  1303               	bcf	3,6	;RP1=0, select bank0
  5636  009E  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5637  009F  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5638  00A0  00F6               	movwf	Tetris_ApplyPlayerToTable@start
  5639                           
  5640                           ;../Tetris/Tetris.c: 232:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5641  00A1  01F7               	clrf	Tetris_ApplyPlayerToTable@i
  5642  00A2                     l2118:	
  5643                           
  5644                           ;../Tetris/Tetris.c: 233:  {;../Tetris/Tetris.c: 234:   if (game->player.unitBits[i] == 
      +                          0)
  5645  00A2  0877               	movf	Tetris_ApplyPlayerToTable@i,w
  5646  00A3  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5647  00A4  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  5648  00A5  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  5649  00A6  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  5650  00A7  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5651  00A8  3E34               	addlw	52
  5652  00A9  0084               	movwf	4
  5653  00AA  1383               	bcf	3,7	;select IRP bank0
  5654  00AB  0800               	movf	0,w
  5655  00AC  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  5656  00AD  0A84               	incf	4,f
  5657  00AE  0800               	movf	0,w
  5658  00AF  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  5659  00B0  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  5660  00B1  0423               	iorwf	??_Tetris_ApplyPlayerToTable+3,w
  5661  00B2  1903               	btfsc	3,2
  5662  00B3  28C6               	goto	l2128
  5663                           
  5664                           ;../Tetris/Tetris.c: 237:   if (start + i >= TETRIS_TABLE_HEIGHT)
  5665  00B4  0876               	movf	Tetris_ApplyPlayerToTable@start,w
  5666  00B5  0777               	addwf	Tetris_ApplyPlayerToTable@i,w
  5667  00B6  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5668  00B7  01A1               	clrf	??_Tetris_ApplyPlayerToTable+1
  5669  00B8  0DA1               	rlf	??_Tetris_ApplyPlayerToTable+1,f
  5670  00B9  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5671  00BA  3A80               	xorlw	128
  5672  00BB  00FF               	movwf	127
  5673  00BC  3080               	movlw	128
  5674  00BD  027F               	subwf	127,w
  5675  00BE  1D03               	skipz
  5676  00BF  28C2               	goto	u1355
  5677  00C0  3018               	movlw	24
  5678  00C1  0220               	subwf	??_Tetris_ApplyPlayerToTable,w
  5679  00C2                     u1355:	
  5680  00C2  1C03               	skipc
  5681  00C3  28C6               	goto	l2128
  5682                           
  5683                           ;../Tetris/Tetris.c: 238:    return 0;
  5684  00C4  3000               	movlw	0
  5685  00C5  0008               	return
  5686  00C6                     l2128:	
  5687  00C6  3001               	movlw	1
  5688  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  5689  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  5690  00C9  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5691  00CA  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5692  00CB  07F7               	addwf	Tetris_ApplyPlayerToTable@i,f
  5693  00CC  3004               	movlw	4
  5694  00CD  0277               	subwf	Tetris_ApplyPlayerToTable@i,w
  5695  00CE  1C03               	skipc
  5696  00CF  28A2               	goto	l2118
  5697                           
  5698                           ;../Tetris/Tetris.c: 241:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5699  00D0  01F8               	clrf	Tetris_ApplyPlayerToTable@i_312
  5700  00D1                     l2138:	
  5701                           
  5702                           ;../Tetris/Tetris.c: 242:   game->table[start + i] |= game->player.unitBits[i];
  5703  00D1  0878               	movf	Tetris_ApplyPlayerToTable@i_312,w
  5704  00D2  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5705  00D3  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  5706  00D4  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  5707  00D5  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  5708  00D6  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5709  00D7  3E34               	addlw	52
  5710  00D8  0084               	movwf	4
  5711  00D9  1383               	bcf	3,7	;select IRP bank0
  5712  00DA  0800               	movf	0,w
  5713  00DB  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  5714  00DC  0A84               	incf	4,f
  5715  00DD  0800               	movf	0,w
  5716  00DE  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  5717  00DF  0876               	movf	Tetris_ApplyPlayerToTable@start,w
  5718  00E0  00A4               	movwf	??_Tetris_ApplyPlayerToTable+4
  5719  00E1  0724               	addwf	??_Tetris_ApplyPlayerToTable+4,w
  5720  00E2  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  5721  00E3  00A5               	movwf	??_Tetris_ApplyPlayerToTable+5
  5722  00E4  0878               	movf	Tetris_ApplyPlayerToTable@i_312,w
  5723  00E5  00A6               	movwf	??_Tetris_ApplyPlayerToTable+6
  5724  00E6  0726               	addwf	??_Tetris_ApplyPlayerToTable+6,w
  5725  00E7  0725               	addwf	??_Tetris_ApplyPlayerToTable+5,w
  5726  00E8  00A7               	movwf	??_Tetris_ApplyPlayerToTable+7
  5727  00E9  0827               	movf	??_Tetris_ApplyPlayerToTable+7,w
  5728  00EA  0084               	movwf	4
  5729  00EB  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  5730  00EC  0480               	iorwf	0,f
  5731  00ED  0A84               	incf	4,f
  5732  00EE  0823               	movf	??_Tetris_ApplyPlayerToTable+3,w
  5733  00EF  0480               	iorwf	0,f
  5734  00F0  3001               	movlw	1
  5735  00F1  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5736  00F2  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5737  00F3  07F8               	addwf	Tetris_ApplyPlayerToTable@i_312,f
  5738  00F4  3004               	movlw	4
  5739  00F5  0278               	subwf	Tetris_ApplyPlayerToTable@i_312,w
  5740  00F6  1C03               	skipc
  5741  00F7  28D1               	goto	l2138
  5742                           
  5743                           ;../Tetris/Tetris.c: 244:  return 1;
  5744  00F8  3001               	movlw	1
  5745  00F9  0008               	return
  5746  00FA                     __end_of_Tetris_ApplyPlayerToTable:	
  5747                           
  5748                           	psect	text26
  5749  09F8                     __ptext26:	
  5750 ;; *************** function _Tetris_PlayerTopmostY *****************
  5751 ;; Defined at:
  5752 ;;		line 180 in file "../Tetris/Tetris.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  player          1    wreg     PTR struct .
  5755 ;;		 -> main@tetrisGame(63), 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  player          1    5[COMMON] PTR struct .
  5758 ;;		 -> main@tetrisGame(63), 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      unsigned char 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5768 ;;      Params:         0       0       0       0
  5769 ;;      Locals:         1       0       0       0
  5770 ;;      Temps:          2       0       0       0
  5771 ;;      Totals:         3       0       0       0
  5772 ;;Total ram usage:        3 bytes
  5773 ;; Hardware stack levels used:    2
  5774 ;; Hardware stack levels required when called:    1
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_Tetris_PlayerOverlapsEnvironment
  5779 ;;		_Tetris_RemovePlayerFromTable
  5780 ;;		_Tetris_ApplyPlayerToTable
  5781 ;; This function uses a non-reentrant model
  5782 ;;
  5783                           
  5784                           
  5785                           ;psect for function _Tetris_PlayerTopmostY
  5786  09F8                     _Tetris_PlayerTopmostY:	
  5787                           
  5788                           ;incstack = 0
  5789                           ; Regs used in _Tetris_PlayerTopmostY: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5790                           ;Tetris_PlayerTopmostY@player stored from wreg
  5791  09F8  00F5               	movwf	Tetris_PlayerTopmostY@player
  5792                           
  5793                           ;../Tetris/Tetris.c: 180: static uint8_t Tetris_PlayerTopmostY(Tetris_Player *player);..
      +                          /Tetris/Tetris.c: 181: {;../Tetris/Tetris.c: 182:  return player->position.y - Tetris_un
      +                          itPivot.y;
  5794  09F9  3015               	movlw	low ((_Tetris_unitPivot+1)| (0+32768))
  5795  09FA  0084               	movwf	4
  5796  09FB  3085               	movlw	high ((_Tetris_unitPivot+1)| (0+32768))
  5797  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  5798  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  5799  09FE  00FF               	movwf	127
  5800  09FF  118A  2100         	fcall	stringtab
  5801  0A01  00F3               	movwf	??_Tetris_PlayerTopmostY
  5802  0A02  0A75               	incf	Tetris_PlayerTopmostY@player,w
  5803  0A03  0084               	movwf	4
  5804  0A04  1383               	bcf	3,7	;select IRP bank0
  5805  0A05  0800               	movf	0,w
  5806  0A06  00F4               	movwf	??_Tetris_PlayerTopmostY+1
  5807  0A07  0873               	movf	??_Tetris_PlayerTopmostY,w
  5808  0A08  0274               	subwf	??_Tetris_PlayerTopmostY+1,w
  5809  0A09  0008               	return
  5810  0A0A                     __end_of_Tetris_PlayerTopmostY:	
  5811                           
  5812                           	psect	text27
  5813  0961                     __ptext27:	
  5814 ;; *************** function _SetupTimer *****************
  5815 ;; Defined at:
  5816 ;;		line 56 in file "main.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		None
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5830 ;;      Params:         0       0       0       0
  5831 ;;      Locals:         0       0       0       0
  5832 ;;      Temps:          0       0       0       0
  5833 ;;      Totals:         0       0       0       0
  5834 ;;Total ram usage:        0 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    1
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_main
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844                           
  5845                           ;psect for function _SetupTimer
  5846  0961                     _SetupTimer:	
  5847                           
  5848                           ;main.c: 58:     TMR1IE = 1;
  5849                           
  5850                           ;incstack = 0
  5851                           ; Regs used in _SetupTimer: []
  5852  0961  1683               	bsf	3,5	;RP0=1, select bank1
  5853  0962  1303               	bcf	3,6	;RP1=0, select bank1
  5854  0963  140C               	bsf	12,0	;volatile
  5855                           
  5856                           ;main.c: 59:     TMR1CS = 0;
  5857  0964  1283               	bcf	3,5	;RP0=0, select bank0
  5858  0965  1303               	bcf	3,6	;RP1=0, select bank0
  5859  0966  1090               	bcf	16,1	;volatile
  5860                           
  5861                           ;main.c: 60:     PEIE = 1;
  5862  0967  170B               	bsf	11,6	;volatile
  5863                           
  5864                           ;main.c: 61:     TMR1ON = 1;
  5865  0968  1410               	bsf	16,0	;volatile
  5866                           
  5867                           ;main.c: 62:     T1CKPS0 = 1;
  5868  0969  1610               	bsf	16,4	;volatile
  5869                           
  5870                           ;main.c: 63:     T1CKPS1 = 0;
  5871  096A  1290               	bcf	16,5	;volatile
  5872  096B  0008               	return
  5873  096C                     __end_of_SetupTimer:	
  5874                           
  5875                           	psect	text28
  5876  0AA9                     __ptext28:	
  5877 ;; *************** function _SetupRandomness *****************
  5878 ;; Defined at:
  5879 ;;		line 93 in file "main.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5893 ;;      Params:         0       0       0       0
  5894 ;;      Locals:         0       0       0       0
  5895 ;;      Temps:          0       0       0       0
  5896 ;;      Totals:         0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    3
  5900 ;; This function calls:
  5901 ;;		___eetoi
  5902 ;;		___itoee
  5903 ;;		_srand
  5904 ;; This function is called by:
  5905 ;;		_main
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _SetupRandomness
  5911  0AA9                     _SetupRandomness:	
  5912                           
  5913                           ;main.c: 95:     srand(uniqueSeed);
  5914                           
  5915                           ;incstack = 0
  5916                           ; Regs used in _SetupRandomness: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5917  0AA9  3001               	movlw	(low _uniqueSeed)& (0+255)
  5918  0AAA  158A  220A  158A   	fcall	___eetoi
  5919  0AAD  0879               	movf	?___eetoi+1,w
  5920  0AAE  1283               	bcf	3,5	;RP0=0, select bank0
  5921  0AAF  1303               	bcf	3,6	;RP1=0, select bank0
  5922  0AB0  00A6               	movwf	srand@x+1
  5923  0AB1  0878               	movf	?___eetoi,w
  5924  0AB2  00A5               	movwf	srand@x
  5925  0AB3  118A  27F7  158A   	fcall	_srand
  5926                           
  5927                           ;main.c: 96:     ++uniqueSeed;
  5928  0AB6  3001               	movlw	(low _uniqueSeed)& (0+255)
  5929  0AB7  158A  220A  158A   	fcall	___eetoi
  5930  0ABA  0878               	movf	?___eetoi,w
  5931  0ABB  3E01               	addlw	1
  5932  0ABC  1283               	bcf	3,5	;RP0=0, select bank0
  5933  0ABD  1303               	bcf	3,6	;RP1=0, select bank0
  5934  0ABE  00A5               	movwf	___itoee@data
  5935  0ABF  0879               	movf	?___eetoi+1,w
  5936  0AC0  1803               	skipnc
  5937  0AC1  3E01               	addlw	1
  5938  0AC2  3E00               	addlw	0
  5939  0AC3  00A6               	movwf	___itoee@data+1
  5940  0AC4  3001               	movlw	(low _uniqueSeed)& (0+255)
  5941  0AC5  158A  21B9         	fcall	___itoee
  5942  0AC7  0008               	return
  5943  0AC8                     __end_of_SetupRandomness:	
  5944                           
  5945                           	psect	text29
  5946  07F7                     __ptext29:	
  5947 ;; *************** function _srand *****************
  5948 ;; Defined at:
  5949 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;  x               2    5[BANK0 ] unsigned int 
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;		None
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      void 
  5956 ;; Registers used:
  5957 ;;		wreg
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5963 ;;      Params:         0       2       0       0
  5964 ;;      Locals:         0       0       0       0
  5965 ;;      Temps:          0       0       0       0
  5966 ;;      Totals:         0       2       0       0
  5967 ;;Total ram usage:        2 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    1
  5970 ;; This function calls:
  5971 ;;		Nothing
  5972 ;; This function is called by:
  5973 ;;		_SetupRandomness
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _srand
  5979  07F7                     _srand:	
  5980                           
  5981                           ;incstack = 0
  5982                           ; Regs used in _srand: [wreg]
  5983  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  5984  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  5985  07F9  0825               	movf	srand@x,w
  5986  07FA  00C7               	movwf	_randx
  5987  07FB  0826               	movf	srand@x+1,w
  5988  07FC  00C8               	movwf	_randx+1
  5989  07FD  01C9               	clrf	_randx+2
  5990  07FE  01CA               	clrf	_randx+3
  5991  07FF  0008               	return
  5992  0800                     __end_of_srand:	
  5993                           
  5994                           	psect	text30
  5995  09B9                     __ptext30:	
  5996 ;; *************** function ___itoee *****************
  5997 ;; Defined at:
  5998 ;;		line 157 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  addr            1    wreg     PTR eeprom void 
  6001 ;;		 -> uniqueSeed(2), 
  6002 ;;  data            2    5[BANK0 ] unsigned int 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  addr            1    9[BANK0 ] PTR eeprom void 
  6005 ;;		 -> uniqueSeed(2), 
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  2    5[BANK0 ] unsigned int 
  6008 ;; Registers used:
  6009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6015 ;;      Params:         0       2       0       0
  6016 ;;      Locals:         0       1       0       0
  6017 ;;      Temps:          0       2       0       0
  6018 ;;      Totals:         0       5       0       0
  6019 ;;Total ram usage:        5 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    2
  6022 ;; This function calls:
  6023 ;;		___memcpyee
  6024 ;; This function is called by:
  6025 ;;		_SetupRandomness
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           
  6030                           ;psect for function ___itoee
  6031  09B9                     ___itoee:	
  6032                           
  6033                           ;incstack = 0
  6034                           ; Regs used in ___itoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6035                           ;___itoee@addr stored from wreg
  6036  09B9  1283               	bcf	3,5	;RP0=0, select bank0
  6037  09BA  1303               	bcf	3,6	;RP1=0, select bank0
  6038  09BB  00A9               	movwf	___itoee@addr
  6039  09BC  3025               	movlw	(low (___itoee@data| 0))& (0+255)
  6040  09BD  00A7               	movwf	??___itoee
  6041  09BE  0827               	movf	??___itoee,w
  6042  09BF  00F3               	movwf	___memcpyee@from
  6043  09C0  3002               	movlw	2
  6044  09C1  00A8               	movwf	??___itoee+1
  6045  09C2  0828               	movf	??___itoee+1,w
  6046  09C3  00F4               	movwf	___memcpyee@size
  6047  09C4  0829               	movf	___itoee@addr,w
  6048  09C5  158A  2584         	fcall	___memcpyee
  6049  09C7  0008               	return
  6050  09C8                     __end_of___itoee:	
  6051                           
  6052                           	psect	text31
  6053  0D84                     __ptext31:	
  6054 ;; *************** function ___memcpyee *****************
  6055 ;; Defined at:
  6056 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  to              1    wreg     PTR eeprom unsigned char
  6059 ;;		 -> uniqueSeed(2), 
  6060 ;;  from            1    3[COMMON] PTR const unsigned char 
  6061 ;;		 -> __fltoee@data(4), __fttoee@data(4), __otoee@data(4), __ltoee@data(4), 
  6062 ;;		 -> __mtoee@data(3), __itoee@data(2), __ctoee@data(1), 
  6063 ;;  size            1    4[COMMON] unsigned char 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  to              1    7[COMMON] PTR eeprom unsigned char
  6066 ;;		 -> uniqueSeed(2), 
  6067 ;;  ptr             1    6[COMMON] PTR const unsigned char 
  6068 ;;		 -> __fltoee@data(4), __fttoee@data(4), __otoee@data(4), __ltoee@data(4), 
  6069 ;;		 -> __mtoee@data(3), __itoee@data(2), __ctoee@data(1), 
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6079 ;;      Params:         2       0       0       0
  6080 ;;      Locals:         2       0       0       0
  6081 ;;      Temps:          1       0       0       0
  6082 ;;      Totals:         5       0       0       0
  6083 ;;Total ram usage:        5 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    1
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		___itoee
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           
  6094                           ;psect for function ___memcpyee
  6095  0D84                     ___memcpyee:	
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in ___memcpyee: [wreg-fsr0h+status,2+status,0]
  6099                           ;___memcpyee@to stored from wreg
  6100  0D84  00F7               	movwf	___memcpyee@to
  6101                           
  6102                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 39: __memcpy
      +                          ee(__eeprom unsigned char * to, const unsigned char *from, unsigned char size);C:\Progra
      +                          m Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 40: {;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 41:  const unsigned char *ptr
      +                           =from;
  6103  0D85  0873               	movf	___memcpyee@from,w
  6104  0D86  00F5               	movwf	??___memcpyee
  6105  0D87  0875               	movf	??___memcpyee,w
  6106  0D88  00F6               	movwf	___memcpyee@ptr
  6107  0D89                     l475:	
  6108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 43:  while (
      +                          EECON1bits.WR) continue;
  6109                           
  6110  0D89  1683               	bsf	3,5	;RP0=1, select bank3
  6111  0D8A  1703               	bsf	3,6	;RP1=1, select bank3
  6112  0D8B  188C               	btfsc	12,1	;volsfr
  6113  0D8C  2D89               	goto	l475
  6114                           
  6115                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 44:  EEADR =
      +                           (unsigned char)to - 1U;
  6116  0D8D  0877               	movf	___memcpyee@to,w
  6117  0D8E  3EFF               	addlw	255
  6118  0D8F  1283               	bcf	3,5	;RP0=0, select bank2
  6119  0D90  1703               	bsf	3,6	;RP1=1, select bank2
  6120  0D91  008D               	movwf	13	;volatile
  6121                           
  6122                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 46:  EECON1 
      +                          &= 0x7F;
  6123  0D92  307F               	movlw	127
  6124  0D93  00F5               	movwf	??___memcpyee
  6125  0D94  0875               	movf	??___memcpyee,w
  6126  0D95  1683               	bsf	3,5	;RP0=1, select bank3
  6127  0D96  1703               	bsf	3,6	;RP1=1, select bank3
  6128  0D97  058C               	andwf	12,f	;volsfr
  6129  0D98                     l2992:	
  6130                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 48:  while(s
      +                          ize--) {
  6131                           
  6132                           
  6133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 48:  while(s
      +                          ize--) {
  6134  0D98  3001               	movlw	1
  6135  0D99  02F4               	subwf	___memcpyee@size,f
  6136  0D9A  0A74               	incf	___memcpyee@size,w
  6137  0D9B  1903               	btfsc	3,2
  6138  0D9C  0008               	return
  6139  0D9D                     l480:	
  6140                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 51:   }
  6141                           
  6142                           
  6143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 49:   while 
      +                          (EECON1bits.WR) {
  6144  0D9D  1683               	bsf	3,5	;RP0=1, select bank3
  6145  0D9E  1703               	bsf	3,6	;RP1=1, select bank3
  6146  0D9F  188C               	btfsc	12,1	;volsfr
  6147  0DA0  2D9D               	goto	l480
  6148                           
  6149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 52:   EEDATA
      +                           = *ptr++;
  6150  0DA1  0876               	movf	___memcpyee@ptr,w
  6151  0DA2  0084               	movwf	4
  6152  0DA3  1383               	bcf	3,7	;select IRP bank0
  6153  0DA4  0800               	movf	0,w
  6154  0DA5  1283               	bcf	3,5	;RP0=0, select bank2
  6155  0DA6  1703               	bsf	3,6	;RP1=1, select bank2
  6156  0DA7  008C               	movwf	12	;volatile
  6157  0DA8  3001               	movlw	1
  6158  0DA9  00F5               	movwf	??___memcpyee
  6159  0DAA  0875               	movf	??___memcpyee,w
  6160  0DAB  07F6               	addwf	___memcpyee@ptr,f
  6161                           
  6162                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 53:   ++EEAD
      +                          R;
  6163  0DAC  3001               	movlw	1
  6164  0DAD  00F5               	movwf	??___memcpyee
  6165  0DAE  0875               	movf	??___memcpyee,w
  6166  0DAF  078D               	addwf	13,f	;volatile
  6167                           
  6168                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 54:   STATUS
      +                          bits.CARRY = 0;
  6169  0DB0  1283               	bcf	3,5	;RP0=0, select bank0
  6170  0DB1  1303               	bcf	3,6	;RP1=0, select bank0
  6171  0DB2  1003               	bcf	3,0	;volatile
  6172                           
  6173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 55:   if (IN
      +                          TCONbits.GIE) {
  6174  0DB3  1B8B               	btfsc	11,7	;volatile
  6175                           
  6176                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 56:    STATU
      +                          Sbits.CARRY = 1;
  6177  0DB4  1403               	bsf	3,0	;volatile
  6178                           
  6179                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 58:   INTCON
      +                          bits.GIE = 0;
  6180                           
  6181                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 57:   }
  6182  0DB5  138B               	bcf	11,7	;volatile
  6183                           
  6184                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 59:   EECON1
      +                          bits.WREN = 1;
  6185  0DB6  1683               	bsf	3,5	;RP0=1, select bank3
  6186  0DB7  1703               	bsf	3,6	;RP1=1, select bank3
  6187  0DB8  150C               	bsf	12,2	;volsfr
  6188                           
  6189                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 60:   EECON2
      +                           = 0x55;
  6190  0DB9  3055               	movlw	85
  6191  0DBA  008D               	movwf	13	;volsfr
  6192                           
  6193                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 61:   EECON2
      +                           = 0xAA;
  6194  0DBB  30AA               	movlw	170
  6195  0DBC  008D               	movwf	13	;volsfr
  6196                           
  6197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 62:   EECON1
      +                          bits.WR = 1;
  6198  0DBD  148C               	bsf	12,1	;volsfr
  6199                           
  6200                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 63:   EECON1
      +                          bits.WREN = 0;
  6201  0DBE  110C               	bcf	12,2	;volsfr
  6202                           
  6203                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 64:   if (ST
      +                          ATUSbits.CARRY) {
  6204  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
  6205  0DC0  1303               	bcf	3,6	;RP1=0, select bank0
  6206  0DC1  1C03               	btfss	3,0	;volatile
  6207  0DC2  2D98               	goto	l2992
  6208                           
  6209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 65:    INTCO
      +                          Nbits.GIE = 1;
  6210  0DC3  178B               	bsf	11,7	;volatile
  6211  0DC4  2D98               	goto	l2992
  6212  0DC5                     __end_of___memcpyee:	
  6213                           
  6214                           	psect	text32
  6215  0A0A                     __ptext32:	
  6216 ;; *************** function ___eetoi *****************
  6217 ;; Defined at:
  6218 ;;		line 112 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  addr            1    wreg     PTR eeprom void 
  6221 ;;		 -> uniqueSeed(2), 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  addr            1    2[BANK0 ] PTR eeprom void 
  6224 ;;		 -> uniqueSeed(2), 
  6225 ;;  data            2    3[BANK0 ] unsigned int 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  2    8[COMMON] unsigned int 
  6228 ;; Registers used:
  6229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6235 ;;      Params:         2       0       0       0
  6236 ;;      Locals:         0       3       0       0
  6237 ;;      Temps:          0       2       0       0
  6238 ;;      Totals:         2       5       0       0
  6239 ;;Total ram usage:        7 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    2
  6242 ;; This function calls:
  6243 ;;		___eecpymem
  6244 ;; This function is called by:
  6245 ;;		_SetupRandomness
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function ___eetoi
  6251  0A0A                     ___eetoi:	
  6252                           
  6253                           ;incstack = 0
  6254                           ; Regs used in ___eetoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6255                           ;___eetoi@addr stored from wreg
  6256  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  6257  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  6258  0A0C  00A2               	movwf	___eetoi@addr
  6259                           
  6260                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 112: __eetoi
      +                          (__eeprom void *addr);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 113: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.
      +                          c: 114:  unsigned int data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\p
      +                          ic\__eeprom.c: 115:  __eecpymem((unsigned char *) &data,addr,2);
  6261  0A0D  0822               	movf	___eetoi@addr,w
  6262  0A0E  00A0               	movwf	??___eetoi
  6263  0A0F  0820               	movf	??___eetoi,w
  6264  0A10  00F3               	movwf	___eecpymem@from
  6265  0A11  3002               	movlw	2
  6266  0A12  00A1               	movwf	??___eetoi+1
  6267  0A13  0821               	movf	??___eetoi+1,w
  6268  0A14  00F4               	movwf	___eecpymem@size
  6269  0A15  3023               	movlw	(low (___eetoi@data| 0))& (0+255)
  6270  0A16  158A  2454         	fcall	___eecpymem
  6271                           
  6272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 116:  return
      +                           data;
  6273  0A18  1283               	bcf	3,5	;RP0=0, select bank0
  6274  0A19  1303               	bcf	3,6	;RP1=0, select bank0
  6275  0A1A  0824               	movf	___eetoi@data+1,w
  6276  0A1B  00F9               	movwf	?___eetoi+1
  6277  0A1C  0823               	movf	___eetoi@data,w
  6278  0A1D  00F8               	movwf	?___eetoi
  6279  0A1E  0008               	return
  6280  0A1F                     __end_of___eetoi:	
  6281                           
  6282                           	psect	text33
  6283  0C54                     __ptext33:	
  6284 ;; *************** function ___eecpymem *****************
  6285 ;; Defined at:
  6286 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  to              1    wreg     PTR volatile unsigned ch
  6289 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  6290 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  6291 ;;  from            1    3[COMMON] PTR eeprom unsigned char
  6292 ;;		 -> uniqueSeed(2), 
  6293 ;;  size            1    4[COMMON] unsigned char 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  to              1    7[COMMON] PTR volatile unsigned ch
  6296 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  6297 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  6298 ;;  cp              1    6[COMMON] PTR volatile unsigned ch
  6299 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  6300 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      void 
  6303 ;; Registers used:
  6304 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6310 ;;      Params:         2       0       0       0
  6311 ;;      Locals:         2       0       0       0
  6312 ;;      Temps:          1       0       0       0
  6313 ;;      Totals:         5       0       0       0
  6314 ;;Total ram usage:        5 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    1
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		___eetoi
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function ___eecpymem
  6326  0C54                     ___eecpymem:	
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0]
  6330                           ;___eecpymem@to stored from wreg
  6331  0C54  00F7               	movwf	___eecpymem@to
  6332                           
  6333                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: __eecpyme
      +                          m(volatile unsigned char *to, __eeprom unsigned char * from, unsigned char size);C:\Prog
      +                          ram Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program File
      +                          s (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\M
      +                          icrochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\Microchip\
      +                          xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c90\pic\__eeprom.c: 7: {
  6334  0C55  0877               	movf	___eecpymem@to,w
  6335  0C56  00F5               	movwf	??___eecpymem
  6336  0C57  0875               	movf	??___eecpymem,w
  6337  0C58  00F6               	movwf	___eecpymem@cp
  6338  0C59                     l463:	
  6339                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10:  while (
      +                          EECON1bits.WR) continue;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\
      +                          __eeprom.c: 10:  __memcpyee(addr,(unsigned char *) &data,2);;C:\Program Files (x86)\Micr
      +                          ochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10: {
  6340                           
  6341  0C59  1683               	bsf	3,5	;RP0=1, select bank3
  6342  0C5A  1703               	bsf	3,6	;RP1=1, select bank3
  6343  0C5B  188C               	btfsc	12,1	;volsfr
  6344  0C5C  2C59               	goto	l463
  6345                           
  6346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 11:  EEADR =
      +                           (unsigned char)from;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 11:  return data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pi
      +                          c\__eeprom.c: 11:  double data;
  6347  0C5D  0873               	movf	___eecpymem@from,w
  6348  0C5E  1283               	bcf	3,5	;RP0=0, select bank2
  6349  0C5F  1703               	bsf	3,6	;RP1=1, select bank2
  6350  0C60  008D               	movwf	13	;volatile
  6351  0C61                     l2228:	
  6352                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  6353                           
  6354                           
  6355                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  6356  0C61  3001               	movlw	1
  6357  0C62  02F4               	subwf	___eecpymem@size,f
  6358  0C63  0A74               	incf	___eecpymem@size,w
  6359  0C64  1903               	btfsc	3,2
  6360  0C65  0008               	return
  6361  0C66                     l468:	
  6362  0C66  1683               	bsf	3,5	;RP0=1, select bank3
  6363  0C67  1703               	bsf	3,6	;RP1=1, select bank3
  6364  0C68  188C               	btfsc	12,1	;volsfr
  6365  0C69  2C66               	goto	l468
  6366                           
  6367                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:   EECON1
      +                           &= 0x7F;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:
      +                           
  6368  0C6A  307F               	movlw	127
  6369  0C6B  00F5               	movwf	??___eecpymem
  6370  0C6C  0875               	movf	??___eecpymem,w
  6371  0C6D  058C               	andwf	12,f	;volsfr
  6372                           
  6373                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 17:   EECON1
      +                          bits.RD = 1;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 
      +                          17: __fttoee(__eeprom void *addr, float data)
  6374  0C6E  140C               	bsf	12,0	;volsfr
  6375                           
  6376                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:   *cp++ 
      +                          = EEDATA;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:
      +                           {
  6377  0C6F  1283               	bcf	3,5	;RP0=0, select bank2
  6378  0C70  1703               	bsf	3,6	;RP1=1, select bank2
  6379  0C71  080C               	movf	12,w	;volatile
  6380  0C72  00F5               	movwf	??___eecpymem
  6381  0C73  0876               	movf	___eecpymem@cp,w
  6382  0C74  0084               	movwf	4
  6383  0C75  0875               	movf	??___eecpymem,w
  6384  0C76  1383               	bcf	3,7	;select IRP bank0
  6385  0C77  0080               	movwf	0
  6386  0C78  3001               	movlw	1
  6387  0C79  00F5               	movwf	??___eecpymem
  6388  0C7A  0875               	movf	??___eecpymem,w
  6389  0C7B  07F6               	addwf	___eecpymem@cp,f
  6390                           
  6391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:   ++EEAD
      +                          R;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:  __mem
      +                          cpyee(addr,(unsigned char *) &data,3);
  6392  0C7C  3001               	movlw	1
  6393  0C7D  00F5               	movwf	??___eecpymem
  6394  0C7E  0875               	movf	??___eecpymem,w
  6395  0C7F  078D               	addwf	13,f	;volatile
  6396  0C80  2C61               	goto	l2228
  6397  0C81                     __end_of___eecpymem:	
  6398                           
  6399                           	psect	text34
  6400  00FA                     __ptext34:	
  6401 ;; *************** function _SetupOscillator *****************
  6402 ;; Defined at:
  6403 ;;		line 47 in file "main.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;		None
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      void 
  6410 ;; Registers used:
  6411 ;;		None
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6417 ;;      Params:         0       0       0       0
  6418 ;;      Locals:         0       0       0       0
  6419 ;;      Temps:          0       0       0       0
  6420 ;;      Totals:         0       0       0       0
  6421 ;;Total ram usage:        0 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    1
  6424 ;; This function calls:
  6425 ;;		Nothing
  6426 ;; This function is called by:
  6427 ;;		_main
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _SetupOscillator
  6433  00FA                     _SetupOscillator:	
  6434                           
  6435                           ;main.c: 51:     IRCF0 = 1;
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in _SetupOscillator: []
  6439  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  6440  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  6441  00FC  160F               	bsf	15,4	;volatile
  6442                           
  6443                           ;main.c: 52:     IRCF1 = 1;
  6444  00FD  168F               	bsf	15,5	;volatile
  6445                           
  6446                           ;main.c: 53:     IRCF2 = 1;
  6447  00FE  170F               	bsf	15,6	;volatile
  6448  00FF  0008               	return
  6449  0100                     __end_of_SetupOscillator:	
  6450                           
  6451                           	psect	text35
  6452  0934                     __ptext35:	
  6453 ;; *************** function _ResetTimer *****************
  6454 ;; Defined at:
  6455 ;;		line 66 in file "main.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;		None
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;		None
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  1    wreg      void 
  6462 ;; Registers used:
  6463 ;;		status,2
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6469 ;;      Params:         0       0       0       0
  6470 ;;      Locals:         0       0       0       0
  6471 ;;      Temps:          0       0       0       0
  6472 ;;      Totals:         0       0       0       0
  6473 ;;Total ram usage:        0 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    1
  6476 ;; This function calls:
  6477 ;;		Nothing
  6478 ;; This function is called by:
  6479 ;;		_main
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           
  6484                           ;psect for function _ResetTimer
  6485  0934                     _ResetTimer:	
  6486                           
  6487                           ;main.c: 68:     TMR1 = 0;
  6488                           
  6489                           ;incstack = 0
  6490                           ; Regs used in _ResetTimer: [status,2]
  6491  0934  1283               	bcf	3,5	;RP0=0, select bank0
  6492  0935  1303               	bcf	3,6	;RP1=0, select bank0
  6493  0936  018E               	clrf	14	;volatile
  6494  0937  018F               	clrf	15	;volatile
  6495  0938  0008               	return
  6496  0939                     __end_of_ResetTimer:	
  6497                           
  6498                           	psect	text36
  6499  094C                     __ptext36:	
  6500 ;; *************** function _LCD_TurnOn *****************
  6501 ;; Defined at:
  6502 ;;		line 120 in file "LCD.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  1    wreg      void 
  6509 ;; Registers used:
  6510 ;;		wreg, status,2, status,0, pclath, cstack
  6511 ;; Tracked objects:
  6512 ;;		On entry : 0/0
  6513 ;;		On exit  : 0/0
  6514 ;;		Unchanged: 0/0
  6515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6516 ;;      Params:         0       0       0       0
  6517 ;;      Locals:         0       0       0       0
  6518 ;;      Temps:          0       1       0       0
  6519 ;;      Totals:         0       1       0       0
  6520 ;;Total ram usage:        1 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    5
  6523 ;; This function calls:
  6524 ;;		_LCD_Write
  6525 ;; This function is called by:
  6526 ;;		_main
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           
  6531                           ;psect for function _LCD_TurnOn
  6532  094C                     _LCD_TurnOn:	
  6533                           
  6534                           ;LCD.c: 122:     LCD_Write(LCD_WRITE_INSTRUCTION, 0x3F);
  6535                           
  6536                           ;incstack = 0
  6537                           ; Regs used in _LCD_TurnOn: [wreg+status,2+status,0+pclath+cstack]
  6538  094C  303F               	movlw	63
  6539  094D  1283               	bcf	3,5	;RP0=0, select bank0
  6540  094E  1303               	bcf	3,6	;RP1=0, select bank0
  6541  094F  00A0               	movwf	??_LCD_TurnOn
  6542  0950  0820               	movf	??_LCD_TurnOn,w
  6543  0951  00F8               	movwf	LCD_Write@data
  6544  0952  3000               	movlw	0
  6545  0953  158A  2236         	fcall	_LCD_Write
  6546  0955  0008               	return
  6547  0956                     __end_of_LCD_TurnOn:	
  6548                           
  6549                           	psect	text37
  6550  0B29                     __ptext37:	
  6551 ;; *************** function _LCD_SetupPorts *****************
  6552 ;; Defined at:
  6553 ;;		line 48 in file "LCD.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  1    wreg      void 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6567 ;;      Params:         0       0       0       0
  6568 ;;      Locals:         0       0       0       0
  6569 ;;      Temps:          0       0       0       0
  6570 ;;      Totals:         0       0       0       0
  6571 ;;Total ram usage:        0 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    1
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _LCD_SetupPorts
  6583  0B29                     _LCD_SetupPorts:	
  6584                           
  6585                           ;LCD.c: 50:     ANSELH = 0;
  6586                           
  6587                           ;incstack = 0
  6588                           ; Regs used in _LCD_SetupPorts: [wreg+status,2]
  6589  0B29  1683               	bsf	3,5	;RP0=1, select bank3
  6590  0B2A  1703               	bsf	3,6	;RP1=1, select bank3
  6591  0B2B  0189               	clrf	9	;volatile
  6592                           
  6593                           ;LCD.c: 51:     TRISB = 0xFF;
  6594  0B2C  30FF               	movlw	255
  6595  0B2D  1683               	bsf	3,5	;RP0=1, select bank1
  6596  0B2E  1303               	bcf	3,6	;RP1=0, select bank1
  6597  0B2F  0086               	movwf	6	;volatile
  6598                           
  6599                           ;LCD.c: 52:     WPUB = 0xFF;
  6600  0B30  30FF               	movlw	255
  6601  0B31  0095               	movwf	21	;volatile
  6602                           
  6603                           ;LCD.c: 53:     nRBPU = 0;
  6604  0B32  1381               	bcf	1,7	;volatile
  6605                           
  6606                           ;LCD.c: 54:     PORTB = 0;
  6607  0B33  1283               	bcf	3,5	;RP0=0, select bank0
  6608  0B34  1303               	bcf	3,6	;RP1=0, select bank0
  6609  0B35  0186               	clrf	6	;volatile
  6610                           
  6611                           ;LCD.c: 56:     TRISD = 0;
  6612  0B36  1683               	bsf	3,5	;RP0=1, select bank1
  6613  0B37  1303               	bcf	3,6	;RP1=0, select bank1
  6614  0B38  0188               	clrf	8	;volatile
  6615                           
  6616                           ;LCD.c: 57:     PORTD = 0;
  6617  0B39  1283               	bcf	3,5	;RP0=0, select bank0
  6618  0B3A  1303               	bcf	3,6	;RP1=0, select bank0
  6619  0B3B  0188               	clrf	8	;volatile
  6620                           
  6621                           ;LCD.c: 58:     TRISC = 0;
  6622  0B3C  1683               	bsf	3,5	;RP0=1, select bank1
  6623  0B3D  1303               	bcf	3,6	;RP1=0, select bank1
  6624  0B3E  0187               	clrf	7	;volatile
  6625                           
  6626                           ;LCD.c: 59:     PORTC = 0;
  6627  0B3F  1283               	bcf	3,5	;RP0=0, select bank0
  6628  0B40  1303               	bcf	3,6	;RP1=0, select bank0
  6629  0B41  0187               	clrf	7	;volatile
  6630                           
  6631                           ;LCD.c: 61:     ANSEL = 0;
  6632  0B42  1683               	bsf	3,5	;RP0=1, select bank3
  6633  0B43  1703               	bsf	3,6	;RP1=1, select bank3
  6634  0B44  0188               	clrf	8	;volatile
  6635                           
  6636                           ;LCD.c: 62:     TRISA = 0;
  6637  0B45  1683               	bsf	3,5	;RP0=1, select bank1
  6638  0B46  1303               	bcf	3,6	;RP1=0, select bank1
  6639  0B47  0185               	clrf	5	;volatile
  6640                           
  6641                           ;LCD.c: 63:     PORTA = 0;
  6642  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  6643  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  6644  0B4A  0185               	clrf	5	;volatile
  6645  0B4B  0008               	return
  6646  0B4C                     __end_of_LCD_SetupPorts:	
  6647                           
  6648                           	psect	text38
  6649  0A1F                     __ptext38:	
  6650 ;; *************** function _LCD_Reset *****************
  6651 ;; Defined at:
  6652 ;;		line 66 in file "LCD.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  1    wreg      void 
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0, pclath, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6666 ;;      Params:         0       0       0       0
  6667 ;;      Locals:         0       0       0       0
  6668 ;;      Temps:          0       0       0       0
  6669 ;;      Totals:         0       0       0       0
  6670 ;;Total ram usage:        0 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    6
  6673 ;; This function calls:
  6674 ;;		_LCD_SetX
  6675 ;;		_LCD_SetY
  6676 ;;		_LCD_SetZ
  6677 ;; This function is called by:
  6678 ;;		_main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _LCD_Reset
  6684  0A1F                     _LCD_Reset:	
  6685                           
  6686                           ;LCD.c: 68:     RD1 = 0;
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _LCD_Reset: [wreg+status,2+status,0+pclath+cstack]
  6690  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  6691  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  6692  0A21  1088               	bcf	8,1	;volatile
  6693                           
  6694                           ;LCD.c: 69:     __nop();
  6695  0A22  0000               	nop
  6696                           
  6697                           ;LCD.c: 70:     __nop();
  6698  0A23  0000               	nop
  6699                           
  6700                           ;LCD.c: 71:     __nop();
  6701  0A24  0000               	nop
  6702                           
  6703                           ;LCD.c: 72:     __nop();
  6704  0A25  0000               	nop
  6705                           
  6706                           ;LCD.c: 73:     RD1 = 1;
  6707  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  6708  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  6709  0A28  1488               	bsf	8,1	;volatile
  6710                           
  6711                           ;LCD.c: 74:     __nop();
  6712  0A29  0000               	nop
  6713                           
  6714                           ;LCD.c: 75:     LCD_SetX(0);
  6715  0A2A  3000               	movlw	0
  6716  0A2B  158A  216C  158A   	fcall	_LCD_SetX
  6717                           
  6718                           ;LCD.c: 76:     LCD_SetY(0);
  6719  0A2E  3000               	movlw	0
  6720  0A2F  158A  2178  158A   	fcall	_LCD_SetY
  6721                           
  6722                           ;LCD.c: 77:     LCD_SetZ(0);
  6723  0A32  3000               	movlw	0
  6724  0A33  158A  2184         	fcall	_LCD_SetZ
  6725  0A35  0008               	return
  6726  0A36                     __end_of_LCD_Reset:	
  6727                           
  6728                           	psect	text39
  6729  0984                     __ptext39:	
  6730 ;; *************** function _LCD_SetZ *****************
  6731 ;; Defined at:
  6732 ;;		line 140 in file "LCD.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  z               1    wreg     unsigned char 
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;  z               1    1[BANK0 ] unsigned char 
  6737 ;; Return value:  Size  Location     Type
  6738 ;;                  1    wreg      void 
  6739 ;; Registers used:
  6740 ;;		wreg, status,2, status,0, pclath, cstack
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6746 ;;      Params:         0       0       0       0
  6747 ;;      Locals:         0       1       0       0
  6748 ;;      Temps:          0       1       0       0
  6749 ;;      Totals:         0       2       0       0
  6750 ;;Total ram usage:        2 bytes
  6751 ;; Hardware stack levels used:    1
  6752 ;; Hardware stack levels required when called:    5
  6753 ;; This function calls:
  6754 ;;		_LCD_Write
  6755 ;; This function is called by:
  6756 ;;		_LCD_Reset
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function _LCD_SetZ
  6762  0984                     _LCD_SetZ:	
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in _LCD_SetZ: [wreg+status,2+status,0+pclath+cstack]
  6766                           ;LCD_SetZ@z stored from wreg
  6767  0984  1283               	bcf	3,5	;RP0=0, select bank0
  6768  0985  1303               	bcf	3,6	;RP1=0, select bank0
  6769  0986  00A1               	movwf	LCD_SetZ@z
  6770                           
  6771                           ;LCD.c: 140: void LCD_SetZ(uint8_t z);LCD.c: 141: {;LCD.c: 142:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xC0 | z);
  6772  0987  0821               	movf	LCD_SetZ@z,w
  6773  0988  38C0               	iorlw	192
  6774  0989  00A0               	movwf	??_LCD_SetZ
  6775  098A  0820               	movf	??_LCD_SetZ,w
  6776  098B  00F8               	movwf	LCD_Write@data
  6777  098C  3000               	movlw	0
  6778  098D  158A  2236         	fcall	_LCD_Write
  6779  098F  0008               	return
  6780  0990                     __end_of_LCD_SetZ:	
  6781                           
  6782                           	psect	text40
  6783  0BD8                     __ptext40:	
  6784 ;; *************** function _LCD_Clear *****************
  6785 ;; Defined at:
  6786 ;;		line 145 in file "LCD.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;		None
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  y               1    3[BANK0 ] unsigned char 
  6791 ;;  x               1    4[BANK0 ] unsigned char 
  6792 ;; Return value:  Size  Location     Type
  6793 ;;                  1    wreg      void 
  6794 ;; Registers used:
  6795 ;;		wreg, status,2, status,0, pclath, cstack
  6796 ;; Tracked objects:
  6797 ;;		On entry : 0/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: 0/0
  6800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6801 ;;      Params:         0       0       0       0
  6802 ;;      Locals:         0       2       0       0
  6803 ;;      Temps:          0       1       0       0
  6804 ;;      Totals:         0       3       0       0
  6805 ;;Total ram usage:        3 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    6
  6808 ;; This function calls:
  6809 ;;		_LCD_SetX
  6810 ;;		_LCD_SetY
  6811 ;;		_LCD_WriteData
  6812 ;; This function is called by:
  6813 ;;		_main
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           
  6818                           ;psect for function _LCD_Clear
  6819  0BD8                     _LCD_Clear:	
  6820                           
  6821                           ;LCD.c: 147:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  6822                           
  6823                           ;incstack = 0
  6824                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  6825  0BD8  1283               	bcf	3,5	;RP0=0, select bank0
  6826  0BD9  1303               	bcf	3,6	;RP1=0, select bank0
  6827  0BDA  01A4               	clrf	LCD_Clear@x
  6828  0BDB                     l3136:	
  6829                           
  6830                           ;LCD.c: 148:     {;LCD.c: 149:         LCD_SetX(x);
  6831  0BDB  0824               	movf	LCD_Clear@x,w
  6832  0BDC  158A  216C  158A   	fcall	_LCD_SetX
  6833                           
  6834                           ;LCD.c: 150:         LCD_SetY(0);
  6835  0BDF  3000               	movlw	0
  6836  0BE0  158A  2178  158A   	fcall	_LCD_SetY
  6837                           
  6838                           ;LCD.c: 151:         for (uint8_t y = 0; y < LCD_SEGMENT_HEIGHT; ++y)
  6839  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  6840  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  6841  0BE5  01A3               	clrf	LCD_Clear@y
  6842  0BE6                     l3144:	
  6843                           
  6844                           ;LCD.c: 152:             LCD_WriteData(0);
  6845  0BE6  3000               	movlw	0
  6846  0BE7  158A  2156  158A   	fcall	_LCD_WriteData
  6847  0BEA  3001               	movlw	1
  6848  0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  6849  0BEC  1303               	bcf	3,6	;RP1=0, select bank0
  6850  0BED  00A2               	movwf	??_LCD_Clear
  6851  0BEE  0822               	movf	??_LCD_Clear,w
  6852  0BEF  07A3               	addwf	LCD_Clear@y,f
  6853  0BF0  3040               	movlw	64
  6854  0BF1  0223               	subwf	LCD_Clear@y,w
  6855  0BF2  1C03               	skipc
  6856  0BF3  2BE6               	goto	l3144
  6857                           
  6858                           ;LCD.c: 153:     }
  6859  0BF4  3001               	movlw	1
  6860  0BF5  00A2               	movwf	??_LCD_Clear
  6861  0BF6  0822               	movf	??_LCD_Clear,w
  6862  0BF7  07A4               	addwf	LCD_Clear@x,f
  6863  0BF8  3008               	movlw	8
  6864  0BF9  0224               	subwf	LCD_Clear@x,w
  6865  0BFA  1803               	btfsc	3,0
  6866  0BFB  0008               	return
  6867  0BFC  2BDB               	goto	l3136
  6868  0BFD                     __end_of_LCD_Clear:	
  6869                           
  6870                           	psect	text41
  6871  0CE2                     __ptext41:	
  6872 ;; *************** function _DrawTetris *****************
  6873 ;; Defined at:
  6874 ;;		line 53 in file "Drawing.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;  tetrisGame      1    wreg     PTR struct .
  6877 ;;		 -> main@tetrisGame(63), 
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;  tetrisGame      1   17[BANK0 ] PTR struct .
  6880 ;;		 -> main@tetrisGame(63), 
  6881 ;;  x               1   22[BANK0 ] unsigned char 
  6882 ;;  rightMask       2   20[BANK0 ] unsigned int 
  6883 ;;  leftMask        2   18[BANK0 ] unsigned int 
  6884 ;; Return value:  Size  Location     Type
  6885 ;;                  1    wreg      void 
  6886 ;; Registers used:
  6887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6888 ;; Tracked objects:
  6889 ;;		On entry : 0/0
  6890 ;;		On exit  : 0/0
  6891 ;;		Unchanged: 0/0
  6892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6893 ;;      Params:         0       0       0       0
  6894 ;;      Locals:         0       6       0       0
  6895 ;;      Temps:          0       1       0       0
  6896 ;;      Totals:         0       7       0       0
  6897 ;;Total ram usage:        7 bytes
  6898 ;; Hardware stack levels used:    1
  6899 ;; Hardware stack levels required when called:    7
  6900 ;; This function calls:
  6901 ;;		_DrawTetrisGameColumn
  6902 ;; This function is called by:
  6903 ;;		_main
  6904 ;; This function uses a non-reentrant model
  6905 ;;
  6906                           
  6907                           
  6908                           ;psect for function _DrawTetris
  6909  0CE2                     _DrawTetris:	
  6910                           
  6911                           ;incstack = 0
  6912                           ; Regs used in _DrawTetris: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6913                           ;DrawTetris@tetrisGame stored from wreg
  6914  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
  6915  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  6916  0CE4  00B1               	movwf	DrawTetris@tetrisGame
  6917                           
  6918                           ;Drawing.c: 53: void DrawTetris(Tetris_Game *tetrisGame);Drawing.c: 54: {;Drawing.c: 55:
      +                               uint16_t leftMask = 0b0000000000000010;
  6919  0CE5  3002               	movlw	2
  6920  0CE6  00B2               	movwf	DrawTetris@leftMask
  6921  0CE7  3000               	movlw	0
  6922  0CE8  00B3               	movwf	DrawTetris@leftMask+1
  6923                           
  6924                           ;Drawing.c: 56:     uint16_t rightMask = 0b0000000000000001;
  6925  0CE9  3001               	movlw	1
  6926  0CEA  00B4               	movwf	DrawTetris@rightMask
  6927  0CEB  3000               	movlw	0
  6928  0CEC  00B5               	movwf	DrawTetris@rightMask+1
  6929                           
  6930                           ;Drawing.c: 58:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  6931  0CED  01B6               	clrf	DrawTetris@x
  6932  0CEE                     l3206:	
  6933                           
  6934                           ;Drawing.c: 59:     {;Drawing.c: 60:         DrawTetrisGameColumn(tetrisGame, x, rightMa
      +                          sk, leftMask);
  6935  0CEE  0836               	movf	DrawTetris@x,w
  6936  0CEF  00B0               	movwf	??_DrawTetris
  6937  0CF0  0830               	movf	??_DrawTetris,w
  6938  0CF1  00A2               	movwf	DrawTetrisGameColumn@x
  6939  0CF2  0835               	movf	DrawTetris@rightMask+1,w
  6940  0CF3  00A4               	movwf	DrawTetrisGameColumn@rightMask+1
  6941  0CF4  0834               	movf	DrawTetris@rightMask,w
  6942  0CF5  00A3               	movwf	DrawTetrisGameColumn@rightMask
  6943  0CF6  0833               	movf	DrawTetris@leftMask+1,w
  6944  0CF7  00A6               	movwf	DrawTetrisGameColumn@leftMask+1
  6945  0CF8  0832               	movf	DrawTetris@leftMask,w
  6946  0CF9  00A5               	movwf	DrawTetrisGameColumn@leftMask
  6947  0CFA  0831               	movf	DrawTetris@tetrisGame,w
  6948  0CFB  118A  269F  158A   	fcall	_DrawTetrisGameColumn
  6949                           
  6950                           ;Drawing.c: 61:         leftMask <<= 2;
  6951  0CFE  3002               	movlw	2
  6952  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  6953  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  6954  0D01                     u2685:	
  6955  0D01  1003               	clrc
  6956  0D02  0DB2               	rlf	DrawTetris@leftMask,f
  6957  0D03  0DB3               	rlf	DrawTetris@leftMask+1,f
  6958  0D04  3EFF               	addlw	-1
  6959  0D05  1D03               	skipz
  6960  0D06  2D01               	goto	u2685
  6961                           
  6962                           ;Drawing.c: 62:         rightMask <<= 2;
  6963  0D07  3002               	movlw	2
  6964  0D08                     u2695:	
  6965  0D08  1003               	clrc
  6966  0D09  0DB4               	rlf	DrawTetris@rightMask,f
  6967  0D0A  0DB5               	rlf	DrawTetris@rightMask+1,f
  6968  0D0B  3EFF               	addlw	-1
  6969  0D0C  1D03               	skipz
  6970  0D0D  2D08               	goto	u2695
  6971                           
  6972                           ;Drawing.c: 63:     }
  6973  0D0E  3001               	movlw	1
  6974  0D0F  00B0               	movwf	??_DrawTetris
  6975  0D10  0830               	movf	??_DrawTetris,w
  6976  0D11  07B6               	addwf	DrawTetris@x,f
  6977  0D12  3008               	movlw	8
  6978  0D13  0236               	subwf	DrawTetris@x,w
  6979  0D14  1803               	btfsc	3,0
  6980  0D15  0008               	return
  6981  0D16  2CEE               	goto	l3206
  6982  0D17                     __end_of_DrawTetris:	
  6983                           
  6984                           	psect	text42
  6985  069F                     __ptext42:	
  6986 ;; *************** function _DrawTetrisGameColumn *****************
  6987 ;; Defined at:
  6988 ;;		line 15 in file "Drawing.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  tetrisGame      1    wreg     PTR struct .
  6991 ;;		 -> main@tetrisGame(63), 
  6992 ;;  x               1    2[BANK0 ] unsigned char 
  6993 ;;  rightMask       2    3[BANK0 ] unsigned int 
  6994 ;;  leftMask        2    5[BANK0 ] unsigned int 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  tetrisGame      1    9[BANK0 ] PTR struct .
  6997 ;;		 -> main@tetrisGame(63), 
  6998 ;;  i               1   13[BANK0 ] unsigned char 
  6999 ;;  gameRow         2   11[BANK0 ] unsigned int 
  7000 ;;  lcdRow          1   15[BANK0 ] unsigned char 
  7001 ;;  y               1   14[BANK0 ] unsigned char 
  7002 ;;  tableY          1   10[BANK0 ] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7012 ;;      Params:         0       5       0       0
  7013 ;;      Locals:         0       7       0       0
  7014 ;;      Temps:          0       2       0       0
  7015 ;;      Totals:         0      14       0       0
  7016 ;;Total ram usage:       14 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    6
  7019 ;; This function calls:
  7020 ;;		_LCD_SegmentSelection
  7021 ;;		_LCD_SetX
  7022 ;;		_LCD_SetY
  7023 ;;		_LCD_WriteData
  7024 ;; This function is called by:
  7025 ;;		_DrawTetris
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           
  7030                           ;psect for function _DrawTetrisGameColumn
  7031  069F                     _DrawTetrisGameColumn:	
  7032                           
  7033                           ;incstack = 0
  7034                           ; Regs used in _DrawTetrisGameColumn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7035                           ;DrawTetrisGameColumn@tetrisGame stored from wreg
  7036  069F  1283               	bcf	3,5	;RP0=0, select bank0
  7037  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  7038  06A1  00A9               	movwf	DrawTetrisGameColumn@tetrisGame
  7039                           
  7040                           ;Drawing.c: 15: static void DrawTetrisGameColumn(Tetris_Game *tetrisGame, uint8_t x, uin
      +                          t16_t rightMask, uint16_t leftMask);Drawing.c: 16: {;Drawing.c: 17:     uint8_t tableY =
      +                           0;
  7041  06A2  01AA               	clrf	DrawTetrisGameColumn@tableY
  7042                           
  7043                           ;Drawing.c: 19:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  7044  06A3  3002               	movlw	2
  7045  06A4  158A  21C8  118A   	fcall	_LCD_SegmentSelection
  7046                           
  7047                           ;Drawing.c: 20:     LCD_SetY(SCORE_SPACE);
  7048  06A7  3008               	movlw	8
  7049  06A8  158A  2178  118A   	fcall	_LCD_SetY
  7050                           
  7051                           ;Drawing.c: 21:     LCD_SetX(x);
  7052  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  7053  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  7054  06AD  0822               	movf	DrawTetrisGameColumn@x,w
  7055  06AE  158A  216C  118A   	fcall	_LCD_SetX
  7056                           
  7057                           ;Drawing.c: 23:     for (uint8_t y = SCORE_SPACE; y < LCD_HEIGHT; y += PIXEL_HEIGHT)
  7058  06B1  3008               	movlw	8
  7059  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  7060  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  7061  06B4  00A7               	movwf	??_DrawTetrisGameColumn
  7062  06B5  0827               	movf	??_DrawTetrisGameColumn,w
  7063  06B6  00AE               	movwf	DrawTetrisGameColumn@y
  7064  06B7                     l3090:	
  7065                           
  7066                           ;Drawing.c: 24:     {;Drawing.c: 25:         uint16_t gameRow = tetrisGame->table[tableY
      +                          ];
  7067  06B7  082A               	movf	DrawTetrisGameColumn@tableY,w
  7068  06B8  00A7               	movwf	??_DrawTetrisGameColumn
  7069  06B9  0727               	addwf	??_DrawTetrisGameColumn,w
  7070  06BA  0729               	addwf	DrawTetrisGameColumn@tetrisGame,w
  7071  06BB  00A8               	movwf	??_DrawTetrisGameColumn+1
  7072  06BC  0828               	movf	??_DrawTetrisGameColumn+1,w
  7073  06BD  0084               	movwf	4
  7074  06BE  1383               	bcf	3,7	;select IRP bank0
  7075  06BF  0800               	movf	0,w
  7076  06C0  00AB               	movwf	DrawTetrisGameColumn@gameRow
  7077  06C1  0A84               	incf	4,f
  7078  06C2  0800               	movf	0,w
  7079  06C3  00AC               	movwf	DrawTetrisGameColumn@gameRow+1
  7080                           
  7081                           ;Drawing.c: 26:         uint8_t lcdRow = 0;
  7082  06C4  01AF               	clrf	DrawTetrisGameColumn@lcdRow
  7083                           
  7084                           ;Drawing.c: 27:         if (gameRow & rightMask)
  7085  06C5  0823               	movf	DrawTetrisGameColumn@rightMask,w
  7086  06C6  052B               	andwf	DrawTetrisGameColumn@gameRow,w
  7087  06C7  00A7               	movwf	??_DrawTetrisGameColumn
  7088  06C8  0824               	movf	DrawTetrisGameColumn@rightMask+1,w
  7089  06C9  052C               	andwf	DrawTetrisGameColumn@gameRow+1,w
  7090  06CA  00A8               	movwf	??_DrawTetrisGameColumn+1
  7091  06CB  0827               	movf	??_DrawTetrisGameColumn,w
  7092  06CC  0428               	iorwf	??_DrawTetrisGameColumn+1,w
  7093  06CD  1903               	btfsc	3,2
  7094  06CE  2ED3               	goto	l3098
  7095                           
  7096                           ;Drawing.c: 28:             lcdRow = 0x0F;
  7097  06CF  300F               	movlw	15
  7098  06D0  00A7               	movwf	??_DrawTetrisGameColumn
  7099  06D1  0827               	movf	??_DrawTetrisGameColumn,w
  7100  06D2  00AF               	movwf	DrawTetrisGameColumn@lcdRow
  7101  06D3                     l3098:	
  7102                           
  7103                           ;Drawing.c: 29:         if (gameRow & leftMask)
  7104  06D3  0825               	movf	DrawTetrisGameColumn@leftMask,w
  7105  06D4  052B               	andwf	DrawTetrisGameColumn@gameRow,w
  7106  06D5  00A7               	movwf	??_DrawTetrisGameColumn
  7107  06D6  0826               	movf	DrawTetrisGameColumn@leftMask+1,w
  7108  06D7  052C               	andwf	DrawTetrisGameColumn@gameRow+1,w
  7109  06D8  00A8               	movwf	??_DrawTetrisGameColumn+1
  7110  06D9  0827               	movf	??_DrawTetrisGameColumn,w
  7111  06DA  0428               	iorwf	??_DrawTetrisGameColumn+1,w
  7112  06DB  1903               	btfsc	3,2
  7113  06DC  2EE1               	goto	l418
  7114                           
  7115                           ;Drawing.c: 30:             lcdRow |= 0xF0;
  7116  06DD  30F0               	movlw	240
  7117  06DE  00A7               	movwf	??_DrawTetrisGameColumn
  7118  06DF  0827               	movf	??_DrawTetrisGameColumn,w
  7119  06E0  04AF               	iorwf	DrawTetrisGameColumn@lcdRow,f
  7120  06E1                     l418:	
  7121                           
  7122                           ;Drawing.c: 32:         if (y == 63)
  7123  06E1  303F               	movlw	63
  7124  06E2  062E               	xorwf	DrawTetrisGameColumn@y,w
  7125  06E3  1D03               	btfss	3,2
  7126  06E4  2F10               	goto	l3104
  7127                           
  7128                           ;Drawing.c: 33:         {;Drawing.c: 34:             LCD_WriteData(lcdRow);
  7129  06E5  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7130  06E6  158A  2156  118A   	fcall	_LCD_WriteData
  7131                           
  7132                           ;Drawing.c: 35:             LCD_SegmentSelection(LCD_BOTTOM_SEGMENT);
  7133  06E9  3001               	movlw	1
  7134  06EA  158A  21C8  118A   	fcall	_LCD_SegmentSelection
  7135                           
  7136                           ;Drawing.c: 36:             LCD_SetX(x);
  7137  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  7138  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  7139  06EF  0822               	movf	DrawTetrisGameColumn@x,w
  7140  06F0  158A  216C  118A   	fcall	_LCD_SetX
  7141                           
  7142                           ;Drawing.c: 37:             LCD_SetY(0);
  7143  06F3  3000               	movlw	0
  7144  06F4  158A  2178  118A   	fcall	_LCD_SetY
  7145                           
  7146                           ;Drawing.c: 38:             LCD_WriteData(lcdRow);
  7147  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  7148  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  7149  06F9  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7150  06FA  158A  2156  118A   	fcall	_LCD_WriteData
  7151                           
  7152                           ;Drawing.c: 39:             LCD_WriteData(lcdRow);
  7153  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  7154  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  7155  06FF  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7156  0700  158A  2156  118A   	fcall	_LCD_WriteData
  7157                           
  7158                           ;Drawing.c: 40:             LCD_WriteData(lcdRow);
  7159  0703  1283               	bcf	3,5	;RP0=0, select bank0
  7160  0704  1303               	bcf	3,6	;RP1=0, select bank0
  7161  0705  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7162  0706  158A  2156  118A   	fcall	_LCD_WriteData
  7163                           
  7164                           ;Drawing.c: 41:             LCD_WriteData(lcdRow);
  7165  0709  1283               	bcf	3,5	;RP0=0, select bank0
  7166  070A  1303               	bcf	3,6	;RP1=0, select bank0
  7167  070B  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7168  070C  158A  2156  118A   	fcall	_LCD_WriteData
  7169                           
  7170                           ;Drawing.c: 42:         }
  7171  070F  2F1F               	goto	l3116
  7172  0710                     l3104:	
  7173                           
  7174                           ;Drawing.c: 44:         {;Drawing.c: 45:             for (uint8_t i = 0; i < PIXEL_HEIGH
      +                          T; ++i)
  7175  0710  01AD               	clrf	DrawTetrisGameColumn@i
  7176  0711                     l3110:	
  7177                           
  7178                           ;Drawing.c: 46:                 LCD_WriteData(lcdRow);
  7179  0711  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7180  0712  158A  2156  118A   	fcall	_LCD_WriteData
  7181  0715  3001               	movlw	1
  7182  0716  1283               	bcf	3,5	;RP0=0, select bank0
  7183  0717  1303               	bcf	3,6	;RP1=0, select bank0
  7184  0718  00A7               	movwf	??_DrawTetrisGameColumn
  7185  0719  0827               	movf	??_DrawTetrisGameColumn,w
  7186  071A  07AD               	addwf	DrawTetrisGameColumn@i,f
  7187  071B  3005               	movlw	5
  7188  071C  022D               	subwf	DrawTetrisGameColumn@i,w
  7189  071D  1C03               	skipc
  7190  071E  2F11               	goto	l3110
  7191  071F                     l3116:	
  7192                           
  7193                           ;Drawing.c: 49:         ++tableY;
  7194  071F  3001               	movlw	1
  7195  0720  1283               	bcf	3,5	;RP0=0, select bank0
  7196  0721  1303               	bcf	3,6	;RP1=0, select bank0
  7197  0722  00A7               	movwf	??_DrawTetrisGameColumn
  7198  0723  0827               	movf	??_DrawTetrisGameColumn,w
  7199  0724  07AA               	addwf	DrawTetrisGameColumn@tableY,f
  7200                           
  7201                           ;Drawing.c: 50:     }
  7202  0725  3005               	movlw	5
  7203  0726  00A7               	movwf	??_DrawTetrisGameColumn
  7204  0727  0827               	movf	??_DrawTetrisGameColumn,w
  7205  0728  07AE               	addwf	DrawTetrisGameColumn@y,f
  7206  0729  3080               	movlw	128
  7207  072A  022E               	subwf	DrawTetrisGameColumn@y,w
  7208  072B  1803               	btfsc	3,0
  7209  072C  0008               	return
  7210  072D  2EB7               	goto	l3090
  7211  072E                     __end_of_DrawTetrisGameColumn:	
  7212                           
  7213                           	psect	text43
  7214  0956                     __ptext43:	
  7215 ;; *************** function _LCD_WriteData *****************
  7216 ;; Defined at:
  7217 ;;		line 102 in file "LCD.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  data            1    wreg     unsigned char 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  data            1    1[BANK0 ] unsigned char 
  7222 ;; Return value:  Size  Location     Type
  7223 ;;                  1    wreg      void 
  7224 ;; Registers used:
  7225 ;;		wreg, status,2, status,0, pclath, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7231 ;;      Params:         0       0       0       0
  7232 ;;      Locals:         0       1       0       0
  7233 ;;      Temps:          0       1       0       0
  7234 ;;      Totals:         0       2       0       0
  7235 ;;Total ram usage:        2 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    5
  7238 ;; This function calls:
  7239 ;;		_LCD_Write
  7240 ;; This function is called by:
  7241 ;;		_LCD_Clear
  7242 ;;		_DrawTetrisGameColumn
  7243 ;;		_DrawLogo
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _LCD_WriteData
  7249  0956                     _LCD_WriteData:	
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0+pclath+cstack]
  7253                           ;LCD_WriteData@data stored from wreg
  7254  0956  1283               	bcf	3,5	;RP0=0, select bank0
  7255  0957  1303               	bcf	3,6	;RP1=0, select bank0
  7256  0958  00A1               	movwf	LCD_WriteData@data
  7257                           
  7258                           ;LCD.c: 102: void LCD_WriteData(uint8_t data);LCD.c: 103: {;LCD.c: 104:     LCD_Write(LC
      +                          D_WRITE_DATA, data);
  7259  0959  0821               	movf	LCD_WriteData@data,w
  7260  095A  00A0               	movwf	??_LCD_WriteData
  7261  095B  0820               	movf	??_LCD_WriteData,w
  7262  095C  00F8               	movwf	LCD_Write@data
  7263  095D  3001               	movlw	1
  7264  095E  158A  2236         	fcall	_LCD_Write
  7265  0960  0008               	return
  7266  0961                     __end_of_LCD_WriteData:	
  7267                           
  7268                           	psect	text44
  7269  0978                     __ptext44:	
  7270 ;; *************** function _LCD_SetY *****************
  7271 ;; Defined at:
  7272 ;;		line 130 in file "LCD.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;  y               1    wreg     unsigned char 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  y               1    1[BANK0 ] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, status,2, status,0, pclath, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7286 ;;      Params:         0       0       0       0
  7287 ;;      Locals:         0       1       0       0
  7288 ;;      Temps:          0       1       0       0
  7289 ;;      Totals:         0       2       0       0
  7290 ;;Total ram usage:        2 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    5
  7293 ;; This function calls:
  7294 ;;		_LCD_Write
  7295 ;; This function is called by:
  7296 ;;		_LCD_Reset
  7297 ;;		_LCD_Clear
  7298 ;;		_DrawTetrisGameColumn
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           
  7303                           ;psect for function _LCD_SetY
  7304  0978                     _LCD_SetY:	
  7305                           
  7306                           ;incstack = 0
  7307                           ; Regs used in _LCD_SetY: [wreg+status,2+status,0+pclath+cstack]
  7308                           ;LCD_SetY@y stored from wreg
  7309  0978  1283               	bcf	3,5	;RP0=0, select bank0
  7310  0979  1303               	bcf	3,6	;RP1=0, select bank0
  7311  097A  00A1               	movwf	LCD_SetY@y
  7312                           
  7313                           ;LCD.c: 130: void LCD_SetY(uint8_t y);LCD.c: 131: {;LCD.c: 132:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0x40 | y);
  7314  097B  0821               	movf	LCD_SetY@y,w
  7315  097C  3840               	iorlw	64
  7316  097D  00A0               	movwf	??_LCD_SetY
  7317  097E  0820               	movf	??_LCD_SetY,w
  7318  097F  00F8               	movwf	LCD_Write@data
  7319  0980  3000               	movlw	0
  7320  0981  158A  2236         	fcall	_LCD_Write
  7321  0983  0008               	return
  7322  0984                     __end_of_LCD_SetY:	
  7323                           
  7324                           	psect	text45
  7325  096C                     __ptext45:	
  7326 ;; *************** function _LCD_SetX *****************
  7327 ;; Defined at:
  7328 ;;		line 135 in file "LCD.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  x               1    wreg     unsigned char 
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;  x               1    1[BANK0 ] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  1    wreg      void 
  7335 ;; Registers used:
  7336 ;;		wreg, status,2, status,0, pclath, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7342 ;;      Params:         0       0       0       0
  7343 ;;      Locals:         0       1       0       0
  7344 ;;      Temps:          0       1       0       0
  7345 ;;      Totals:         0       2       0       0
  7346 ;;Total ram usage:        2 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    5
  7349 ;; This function calls:
  7350 ;;		_LCD_Write
  7351 ;; This function is called by:
  7352 ;;		_LCD_Reset
  7353 ;;		_LCD_Clear
  7354 ;;		_DrawTetrisGameColumn
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           
  7359                           ;psect for function _LCD_SetX
  7360  096C                     _LCD_SetX:	
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _LCD_SetX: [wreg+status,2+status,0+pclath+cstack]
  7364                           ;LCD_SetX@x stored from wreg
  7365  096C  1283               	bcf	3,5	;RP0=0, select bank0
  7366  096D  1303               	bcf	3,6	;RP1=0, select bank0
  7367  096E  00A1               	movwf	LCD_SetX@x
  7368                           
  7369                           ;LCD.c: 135: void LCD_SetX(uint8_t x);LCD.c: 136: {;LCD.c: 137:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xB8 | x);
  7370  096F  0821               	movf	LCD_SetX@x,w
  7371  0970  38B8               	iorlw	184
  7372  0971  00A0               	movwf	??_LCD_SetX
  7373  0972  0820               	movf	??_LCD_SetX,w
  7374  0973  00F8               	movwf	LCD_Write@data
  7375  0974  3000               	movlw	0
  7376  0975  158A  2236         	fcall	_LCD_Write
  7377  0977  0008               	return
  7378  0978                     __end_of_LCD_SetX:	
  7379                           
  7380                           	psect	text46
  7381  0A36                     __ptext46:	
  7382 ;; *************** function _LCD_Write *****************
  7383 ;; Defined at:
  7384 ;;		line 35 in file "LCD.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  mode            1    wreg     enum E1321
  7387 ;;  data            1    8[COMMON] unsigned char 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;  mode            1    9[COMMON] enum E1321
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      void 
  7392 ;; Registers used:
  7393 ;;		wreg, status,2, status,0, pclath, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7399 ;;      Params:         1       0       0       0
  7400 ;;      Locals:         1       0       0       0
  7401 ;;      Temps:          0       0       0       0
  7402 ;;      Totals:         2       0       0       0
  7403 ;;Total ram usage:        2 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    4
  7406 ;; This function calls:
  7407 ;;		_LCD_BlockWhileBusy
  7408 ;; This function is called by:
  7409 ;;		_LCD_WriteData
  7410 ;;		_LCD_TurnOn
  7411 ;;		_LCD_SetY
  7412 ;;		_LCD_SetX
  7413 ;;		_LCD_SetZ
  7414 ;;		_LCD_TurnOff
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _LCD_Write
  7420  0A36                     _LCD_Write:	
  7421                           
  7422                           ;incstack = 0
  7423                           ; Regs used in _LCD_Write: [wreg+status,2+status,0+pclath+cstack]
  7424                           ;LCD_Write@mode stored from wreg
  7425  0A36  00F9               	movwf	LCD_Write@mode
  7426                           
  7427                           ;LCD.c: 35: static void LCD_Write(LCD_WriteMode mode, uint8_t data);LCD.c: 36: {;LCD.c: 
      +                          37:     LCD_BlockWhileBusy();
  7428  0A37  158A  2145  158A   	fcall	_LCD_BlockWhileBusy
  7429                           
  7430                           ;LCD.c: 39:     TRISA = 0;
  7431  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
  7432  0A3B  1303               	bcf	3,6	;RP1=0, select bank1
  7433  0A3C  0185               	clrf	5	;volatile
  7434                           
  7435                           ;LCD.c: 40:     RC3 = 0;
  7436  0A3D  1283               	bcf	3,5	;RP0=0, select bank0
  7437  0A3E  1303               	bcf	3,6	;RP1=0, select bank0
  7438  0A3F  1187               	bcf	7,3	;volatile
  7439                           
  7440                           ;LCD.c: 41:     RC2 = mode;
  7441  0A40  1C79               	btfss	LCD_Write@mode,0
  7442  0A41  2A46               	goto	u1220
  7443  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  7444  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  7445  0A44  1507               	bsf	7,2	;volatile
  7446  0A45  2A49               	goto	l2046
  7447  0A46                     u1220:	
  7448  0A46  1283               	bcf	3,5	;RP0=0, select bank0
  7449  0A47  1303               	bcf	3,6	;RP1=0, select bank0
  7450  0A48  1107               	bcf	7,2	;volatile
  7451  0A49                     l2046:	
  7452                           
  7453                           ;LCD.c: 42:     PORTA = data;
  7454  0A49  0878               	movf	LCD_Write@data,w
  7455  0A4A  0085               	movwf	5	;volatile
  7456                           
  7457                           ;LCD.c: 43:     RD0 = 1;
  7458  0A4B  1408               	bsf	8,0	;volatile
  7459                           
  7460                           ;LCD.c: 44:     __nop();
  7461  0A4C  0000               	nop
  7462                           
  7463                           ;LCD.c: 45:     RD0 = 0;
  7464  0A4D  1283               	bcf	3,5	;RP0=0, select bank0
  7465  0A4E  1303               	bcf	3,6	;RP1=0, select bank0
  7466  0A4F  1008               	bcf	8,0	;volatile
  7467  0A50  0008               	return
  7468  0A51                     __end_of_LCD_Write:	
  7469                           
  7470                           	psect	text47
  7471  0945                     __ptext47:	
  7472 ;; *************** function _LCD_BlockWhileBusy *****************
  7473 ;; Defined at:
  7474 ;;		line 28 in file "LCD.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;		None
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;		None
  7479 ;; Return value:  Size  Location     Type
  7480 ;;                  1    wreg      void 
  7481 ;; Registers used:
  7482 ;;		wreg, status,2, pclath, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7488 ;;      Params:         0       0       0       0
  7489 ;;      Locals:         0       0       0       0
  7490 ;;      Temps:          0       0       0       0
  7491 ;;      Totals:         0       0       0       0
  7492 ;;Total ram usage:        0 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    3
  7495 ;; This function calls:
  7496 ;;		_LCD_IsBusy
  7497 ;; This function is called by:
  7498 ;;		_LCD_Write
  7499 ;;		_LCD_ReadData
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           
  7504                           ;psect for function _LCD_BlockWhileBusy
  7505  0945                     _LCD_BlockWhileBusy:	
  7506  0945                     l1990:	
  7507                           ;LCD.c: 30:     while (LCD_IsBusy())
  7508                           
  7509                           ;incstack = 0
  7510                           ; Regs used in _LCD_BlockWhileBusy: [wreg+status,2+pclath+cstack]
  7511                           
  7512                           
  7513                           ;LCD.c: 30:     while (LCD_IsBusy())
  7514  0945  158A  21AB  158A   	fcall	_LCD_IsBusy
  7515  0948  3A00               	xorlw	0
  7516  0949  1903               	btfsc	3,2
  7517  094A  0008               	return
  7518  094B  2945               	goto	l1990
  7519  094C                     __end_of_LCD_BlockWhileBusy:	
  7520                           
  7521                           	psect	text48
  7522  09AB                     __ptext48:	
  7523 ;; *************** function _LCD_IsBusy *****************
  7524 ;; Defined at:
  7525 ;;		line 22 in file "LCD.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;		None
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  status          1    7[COMMON] unsigned char 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      unsigned char 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, pclath, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7539 ;;      Params:         0       0       0       0
  7540 ;;      Locals:         2       0       0       0
  7541 ;;      Temps:          1       0       0       0
  7542 ;;      Totals:         3       0       0       0
  7543 ;;Total ram usage:        3 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    2
  7546 ;; This function calls:
  7547 ;;		_LCD_ReadStatus
  7548 ;; This function is called by:
  7549 ;;		_LCD_BlockWhileBusy
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           
  7554                           ;psect for function _LCD_IsBusy
  7555  09AB                     _LCD_IsBusy:	
  7556                           
  7557                           ;LCD.c: 24:     uint8_t status = LCD_ReadStatus();
  7558                           
  7559                           ;incstack = 0
  7560                           ; Regs used in _LCD_IsBusy: [wreg+status,2+pclath+cstack]
  7561  09AB  158A  21D8  158A   	fcall	_LCD_ReadStatus
  7562  09AE  00F5               	movwf	??_LCD_IsBusy
  7563  09AF  0875               	movf	??_LCD_IsBusy,w
  7564  09B0  00F7               	movwf	LCD_IsBusy@status
  7565                           
  7566                           ;LCD.c: 25:     return (status & LCD_BUSY_FLAG) || (status & LCD_RESET_FLAG);
  7567  09B1  01F6               	clrf	_LCD_IsBusy$584
  7568  09B2  0AF6               	incf	_LCD_IsBusy$584,f
  7569  09B3  1FF7               	btfss	LCD_IsBusy@status,7
  7570  09B4  1A77               	btfsc	LCD_IsBusy@status,4
  7571  09B5  29B7               	goto	l1984
  7572  09B6  01F6               	clrf	_LCD_IsBusy$584
  7573  09B7                     l1984:	
  7574  09B7  0876               	movf	_LCD_IsBusy$584,w
  7575  09B8  0008               	return
  7576  09B9                     __end_of_LCD_IsBusy:	
  7577                           
  7578                           	psect	text49
  7579  09D8                     __ptext49:	
  7580 ;; *************** function _LCD_ReadStatus *****************
  7581 ;; Defined at:
  7582 ;;		line 80 in file "LCD.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  status          1    4[COMMON] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      unsigned char 
  7589 ;; Registers used:
  7590 ;;		wreg
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7596 ;;      Params:         0       0       0       0
  7597 ;;      Locals:         1       0       0       0
  7598 ;;      Temps:          1       0       0       0
  7599 ;;      Totals:         2       0       0       0
  7600 ;;Total ram usage:        2 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    1
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_LCD_IsBusy
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           
  7611                           ;psect for function _LCD_ReadStatus
  7612  09D8                     _LCD_ReadStatus:	
  7613                           
  7614                           ;LCD.c: 82:     TRISA = 0xFF;
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _LCD_ReadStatus: [wreg]
  7618  09D8  30FF               	movlw	255
  7619  09D9  1683               	bsf	3,5	;RP0=1, select bank1
  7620  09DA  1303               	bcf	3,6	;RP1=0, select bank1
  7621  09DB  0085               	movwf	5	;volatile
  7622                           
  7623                           ;LCD.c: 83:     RC3 = 1;
  7624  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  7625  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  7626  09DE  1587               	bsf	7,3	;volatile
  7627                           
  7628                           ;LCD.c: 84:     RC2 = 0;
  7629  09DF  1107               	bcf	7,2	;volatile
  7630                           
  7631                           ;LCD.c: 85:     RD0 = 1;
  7632  09E0  1408               	bsf	8,0	;volatile
  7633                           
  7634                           ;LCD.c: 86:     uint8_t status = PORTA;
  7635  09E1  0805               	movf	5,w	;volatile
  7636  09E2  00F3               	movwf	??_LCD_ReadStatus
  7637  09E3  0873               	movf	??_LCD_ReadStatus,w
  7638  09E4  00F4               	movwf	LCD_ReadStatus@status
  7639                           
  7640                           ;LCD.c: 87:     RD0 = 0;
  7641  09E5  1008               	bcf	8,0	;volatile
  7642                           
  7643                           ;LCD.c: 88:     return status;
  7644  09E6  0874               	movf	LCD_ReadStatus@status,w
  7645  09E7  0008               	return
  7646  09E8                     __end_of_LCD_ReadStatus:	
  7647                           
  7648                           	psect	text50
  7649  09C8                     __ptext50:	
  7650 ;; *************** function _LCD_SegmentSelection *****************
  7651 ;; Defined at:
  7652 ;;		line 107 in file "LCD.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  segments        1    wreg     enum E1292
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;  segments        1    3[COMMON] enum E1292
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7666 ;;      Params:         0       0       0       0
  7667 ;;      Locals:         1       0       0       0
  7668 ;;      Temps:          0       0       0       0
  7669 ;;      Totals:         1       0       0       0
  7670 ;;Total ram usage:        1 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    1
  7673 ;; This function calls:
  7674 ;;		Nothing
  7675 ;; This function is called by:
  7676 ;;		_main
  7677 ;;		_DrawTetrisGameColumn
  7678 ;;		_DrawLogo
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           
  7683                           ;psect for function _LCD_SegmentSelection
  7684  09C8                     _LCD_SegmentSelection:	
  7685                           
  7686                           ;incstack = 0
  7687                           ; Regs used in _LCD_SegmentSelection: [wreg]
  7688                           ;LCD_SegmentSelection@segments stored from wreg
  7689  09C8  00F3               	movwf	LCD_SegmentSelection@segments
  7690                           
  7691                           ;LCD.c: 107: void LCD_SegmentSelection(LCD_Segments segments);LCD.c: 108: {;LCD.c: 109: 
      +                              if (segments & LCD_TOP_SEGMENT)
  7692  09C9  1CF3               	btfss	LCD_SegmentSelection@segments,1
  7693  09CA  29CF               	goto	l376
  7694                           
  7695                           ;LCD.c: 110:         RC0 = 0;
  7696  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  7697  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  7698  09CD  1007               	bcf	7,0	;volatile
  7699  09CE  29D2               	goto	l377
  7700  09CF                     l376:	
  7701                           ;LCD.c: 111:     else
  7702                           
  7703                           
  7704                           ;LCD.c: 112:         RC0 = 1;
  7705  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  7706  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  7707  09D1  1407               	bsf	7,0	;volatile
  7708  09D2                     l377:	
  7709                           
  7710                           ;LCD.c: 114:     if (segments & LCD_BOTTOM_SEGMENT)
  7711  09D2  1C73               	btfss	LCD_SegmentSelection@segments,0
  7712  09D3  29D6               	goto	l378
  7713                           
  7714                           ;LCD.c: 115:         RC1 = 0;
  7715  09D4  1087               	bcf	7,1	;volatile
  7716  09D5  0008               	return
  7717  09D6                     l378:	
  7718                           ;LCD.c: 116:     else
  7719                           
  7720                           
  7721                           ;LCD.c: 117:         RC1 = 1;
  7722  09D6  1487               	bsf	7,1	;volatile
  7723  09D7  0008               	return
  7724  09D8                     __end_of_LCD_SegmentSelection:	
  7725                           
  7726                           	psect	text51
  7727  0C28                     __ptext51:	
  7728 ;; *************** function _Buttons_Update *****************
  7729 ;; Defined at:
  7730 ;;		line 51 in file "Buttons.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;  buttons         1    wreg     PTR struct .
  7733 ;;		 -> main@buttons(4), 
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;  buttons         1    6[COMMON] PTR struct .
  7736 ;;		 -> main@buttons(4), 
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      void 
  7739 ;; Registers used:
  7740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7746 ;;      Params:         0       0       0       0
  7747 ;;      Locals:         1       0       0       0
  7748 ;;      Temps:          0       0       0       0
  7749 ;;      Totals:         1       0       0       0
  7750 ;;Total ram usage:        1 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    2
  7753 ;; This function calls:
  7754 ;;		_Buttons_UpdateButton
  7755 ;; This function is called by:
  7756 ;;		_main
  7757 ;; This function uses a non-reentrant model
  7758 ;;
  7759                           
  7760                           
  7761                           ;psect for function _Buttons_Update
  7762  0C28                     _Buttons_Update:	
  7763                           
  7764                           ;incstack = 0
  7765                           ; Regs used in _Buttons_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7766                           ;Buttons_Update@buttons stored from wreg
  7767  0C28  00F6               	movwf	Buttons_Update@buttons
  7768                           
  7769                           ;Buttons.c: 51: void Buttons_Update(Buttons *buttons);Buttons.c: 52: {;Buttons.c: 53:   
      +                            Buttons_UpdateButton(&buttons->left, RB2);
  7770  0C29  3000               	movlw	0
  7771  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  7772  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  7773  0C2C  1906               	btfsc	6,2	;volatile
  7774  0C2D  3001               	movlw	1
  7775  0C2E  00F3               	movwf	Buttons_UpdateButton@nHeld
  7776  0C2F  0876               	movf	Buttons_Update@buttons,w
  7777  0C30  158A  2308  158A   	fcall	_Buttons_UpdateButton
  7778                           
  7779                           ;Buttons.c: 54:     Buttons_UpdateButton(&buttons->right, RB3);
  7780  0C33  3000               	movlw	0
  7781  0C34  1283               	bcf	3,5	;RP0=0, select bank0
  7782  0C35  1303               	bcf	3,6	;RP1=0, select bank0
  7783  0C36  1986               	btfsc	6,3	;volatile
  7784  0C37  3001               	movlw	1
  7785  0C38  00F3               	movwf	Buttons_UpdateButton@nHeld
  7786  0C39  0876               	movf	Buttons_Update@buttons,w
  7787  0C3A  3E01               	addlw	1
  7788  0C3B  158A  2308  158A   	fcall	_Buttons_UpdateButton
  7789                           
  7790                           ;Buttons.c: 55:     Buttons_UpdateButton(&buttons->down, RB4);
  7791  0C3E  3000               	movlw	0
  7792  0C3F  1283               	bcf	3,5	;RP0=0, select bank0
  7793  0C40  1303               	bcf	3,6	;RP1=0, select bank0
  7794  0C41  1A06               	btfsc	6,4	;volatile
  7795  0C42  3001               	movlw	1
  7796  0C43  00F3               	movwf	Buttons_UpdateButton@nHeld
  7797  0C44  0876               	movf	Buttons_Update@buttons,w
  7798  0C45  3E02               	addlw	2
  7799  0C46  158A  2308  158A   	fcall	_Buttons_UpdateButton
  7800                           
  7801                           ;Buttons.c: 56:     Buttons_UpdateButton(&buttons->rotate, RB1);
  7802  0C49  3000               	movlw	0
  7803  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  7804  0C4B  1303               	bcf	3,6	;RP1=0, select bank0
  7805  0C4C  1886               	btfsc	6,1	;volatile
  7806  0C4D  3001               	movlw	1
  7807  0C4E  00F3               	movwf	Buttons_UpdateButton@nHeld
  7808  0C4F  0876               	movf	Buttons_Update@buttons,w
  7809  0C50  3E03               	addlw	3
  7810  0C51  158A  2308         	fcall	_Buttons_UpdateButton
  7811  0C53  0008               	return
  7812  0C54                     __end_of_Buttons_Update:	
  7813                           
  7814                           	psect	text52
  7815  0B08                     __ptext52:	
  7816 ;; *************** function _Buttons_UpdateButton *****************
  7817 ;; Defined at:
  7818 ;;		line 26 in file "Buttons.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  button          1    wreg     PTR struct .
  7821 ;;		 -> main@buttons(4), 
  7822 ;;  nHeld           1    3[COMMON] unsigned char 
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  button          1    5[COMMON] PTR struct .
  7825 ;;		 -> main@buttons(4), 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;                  1    wreg      void 
  7828 ;; Registers used:
  7829 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7835 ;;      Params:         1       0       0       0
  7836 ;;      Locals:         1       0       0       0
  7837 ;;      Temps:          1       0       0       0
  7838 ;;      Totals:         3       0       0       0
  7839 ;;Total ram usage:        3 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:    1
  7842 ;; This function calls:
  7843 ;;		Nothing
  7844 ;; This function is called by:
  7845 ;;		_Buttons_Update
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           
  7850                           ;psect for function _Buttons_UpdateButton
  7851  0B08                     _Buttons_UpdateButton:	
  7852                           
  7853                           ;incstack = 0
  7854                           ; Regs used in _Buttons_UpdateButton: [wreg-fsr0h+status,2+status,0]
  7855                           ;Buttons_UpdateButton@button stored from wreg
  7856  0B08  00F5               	movwf	Buttons_UpdateButton@button
  7857                           
  7858                           ;Buttons.c: 26: static void Buttons_UpdateButton(Button *button, uint8_t nHeld);Buttons.
      +                          c: 27: {;Buttons.c: 28:     if (!nHeld)
  7859  0B09  0873               	movf	Buttons_UpdateButton@nHeld,w
  7860  0B0A  1D03               	btfss	3,2
  7861  0B0B  2B21               	goto	l2460
  7862                           
  7863                           ;Buttons.c: 29:     {;Buttons.c: 30:         button->pressed = !button->held;
  7864  0B0C  0875               	movf	Buttons_UpdateButton@button,w
  7865  0B0D  0084               	movwf	4
  7866  0B0E  1003               	clrc
  7867  0B0F  1383               	bcf	3,7	;select IRP bank0
  7868  0B10  1C80               	btfss	0,1
  7869  0B11  1403               	setc
  7870  0B12  3000               	movlw	0
  7871  0B13  1803               	skipnc
  7872  0B14  3001               	movlw	1
  7873  0B15  00F4               	movwf	??_Buttons_UpdateButton
  7874  0B16  0875               	movf	Buttons_UpdateButton@button,w
  7875  0B17  0084               	movwf	4
  7876  0B18  0800               	movf	0,w
  7877  0B19  0674               	xorwf	??_Buttons_UpdateButton,w
  7878  0B1A  39FE               	andlw	-2
  7879  0B1B  0674               	xorwf	??_Buttons_UpdateButton,w
  7880  0B1C  0080               	movwf	0
  7881                           
  7882                           ;Buttons.c: 31:         button->held = 1;
  7883  0B1D  0875               	movf	Buttons_UpdateButton@button,w
  7884  0B1E  0084               	movwf	4
  7885  0B1F  1480               	bsf	0,1
  7886                           
  7887                           ;Buttons.c: 32:     }
  7888  0B20  0008               	return
  7889  0B21                     l2460:	
  7890                           
  7891                           ;Buttons.c: 34:     {;Buttons.c: 35:         button->pressed = 0;
  7892  0B21  0875               	movf	Buttons_UpdateButton@button,w
  7893  0B22  0084               	movwf	4
  7894  0B23  1383               	bcf	3,7	;select IRP bank0
  7895  0B24  1000               	bcf	0,0
  7896                           
  7897                           ;Buttons.c: 36:         button->held = 0;
  7898  0B25  0875               	movf	Buttons_UpdateButton@button,w
  7899  0B26  0084               	movwf	4
  7900  0B27  1080               	bcf	0,1
  7901  0B28  0008               	return
  7902  0B29                     __end_of_Buttons_UpdateButton:	
  7903                           
  7904                           	psect	text53
  7905  093F                     __ptext53:	
  7906 ;; *************** function _Buttons_SetupPortsAndInterrups *****************
  7907 ;; Defined at:
  7908 ;;		line 40 in file "Buttons.c"
  7909 ;; Parameters:    Size  Location     Type
  7910 ;;		None
  7911 ;; Auto vars:     Size  Location     Type
  7912 ;;		None
  7913 ;; Return value:  Size  Location     Type
  7914 ;;                  1    wreg      void 
  7915 ;; Registers used:
  7916 ;;		wreg, status,2, status,0, pclath, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7922 ;;      Params:         0       0       0       0
  7923 ;;      Locals:         0       0       0       0
  7924 ;;      Temps:          0       0       0       0
  7925 ;;      Totals:         0       0       0       0
  7926 ;;Total ram usage:        0 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    2
  7929 ;; This function calls:
  7930 ;;		_Buttons_SetupInterrupts
  7931 ;;		_Buttons_SetupPortB
  7932 ;; This function is called by:
  7933 ;;		_main
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           
  7938                           ;psect for function _Buttons_SetupPortsAndInterrups
  7939  093F                     _Buttons_SetupPortsAndInterrups:	
  7940                           
  7941                           ;Buttons.c: 42:     Buttons_SetupPortB();
  7942                           
  7943                           ;incstack = 0
  7944                           ; Regs used in _Buttons_SetupPortsAndInterrups: [wreg+status,2+status,0+pclath+cstack]
  7945  093F  158A  2190  158A   	fcall	_Buttons_SetupPortB
  7946                           
  7947                           ;Buttons.c: 43:     Buttons_SetupInterrupts();
  7948  0942  158A  2139         	fcall	_Buttons_SetupInterrupts
  7949  0944  0008               	return
  7950  0945                     __end_of_Buttons_SetupPortsAndInterrups:	
  7951                           
  7952                           	psect	text54
  7953  0990                     __ptext54:	
  7954 ;; *************** function _Buttons_SetupPortB *****************
  7955 ;; Defined at:
  7956 ;;		line 11 in file "Buttons.c"
  7957 ;; Parameters:    Size  Location     Type
  7958 ;;		None
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;		None
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  1    wreg      void 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7970 ;;      Params:         0       0       0       0
  7971 ;;      Locals:         0       0       0       0
  7972 ;;      Temps:          0       0       0       0
  7973 ;;      Totals:         0       0       0       0
  7974 ;;Total ram usage:        0 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    1
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_Buttons_SetupPortsAndInterrups
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function _Buttons_SetupPortB
  7986  0990                     _Buttons_SetupPortB:	
  7987                           
  7988                           ;Buttons.c: 13:     TRISB = 0xFF;
  7989                           
  7990                           ;incstack = 0
  7991                           ; Regs used in _Buttons_SetupPortB: [wreg+status,2]
  7992  0990  30FF               	movlw	255
  7993  0991  1683               	bsf	3,5	;RP0=1, select bank1
  7994  0992  1303               	bcf	3,6	;RP1=0, select bank1
  7995  0993  0086               	movwf	6	;volatile
  7996                           
  7997                           ;Buttons.c: 14:     ANSELH = 0;
  7998  0994  1683               	bsf	3,5	;RP0=1, select bank3
  7999  0995  1703               	bsf	3,6	;RP1=1, select bank3
  8000  0996  0189               	clrf	9	;volatile
  8001                           
  8002                           ;Buttons.c: 15:     WPUB = 0b00011111;
  8003  0997  301F               	movlw	31
  8004  0998  1683               	bsf	3,5	;RP0=1, select bank1
  8005  0999  1303               	bcf	3,6	;RP1=0, select bank1
  8006  099A  0095               	movwf	21	;volatile
  8007                           
  8008                           ;Buttons.c: 16:     nRBPU = 0;
  8009  099B  1381               	bcf	1,7	;volatile
  8010  099C  0008               	return
  8011  099D                     __end_of_Buttons_SetupPortB:	
  8012                           
  8013                           	psect	text55
  8014  0939                     __ptext55:	
  8015 ;; *************** function _Buttons_SetupInterrupts *****************
  8016 ;; Defined at:
  8017 ;;		line 19 in file "Buttons.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;		None
  8020 ;; Auto vars:     Size  Location     Type
  8021 ;;		None
  8022 ;; Return value:  Size  Location     Type
  8023 ;;                  1    wreg      void 
  8024 ;; Registers used:
  8025 ;;		None
  8026 ;; Tracked objects:
  8027 ;;		On entry : 0/0
  8028 ;;		On exit  : 0/0
  8029 ;;		Unchanged: 0/0
  8030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8031 ;;      Params:         0       0       0       0
  8032 ;;      Locals:         0       0       0       0
  8033 ;;      Temps:          0       0       0       0
  8034 ;;      Totals:         0       0       0       0
  8035 ;;Total ram usage:        0 bytes
  8036 ;; Hardware stack levels used:    1
  8037 ;; Hardware stack levels required when called:    1
  8038 ;; This function calls:
  8039 ;;		Nothing
  8040 ;; This function is called by:
  8041 ;;		_Buttons_SetupPortsAndInterrups
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           
  8046                           ;psect for function _Buttons_SetupInterrupts
  8047  0939                     _Buttons_SetupInterrupts:	
  8048                           
  8049                           ;Buttons.c: 21:     GIE = 1;
  8050                           
  8051                           ;incstack = 0
  8052                           ; Regs used in _Buttons_SetupInterrupts: []
  8053  0939  178B               	bsf	11,7	;volatile
  8054                           
  8055                           ;Buttons.c: 22:     INTE = 1;
  8056  093A  160B               	bsf	11,4	;volatile
  8057                           
  8058                           ;Buttons.c: 23:     INTEDG = 0;
  8059  093B  1683               	bsf	3,5	;RP0=1, select bank1
  8060  093C  1303               	bcf	3,6	;RP1=0, select bank1
  8061  093D  1301               	bcf	1,6	;volatile
  8062  093E  0008               	return
  8063  093F                     __end_of_Buttons_SetupInterrupts:	
  8064                           
  8065                           	psect	text56
  8066  099D                     __ptext56:	
  8067 ;; *************** function _Buttons_Clear *****************
  8068 ;; Defined at:
  8069 ;;		line 46 in file "Buttons.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;  buttons         1    wreg     PTR struct .
  8072 ;;		 -> main@buttons(4), 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  buttons         1    0[BANK0 ] PTR struct .
  8075 ;;		 -> main@buttons(4), 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8085 ;;      Params:         0       0       0       0
  8086 ;;      Locals:         0       1       0       0
  8087 ;;      Temps:          0       0       0       0
  8088 ;;      Totals:         0       1       0       0
  8089 ;;Total ram usage:        1 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    2
  8092 ;; This function calls:
  8093 ;;		_memset
  8094 ;; This function is called by:
  8095 ;;		_main
  8096 ;; This function uses a non-reentrant model
  8097 ;;
  8098                           
  8099                           
  8100                           ;psect for function _Buttons_Clear
  8101  099D                     _Buttons_Clear:	
  8102                           
  8103                           ;incstack = 0
  8104                           ; Regs used in _Buttons_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8105                           ;Buttons_Clear@buttons stored from wreg
  8106  099D  1283               	bcf	3,5	;RP0=0, select bank0
  8107  099E  1303               	bcf	3,6	;RP1=0, select bank0
  8108  099F  00A0               	movwf	Buttons_Clear@buttons
  8109                           
  8110                           ;Buttons.c: 46: void Buttons_Clear(Buttons *buttons);Buttons.c: 47: {;Buttons.c: 48:    
      +                           memset(buttons, 0, sizeof *buttons);
  8111  09A0  3000               	movlw	0
  8112  09A1  00F3               	movwf	memset@c
  8113  09A2  00F4               	movwf	memset@c+1
  8114  09A3  3004               	movlw	4
  8115  09A4  00F5               	movwf	memset@n
  8116  09A5  3000               	movlw	0
  8117  09A6  00F6               	movwf	memset@n+1
  8118  09A7  0820               	movf	Buttons_Clear@buttons,w
  8119  09A8  158A  2251         	fcall	_memset
  8120  09AA  0008               	return
  8121  09AB                     __end_of_Buttons_Clear:	
  8122                           
  8123                           	psect	text57
  8124  0A51                     __ptext57:	
  8125 ;; *************** function _memset *****************
  8126 ;; Defined at:
  8127 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\memset.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  p1              1    wreg     PTR void 
  8130 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  8131 ;;  c               2    3[COMMON] int 
  8132 ;;  n               2    5[COMMON] unsigned int 
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  p1              1    9[COMMON] PTR void 
  8135 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  8136 ;;  p               1    8[COMMON] PTR unsigned char 
  8137 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  1    wreg      PTR void 
  8140 ;; Registers used:
  8141 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8147 ;;      Params:         4       0       0       0
  8148 ;;      Locals:         2       0       0       0
  8149 ;;      Temps:          1       0       0       0
  8150 ;;      Totals:         7       0       0       0
  8151 ;;Total ram usage:        7 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    1
  8154 ;; This function calls:
  8155 ;;		Nothing
  8156 ;; This function is called by:
  8157 ;;		_Tetris_ResetGame
  8158 ;;		_Buttons_Clear
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           
  8163                           ;psect for function _memset
  8164  0A51                     _memset:	
  8165                           
  8166                           ;incstack = 0
  8167                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  8168                           ;memset@p1 stored from wreg
  8169  0A51  00F9               	movwf	memset@p1
  8170  0A52  0879               	movf	memset@p1,w
  8171  0A53  00F7               	movwf	??_memset
  8172  0A54  0877               	movf	??_memset,w
  8173  0A55  00F8               	movwf	memset@p
  8174  0A56                     l3052:	
  8175  0A56  3001               	movlw	1
  8176  0A57  02F5               	subwf	memset@n,f
  8177  0A58  3000               	movlw	0
  8178  0A59  1C03               	skipc
  8179  0A5A  03F6               	decf	memset@n+1,f
  8180  0A5B  02F6               	subwf	memset@n+1,f
  8181  0A5C  0A75               	incf	memset@n,w
  8182  0A5D  1903               	btfsc	3,2
  8183  0A5E  0A76               	incf	memset@n+1,w
  8184  0A5F  1903               	btfsc	3,2
  8185  0A60  0008               	return
  8186  0A61  0873               	movf	memset@c,w
  8187  0A62  00F7               	movwf	??_memset
  8188  0A63  0878               	movf	memset@p,w
  8189  0A64  0084               	movwf	4
  8190  0A65  0877               	movf	??_memset,w
  8191  0A66  1383               	bcf	3,7	;select IRP bank0
  8192  0A67  0080               	movwf	0
  8193  0A68  3001               	movlw	1
  8194  0A69  00F7               	movwf	??_memset
  8195  0A6A  0877               	movf	??_memset,w
  8196  0A6B  07F8               	addwf	memset@p,f
  8197  0A6C  2A56               	goto	l3052
  8198  0A6D                     __end_of_memset:	
  8199                           
  8200                           	psect	text58
  8201  0AE7                     __ptext58:	
  8202 ;; *************** function _InterruptHandler *****************
  8203 ;; Defined at:
  8204 ;;		line 71 in file "main.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;		None
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;		None
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  1    wreg      void 
  8211 ;; Registers used:
  8212 ;;		wreg, status,2, status,0
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8218 ;;      Params:         0       0       0       0
  8219 ;;      Locals:         0       0       0       0
  8220 ;;      Temps:          3       0       0       0
  8221 ;;      Totals:         3       0       0       0
  8222 ;;Total ram usage:        3 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		Interrupt level 1
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           
  8232                           ;psect for function _InterruptHandler
  8233  0AE7                     _InterruptHandler:	
  8234                           
  8235                           ;main.c: 73:     static uint8_t timerInterruptCounter = 0;;main.c: 75:     if (INTE && I
      +                          NTF)
  8236  0AE7  1A0B               	btfsc	11,4	;volatile
  8237  0AE8  1C8B               	btfss	11,1	;volatile
  8238  0AE9  2AEB               	goto	i1l80
  8239                           
  8240                           ;main.c: 76:     {;main.c: 77:         INTF = 0;
  8241  0AEA  108B               	bcf	11,1	;volatile
  8242  0AEB                     i1l80:	
  8243                           ;main.c: 79:     }
  8244                           
  8245                           
  8246                           ;main.c: 81:     if (TMR1IE && TMR1IF)
  8247  0AEB  1683               	bsf	3,5	;RP0=1, select bank1
  8248  0AEC  1303               	bcf	3,6	;RP1=0, select bank1
  8249  0AED  1C0C               	btfss	12,0	;volatile
  8250  0AEE  2B01               	goto	i1l83
  8251  0AEF  1283               	bcf	3,5	;RP0=0, select bank0
  8252  0AF0  1303               	bcf	3,6	;RP1=0, select bank0
  8253  0AF1  1C0C               	btfss	12,0	;volatile
  8254  0AF2  2B01               	goto	i1l83
  8255                           
  8256                           ;main.c: 82:     {;main.c: 83:         TMR1IF = 0;
  8257  0AF3  100C               	bcf	12,0	;volatile
  8258                           
  8259                           ;main.c: 84:         ++timerInterruptCounter;
  8260  0AF4  3001               	movlw	1
  8261  0AF5  00F0               	movwf	??_InterruptHandler
  8262  0AF6  0870               	movf	??_InterruptHandler,w
  8263  0AF7  07FA               	addwf	InterruptHandler@timerInterruptCounter,f
  8264                           
  8265                           ;main.c: 85:         if (timerInterruptCounter >= timerPrescaler)
  8266  0AF8  1683               	bsf	3,5	;RP0=1, select bank1
  8267  0AF9  1303               	bcf	3,6	;RP1=0, select bank1
  8268  0AFA  0864               	movf	_timerPrescaler^(0+128),w
  8269  0AFB  027A               	subwf	InterruptHandler@timerInterruptCounter,w
  8270  0AFC  1C03               	skipc
  8271  0AFD  2B01               	goto	i1l83
  8272                           
  8273                           ;main.c: 86:         {;main.c: 87:             updateReady = 1;
  8274  0AFE  01E3               	clrf	_updateReady^(0+128)
  8275  0AFF  0AE3               	incf	_updateReady^(0+128),f
  8276                           
  8277                           ;main.c: 88:             timerInterruptCounter = 0;
  8278  0B00  01FA               	clrf	InterruptHandler@timerInterruptCounter
  8279  0B01                     i1l83:	
  8280  0B01  0872               	movf	??_InterruptHandler+2,w
  8281  0B02  008A               	movwf	10
  8282  0B03  0E71               	swapf	(??_InterruptHandler+1)^(0+4294967168),w
  8283  0B04  0083               	movwf	3
  8284  0B05  0EFE               	swapf	126,f
  8285  0B06  0E7E               	swapf	126,w
  8286  0B07  0009               	retfie
  8287  0B08                     __end_of_InterruptHandler:	
  8288  007E                     btemp	set	126	;btemp
  8289  007E                     wtemp0	set	126
  8290                           
  8291                           	psect	intentry
  8292  0004                     __pintentry:	
  8293                           ;incstack = 0
  8294                           ; Regs used in _InterruptHandler: [wreg+status,2+status,0]
  8295                           
  8296  0004                     interrupt_function:	
  8297  007E                     saved_w	set	btemp
  8298  0004  00FE               	movwf	btemp
  8299  0005  0E03               	swapf	3,w
  8300  0006  00F1               	movwf	??_InterruptHandler+1
  8301  0007  080A               	movf	10,w
  8302  0008  00F2               	movwf	??_InterruptHandler+2
  8303  0009  158A  2AE7         	ljmp	_InterruptHandler


Data Sizes:
    Strings     0
    Constant    1266
    Data        5
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     39      43
    BANK1            80     67      69
    BANK2            80      0       0

Pointer List with Targets:

    DrawTetris@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetris@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetrisGameColumn@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    main@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    memset@p1	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    memset@p	PTR unsigned char  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    __itoee@addr	PTR eeprom void  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __eetoi@addr	PTR eeprom void  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __memcpyee@to	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __memcpyee@from	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[4]), __fttoee@data(COMMON[4]), __otoee@data(COMMON[4]), __ltoee@data(COMMON[4]), 
		 -> __mtoee@data(COMMON[3]), __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    __memcpyee@ptr	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[4]), __fttoee@data(COMMON[4]), __otoee@data(COMMON[4]), __ltoee@data(COMMON[4]), 
		 -> __mtoee@data(COMMON[3]), __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    DrawTetris@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    DrawTetrisGameColumn@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetrisGameColumn@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Buttons_Update@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_Clear@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_UpdateButton@button	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Tetris_RotatePlayer@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerRight@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerLeft@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerDown@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ClearFilledRows@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_UpdateGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    sp__memset	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetUnit	PTR const struct . size(2) Largest target is 238
		 -> NULL(NULL[0]), Tetris_units(CODE[238]), 

    Tetris_ShiftTableDown@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetPlayer@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_SetPlayerUnit@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerUnitBitsAreValid@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerUnitBitsAreValid@player	PTR const struct . size(1) Largest target is 63
		 -> tetrisGame.player(BANK0[13]), main@tetrisGame(BANK1[63]), 

    Tetris_UpdatePlayerUnitBits@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdatePlayerUnitBits@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_CountUnitBits@unitBits	PTR const unsigned int  size(2) Largest target is 238
		 -> tetrisGame.player(BANK0[13]), Tetris_units.bits(CODE[32]), Tetris_units(CODE[238]), main@tetrisGame(BANK1[63]), 

    Tetris_ApplyPlayerToTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_RemovePlayerFromTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingRightBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingRightBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingLeftBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingLeftBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerOverlapsEnvironment@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTopmostY@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTopmostY@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetRandomUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    S89$unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 


Critical Paths under _main in COMMON

    _Tetris_UpdateGame->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerDown->_Tetris_ApplyPlayerToTable
    _Tetris_GetRandomUnit->___awmod
    _rand->___lmul
    ___wmul->___awmod
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_ApplyPlayerToTable
    _Tetris_RotatePlayer->___lbmod
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ApplyPlayerToTable
    _Tetris_ResetGame->_memset
    _Tetris_ResetPlayer->_Tetris_SetPlayerUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerLeft->_Tetris_ApplyPlayerToTable
    _Tetris_RemovePlayerFromTable->_Tetris_PlayerTopmostY
    _Tetris_PlayerOverlapsEnvironment->_Tetris_PlayerTopmostY
    _Tetris_ApplyPlayerToTable->_Tetris_PlayerTopmostY
    _SetupRandomness->___eetoi
    _srand->___eetoi
    ___itoee->___eetoi
    ___eetoi->___eecpymem
    _LCD_TurnOn->_LCD_Write
    _LCD_SetZ->_LCD_Write
    _LCD_WriteData->_LCD_Write
    _LCD_SetY->_LCD_Write
    _LCD_SetX->_LCD_Write
    _LCD_BlockWhileBusy->_LCD_IsBusy
    _LCD_IsBusy->_LCD_ReadStatus
    _Buttons_Update->_Buttons_UpdateButton
    _Buttons_Clear->_memset

Critical Paths under _InterruptHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Tetris_UpdateGame
    _Tetris_UpdateGame->_Tetris_ResetPlayer
    _Tetris_MovePlayerDown->_Tetris_PlayerOverlapsEnvironment
    _Tetris_GetRandomUnit->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ResetPlayer
    _Tetris_ResetPlayer->_Tetris_GetRandomUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerLeft->_Tetris_PlayerOverlapsEnvironment
    _SetupRandomness->___itoee
    _srand->___eetoi
    ___itoee->___eetoi
    _LCD_Reset->_LCD_SetX
    _LCD_Reset->_LCD_SetY
    _LCD_Reset->_LCD_SetZ
    _LCD_Clear->_LCD_SetX
    _LCD_Clear->_LCD_SetY
    _LCD_Clear->_LCD_WriteData
    _DrawTetris->_DrawTetrisGameColumn
    _DrawTetrisGameColumn->_LCD_SetX
    _DrawTetrisGameColumn->_LCD_SetY
    _DrawTetrisGameColumn->_LCD_WriteData

Critical Paths under _InterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                68    68      0   30456
                                             38 BANK0      1     1      0
                                              0 BANK1     67    67      0
                      _Buttons_Clear
     _Buttons_SetupPortsAndInterrups
                     _Buttons_Update
                         _DrawTetris
                          _LCD_Clear
                          _LCD_Reset
               _LCD_SegmentSelection
                     _LCD_SetupPorts
                         _LCD_TurnOn
                         _ResetTimer
                    _SetupOscillator
                    _SetupRandomness
                         _SetupTimer
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerLeft
             _Tetris_MovePlayerRight
                   _Tetris_ResetGame
                _Tetris_RotatePlayer
                  _Tetris_UpdateGame
 ---------------------------------------------------------------------------------
 (1) _Tetris_UpdateGame                                    4     4      0    6256
                                             34 BANK0      4     4      0
          _Tetris_ApplyPlayerToTable
             _Tetris_ClearFilledRows
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerDown
   _Tetris_PlayerOverlapsEnvironment
                 _Tetris_ResetPlayer
         _Tetris_ScoreForRowsCleared
 ---------------------------------------------------------------------------------
 (2) _Tetris_ScoreForRowsCleared                           3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_MovePlayerDown                                2     2      0    1784
                                             12 BANK0      2     2      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_GetRandomUnit                                 2     2      0    1173
                                             27 BANK0      2     2      0
                            ___awmod
                             ___wmul
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                              8 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              3 COMMON     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                             21 BANK0      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              8 COMMON     1     1      0
                                             15 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _Tetris_ClearFilledRows                               7     7      0     544
                                              2 BANK0      7     7      0
              _Tetris_ShiftTableDown
 ---------------------------------------------------------------------------------
 (3) _Tetris_ShiftTableDown                                9     8      1     353
                                              3 COMMON     7     6      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_RotatePlayer                                  8     8      0    3572
                                             12 BANK0      8     8      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
      _Tetris_PlayerUnitBitsAreValid
       _Tetris_RemovePlayerFromTable
        _Tetris_UpdatePlayerUnitBits
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              3 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerUnitBitsAreValid                        5     5      0     581
                                              5 BANK0      5     5      0
               _Tetris_CountUnitBits
 ---------------------------------------------------------------------------------
 (4) _Tetris_CountUnitBits                                12    10      2     452
                                              3 COMMON     7     5      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_ResetGame                                     3     1      2    2831
                                             34 BANK0      3     1      2
          _Tetris_ApplyPlayerToTable
               _Tetris_GetRandomUnit (ARG)
                 _Tetris_ResetPlayer
                             _memset
 ---------------------------------------------------------------------------------
 (2) _Tetris_ResetPlayer                                   5     3      2    1347
                                             29 BANK0      5     3      2
               _Tetris_GetRandomUnit (ARG)
               _Tetris_SetPlayerUnit
 ---------------------------------------------------------------------------------
 (3) _Tetris_SetPlayerUnit                                 3     1      2     971
                                              8 COMMON     2     0      2
                                             10 BANK0      1     1      0
        _Tetris_UpdatePlayerUnitBits
 ---------------------------------------------------------------------------------
 (5) _Tetris_UpdatePlayerUnitBits                         15    15      0     752
                                              3 COMMON     5     5      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerRight                               5     5      0    2008
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerTouchingRightBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingRightBound                      6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerLeft                                5     5      0    2008
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
     _Tetris_PlayerTouchingLeftBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (3) _Tetris_RemovePlayerFromTable                        11    11      0     432
                                              6 COMMON     3     3      0
                                              0 BANK0      8     8      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingLeftBound                       6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerOverlapsEnvironment                    15    15      0     465
                                              6 COMMON     3     3      0
                                              0 BANK0     12    12      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (3) _Tetris_ApplyPlayerToTable                           12    12      0     665
                                              6 COMMON     4     4      0
                                              0 BANK0      8     8      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (4) _Tetris_PlayerTopmostY                                3     3      0     121
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetupTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetupRandomness                                      0     0      0    3061
                            ___eetoi
                            ___itoee
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              5 BANK0      2     0      2
                            ___eetoi (ARG)
 ---------------------------------------------------------------------------------
 (2) ___itoee                                              5     3      2    1600
                                              5 BANK0      5     3      2
                            ___eetoi (ARG)
                         ___memcpyee
 ---------------------------------------------------------------------------------
 (3) ___memcpyee                                           5     3      2    1402
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___eetoi                                              7     5      2    1363
                                              8 COMMON     2     0      2
                                              0 BANK0      5     5      0
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (3) ___eecpymem                                           5     3      2    1229
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SetupOscillator                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_TurnOn                                           1     1      0     592
                                              0 BANK0      1     1      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_SetupPorts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Reset                                            0     0      0    1869
                           _LCD_SetX
                           _LCD_SetY
                           _LCD_SetZ
 ---------------------------------------------------------------------------------
 (2) _LCD_SetZ                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            3     3      0    2036
                                              2 BANK0      3     3      0
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _DrawTetris                                           7     7      0    3078
                                             16 BANK0      7     7      0
               _DrawTetrisGameColumn
 ---------------------------------------------------------------------------------
 (2) _DrawTetrisGameColumn                                14     9      5    2838
                                              2 BANK0     14     9      5
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_SetY                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_SetX                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Write                                            2     1      1     592
                                              8 COMMON     2     1      1
                 _LCD_BlockWhileBusy
 ---------------------------------------------------------------------------------
 (3) _LCD_BlockWhileBusy                                   0     0      0      92
                         _LCD_IsBusy
 ---------------------------------------------------------------------------------
 (4) _LCD_IsBusy                                           3     3      0      92
                                              5 COMMON     3     3      0
                     _LCD_ReadStatus
 ---------------------------------------------------------------------------------
 (5) _LCD_ReadStatus                                       2     2      0      23
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_SegmentSelection                                 1     1      0      44
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buttons_Update                                       1     1      0     689
                                              6 COMMON     1     1      0
               _Buttons_UpdateButton
 ---------------------------------------------------------------------------------
 (2) _Buttons_UpdateButton                                 3     2      1     568
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Buttons_SetupPortsAndInterrups                       0     0      0       0
            _Buttons_SetupInterrupts
                 _Buttons_SetupPortB
 ---------------------------------------------------------------------------------
 (2) _Buttons_SetupPortB                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Buttons_SetupInterrupts                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buttons_Clear                                        1     1      0     636
                                              0 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     569
                                              3 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandler                                     3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buttons_Clear
     _memset
   _Buttons_SetupPortsAndInterrups
     _Buttons_SetupInterrupts
     _Buttons_SetupPortB
   _Buttons_Update
     _Buttons_UpdateButton
   _DrawTetris
     _DrawTetrisGameColumn
       _LCD_SegmentSelection
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
   _LCD_Clear
     _LCD_SetX
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetY
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_WriteData
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
   _LCD_Reset
     _LCD_SetX
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetY
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetZ
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
   _LCD_SegmentSelection
   _LCD_SetupPorts
   _LCD_TurnOn
     _LCD_Write
       _LCD_BlockWhileBusy
         _LCD_IsBusy
           _LCD_ReadStatus
   _ResetTimer
   _SetupOscillator
   _SetupRandomness
     ___eetoi
       ___eecpymem
     ___itoee
       ___eetoi (ARG)
         ___eecpymem
       ___memcpyee (ARG)
     _srand
       ___eetoi (ARG)
         ___eecpymem
   _SetupTimer
   _Tetris_GetRandomUnit
     ___awmod
       _rand (ARG)
         ___lmul
     ___wmul
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _Tetris_MovePlayerLeft
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingLeftBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_MovePlayerRight
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingRightBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_ResetGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_GetRandomUnit (ARG)
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_ResetPlayer (ARG)
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _memset (ARG)
   _Tetris_RotatePlayer
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerUnitBitsAreValid
       _Tetris_CountUnitBits
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
     _Tetris_UpdatePlayerUnitBits
     ___lbmod
   _Tetris_UpdateGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_ClearFilledRows
       _Tetris_ShiftTableDown
     _Tetris_GetRandomUnit
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_MovePlayerDown
       _Tetris_ApplyPlayerToTable
         _Tetris_PlayerTopmostY
       _Tetris_PlayerOverlapsEnvironment
         _Tetris_PlayerTopmostY
       _Tetris_RemovePlayerFromTable
         _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_ResetPlayer
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _Tetris_ScoreForRowsCleared

 _InterruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     43      45       5       86.3%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     27      2B       3       53.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7B      10        0.0%
ABS                  0      0      7B       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       3       0        1.2%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 29 19:51:32 2019

                           _LCD_ReadStatus 09D8                    __end_of_SetupRandomness 0AC8  
                              ?_LCD_IsBusy 0070                                          pc 0002  
                ??_Buttons_SetupInterrupts 0073                                __CFG_CP$OFF 0000  
                                       fsr 0004                        ___wmul@multiplicand 0037  
                              ?_LCD_TurnOn 0070                                        l418 06E1  
                                      l532 0B9E                                        l463 0C59  
                                      l376 09CF                                        l480 0D9D  
                                      l377 09D2                                        l378 09D6  
                                      l475 0D89                                        l468 0C66  
                                      l742 0B8C                                        _GIE 005F  
                                      _RB1 0031                                        _RB2 0032  
                                      _RC0 0038                                        _RB3 0033  
                                      _RC1 0039                                        _RB4 0034  
                                      _RC2 003A                                        _RD0 0040  
                                      _RC3 003B                                        _RD1 0041  
                             __CFG_CPD$OFF 0000                       LCD_ReadStatus@status 0074  
                                      fsr0 0004                                        indf 0000  
                             ___awmod@sign 0034                 DrawTetrisGameColumn@lcdRow 002F  
                  __end_of_SetupOscillator 0100                 DrawTetrisGameColumn@tableY 002A  
                             __CFG_LVP$OFF 0000                     _Tetris_MovePlayerRight 079E  
                                     l2104 0D23                                       l3002 0F68  
                                     l3020 0F91                                       l2046 0A49  
                                     l3110 0711                                       l2118 00A2  
                                     l3014 0F75                                       l3006 0F6F  
                                     l3104 0710                                       l2128 00C6  
                                     l3016 0F83                                       l3024 0F9C  
                                     l2138 00D1                                       l2082 0DD1  
                                     l2322 0A6F                                       l3052 0A56  
                                     l3116 071F                                       l2228 0C61  
                                     l3028 0FA4                                       l2260 0B96  
                                     l3206 0CEE                                       l2342 0A8D  
                                     l2430 0CB6                                       l3070 0CAF  
                                     l3062 0CA2                                       l3144 0BE6  
                                     l3136 0BDB                                       l2088 0DFC  
                                     l2328 0A81                                       l2184 0E8F  
                                     l3240 005B                                       l3090 06B7  
                                     l2522 0B75                                       l3250 006F  
                                     l3234 0047                                       l2460 0B21  
                                     l2620 0FDD                                       l2348 0A9F  
                                     l3172 0789                                       l2436 0CD8  
                                     l2380 0BBD                                       l2372 0BB9  
                                     l3260 0086                                       l2606 0FBD  
                                     l2198 0EBF                                       l2438 0CDC  
                                     l2390 0BC1                                       l3254 0077  
                                     l3246 0067                                       l3176 0798  
                                     l3328 0BC9                                       l2384 0BBF  
                                     l2376 0BBB                                       l2368 0BB7  
                                     l3192 0F55                                       l3098 06D3  
                                     l2626 0FF4                                       l2642 07B2  
                                     l3194 0F5A                                       l3258 007E  
                                     l2628 0FFC                                       l3268 0091  
                                     l2662 07E9                                       l2910 0E67  
                                     l2664 07F3                                       l2656 07D2  
                                     l2906 0E4F                                       l2932 0E0F  
                                     l2924 0E0A                                       l1990 0945  
                                     l1984 09B7                                       l2936 0E2E  
                                     l2890 0680                                       l2884 0664  
                                     l2868 0606                                       l2992 0D98  
                                     l2898 0683                                       u1220 0A46  
                                     u2205 0617                                       u2230 0674  
                                     u2305 0E71                                       u2250 0693  
                                     u1355 00C2                                       u2235 066F  
                                     u2255 068E                                       u2335 0E2F  
                                     u2520 0D82                                       u1545 0B9F  
                                     u2515 0D6A                                       u1555 0BA6  
                                     u2365 0F02                                       u2455 0F78  
                                     u2295 0E69                                       u2475 0F89  
                                     u1845 0B78                                       u2485 0F92  
            ?_Tetris_RemovePlayerFromTable 0070                                       _PEIE 005E  
                                     u2685 0D01               Tetris_ResetPlayer@playerUnit 003D  
                                     _INTE 005C                                       _INTF 0059  
                                     u2695 0D08                                       i1l80 0AEB  
                                     i1l83 0B01                                       _TMR1 000E  
                                     _WPUB 0095                                main@buttons 00A0  
                             __CFG_WRT$OFF 0000                 ?_Tetris_ApplyPlayerToTable 0070  
                                     _main 002B                                       _rand 0ECB  
                       __size_of_LCD_Clear 0025                                       btemp 007E  
                       __size_of_LCD_Reset 0017                                       start 000B  
            Tetris_ApplyPlayerToTable@game 0079                         __size_of_LCD_Write 001B  
                            __CFG_IESO$OFF 0000                     __size_of_Buttons_Clear 000E  
                   __end_of_LCD_ReadStatus 09E8                              _LCD_WriteData 0956  
                            __CFG_MCLRE$ON 0000                               ___itoee@addr 0029  
                             ___itoee@data 0025                             _LCD_SetupPorts 0B29  
             __end_of_Tetris_CountUnitBits 0E47                           __end_of_LCD_SetX 0978  
                         __end_of_LCD_SetY 0984                           __end_of_LCD_SetZ 0990  
    __end_of_Tetris_PlayerUnitBitsAreValid 0D84     __size_of_Tetris_PlayerUnitBitsAreValid 0037  
            _Tetris_PlayerUnitBitsAreValid 0D4D                                      ?_main 0070  
                   ??_Tetris_GetRandomUnit 003B                            __end_of___eetoi 0A1F  
                                    ?_rand 0028                                      _EEADR 010D  
                            __CFG_WDTE$OFF 0000                            __end_of___awmod 0FA9  
                          __end_of___lbmod 0B92                                      _ANSEL 0188  
                          __end_of___itoee 09C8                                      _IRCF0 047C  
                                    _IRCF1 047D                                      _IRCF2 047E  
                                    _PORTA 0005                                      _PORTB 0006  
                                    _PORTC 0007                                      _PORTD 0008  
                                    _TRISA 0085                                      _TRISB 0086  
                                    _TRISC 0087                                      _TRISD 0088  
                      ___lmul@multiplicand 0024                                 _DrawTetris 0CE2  
                           __CFG_FCMEN$OFF 0000                  __size_of_Tetris_ResetGame 001F  
                                    _nRBPU 040F                Tetris_PlayerTopmostY@player 0075  
                                    _randx 0047                                      _srand 07F7  
                      __size_of_LCD_IsBusy 000E           Tetris_PlayerTouchingRightBound@i 0078  
                           __CFG_BOREN$OFF 0000                       Tetris_ResetGame@game 0044  
                                    pclath 000A                              ___memcpyee@to 0077  
                                    status 0003                                      wtemp0 007E  
                      __size_of_LCD_TurnOn 000A          __end_of_Tetris_ApplyPlayerToTable 00FA  
             ??_Tetris_ScoreForRowsCleared 0073                             ?_LCD_WriteData 0070  
                          ?_LCD_ReadStatus 0070     __end_of_Buttons_SetupPortsAndInterrups 0945  
  __size_of_Buttons_SetupPortsAndInterrups 0006             _Buttons_SetupPortsAndInterrups 093F  
                  __size_of_Buttons_Update 002C        __end_of_Tetris_UpdatePlayerUnitBits 069F  
              _Tetris_UpdatePlayerUnitBits 0604                            __initialization 000D  
                   __end_of_LCD_SetupPorts 0B4C                               __end_of_main 0096  
                             __end_of_rand 0F10                           ?_SetupRandomness 0070  
                 Tetris_CountUnitBits@mask 0020                      Tetris_CountUnitBits@i 0024  
                    Tetris_CountUnitBits@j 0023                  Buttons_UpdateButton@nHeld 0073  
                                   ??_main 0046                                     ??_rand 002A  
                        __end_of_LCD_Clear 0BFD                    ?_Tetris_ClearFilledRows 0070  
                        __end_of_LCD_Reset 0A36                              _Buttons_Clear 099D  
                     _Buttons_UpdateButton 0B08                          __end_of_LCD_Write 0A51  
     Tetris_PlayerOverlapsEnvironment@game 0078                           ?_SetupOscillator 0070  
                  Tetris_ClearFilledRows@i 0028                                     _EEDATA 010C  
                                   _EECON1 018C                                     _EECON2 018D  
           __size_of_Tetris_MovePlayerLeft 0057             __size_of_Tetris_MovePlayerDown 0030  
                                   ?_srand 0025                                     _ANSELH 0189  
            __end_of_Tetris_MovePlayerLeft 1000              __end_of_Tetris_MovePlayerDown 0CB1  
                                   _INTEDG 040E             __size_of_Tetris_PlayerTopmostY 0012  
            __end_of_Tetris_PlayerTopmostY 0A0A                                     _TMR1IE 0460  
                                   _TMR1IF 0060                                     _TMR1CS 0081  
                                   _TMR1ON 0080                                 _ResetTimer 0934  
           ??_Tetris_RemovePlayerFromTable 0020                             __CFG_PWRTE$OFF 0000  
                       _Tetris_ResetPlayer 0B4C                            ?_LCD_SetupPorts 0070  
                                   ___lmul 0E47                                     ___wmul 0B92  
                                ??___eetoi 0020                                  ??___awmod 0078  
                                ??___lbmod 0074                                  ??___itoee 0027  
                                   _memset 0A51                            ___awmod@divisor 002F  
                               _SetupTimer 0961                        ?_Tetris_ResetPlayer 003D  
           __end_of_Tetris_ClearFilledRows 0CE2                            ___awmod@counter 0033  
                           ?_Buttons_Clear 0070                      ?_Buttons_UpdateButton 0073  
            __size_of_LCD_SegmentSelection 0010             ?_Tetris_PlayerUnitBitsAreValid 0070  
             Tetris_UpdatePlayerUnitBits@i 0075               __end_of_DrawTetrisGameColumn 072E  
                                   saved_w 007E                                ?_DrawTetris 0070  
                                   srand@x 0025                             ___memcpyee@ptr 0076  
                               ___eecpymem 0C54                       ??_Tetris_ResetPlayer 003F  
                          ___lbmod@divisor 0073                       _Tetris_CountUnitBits 0E06  
                  __end_of__initialization 0028                            ___lbmod@counter 0078  
                                ?_LCD_SetX 0070                                  ?_LCD_SetY 0070  
                                ?_LCD_SetZ 0070                            ??_LCD_WriteData 0020  
            __size_of_Tetris_SetPlayerUnit 0010                                 ___memcpyee 0D84  
                                LCD_SetX@x 0021                                  LCD_SetY@y 0021  
                                LCD_SetZ@z 0021                             __pcstackCOMMON 0070  
           __size_of_Tetris_ShiftTableDown 0043                               ??_LCD_IsBusy 0075  
            __end_of_Tetris_ShiftTableDown 0ECB                               __pidataBANK0 0930  
                             __pidataBANK1 0003                         _Buttons_SetupPortB 0990  
                            __end_of_srand 0800                __size_of_LCD_BlockWhileBusy 0007  
                             ??_LCD_TurnOn 0020                  __size_of_InterruptHandler 0021  
                      ?_Buttons_SetupPortB 0070                    ?_Tetris_MovePlayerRight 0070  
 __end_of_Tetris_PlayerOverlapsEnvironment 0E06  __size_of_Tetris_PlayerOverlapsEnvironment 0041  
       ??_Tetris_PlayerOverlapsEnvironment 0020          ?_Tetris_PlayerOverlapsEnvironment 0070  
         _Tetris_PlayerOverlapsEnvironment 0DC5                           _Tetris_ResetGame 0AC8  
               Buttons_UpdateButton@button 0075                                    ??_srand 007A  
                               __pbssBANK1 00E3                         __end_of_LCD_IsBusy 09B9  
                    ?_Tetris_CountUnitBits 0073                                 ??_LCD_SetX 0020  
                               ??_LCD_SetY 0020                                 ??_LCD_SetZ 0020  
              ??_Tetris_ApplyPlayerToTable 0020         __end_of_Tetris_ScoreForRowsCleared 0BD8  
               _Tetris_ScoreForRowsCleared 0BB5                                ?_ResetTimer 0070  
                       __end_of_LCD_TurnOn 0956                       ??_Buttons_SetupPortB 0073  
    InterruptHandler@timerInterruptCounter 007A                             _Buttons_Update 0C28  
           Tetris_RotatePlayer@oldRotation 0032                                 __pmaintext 002B  
                      __size_of_DrawTetris 0035                                    ?___lmul 0020  
             __size_of_Tetris_RotatePlayer 0070                                    ?___wmul 0035  
                               __pintentry 0004                                    ?_memset 0073  
                           ___lmul@product 0074                            ??_Buttons_Clear 007A  
                              ?_SetupTimer 0070                     ??_Buttons_UpdateButton 0074  
                                  _T1CKPS0 0084                                    _T1CKPS1 0085  
           __end_of_Tetris_MovePlayerRight 07F7                     Tetris_MovePlayerLeft@i 002E  
                               __stringtab 0100                                ?___eecpymem 0073  
                         ??_LCD_ReadStatus 0073                     __end_of_Buttons_Update 0C54  
                 ?_Buttons_SetupInterrupts 0070                                ?___memcpyee 0073  
                            LCD_Write@data 0078                              LCD_Write@mode 0079  
                     _DrawTetrisGameColumn 069F      __end_of_Tetris_playerStartingPosition 0514  
            _Tetris_playerStartingPosition 0512                          LCD_WriteData@data 0021  
                 Tetris_SetPlayerUnit@unit 0078                                    ___eetoi 0A0A  
                          __size_of___lmul 0041                                    ___awmod 0F5C  
                                  ___lbmod 0B6F                            __size_of___wmul 0023  
                                  ___itoee 09B9            Tetris_PlayerTouchingLeftBound@i 0078  
                          __size_of_memset 001C                  _Tetris_ApplyPlayerToTable 0096  
                                  __ptext1 0F10                                    __ptext2 0BB5  
                                  __ptext3 0C81                                    __ptext4 0BFD  
                                  __ptext5 0ECB                                    __ptext6 0E47  
                                  __ptext7 0B92                                    __ptext8 0F5C  
                                  __ptext9 0CB1              __size_of_Tetris_GetRandomUnit 002B  
     __size_of_Tetris_UpdatePlayerUnitBits 009B                           ___awmod@dividend 0031  
                      __size_of_ResetTimer 0005                          __end_of_logoImage 0512  
                                _LCD_Clear 0BD8                                  _LCD_Reset 0A1F  
                Tetris_MovePlayerLeft@game 0030      Tetris_ScoreForRowsCleared@rowsCleared 0075  
                                _LCD_Write 0A36                  Tetris_MovePlayerDown@game 002D  
                   ??_Tetris_CountUnitBits 0075                       end_of_initialization 0028  
        Tetris_ClearFilledRows@rowsCleared 0026                                    memset@c 0073  
                                  memset@n 0075                                    memset@p 0078  
                      __size_of_SetupTimer 000B                       DrawTetris@tetrisGame 0031  
                         ??_LCD_SetupPorts 0073                            ?_Buttons_Update 0070  
                           main@tetrisGame 00A4                           _Tetris_unitPivot 0514  
                    ?_DrawTetrisGameColumn 0022                  Tetris_ShiftTableDown@upto 0073  
                          ___memcpyee@from 0073                            ___memcpyee@size 0074  
                             __pstringtext 0100          Tetris_UpdatePlayerUnitBits@player 0077  
                      __size_of___eecpymem 002D                           _InterruptHandler 0AE7  
    Tetris_PlayerTouchingRightBound@player 0077                   __size_of_SetupRandomness 001F  
              Tetris_MovePlayerRight@i_461 002F                           ___lbmod@dividend 0077  
                             ??_DrawTetris 0030                                 ?_LCD_Clear 0070  
                      __size_of___memcpyee 0041                       Buttons_Clear@buttons 0020  
                               ?_LCD_Reset 0070                                 ?_LCD_Write 0078  
            Tetris_RemovePlayerFromTable@i 0078                      Tetris_UpdateGame@game 0045  
                              ___lbmod@rem 0079            __end_of_Buttons_SetupInterrupts 093F  
                               _uniqueSeed 0001                      _Tetris_MovePlayerLeft 0FA9  
                    _Tetris_MovePlayerDown 0C81                   __size_of_SetupOscillator 0006  
                               LCD_Clear@x 0024                                 LCD_Clear@y 0023  
             __end_of_LCD_SegmentSelection 09D8            ??_Tetris_PlayerUnitBitsAreValid 0025  
                    _Tetris_PlayerTopmostY 09F8                          __size_of_LCD_SetX 000C  
                        __size_of_LCD_SetY 000C                          __size_of_LCD_SetZ 000C  
                 __end_of_Tetris_ResetGame 0AE7                         __end_of_DrawTetris 0D17  
                           __end_of___lmul 0E88                             __end_of___wmul 0BB5  
               Tetris_ResetGame@playerUnit 0042                             __end_of_memset 0A6D  
             __end_of_Tetris_SetPlayerUnit 09F8     __end_of_Tetris_PlayerTouchingLeftBound 0A8B  
  __size_of_Tetris_PlayerTouchingLeftBound 001E             _Tetris_PlayerTouchingLeftBound 0A6D  
                      start_initialization 000D        Tetris_PlayerUnitBitsAreValid@player 0029  
                      _Tetris_RotatePlayer 072E                __size_of_Tetris_ResetPlayer 0023  
                             ??_ResetTimer 0073                ?_Tetris_ScoreForRowsCleared 0070  
                 __CFG_FOSC$INTRC_NOCLKOUT 0000                     ??_DrawTetrisGameColumn 0027  
                    __end_of_LCD_WriteData 0961                 __end_of_LCD_BlockWhileBusy 094C  
                     ?_Tetris_RotatePlayer 0070                                   ??___lmul 0073  
                                 ??___wmul 0079           Tetris_RemovePlayerFromTable@game 0077  
                              __pdataBANK0 0047                                __pdataBANK1 00E4  
                    _Tetris_ShiftTableDown 0E88                                   ??_memset 0077  
                             ??_SetupTimer 0073                                __pbssEEDATA 0000  
                              __pbssCOMMON 007A                                  ___latbits 0001  
                            __pcstackBANK0 0020                              __pcstackBANK1 00A0  
                       __end_of_ResetTimer 0939                                ??_LCD_Clear 0022  
                        _Tetris_UpdateGame 0F10                                ??_LCD_Reset 007A  
       __size_of_Tetris_ApplyPlayerToTable 0064               Tetris_UpdateGame@rowsCleared 0044  
                              ??_LCD_Write 0079                          ??_SetupRandomness 007A  
                       ?_Tetris_UpdateGame 0070                               ??___eecpymem 0075  
                   ?_Tetris_MovePlayerLeft 0070                     ?_Tetris_MovePlayerDown 0070  
              DrawTetrisGameColumn@gameRow 002B                     ?_Tetris_PlayerTopmostY 0070  
                       __end_of_SetupTimer 096C                        ??_Tetris_UpdateGame 0042  
              __size_of_Buttons_SetupPortB 000D                               ??___memcpyee 0075  
                    ??_Tetris_RotatePlayer 002C                       __end_of_Tetris_units 0604  
                 ??_Tetris_ClearFilledRows 0022               ?_Tetris_UpdatePlayerUnitBits 0070  
                                 ?___eetoi 0078                          ??_SetupOscillator 0073  
                                 ?___awmod 002F                                   ?___lbmod 0073  
                                 ?___itoee 0025             Tetris_ShiftTableDown@gameTable 0020  
                       __end_of___eecpymem 0C81                                  _highscore 0000  
                    __end_of_Buttons_Clear 09AB           __size_of_Buttons_SetupInterrupts 0006  
                 __end_of_Tetris_unitPivot 0516              __size_of_Buttons_UpdateButton 0021  
                     _LCD_SegmentSelection 09C8                  __end_of_Tetris_UpdateGame 0F5C  
           Tetris_ApplyPlayerToTable@i_312 0078                         __end_of___memcpyee 0DC5  
                      DrawTetris@rightMask 0034                           ??_Buttons_Update 0076  
                           __size_of_srand 0009                                  _logoImage 0112  
                           _timerPrescaler 00E4             Tetris_ApplyPlayerToTable@start 0076  
                        interrupt_function 0004                                   _LCD_SetX 096C  
                                 _LCD_SetY 0978                   __end_of_InterruptHandler 0B08  
                                 _LCD_SetZ 0984                             ___wmul@product 0039  
                  Tetris_MovePlayerRight@i 002E               __end_of_Tetris_GetRandomUnit 0C28  
           DrawTetrisGameColumn@tetrisGame 0029                       _Tetris_SetPlayerUnit 09E8  
                   Tetris_ShiftTableDown@i 0021                     ?_Tetris_ShiftTableDown 0073  
            ??_Tetris_UpdatePlayerUnitBits 0020                      DrawTetrisGameColumn@i 002D  
                    DrawTetrisGameColumn@x 0022                      DrawTetrisGameColumn@y 002E  
               Tetris_CountUnitBits@result 0022                                __stringbase 0112  
                        ___wmul@multiplier 0035                      ?_LCD_SegmentSelection 0070  
                    Buttons_Update@buttons 0076        __size_of_Tetris_ScoreForRowsCleared 0023  
             Tetris_CountUnitBits@unitBits 0073                          ___lmul@multiplier 0020  
        Tetris_PlayerOverlapsEnvironment@i 0077    __end_of_Tetris_PlayerTouchingRightBound 0AA9  
 __size_of_Tetris_PlayerTouchingRightBound 001E          ??_Tetris_PlayerTouchingRightBound 0073  
         ?_Tetris_PlayerTouchingRightBound 0070            _Tetris_PlayerTouchingRightBound 0A8B  
            __size_of_Tetris_CountUnitBits 0041                           LCD_IsBusy@status 0077  
                               _EECON1bits 018C                      ?_Tetris_SetPlayerUnit 0078  
                        ?_Tetris_ResetGame 0042                 Tetris_SetPlayerUnit@player 002A  
          __size_of_Tetris_ClearFilledRows 0031                    __size_of_LCD_ReadStatus 0010  
                 ??_Tetris_MovePlayerRight 002C                         ??_Tetris_ResetGame 007A  
                         __size_of___eetoi 0015                           __size_of___awmod 004D  
                         __size_of___lbmod 0023                           __size_of___itoee 000F  
        Tetris_RemovePlayerFromTable@start 0076                         __end_of__stringtab 0112  
               __size_of_Tetris_UpdateGame 004C           ??_Buttons_SetupPortsAndInterrups 0073  
          ?_Buttons_SetupPortsAndInterrups 0070                         DrawTetris@leftMask 0032  
                                 __ptext10 0E88                                   __ptext11 072E  
                                 __ptext20 0A8B                                   __ptext12 0B6F  
                                 __ptext21 0FA9                                   __ptext13 0D4D  
                                 __ptext30 09B9                                   __ptext22 0D17  
                                 __ptext14 0E06                                   __ptext31 0D84  
                                 __ptext23 0A6D                                   __ptext15 0AC8  
                                 __ptext40 0BD8                                   __ptext32 0A0A  
                                 __ptext24 0DC5                                   __ptext16 0B4C  
                                 __ptext41 0CE2                                   __ptext33 0C54  
                                 __ptext25 0096                                   __ptext17 09E8  
                                 __ptext50 09C8                                   __ptext42 069F  
                                 __ptext34 00FA                                   __ptext26 09F8  
                                 __ptext18 0604                                   __ptext51 0C28  
                                 __ptext43 0956                                   __ptext35 0934  
                                 __ptext27 0961                                   __ptext19 079E  
                                 __ptext52 0B08                                   __ptext44 0978  
                                 __ptext36 094C                                   __ptext28 0AA9  
                                 __ptext53 093F                                   __ptext45 096C  
                                 __ptext37 0B29                                   __ptext29 07F7  
                                 __ptext54 0990                                   __ptext46 0A36  
                                 __ptext38 0A1F                                   __ptext55 0939  
                                 __ptext47 0945                                   __ptext39 0984  
                                 __ptext56 099D                                   __ptext48 09AB  
                                 __ptext57 0A51                                   __ptext49 09D8  
                                 __ptext58 0AE7                          __CFG_BOR4V$BOR40V 0000  
            DrawTetrisGameColumn@rightMask 0023       Tetris_PlayerTouchingLeftBound@player 0077  
         ??_Tetris_PlayerTouchingLeftBound 0073            ?_Tetris_PlayerTouchingLeftBound 0070  
                            __size_of_main 006B                              __size_of_rand 0045  
                  Tetris_RotatePlayer@game 0033                                 _LCD_IsBusy 09AB  
               Tetris_MovePlayerLeft@i_447 002F            Tetris_ClearFilledRows@gameTable 0027  
                  __size_of_LCD_SetupPorts 0023                                 _LCD_TurnOn 094C  
                  _Buttons_SetupInterrupts 0939                     ??_LCD_SegmentSelection 0073  
                          _SetupRandomness 0AA9                            ___eecpymem@from 0073  
                          ___eecpymem@size 0074                                 _INTCONbits 000B  
                     _Tetris_GetRandomUnit 0BFD                         _LCD_BlockWhileBusy 0945  
                  ??_Tetris_MovePlayerLeft 002C                    ??_Tetris_MovePlayerDown 002C  
                   _Tetris_ClearFilledRows 0CB1                                   memset@p1 0079  
                             _Tetris_units 0516               DrawTetrisGameColumn@leftMask 0025  
             LCD_SegmentSelection@segments 0073                    ??_Tetris_PlayerTopmostY 0073  
               __end_of_Tetris_ResetPlayer 0B6F                   Tetris_ResetPlayer@player 0041  
                                 intlevel1 0000                        ?_LCD_BlockWhileBusy 0070  
                          _SetupOscillator 00FA                     ??_Tetris_SetPlayerUnit 007A  
                                stringcode 010A      Tetris_PlayerOverlapsEnvironment@start 0076  
            __size_of_DrawTetrisGameColumn 008F           Tetris_UpdatePlayerUnitBits@i_332 0073  
         Tetris_UpdatePlayerUnitBits@i_333 0074                             _LCD_IsBusy$584 0076  
          __size_of_Tetris_MovePlayerRight 0059                       ??_LCD_BlockWhileBusy 0078  
         Tetris_UpdatePlayerUnitBits@shift 0076                 Tetris_MovePlayerRight@game 0030  
                    ?_Tetris_GetRandomUnit 002C                                DrawTetris@x 0036  
                                 stringtab 0100                     __size_of_LCD_WriteData 000B  
     __end_of_Tetris_RemovePlayerFromTable 0D4D      __size_of_Tetris_RemovePlayerFromTable 0036  
             _Tetris_RemovePlayerFromTable 0D17                              ___eecpymem@cp 0076  
                            ___eecpymem@to 0077                 __end_of_Buttons_SetupPortB 099D  
                               _STATUSbits 0003                __end_of_Tetris_RotatePlayer 079E  
                        ?_InterruptHandler 0070               __end_of_Buttons_UpdateButton 0B29  
               Tetris_ApplyPlayerToTable@i 0077                    ??_Tetris_ShiftTableDown 0074  
                       ??_InterruptHandler 0070                                _updateReady 00E3  
                             ___eetoi@addr 0022                               ___eetoi@data 0023  
