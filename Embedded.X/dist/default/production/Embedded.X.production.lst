

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 30 21:10:41 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F884
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	text67,local,class=CODE,merge=1,delta=2
    86                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text69,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	dabs	1,0x7E,2
    90  0000                     
    91                           ; Version 2.05
    92                           ; Generated 20/12/2018 GMT
    93                           ; 
    94                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    95                           ; All rights reserved.
    96                           ; 
    97                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    98                           ; 
    99                           ; Redistribution and use in source and binary forms, with or without modification, are
   100                           ; permitted provided that the following conditions are met:
   101                           ; 
   102                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   103                           ;        conditions and the following disclaimer.
   104                           ; 
   105                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   106                           ;        of conditions and the following disclaimer in the documentation and/or other
   107                           ;        materials provided with the distribution.
   108                           ; 
   109                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   110                           ;        software without specific prior written permission.
   111                           ; 
   112                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   113                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   114                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   115                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   116                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   117                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   118                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   119                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   120                           ; 
   121                           ; 
   122                           ; Code-generator required, PIC16F884 Definitions
   123                           ; 
   124                           ; SFR Addresses
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0088                     	;# 
   165  0089                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  008F                     	;# 
   170  0090                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0093                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0094                     	;# 
   177  0095                     	;# 
   178  0096                     	;# 
   179  0097                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  0105                     	;# 
   189  0107                     	;# 
   190  0108                     	;# 
   191  0109                     	;# 
   192  010C                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  0185                     	;# 
   198  0187                     	;# 
   199  0188                     	;# 
   200  0189                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0008                     	;# 
   212  0009                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000D                     	;# 
   217  000E                     	;# 
   218  000E                     	;# 
   219  000F                     	;# 
   220  0010                     	;# 
   221  0011                     	;# 
   222  0012                     	;# 
   223  0013                     	;# 
   224  0014                     	;# 
   225  0015                     	;# 
   226  0015                     	;# 
   227  0016                     	;# 
   228  0017                     	;# 
   229  0018                     	;# 
   230  0019                     	;# 
   231  001A                     	;# 
   232  001B                     	;# 
   233  001B                     	;# 
   234  001C                     	;# 
   235  001D                     	;# 
   236  001E                     	;# 
   237  001F                     	;# 
   238  0081                     	;# 
   239  0085                     	;# 
   240  0086                     	;# 
   241  0087                     	;# 
   242  0088                     	;# 
   243  0089                     	;# 
   244  008C                     	;# 
   245  008D                     	;# 
   246  008E                     	;# 
   247  008F                     	;# 
   248  0090                     	;# 
   249  0091                     	;# 
   250  0092                     	;# 
   251  0093                     	;# 
   252  0093                     	;# 
   253  0093                     	;# 
   254  0094                     	;# 
   255  0095                     	;# 
   256  0096                     	;# 
   257  0097                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009A                     	;# 
   261  009B                     	;# 
   262  009C                     	;# 
   263  009D                     	;# 
   264  009E                     	;# 
   265  009F                     	;# 
   266  0105                     	;# 
   267  0107                     	;# 
   268  0108                     	;# 
   269  0109                     	;# 
   270  010C                     	;# 
   271  010C                     	;# 
   272  010D                     	;# 
   273  010E                     	;# 
   274  010F                     	;# 
   275  0185                     	;# 
   276  0187                     	;# 
   277  0188                     	;# 
   278  0189                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  0000                     	;# 
   282  0001                     	;# 
   283  0002                     	;# 
   284  0003                     	;# 
   285  0004                     	;# 
   286  0005                     	;# 
   287  0006                     	;# 
   288  0007                     	;# 
   289  0008                     	;# 
   290  0009                     	;# 
   291  000A                     	;# 
   292  000B                     	;# 
   293  000C                     	;# 
   294  000D                     	;# 
   295  000E                     	;# 
   296  000E                     	;# 
   297  000F                     	;# 
   298  0010                     	;# 
   299  0011                     	;# 
   300  0012                     	;# 
   301  0013                     	;# 
   302  0014                     	;# 
   303  0015                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0017                     	;# 
   307  0018                     	;# 
   308  0019                     	;# 
   309  001A                     	;# 
   310  001B                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  001D                     	;# 
   314  001E                     	;# 
   315  001F                     	;# 
   316  0081                     	;# 
   317  0085                     	;# 
   318  0086                     	;# 
   319  0087                     	;# 
   320  0088                     	;# 
   321  0089                     	;# 
   322  008C                     	;# 
   323  008D                     	;# 
   324  008E                     	;# 
   325  008F                     	;# 
   326  0090                     	;# 
   327  0091                     	;# 
   328  0092                     	;# 
   329  0093                     	;# 
   330  0093                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0097                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009A                     	;# 
   339  009B                     	;# 
   340  009C                     	;# 
   341  009D                     	;# 
   342  009E                     	;# 
   343  009F                     	;# 
   344  0105                     	;# 
   345  0107                     	;# 
   346  0108                     	;# 
   347  0109                     	;# 
   348  010C                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010E                     	;# 
   352  010F                     	;# 
   353  0185                     	;# 
   354  0187                     	;# 
   355  0188                     	;# 
   356  0189                     	;# 
   357  018C                     	;# 
   358  018D                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  0008                     	;# 
   368  0009                     	;# 
   369  000A                     	;# 
   370  000B                     	;# 
   371  000C                     	;# 
   372  000D                     	;# 
   373  000E                     	;# 
   374  000E                     	;# 
   375  000F                     	;# 
   376  0010                     	;# 
   377  0011                     	;# 
   378  0012                     	;# 
   379  0013                     	;# 
   380  0014                     	;# 
   381  0015                     	;# 
   382  0015                     	;# 
   383  0016                     	;# 
   384  0017                     	;# 
   385  0018                     	;# 
   386  0019                     	;# 
   387  001A                     	;# 
   388  001B                     	;# 
   389  001B                     	;# 
   390  001C                     	;# 
   391  001D                     	;# 
   392  001E                     	;# 
   393  001F                     	;# 
   394  0081                     	;# 
   395  0085                     	;# 
   396  0086                     	;# 
   397  0087                     	;# 
   398  0088                     	;# 
   399  0089                     	;# 
   400  008C                     	;# 
   401  008D                     	;# 
   402  008E                     	;# 
   403  008F                     	;# 
   404  0090                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0093                     	;# 
   408  0093                     	;# 
   409  0093                     	;# 
   410  0094                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0098                     	;# 
   415  0099                     	;# 
   416  009A                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  009F                     	;# 
   422  0105                     	;# 
   423  0107                     	;# 
   424  0108                     	;# 
   425  0109                     	;# 
   426  010C                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  010F                     	;# 
   431  0185                     	;# 
   432  0187                     	;# 
   433  0188                     	;# 
   434  0189                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  0000                     	;# 
   438  0001                     	;# 
   439  0002                     	;# 
   440  0003                     	;# 
   441  0004                     	;# 
   442  0005                     	;# 
   443  0006                     	;# 
   444  0007                     	;# 
   445  0008                     	;# 
   446  0009                     	;# 
   447  000A                     	;# 
   448  000B                     	;# 
   449  000C                     	;# 
   450  000D                     	;# 
   451  000E                     	;# 
   452  000E                     	;# 
   453  000F                     	;# 
   454  0010                     	;# 
   455  0011                     	;# 
   456  0012                     	;# 
   457  0013                     	;# 
   458  0014                     	;# 
   459  0015                     	;# 
   460  0015                     	;# 
   461  0016                     	;# 
   462  0017                     	;# 
   463  0018                     	;# 
   464  0019                     	;# 
   465  001A                     	;# 
   466  001B                     	;# 
   467  001B                     	;# 
   468  001C                     	;# 
   469  001D                     	;# 
   470  001E                     	;# 
   471  001F                     	;# 
   472  0081                     	;# 
   473  0085                     	;# 
   474  0086                     	;# 
   475  0087                     	;# 
   476  0088                     	;# 
   477  0089                     	;# 
   478  008C                     	;# 
   479  008D                     	;# 
   480  008E                     	;# 
   481  008F                     	;# 
   482  0090                     	;# 
   483  0091                     	;# 
   484  0092                     	;# 
   485  0093                     	;# 
   486  0093                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0095                     	;# 
   490  0096                     	;# 
   491  0097                     	;# 
   492  0098                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009C                     	;# 
   497  009D                     	;# 
   498  009E                     	;# 
   499  009F                     	;# 
   500  0105                     	;# 
   501  0107                     	;# 
   502  0108                     	;# 
   503  0109                     	;# 
   504  010C                     	;# 
   505  010C                     	;# 
   506  010D                     	;# 
   507  010E                     	;# 
   508  010F                     	;# 
   509  0185                     	;# 
   510  0187                     	;# 
   511  0188                     	;# 
   512  0189                     	;# 
   513  018C                     	;# 
   514  018D                     	;# 
   515                           
   516                           	psect	idataCOMMON
   517  07FF                     __pidataCOMMON:	
   518                           
   519                           ;initializer for _paused
   520  07FF  3401               	retlw	1
   521                           
   522                           	psect	idataBANK0
   523  0882                     __pidataBANK0:	
   524                           
   525                           ;initializer for _randx
   526  0882  3401               	retlw	1
   527  0883  3400               	retlw	0
   528  0884  3400               	retlw	0
   529  0885  3400               	retlw	0
   530                           
   531                           	psect	idataBANK1
   532  0002                     __pidataBANK1:	
   533                           
   534                           ;initializer for _defaultTimerPrescaler
   535  0002  340C               	retlw	12
   536                           
   537                           ;initializer for _timerPrescaler
   538  0003  340C               	retlw	12
   539                           
   540                           	psect	stringtext
   541  0100                     __pstringtext:	
   542  0100                     stringtab:	
   543  0100                     __stringtab:	
   544                           
   545                           ;	String table - string pointers are 2 bytes each
   546  0100  1BFF               	btfsc	btemp+1,7
   547  0101  290A               	ljmp	stringcode
   548  0102  1383               	bcf	3,7
   549  0103  187F               	btfsc	btemp+1,0
   550  0104  1783               	bsf	3,7
   551  0105  0800               	movf	0,w
   552  0106  0A84               	incf	4,f
   553  0107  1903               	skipnz
   554  0108  0AFF               	incf	btemp+1,f
   555  0109  0008               	return
   556  010A                     stringcode:	
   557  010A  087F               	movf	btemp+1,w
   558  010B  397F               	andlw	127
   559  010C  008A               	movwf	10
   560  010D  0804               	movf	4,w
   561  010E  0A84               	incf	4,f
   562  010F  1903               	skipnz
   563  0110  0AFF               	incf	btemp+1,f
   564  0111  0082               	movwf	2
   565  0112                     __stringbase:	
   566  0112                     __end_of__stringtab:	
   567  0112                     _Font_digits:	
   568  0112  3400               	retlw	0
   569  0113  3470               	retlw	112
   570  0114  3450               	retlw	80
   571  0115  3450               	retlw	80
   572  0116  3450               	retlw	80
   573  0117  3450               	retlw	80
   574  0118  3470               	retlw	112
   575  0119  3400               	retlw	0
   576  011A  3400               	retlw	0
   577  011B  3420               	retlw	32
   578  011C  3460               	retlw	96
   579  011D  3420               	retlw	32
   580  011E  3420               	retlw	32
   581  011F  3420               	retlw	32
   582  0120  3420               	retlw	32
   583  0121  3400               	retlw	0
   584  0122  3400               	retlw	0
   585  0123  3420               	retlw	32
   586  0124  3450               	retlw	80
   587  0125  3410               	retlw	16
   588  0126  3420               	retlw	32
   589  0127  3440               	retlw	64
   590  0128  3470               	retlw	112
   591  0129  3400               	retlw	0
   592  012A  3400               	retlw	0
   593  012B  3470               	retlw	112
   594  012C  3410               	retlw	16
   595  012D  3460               	retlw	96
   596  012E  3410               	retlw	16
   597  012F  3410               	retlw	16
   598  0130  3460               	retlw	96
   599  0131  3400               	retlw	0
   600  0132  3400               	retlw	0
   601  0133  3450               	retlw	80
   602  0134  3450               	retlw	80
   603  0135  3450               	retlw	80
   604  0136  3470               	retlw	112
   605  0137  3410               	retlw	16
   606  0138  3410               	retlw	16
   607  0139  3400               	retlw	0
   608  013A  3400               	retlw	0
   609  013B  3470               	retlw	112
   610  013C  3440               	retlw	64
   611  013D  3470               	retlw	112
   612  013E  3410               	retlw	16
   613  013F  3410               	retlw	16
   614  0140  3460               	retlw	96
   615  0141  3400               	retlw	0
   616  0142  3400               	retlw	0
   617  0143  3470               	retlw	112
   618  0144  3440               	retlw	64
   619  0145  3470               	retlw	112
   620  0146  3450               	retlw	80
   621  0147  3450               	retlw	80
   622  0148  3470               	retlw	112
   623  0149  3400               	retlw	0
   624  014A  3400               	retlw	0
   625  014B  3470               	retlw	112
   626  014C  3410               	retlw	16
   627  014D  3410               	retlw	16
   628  014E  3420               	retlw	32
   629  014F  3420               	retlw	32
   630  0150  3420               	retlw	32
   631  0151  3400               	retlw	0
   632  0152  3400               	retlw	0
   633  0153  3470               	retlw	112
   634  0154  3450               	retlw	80
   635  0155  3470               	retlw	112
   636  0156  3450               	retlw	80
   637  0157  3450               	retlw	80
   638  0158  3470               	retlw	112
   639  0159  3400               	retlw	0
   640  015A  3400               	retlw	0
   641  015B  3470               	retlw	112
   642  015C  3450               	retlw	80
   643  015D  3450               	retlw	80
   644  015E  3470               	retlw	112
   645  015F  3410               	retlw	16
   646  0160  3410               	retlw	16
   647  0161  3400               	retlw	0
   648  0162                     __end_of_Font_digits:	
   649  0162                     _Font_score:	
   650  0162  3400               	retlw	0
   651  0163  34EE               	retlw	238
   652  0164  3488               	retlw	136
   653  0165  34E8               	retlw	232
   654  0166  3428               	retlw	40
   655  0167  3428               	retlw	40
   656  0168  34EE               	retlw	238
   657  0169  3400               	retlw	0
   658  016A  3400               	retlw	0
   659  016B  34EE               	retlw	238
   660  016C  34AA               	retlw	170
   661  016D  34AE               	retlw	174
   662  016E  34AC               	retlw	172
   663  016F  34AA               	retlw	170
   664  0170  34EA               	retlw	234
   665  0171  3400               	retlw	0
   666  0172  3400               	retlw	0
   667  0173  34E0               	retlw	224
   668  0174  3480               	retlw	128
   669  0175  34E0               	retlw	224
   670  0176  3480               	retlw	128
   671  0177  3480               	retlw	128
   672  0178  34E0               	retlw	224
   673  0179  3400               	retlw	0
   674  017A                     __end_of_Font_score:	
   675  017A                     _Font_hi:	
   676  017A  3400               	retlw	0
   677  017B  34A4               	retlw	164
   678  017C  34A4               	retlw	164
   679  017D  34A4               	retlw	164
   680  017E  34E4               	retlw	228
   681  017F  34A4               	retlw	164
   682  0180  34A4               	retlw	164
   683  0181  3400               	retlw	0
   684  0182                     __end_of_Font_hi:	
   685  0182                     _Tetris_playerStartingPosition:	
   686  0182  3408               	retlw	8
   687  0183  3402               	retlw	2
   688  0184                     __end_of_Tetris_playerStartingPosition:	
   689  0184                     _Tetris_unitPivot:	
   690  0184  3403               	retlw	3
   691  0185  3402               	retlw	2
   692  0186                     __end_of_Tetris_unitPivot:	
   693  0186                     DrawHighscoreText@baseY:	
   694  0186  3438               	retlw	56
   695  0187                     __end_ofDrawHighscoreText@baseY:	
   696  0187                     DrawHighscoreText@baseX:	
   697  0187  3405               	retlw	5
   698  0188                     __end_ofDrawHighscoreText@baseX:	
   699  0188                     _Tetris_units:	
   700  0188  3449               	retlw	73
   701  0189  3402               	retlw	2
   702  018A  3410               	retlw	16
   703  018B  3400               	retlw	0
   704  018C  3410               	retlw	16
   705  018D  3400               	retlw	0
   706  018E  3410               	retlw	16
   707  018F  3400               	retlw	0
   708  0190  3410               	retlw	16
   709  0191  3400               	retlw	0
   710  0192  3400               	retlw	0
   711  0193  3400               	retlw	0
   712  0194  3400               	retlw	0
   713  0195  3400               	retlw	0
   714  0196  343C               	retlw	60
   715  0197  3400               	retlw	0
   716  0198  3400               	retlw	0
   717  0199  3400               	retlw	0
   718  019A  3400               	retlw	0
   719  019B  3400               	retlw	0
   720  019C  3400               	retlw	0
   721  019D  3400               	retlw	0
   722  019E  3400               	retlw	0
   723  019F  3400               	retlw	0
   724  01A0  3400               	retlw	0
   725  01A1  3400               	retlw	0
   726  01A2  3400               	retlw	0
   727  01A3  3400               	retlw	0
   728  01A4  3400               	retlw	0
   729  01A5  3400               	retlw	0
   730  01A6  3400               	retlw	0
   731  01A7  3400               	retlw	0
   732  01A8  3400               	retlw	0
   733  01A9  3400               	retlw	0
   734  01AA  344F               	retlw	79
   735  01AB  3401               	retlw	1
   736  01AC  3400               	retlw	0
   737  01AD  3400               	retlw	0
   738  01AE  3418               	retlw	24
   739  01AF  3400               	retlw	0
   740  01B0  3418               	retlw	24
   741  01B1  3400               	retlw	0
   742  01B2  3400               	retlw	0
   743  01B3  3400               	retlw	0
   744  01B4  3400               	retlw	0
   745  01B5  3400               	retlw	0
   746  01B6  3400               	retlw	0
   747  01B7  3400               	retlw	0
   748  01B8  3400               	retlw	0
   749  01B9  3400               	retlw	0
   750  01BA  3400               	retlw	0
   751  01BB  3400               	retlw	0
   752  01BC  3400               	retlw	0
   753  01BD  3400               	retlw	0
   754  01BE  3400               	retlw	0
   755  01BF  3400               	retlw	0
   756  01C0  3400               	retlw	0
   757  01C1  3400               	retlw	0
   758  01C2  3400               	retlw	0
   759  01C3  3400               	retlw	0
   760  01C4  3400               	retlw	0
   761  01C5  3400               	retlw	0
   762  01C6  3400               	retlw	0
   763  01C7  3400               	retlw	0
   764  01C8  3400               	retlw	0
   765  01C9  3400               	retlw	0
   766  01CA  3400               	retlw	0
   767  01CB  3400               	retlw	0
   768  01CC  3454               	retlw	84
   769  01CD  3404               	retlw	4
   770  01CE  3400               	retlw	0
   771  01CF  3400               	retlw	0
   772  01D0  3410               	retlw	16
   773  01D1  3400               	retlw	0
   774  01D2  3438               	retlw	56
   775  01D3  3400               	retlw	0
   776  01D4  3400               	retlw	0
   777  01D5  3400               	retlw	0
   778  01D6  3400               	retlw	0
   779  01D7  3400               	retlw	0
   780  01D8  3410               	retlw	16
   781  01D9  3400               	retlw	0
   782  01DA  3418               	retlw	24
   783  01DB  3400               	retlw	0
   784  01DC  3410               	retlw	16
   785  01DD  3400               	retlw	0
   786  01DE  3400               	retlw	0
   787  01DF  3400               	retlw	0
   788  01E0  3400               	retlw	0
   789  01E1  3400               	retlw	0
   790  01E2  3438               	retlw	56
   791  01E3  3400               	retlw	0
   792  01E4  3410               	retlw	16
   793  01E5  3400               	retlw	0
   794  01E6  3400               	retlw	0
   795  01E7  3400               	retlw	0
   796  01E8  3410               	retlw	16
   797  01E9  3400               	retlw	0
   798  01EA  3430               	retlw	48
   799  01EB  3400               	retlw	0
   800  01EC  3410               	retlw	16
   801  01ED  3400               	retlw	0
   802  01EE  344C               	retlw	76
   803  01EF  3404               	retlw	4
   804  01F0  3400               	retlw	0
   805  01F1  3400               	retlw	0
   806  01F2  3410               	retlw	16
   807  01F3  3400               	retlw	0
   808  01F4  3410               	retlw	16
   809  01F5  3400               	retlw	0
   810  01F6  3418               	retlw	24
   811  01F7  3400               	retlw	0
   812  01F8  3400               	retlw	0
   813  01F9  3400               	retlw	0
   814  01FA  3400               	retlw	0
   815  01FB  3400               	retlw	0
   816  01FC  3438               	retlw	56
   817  01FD  3400               	retlw	0
   818  01FE  3420               	retlw	32
   819  01FF  3400               	retlw	0
   820  0200  3400               	retlw	0
   821  0201  3400               	retlw	0
   822  0202  3430               	retlw	48
   823  0203  3400               	retlw	0
   824  0204  3410               	retlw	16
   825  0205  3400               	retlw	0
   826  0206  3410               	retlw	16
   827  0207  3400               	retlw	0
   828  0208  3400               	retlw	0
   829  0209  3400               	retlw	0
   830  020A  3408               	retlw	8
   831  020B  3400               	retlw	0
   832  020C  3438               	retlw	56
   833  020D  3400               	retlw	0
   834  020E  3400               	retlw	0
   835  020F  3400               	retlw	0
   836  0210  344A               	retlw	74
   837  0211  3404               	retlw	4
   838  0212  3400               	retlw	0
   839  0213  3400               	retlw	0
   840  0214  3410               	retlw	16
   841  0215  3400               	retlw	0
   842  0216  3410               	retlw	16
   843  0217  3400               	retlw	0
   844  0218  3430               	retlw	48
   845  0219  3400               	retlw	0
   846  021A  3400               	retlw	0
   847  021B  3400               	retlw	0
   848  021C  3420               	retlw	32
   849  021D  3400               	retlw	0
   850  021E  3438               	retlw	56
   851  021F  3400               	retlw	0
   852  0220  3400               	retlw	0
   853  0221  3400               	retlw	0
   854  0222  3400               	retlw	0
   855  0223  3400               	retlw	0
   856  0224  3418               	retlw	24
   857  0225  3400               	retlw	0
   858  0226  3410               	retlw	16
   859  0227  3400               	retlw	0
   860  0228  3410               	retlw	16
   861  0229  3400               	retlw	0
   862  022A  3400               	retlw	0
   863  022B  3400               	retlw	0
   864  022C  3400               	retlw	0
   865  022D  3400               	retlw	0
   866  022E  3438               	retlw	56
   867  022F  3400               	retlw	0
   868  0230  3408               	retlw	8
   869  0231  3400               	retlw	0
   870  0232  3453               	retlw	83
   871  0233  3402               	retlw	2
   872  0234  3400               	retlw	0
   873  0235  3400               	retlw	0
   874  0236  3418               	retlw	24
   875  0237  3400               	retlw	0
   876  0238  3430               	retlw	48
   877  0239  3400               	retlw	0
   878  023A  3400               	retlw	0
   879  023B  3400               	retlw	0
   880  023C  3400               	retlw	0
   881  023D  3400               	retlw	0
   882  023E  3410               	retlw	16
   883  023F  3400               	retlw	0
   884  0240  3418               	retlw	24
   885  0241  3400               	retlw	0
   886  0242  3408               	retlw	8
   887  0243  3400               	retlw	0
   888  0244  3400               	retlw	0
   889  0245  3400               	retlw	0
   890  0246  3400               	retlw	0
   891  0247  3400               	retlw	0
   892  0248  3400               	retlw	0
   893  0249  3400               	retlw	0
   894  024A  3400               	retlw	0
   895  024B  3400               	retlw	0
   896  024C  3400               	retlw	0
   897  024D  3400               	retlw	0
   898  024E  3400               	retlw	0
   899  024F  3400               	retlw	0
   900  0250  3400               	retlw	0
   901  0251  3400               	retlw	0
   902  0252  3400               	retlw	0
   903  0253  3400               	retlw	0
   904  0254  345A               	retlw	90
   905  0255  3402               	retlw	2
   906  0256  3400               	retlw	0
   907  0257  3400               	retlw	0
   908  0258  3430               	retlw	48
   909  0259  3400               	retlw	0
   910  025A  3418               	retlw	24
   911  025B  3400               	retlw	0
   912  025C  3400               	retlw	0
   913  025D  3400               	retlw	0
   914  025E  3400               	retlw	0
   915  025F  3400               	retlw	0
   916  0260  3408               	retlw	8
   917  0261  3400               	retlw	0
   918  0262  3418               	retlw	24
   919  0263  3400               	retlw	0
   920  0264  3410               	retlw	16
   921  0265  3400               	retlw	0
   922  0266  3400               	retlw	0
   923  0267  3400               	retlw	0
   924  0268  3400               	retlw	0
   925  0269  3400               	retlw	0
   926  026A  3400               	retlw	0
   927  026B  3400               	retlw	0
   928  026C  3400               	retlw	0
   929  026D  3400               	retlw	0
   930  026E  3400               	retlw	0
   931  026F  3400               	retlw	0
   932  0270  3400               	retlw	0
   933  0271  3400               	retlw	0
   934  0272  3400               	retlw	0
   935  0273  3400               	retlw	0
   936  0274  3400               	retlw	0
   937  0275  3400               	retlw	0
   938  0276                     __end_of_Tetris_units:	
   939  000E                     _TMR1	set	14
   940  000B                     _INTCONbits	set	11
   941  0003                     _STATUSbits	set	3
   942  0007                     _PORTC	set	7
   943  0008                     _PORTD	set	8
   944  0006                     _PORTB	set	6
   945  0005                     _PORTA	set	5
   946  0039                     _RC1	set	57
   947  0038                     _RC0	set	56
   948  0041                     _RD1	set	65
   949  0040                     _RD0	set	64
   950  003A                     _RC2	set	58
   951  003B                     _RC3	set	59
   952  0031                     _RB1	set	49
   953  0034                     _RB4	set	52
   954  0033                     _RB3	set	51
   955  0032                     _RB2	set	50
   956  0060                     _TMR1IF	set	96
   957  0059                     _INTF	set	89
   958  005C                     _INTE	set	92
   959  0085                     _T1CKPS1	set	133
   960  0084                     _T1CKPS0	set	132
   961  0080                     _TMR1ON	set	128
   962  005E                     _PEIE	set	94
   963  0081                     _TMR1CS	set	129
   964  005F                     _GIE	set	95
   965  0087                     _TRISC	set	135
   966  0088                     _TRISD	set	136
   967  0085                     _TRISA	set	133
   968  0086                     _TRISB	set	134
   969  0095                     _WPUB	set	149
   970  040E                     _INTEDG	set	1038
   971  040F                     _nRBPU	set	1039
   972  0460                     _TMR1IE	set	1120
   973  047E                     _IRCF2	set	1150
   974  047D                     _IRCF1	set	1149
   975  047C                     _IRCF0	set	1148
   976  010C                     _EEDATA	set	268
   977  010D                     _EEADR	set	269
   978  018D                     _EECON2	set	397
   979  018C                     _EECON1	set	396
   980  018C                     _EECON1bits	set	396
   981  0188                     _ANSEL	set	392
   982  0189                     _ANSELH	set	393
   983                           
   984                           ; #config settings
   985  0000                     
   986                           	psect	cinit
   987  000D                     start_initialization:	
   988  000D                     __initialization:	
   989                           
   990                           ; Initialize objects allocated to BANK1
   991  000D  1683               	bsf	3,5	;RP0=1, select bank1
   992  000E  1303               	bcf	3,6	;RP1=0, select bank1
   993  000F  118A  2002  118A   	fcall	__pidataBANK1	;fetch initializer
   994  0012  00E4               	movwf	__pdataBANK1& (0+127)
   995  0013  118A  2003  118A   	fcall	__pidataBANK1+1	;fetch initializer
   996  0016  00E5               	movwf	(__pdataBANK1+1)& (0+127)
   997                           
   998                           ; Initialize objects allocated to BANK0
   999  0017  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0018  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0019  158A  2082  118A   	fcall	__pidataBANK0	;fetch initializer
  1002  001C  00C7               	movwf	__pdataBANK0& (0+127)
  1003  001D  158A  2083  118A   	fcall	__pidataBANK0+1	;fetch initializer
  1004  0020  00C8               	movwf	(__pdataBANK0+1)& (0+127)
  1005  0021  158A  2084  118A   	fcall	__pidataBANK0+2	;fetch initializer
  1006  0024  00C9               	movwf	(__pdataBANK0+2)& (0+127)
  1007  0025  158A  2085  118A   	fcall	__pidataBANK0+3	;fetch initializer
  1008  0028  00CA               	movwf	(__pdataBANK0+3)& (0+127)
  1009                           
  1010                           ; Initialize objects allocated to COMMON
  1011  0029  118A  27FF         	fcall	__pidataCOMMON	;fetch initializer
  1012  002B  00FA               	movwf	__pdataCOMMON& (0+127)
  1013                           
  1014                           ; Clear objects allocated to BANK1
  1015  002C  1683               	bsf	3,5	;RP0=1, select bank1
  1016  002D  1303               	bcf	3,6	;RP1=0, select bank1
  1017  002E  01E6               	clrf	__pbssBANK1& (0+127)
  1018                           
  1019                           ; Clear objects allocated to COMMON
  1020  002F  01F9               	clrf	__pbssCOMMON& (0+127)
  1021  0030                     end_of_initialization:	
  1022                           ;End of C runtime variable initialization code
  1023                           
  1024  0030                     __end_of__initialization:	
  1025  0030  0183               	clrf	3
  1026  0031  118A  2C85         	ljmp	_main	;jump to C main() function
  1027                           
  1028                           	psect	bssEEDATA
  1029  0000                     __pbssEEDATA:	
  1030  0000                     _uniqueSeed:	
  1031  0000  0000               	db	0
  1032  0001  0000               	db	0
  1033  0002                     _highscore:	
  1034  0002  0000               	db	0
  1035  0003  0000               	db	0
  1036                           
  1037                           	psect	bssCOMMON
  1038  0079                     __pbssCOMMON:	
  1039  0079                     InterruptHandler@timerInterruptCounter:	
  1040  0079                     	ds	1
  1041                           
  1042                           	psect	dataCOMMON
  1043  007A                     __pdataCOMMON:	
  1044  007A                     _paused:	
  1045  007A                     	ds	1
  1046                           
  1047                           	psect	dataBANK0
  1048  0047                     __pdataBANK0:	
  1049  0047                     _randx:	
  1050  0047                     	ds	4
  1051                           
  1052                           	psect	bssBANK1
  1053  00E6                     __pbssBANK1:	
  1054  00E6                     _updateReady:	
  1055  00E6                     	ds	1
  1056                           
  1057                           	psect	dataBANK1
  1058  00E4                     __pdataBANK1:	
  1059  00E4                     _defaultTimerPrescaler:	
  1060  00E4                     	ds	1
  1061  00E5                     _timerPrescaler:	
  1062  00E5                     	ds	1
  1063                           
  1064                           	psect	cstackBANK1
  1065  00A0                     __pcstackBANK1:	
  1066  00A0                     main@status:	
  1067                           
  1068                           ; 1 bytes @ 0x0
  1069  00A0                     	ds	1
  1070  00A1                     main@buttons:	
  1071                           
  1072                           ; 4 bytes @ 0x1
  1073  00A1                     	ds	4
  1074  00A5                     main@tetrisGame:	
  1075                           
  1076                           ; 63 bytes @ 0x5
  1077  00A5                     	ds	63
  1078                           
  1079                           	psect	cstackCOMMON
  1080  0070                     __pcstackCOMMON:	
  1081  0070                     ?_LCD_SetupPorts:	
  1082  0070                     ?_LCD_Reset:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  0070                     ?_LCD_SegmentSelection:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  0070                     ?_LCD_Clear:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  0070                     ?_LCD_TurnOn:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  0070                     ?_Buttons_Setup:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  0070                     ?_Buttons_Clear:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  0070                     ?_DrawCurrentScore:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  0070                     ?_Buttons_Update:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  0070                     ?_Tetris_MovePlayerLeft:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  0070                     ?_Tetris_MovePlayerRight:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  0070                     ?_Tetris_RotatePlayer:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  0070                     ?_Tetris_UpdateGame:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  0070                     ?_DrawTetris:	
  1119                           ; 1 bytes @ 0x0
  1120                           
  1121  0070                     ?_FlashVictoriously:	
  1122                           ; 1 bytes @ 0x0
  1123                           
  1124  0070                     ?_Tetris_MovePlayerDown:	
  1125                           ; 1 bytes @ 0x0
  1126                           
  1127  0070                     ?_Tetris_ClearFilledRows:	
  1128                           ; 1 bytes @ 0x0
  1129                           
  1130  0070                     ?_LCD_ReadStatus:	
  1131                           ; 1 bytes @ 0x0
  1132                           
  1133  0070                     ?_LCD_SetX:	
  1134                           ; 1 bytes @ 0x0
  1135                           
  1136  0070                     ?_LCD_SetY:	
  1137                           ; 1 bytes @ 0x0
  1138                           
  1139  0070                     ?_LCD_SetZ:	
  1140                           ; 1 bytes @ 0x0
  1141                           
  1142  0070                     ?_SetupOscillator:	
  1143                           ; 1 bytes @ 0x0
  1144                           
  1145  0070                     ?_SetupTimer:	
  1146                           ; 1 bytes @ 0x0
  1147                           
  1148  0070                     ?_ResetTimer:	
  1149                           ; 1 bytes @ 0x0
  1150                           
  1151  0070                     ?_InterruptHandler:	
  1152                           ; 1 bytes @ 0x0
  1153                           
  1154  0070                     ??_InterruptHandler:	
  1155                           ; 1 bytes @ 0x0
  1156                           
  1157  0070                     ?_SetupRandomness:	
  1158                           ; 1 bytes @ 0x0
  1159                           
  1160  0070                     ?_Setup:	
  1161                           ; 1 bytes @ 0x0
  1162                           
  1163  0070                     ?_UpdateDifficulty:	
  1164                           ; 1 bytes @ 0x0
  1165                           
  1166  0070                     ?_main:	
  1167                           ; 1 bytes @ 0x0
  1168                           
  1169  0070                     ?_Tetris_PlayerTopmostY:	
  1170                           ; 1 bytes @ 0x0
  1171                           
  1172  0070                     ?_Tetris_PlayerOverlapsEnvironment:	
  1173                           ; 1 bytes @ 0x0
  1174                           
  1175  0070                     ?_Tetris_PlayerTouchingLeftBound:	
  1176                           ; 1 bytes @ 0x0
  1177                           
  1178  0070                     ?_Tetris_PlayerTouchingRightBound:	
  1179                           ; 1 bytes @ 0x0
  1180                           
  1181  0070                     ?_Tetris_RemovePlayerFromTable:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184  0070                     ?_Tetris_ApplyPlayerToTable:	
  1185                           ; 1 bytes @ 0x0
  1186                           
  1187  0070                     ?_Tetris_UpdatePlayerUnitBits:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190  0070                     ?_Tetris_PlayerUnitBitsAreValid:	
  1191                           ; 1 bytes @ 0x0
  1192                           
  1193  0070                     ?_Tetris_ScoreForRowsCleared:	
  1194                           ; 1 bytes @ 0x0
  1195                           
  1196  0070                     ?_Buttons_SetupPortB:	
  1197                           ; 1 bytes @ 0x0
  1198                           
  1199  0070                     ?_Buttons_SetupInterrupts:	
  1200                           ; 1 bytes @ 0x0
  1201                           
  1202  0070                     ?_LCD_IsBusy:	
  1203                           ; 1 bytes @ 0x0
  1204                           
  1205  0070                     ?_LCD_BlockWhileBusy:	
  1206                           ; 1 bytes @ 0x0
  1207                           
  1208  0070                     ?_LCD_WriteData:	
  1209                           ; 1 bytes @ 0x0
  1210                           
  1211  0070                     ?_LCD_TurnOff:	
  1212                           ; 1 bytes @ 0x0
  1213                           
  1214  0070                     ?_DrawHiMarker:	
  1215                           ; 1 bytes @ 0x0
  1216                           
  1217  0070                     ?_DrawHighscoreText:	
  1218                           ; 1 bytes @ 0x0
  1219                           
  1220                           
  1221                           ; 1 bytes @ 0x0
  1222  0070                     	ds	3
  1223  0073                     ??_LCD_SetupPorts:	
  1224  0073                     ??_LCD_SegmentSelection:	
  1225                           ; 1 bytes @ 0x3
  1226                           
  1227  0073                     ??_Buttons_Setup:	
  1228                           ; 1 bytes @ 0x3
  1229                           
  1230  0073                     ?_memset:	
  1231                           ; 1 bytes @ 0x3
  1232                           
  1233  0073                     ??_LCD_ReadStatus:	
  1234                           ; 1 bytes @ 0x3
  1235                           
  1236  0073                     ??_SetupOscillator:	
  1237                           ; 1 bytes @ 0x3
  1238                           
  1239  0073                     ??_SetupTimer:	
  1240                           ; 1 bytes @ 0x3
  1241                           
  1242  0073                     ??_ResetTimer:	
  1243                           ; 1 bytes @ 0x3
  1244                           
  1245  0073                     ??_UpdateDifficulty:	
  1246                           ; 1 bytes @ 0x3
  1247                           
  1248  0073                     ??_Tetris_PlayerTopmostY:	
  1249                           ; 1 bytes @ 0x3
  1250                           
  1251  0073                     ??_Tetris_PlayerTouchingLeftBound:	
  1252                           ; 1 bytes @ 0x3
  1253                           
  1254  0073                     ??_Tetris_PlayerTouchingRightBound:	
  1255                           ; 1 bytes @ 0x3
  1256                           
  1257  0073                     ?_Tetris_CountUnitBits:	
  1258                           ; 1 bytes @ 0x3
  1259                           
  1260  0073                     ?_Tetris_ShiftTableDown:	
  1261                           ; 1 bytes @ 0x3
  1262                           
  1263  0073                     ??_Tetris_ScoreForRowsCleared:	
  1264                           ; 1 bytes @ 0x3
  1265                           
  1266  0073                     ??_Buttons_SetupPortB:	
  1267                           ; 1 bytes @ 0x3
  1268                           
  1269  0073                     ??_Buttons_SetupInterrupts:	
  1270                           ; 1 bytes @ 0x3
  1271                           
  1272  0073                     ?_Buttons_UpdateButton:	
  1273                           ; 1 bytes @ 0x3
  1274                           
  1275  0073                     ?___eecpymem:	
  1276                           ; 1 bytes @ 0x3
  1277                           
  1278  0073                     ?___memcpyee:	
  1279                           ; 1 bytes @ 0x3
  1280                           
  1281  0073                     ??___lmul:	
  1282                           ; 1 bytes @ 0x3
  1283                           
  1284  0073                     ?___bmul:	
  1285                           ; 1 bytes @ 0x3
  1286                           
  1287  0073                     ?___lbmod:	
  1288                           ; 1 bytes @ 0x3
  1289                           
  1290  0073                     ?___lwdiv:	
  1291                           ; 1 bytes @ 0x3
  1292                           
  1293  0073                     Tetris_UpdatePlayerUnitBits@i_381:	
  1294                           ; 2 bytes @ 0x3
  1295                           
  1296  0073                     Tetris_ShiftTableDown@upto:	
  1297                           ; 1 bytes @ 0x3
  1298                           
  1299  0073                     Buttons_UpdateButton@nHeld:	
  1300                           ; 1 bytes @ 0x3
  1301                           
  1302  0073                     LCD_SegmentSelection@segments:	
  1303                           ; 1 bytes @ 0x3
  1304                           
  1305  0073                     ___eecpymem@from:	
  1306                           ; 1 bytes @ 0x3
  1307                           
  1308  0073                     ___memcpyee@from:	
  1309                           ; 1 bytes @ 0x3
  1310                           
  1311  0073                     ___bmul@multiplicand:	
  1312                           ; 1 bytes @ 0x3
  1313                           
  1314  0073                     ___lbmod@divisor:	
  1315                           ; 1 bytes @ 0x3
  1316                           
  1317  0073                     Tetris_CountUnitBits@unitBits:	
  1318                           ; 1 bytes @ 0x3
  1319                           
  1320  0073                     ___lwdiv@divisor:	
  1321                           ; 2 bytes @ 0x3
  1322                           
  1323  0073                     memset@c:	
  1324                           ; 2 bytes @ 0x3
  1325                           
  1326                           
  1327                           ; 2 bytes @ 0x3
  1328  0073                     	ds	1
  1329  0074                     ??_Buttons_UpdateButton:	
  1330  0074                     ??___bmul:	
  1331                           ; 1 bytes @ 0x4
  1332                           
  1333  0074                     ??___lbmod:	
  1334                           ; 1 bytes @ 0x4
  1335                           
  1336  0074                     Tetris_UpdatePlayerUnitBits@i_382:	
  1337                           ; 1 bytes @ 0x4
  1338                           
  1339  0074                     Tetris_ShiftTableDown@gameTable:	
  1340                           ; 1 bytes @ 0x4
  1341                           
  1342  0074                     LCD_ReadStatus@status:	
  1343                           ; 1 bytes @ 0x4
  1344                           
  1345  0074                     ___eecpymem@size:	
  1346                           ; 1 bytes @ 0x4
  1347                           
  1348  0074                     ___memcpyee@size:	
  1349                           ; 1 bytes @ 0x4
  1350                           
  1351  0074                     ___lmul@product:	
  1352                           ; 1 bytes @ 0x4
  1353                           
  1354                           
  1355                           ; 4 bytes @ 0x4
  1356  0074                     	ds	1
  1357  0075                     ??_Tetris_PlayerUnitBitsAreValid:	
  1358  0075                     ??_LCD_IsBusy:	
  1359                           ; 1 bytes @ 0x5
  1360                           
  1361  0075                     ??___eecpymem:	
  1362                           ; 1 bytes @ 0x5
  1363                           
  1364  0075                     ??___memcpyee:	
  1365                           ; 1 bytes @ 0x5
  1366                           
  1367  0075                     UpdateDifficulty@tetrisGame:	
  1368                           ; 1 bytes @ 0x5
  1369                           
  1370  0075                     Tetris_PlayerTopmostY@player:	
  1371                           ; 1 bytes @ 0x5
  1372                           
  1373  0075                     Tetris_UpdatePlayerUnitBits@i:	
  1374                           ; 1 bytes @ 0x5
  1375                           
  1376  0075                     Tetris_ShiftTableDown@i:	
  1377                           ; 1 bytes @ 0x5
  1378                           
  1379  0075                     Tetris_ScoreForRowsCleared@rowsCleared:	
  1380                           ; 1 bytes @ 0x5
  1381                           
  1382  0075                     Buttons_UpdateButton@button:	
  1383                           ; 1 bytes @ 0x5
  1384                           
  1385  0075                     ___bmul@product:	
  1386                           ; 1 bytes @ 0x5
  1387                           
  1388  0075                     ___lwdiv@dividend:	
  1389                           ; 1 bytes @ 0x5
  1390                           
  1391  0075                     memset@n:	
  1392                           ; 2 bytes @ 0x5
  1393                           
  1394                           
  1395                           ; 2 bytes @ 0x5
  1396  0075                     	ds	1
  1397  0076                     ??_Buttons_Update:	
  1398  0076                     Tetris_PlayerOverlapsEnvironment@start:	
  1399                           ; 1 bytes @ 0x6
  1400                           
  1401  0076                     Tetris_RemovePlayerFromTable@start:	
  1402                           ; 1 bytes @ 0x6
  1403                           
  1404  0076                     Tetris_UpdatePlayerUnitBits@shift:	
  1405                           ; 1 bytes @ 0x6
  1406                           
  1407  0076                     Tetris_ClearFilledRows@rowsCleared:	
  1408                           ; 1 bytes @ 0x6
  1409                           
  1410  0076                     Buttons_Update@buttons:	
  1411                           ; 1 bytes @ 0x6
  1412                           
  1413  0076                     _LCD_IsBusy$632:	
  1414                           ; 1 bytes @ 0x6
  1415                           
  1416  0076                     ___eecpymem@cp:	
  1417                           ; 1 bytes @ 0x6
  1418                           
  1419  0076                     ___memcpyee@ptr:	
  1420                           ; 1 bytes @ 0x6
  1421                           
  1422  0076                     ___bmul@multiplier:	
  1423                           ; 1 bytes @ 0x6
  1424                           
  1425                           
  1426                           ; 1 bytes @ 0x6
  1427  0076                     	ds	1
  1428  0077                     ??_memset:	
  1429  0077                     ??___lwdiv:	
  1430                           ; 1 bytes @ 0x7
  1431                           
  1432  0077                     Tetris_PlayerOverlapsEnvironment@game:	
  1433                           ; 1 bytes @ 0x7
  1434                           
  1435  0077                     Tetris_PlayerTouchingLeftBound@player:	
  1436                           ; 1 bytes @ 0x7
  1437                           
  1438  0077                     Tetris_PlayerTouchingRightBound@player:	
  1439                           ; 1 bytes @ 0x7
  1440                           
  1441  0077                     Tetris_RemovePlayerFromTable@game:	
  1442                           ; 1 bytes @ 0x7
  1443                           
  1444  0077                     Tetris_UpdatePlayerUnitBits@player:	
  1445                           ; 1 bytes @ 0x7
  1446                           
  1447  0077                     Tetris_ClearFilledRows@gameTable:	
  1448                           ; 1 bytes @ 0x7
  1449                           
  1450  0077                     LCD_IsBusy@status:	
  1451                           ; 1 bytes @ 0x7
  1452                           
  1453  0077                     ___eecpymem@to:	
  1454                           ; 1 bytes @ 0x7
  1455                           
  1456  0077                     ___memcpyee@to:	
  1457                           ; 1 bytes @ 0x7
  1458                           
  1459                           
  1460                           ; 1 bytes @ 0x7
  1461  0077                     	ds	1
  1462  0078                     ??_srand:	
  1463  0078                     ??_Buttons_Clear:	
  1464                           ; 1 bytes @ 0x8
  1465                           
  1466  0078                     ??_Tetris_SetPlayerUnit:	
  1467                           ; 1 bytes @ 0x8
  1468                           
  1469  0078                     ??_LCD_BlockWhileBusy:	
  1470                           ; 1 bytes @ 0x8
  1471                           
  1472  0078                     ?_LCD_Write:	
  1473                           ; 1 bytes @ 0x8
  1474                           
  1475  0078                     ??___awmod:	
  1476                           ; 1 bytes @ 0x8
  1477                           
  1478  0078                     Tetris_PlayerOverlapsEnvironment@i:	
  1479                           ; 1 bytes @ 0x8
  1480                           
  1481  0078                     Tetris_PlayerTouchingLeftBound@i:	
  1482                           ; 1 bytes @ 0x8
  1483                           
  1484  0078                     Tetris_PlayerTouchingRightBound@i:	
  1485                           ; 1 bytes @ 0x8
  1486                           
  1487  0078                     Tetris_RemovePlayerFromTable@i:	
  1488                           ; 1 bytes @ 0x8
  1489                           
  1490  0078                     Tetris_SetPlayerUnit@player:	
  1491                           ; 1 bytes @ 0x8
  1492                           
  1493  0078                     Tetris_ClearFilledRows@i:	
  1494                           ; 1 bytes @ 0x8
  1495                           
  1496  0078                     Buttons_Clear@buttons:	
  1497                           ; 1 bytes @ 0x8
  1498                           
  1499  0078                     LCD_Write@data:	
  1500                           ; 1 bytes @ 0x8
  1501                           
  1502  0078                     ___itoee@addr:	
  1503                           ; 1 bytes @ 0x8
  1504                           
  1505                           
  1506                           ; 1 bytes @ 0x8
  1507  0078                     	ds	1
  1508  0079                     ??_LCD_Reset:	
  1509  0079                     ??_Tetris_ResetGame:	
  1510                           ; 1 bytes @ 0x9
  1511                           
  1512  0079                     ??_SetupRandomness:	
  1513                           ; 1 bytes @ 0x9
  1514                           
  1515  0079                     ??_Setup:	
  1516                           ; 1 bytes @ 0x9
  1517                           
  1518  0079                     ??_LCD_Write:	
  1519                           ; 1 bytes @ 0x9
  1520                           
  1521  0079                     ??___wmul:	
  1522                           ; 1 bytes @ 0x9
  1523                           
  1524                           
  1525                           	psect	cstackBANK0
  1526  0020                     __pcstackBANK0:	
  1527                           ; 1 bytes @ 0x9
  1528                           
  1529  0020                     ??_Tetris_PlayerOverlapsEnvironment:	
  1530  0020                     ??_Tetris_RemovePlayerFromTable:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0020                     ??_Tetris_ApplyPlayerToTable:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0020                     ??_Tetris_CountUnitBits:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0020                     ??_Tetris_UpdatePlayerUnitBits:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542  0020                     ??_Tetris_ShiftTableDown:	
  1543                           ; 1 bytes @ 0x0
  1544                           
  1545  0020                     ?___eetoi:	
  1546                           ; 1 bytes @ 0x0
  1547                           
  1548  0020                     ?___lmul:	
  1549                           ; 2 bytes @ 0x0
  1550                           
  1551  0020                     LCD_Write@mode:	
  1552                           ; 4 bytes @ 0x0
  1553                           
  1554  0020                     ___lbmod@dividend:	
  1555                           ; 1 bytes @ 0x0
  1556                           
  1557  0020                     ___lwdiv@counter:	
  1558                           ; 1 bytes @ 0x0
  1559                           
  1560  0020                     memset@p:	
  1561                           ; 1 bytes @ 0x0
  1562                           
  1563  0020                     ___lmul@multiplier:	
  1564                           ; 1 bytes @ 0x0
  1565                           
  1566                           
  1567                           ; 4 bytes @ 0x0
  1568  0020                     	ds	1
  1569  0021                     ??_LCD_TurnOn:	
  1570  0021                     ??_LCD_SetX:	
  1571                           ; 1 bytes @ 0x1
  1572                           
  1573  0021                     ??_LCD_SetY:	
  1574                           ; 1 bytes @ 0x1
  1575                           
  1576  0021                     ??_LCD_SetZ:	
  1577                           ; 1 bytes @ 0x1
  1578                           
  1579  0021                     ??_LCD_WriteData:	
  1580                           ; 1 bytes @ 0x1
  1581                           
  1582  0021                     ??_LCD_TurnOff:	
  1583                           ; 1 bytes @ 0x1
  1584                           
  1585  0021                     ___lbmod@counter:	
  1586                           ; 1 bytes @ 0x1
  1587                           
  1588  0021                     memset@p1:	
  1589                           ; 1 bytes @ 0x1
  1590                           
  1591  0021                     ___lwdiv@quotient:	
  1592                           ; 1 bytes @ 0x1
  1593                           
  1594                           
  1595                           ; 2 bytes @ 0x1
  1596  0021                     	ds	1
  1597  0022                     ??___eetoi:	
  1598  0022                     LCD_WriteData@data:	
  1599                           ; 1 bytes @ 0x2
  1600                           
  1601  0022                     LCD_SetY@y:	
  1602                           ; 1 bytes @ 0x2
  1603                           
  1604  0022                     LCD_SetX@x:	
  1605                           ; 1 bytes @ 0x2
  1606                           
  1607  0022                     LCD_SetZ@z:	
  1608                           ; 1 bytes @ 0x2
  1609                           
  1610  0022                     ___lbmod@rem:	
  1611                           ; 1 bytes @ 0x2
  1612                           
  1613                           
  1614                           ; 1 bytes @ 0x2
  1615  0022                     	ds	1
  1616  0023                     ??_LCD_Clear:	
  1617  0023                     ?_GetDigits:	
  1618                           ; 1 bytes @ 0x3
  1619                           
  1620  0023                     ?_DrawTetrisGameColumn:	
  1621                           ; 1 bytes @ 0x3
  1622                           
  1623  0023                     ??_DrawHiMarker:	
  1624                           ; 1 bytes @ 0x3
  1625                           
  1626  0023                     ??_DrawHighscoreText:	
  1627                           ; 1 bytes @ 0x3
  1628                           
  1629  0023                     DrawTetrisGameColumn@x:	
  1630                           ; 1 bytes @ 0x3
  1631                           
  1632  0023                     GetDigits@n:	
  1633                           ; 1 bytes @ 0x3
  1634                           
  1635                           
  1636                           ; 2 bytes @ 0x3
  1637  0023                     	ds	1
  1638  0024                     LCD_Clear@y:	
  1639  0024                     DrawHiMarker@y:	
  1640                           ; 1 bytes @ 0x4
  1641                           
  1642  0024                     DrawTetrisGameColumn@rightMask:	
  1643                           ; 1 bytes @ 0x4
  1644                           
  1645  0024                     ___eetoi@data:	
  1646                           ; 2 bytes @ 0x4
  1647                           
  1648  0024                     ___lmul@multiplicand:	
  1649                           ; 2 bytes @ 0x4
  1650                           
  1651                           
  1652                           ; 4 bytes @ 0x4
  1653  0024                     	ds	1
  1654  0025                     LCD_Clear@x:	
  1655  0025                     GetDigits@digits:	
  1656                           ; 1 bytes @ 0x5
  1657                           
  1658  0025                     Tetris_CountUnitBits@mask:	
  1659                           ; 1 bytes @ 0x5
  1660                           
  1661                           
  1662                           ; 2 bytes @ 0x5
  1663  0025                     	ds	1
  1664  0026                     ??_Tetris_ClearFilledRows:	
  1665  0026                     ??_GetDigits:	
  1666                           ; 1 bytes @ 0x6
  1667                           
  1668  0026                     DrawHighscoreText@y:	
  1669                           ; 1 bytes @ 0x6
  1670                           
  1671  0026                     ___eetoi@addr:	
  1672                           ; 1 bytes @ 0x6
  1673                           
  1674  0026                     DrawTetrisGameColumn@leftMask:	
  1675                           ; 1 bytes @ 0x6
  1676                           
  1677                           
  1678                           ; 2 bytes @ 0x6
  1679  0026                     	ds	1
  1680  0027                     ?_srand:	
  1681  0027                     ?___itoee:	
  1682                           ; 1 bytes @ 0x7
  1683                           
  1684  0027                     Tetris_CountUnitBits@result:	
  1685                           ; 2 bytes @ 0x7
  1686                           
  1687  0027                     DrawHighscoreText@y_786:	
  1688                           ; 1 bytes @ 0x7
  1689                           
  1690  0027                     ___itoee@data:	
  1691                           ; 1 bytes @ 0x7
  1692                           
  1693  0027                     srand@x:	
  1694                           ; 2 bytes @ 0x7
  1695                           
  1696                           
  1697                           ; 2 bytes @ 0x7
  1698  0027                     	ds	1
  1699  0028                     ??_DrawTetrisGameColumn:	
  1700  0028                     ?_rand:	
  1701                           ; 1 bytes @ 0x8
  1702                           
  1703  0028                     Tetris_ApplyPlayerToTable@start:	
  1704                           ; 2 bytes @ 0x8
  1705                           
  1706  0028                     Tetris_CountUnitBits@j:	
  1707                           ; 1 bytes @ 0x8
  1708                           
  1709  0028                     DrawHighscoreText@x:	
  1710                           ; 1 bytes @ 0x8
  1711                           
  1712                           
  1713                           ; 1 bytes @ 0x8
  1714  0028                     	ds	1
  1715  0029                     ??_FlashVictoriously:	
  1716  0029                     ??___itoee:	
  1717                           ; 1 bytes @ 0x9
  1718                           
  1719  0029                     Tetris_ApplyPlayerToTable@i:	
  1720                           ; 1 bytes @ 0x9
  1721                           
  1722  0029                     Tetris_CountUnitBits@i:	
  1723                           ; 1 bytes @ 0x9
  1724                           
  1725  0029                     GetDigits@newN:	
  1726                           ; 1 bytes @ 0x9
  1727                           
  1728                           
  1729                           ; 2 bytes @ 0x9
  1730  0029                     	ds	1
  1731  002A                     ??_rand:	
  1732  002A                     ?_Tetris_SetPlayerUnit:	
  1733                           ; 1 bytes @ 0xA
  1734                           
  1735  002A                     Tetris_ApplyPlayerToTable@i_361:	
  1736                           ; 1 bytes @ 0xA
  1737                           
  1738  002A                     Tetris_PlayerUnitBitsAreValid@player:	
  1739                           ; 1 bytes @ 0xA
  1740                           
  1741  002A                     DrawTetrisGameColumn@tetrisGame:	
  1742                           ; 1 bytes @ 0xA
  1743                           
  1744  002A                     Tetris_SetPlayerUnit@unit:	
  1745                           ; 1 bytes @ 0xA
  1746                           
  1747                           
  1748                           ; 2 bytes @ 0xA
  1749  002A                     	ds	1
  1750  002B                     Tetris_ApplyPlayerToTable@game:	
  1751  002B                     GetDigits@i:	
  1752                           ; 1 bytes @ 0xB
  1753                           
  1754  002B                     DrawTetrisGameColumn@tableY:	
  1755                           ; 1 bytes @ 0xB
  1756                           
  1757                           
  1758                           ; 1 bytes @ 0xB
  1759  002B                     	ds	1
  1760  002C                     ??_DrawCurrentScore:	
  1761  002C                     ?_DrawHighscore:	
  1762                           ; 1 bytes @ 0xC
  1763                           
  1764  002C                     ??_Tetris_MovePlayerLeft:	
  1765                           ; 1 bytes @ 0xC
  1766                           
  1767  002C                     ??_Tetris_MovePlayerRight:	
  1768                           ; 1 bytes @ 0xC
  1769                           
  1770  002C                     ??_Tetris_RotatePlayer:	
  1771                           ; 1 bytes @ 0xC
  1772                           
  1773  002C                     ??_Tetris_MovePlayerDown:	
  1774                           ; 1 bytes @ 0xC
  1775                           
  1776  002C                     ?_Tetris_GetRandomUnit:	
  1777                           ; 1 bytes @ 0xC
  1778                           
  1779  002C                     FlashVictoriously@i:	
  1780                           ; 2 bytes @ 0xC
  1781                           
  1782  002C                     DrawTetrisGameColumn@gameRow:	
  1783                           ; 1 bytes @ 0xC
  1784                           
  1785  002C                     DrawHighscore@highscore:	
  1786                           ; 2 bytes @ 0xC
  1787                           
  1788                           
  1789                           ; 2 bytes @ 0xC
  1790  002C                     	ds	1
  1791  002D                     Tetris_MovePlayerDown@game:	
  1792                           
  1793                           ; 1 bytes @ 0xD
  1794  002D                     	ds	1
  1795  002E                     ??_DrawHighscore:	
  1796  002E                     Tetris_MovePlayerLeft@i:	
  1797                           ; 1 bytes @ 0xE
  1798                           
  1799  002E                     Tetris_MovePlayerRight@i:	
  1800                           ; 1 bytes @ 0xE
  1801                           
  1802  002E                     DrawTetrisGameColumn@i:	
  1803                           ; 1 bytes @ 0xE
  1804                           
  1805                           
  1806                           ; 1 bytes @ 0xE
  1807  002E                     	ds	1
  1808  002F                     ?___awmod:	
  1809  002F                     Tetris_MovePlayerLeft@i_496:	
  1810                           ; 2 bytes @ 0xF
  1811                           
  1812  002F                     Tetris_MovePlayerRight@i_510:	
  1813                           ; 1 bytes @ 0xF
  1814                           
  1815  002F                     DrawTetrisGameColumn@y:	
  1816                           ; 1 bytes @ 0xF
  1817                           
  1818  002F                     ___awmod@divisor:	
  1819                           ; 1 bytes @ 0xF
  1820                           
  1821                           
  1822                           ; 2 bytes @ 0xF
  1823  002F                     	ds	1
  1824  0030                     Tetris_MovePlayerLeft@game:	
  1825  0030                     Tetris_MovePlayerRight@game:	
  1826                           ; 1 bytes @ 0x10
  1827                           
  1828  0030                     DrawTetrisGameColumn@lcdRow:	
  1829                           ; 1 bytes @ 0x10
  1830                           
  1831                           
  1832                           ; 1 bytes @ 0x10
  1833  0030                     	ds	1
  1834  0031                     ??_DrawTetris:	
  1835  0031                     ___awmod@dividend:	
  1836                           ; 1 bytes @ 0x11
  1837                           
  1838                           
  1839                           ; 2 bytes @ 0x11
  1840  0031                     	ds	1
  1841  0032                     Tetris_RotatePlayer@oldRotation:	
  1842  0032                     DrawTetris@tetrisGame:	
  1843                           ; 1 bytes @ 0x12
  1844                           
  1845                           
  1846                           ; 1 bytes @ 0x12
  1847  0032                     	ds	1
  1848  0033                     Tetris_RotatePlayer@game:	
  1849  0033                     ___awmod@counter:	
  1850                           ; 1 bytes @ 0x13
  1851                           
  1852  0033                     DrawTetris@leftMask:	
  1853                           ; 1 bytes @ 0x13
  1854                           
  1855                           
  1856                           ; 2 bytes @ 0x13
  1857  0033                     	ds	1
  1858  0034                     ___awmod@sign:	
  1859                           
  1860                           ; 1 bytes @ 0x14
  1861  0034                     	ds	1
  1862  0035                     ?___wmul:	
  1863  0035                     DrawTetris@rightMask:	
  1864                           ; 2 bytes @ 0x15
  1865                           
  1866  0035                     ___wmul@multiplier:	
  1867                           ; 2 bytes @ 0x15
  1868                           
  1869  0035                     DrawCurrentScore@scoreDigits:	
  1870                           ; 2 bytes @ 0x15
  1871                           
  1872                           
  1873                           ; 5 bytes @ 0x15
  1874  0035                     	ds	2
  1875  0037                     DrawTetris@x:	
  1876  0037                     ___wmul@multiplicand:	
  1877                           ; 1 bytes @ 0x17
  1878                           
  1879  0037                     DrawHighscore@scoreDigits:	
  1880                           ; 2 bytes @ 0x17
  1881                           
  1882                           
  1883                           ; 5 bytes @ 0x17
  1884  0037                     	ds	2
  1885  0039                     ___wmul@product:	
  1886                           
  1887                           ; 2 bytes @ 0x19
  1888  0039                     	ds	1
  1889  003A                     DrawCurrentScore@lcdData:	
  1890                           
  1891                           ; 1 bytes @ 0x1A
  1892  003A                     	ds	1
  1893  003B                     ??_Tetris_GetRandomUnit:	
  1894  003B                     DrawCurrentScore@lcdData_768:	
  1895                           ; 1 bytes @ 0x1B
  1896                           
  1897                           
  1898                           ; 1 bytes @ 0x1B
  1899  003B                     	ds	1
  1900  003C                     DrawCurrentScore@lcdData_770:	
  1901  003C                     DrawHighscore@lcdData:	
  1902                           ; 1 bytes @ 0x1C
  1903                           
  1904                           
  1905                           ; 1 bytes @ 0x1C
  1906  003C                     	ds	1
  1907  003D                     ?_Tetris_ResetPlayer:	
  1908  003D                     DrawCurrentScore@tetrisGame:	
  1909                           ; 1 bytes @ 0x1D
  1910                           
  1911  003D                     DrawHighscore@lcdData_778:	
  1912                           ; 1 bytes @ 0x1D
  1913                           
  1914  003D                     Tetris_ResetPlayer@playerUnit:	
  1915                           ; 1 bytes @ 0x1D
  1916                           
  1917                           
  1918                           ; 2 bytes @ 0x1D
  1919  003D                     	ds	1
  1920  003E                     DrawCurrentScore@y_769:	
  1921  003E                     DrawHighscore@lcdData_780:	
  1922                           ; 1 bytes @ 0x1E
  1923                           
  1924                           
  1925                           ; 1 bytes @ 0x1E
  1926  003E                     	ds	1
  1927  003F                     ??_Tetris_ResetPlayer:	
  1928  003F                     DrawCurrentScore@y:	
  1929                           ; 1 bytes @ 0x1F
  1930                           
  1931  003F                     DrawHighscore@y:	
  1932                           ; 1 bytes @ 0x1F
  1933                           
  1934                           
  1935                           ; 1 bytes @ 0x1F
  1936  003F                     	ds	1
  1937  0040                     DrawCurrentScore@y_767:	
  1938  0040                     DrawHighscore@y_777:	
  1939                           ; 1 bytes @ 0x20
  1940                           
  1941                           
  1942                           ; 1 bytes @ 0x20
  1943  0040                     	ds	1
  1944  0041                     Tetris_ResetPlayer@player:	
  1945  0041                     DrawHighscore@y_779:	
  1946                           ; 1 bytes @ 0x21
  1947                           
  1948                           
  1949                           ; 1 bytes @ 0x21
  1950  0041                     	ds	1
  1951  0042                     ?_Tetris_ResetGame:	
  1952  0042                     ??_Tetris_UpdateGame:	
  1953                           ; 1 bytes @ 0x22
  1954                           
  1955  0042                     Tetris_ResetGame@playerUnit:	
  1956                           ; 1 bytes @ 0x22
  1957                           
  1958                           
  1959                           ; 2 bytes @ 0x22
  1960  0042                     	ds	2
  1961  0044                     Tetris_ResetGame@game:	
  1962  0044                     Tetris_UpdateGame@rowsCleared:	
  1963                           ; 1 bytes @ 0x24
  1964                           
  1965                           
  1966                           ; 1 bytes @ 0x24
  1967  0044                     	ds	1
  1968  0045                     Tetris_UpdateGame@game:	
  1969                           
  1970                           ; 1 bytes @ 0x25
  1971  0045                     	ds	1
  1972  0046                     ??_main:	
  1973                           
  1974                           ; 1 bytes @ 0x26
  1975  0046                     	ds	1
  1976                           
  1977                           	psect	maintext
  1978  0485                     __pmaintext:	
  1979 ;;
  1980 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1981 ;;
  1982 ;; *************** function _main *****************
  1983 ;; Defined at:
  1984 ;;		line 153 in file "main.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  status          1    0[BANK1 ] unsigned char 
  1989 ;;  tetrisGame     63    5[BANK1 ] struct .
  1990 ;;  buttons         4    1[BANK1 ] struct .
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      void 
  1993 ;; Registers used:
  1994 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1995 ;; Tracked objects:
  1996 ;;		On entry : B00/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2000 ;;      Params:         0       0       0       0
  2001 ;;      Locals:         0       0      68       0
  2002 ;;      Temps:          0       1       0       0
  2003 ;;      Totals:         0       1      68       0
  2004 ;;Total ram usage:       69 bytes
  2005 ;; Hardware stack levels required when called:    8
  2006 ;; This function calls:
  2007 ;;		_Buttons_Clear
  2008 ;;		_Buttons_Update
  2009 ;;		_DrawCurrentScore
  2010 ;;		_DrawHighscore
  2011 ;;		_DrawTetris
  2012 ;;		_FlashVictoriously
  2013 ;;		_ResetTimer
  2014 ;;		_Setup
  2015 ;;		_Tetris_GetRandomUnit
  2016 ;;		_Tetris_MovePlayerLeft
  2017 ;;		_Tetris_MovePlayerRight
  2018 ;;		_Tetris_ResetGame
  2019 ;;		_Tetris_RotatePlayer
  2020 ;;		_Tetris_UpdateGame
  2021 ;;		_UpdateDifficulty
  2022 ;;		___eetoi
  2023 ;;		___itoee
  2024 ;; This function is called by:
  2025 ;;		Startup code after reset
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           
  2030                           ;psect for function _main
  2031  0485                     _main:	
  2032                           
  2033                           ;main.c: 156:     Setup();
  2034                           
  2035                           ;incstack = 0
  2036                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2037  0485  158A  21B8  118A   	fcall	_Setup
  2038  0488                     l4307:	
  2039                           
  2040                           ;main.c: 162:     {;main.c: 163:         Tetris_ResetGame(&tetrisGame, Tetris_GetRandomU
      +                          nit());
  2041  0488  158A  2345  118A   	fcall	_Tetris_GetRandomUnit
  2042  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2043  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2044  048D  082C               	movf	?_Tetris_GetRandomUnit,w
  2045  048E  00C2               	movwf	Tetris_ResetGame@playerUnit
  2046  048F  082D               	movf	?_Tetris_GetRandomUnit+1,w
  2047  0490  00C3               	movwf	Tetris_ResetGame@playerUnit+1
  2048  0491  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2049  0492  118A  20E1  118A   	fcall	_Tetris_ResetGame
  2050                           
  2051                           ;main.c: 164:         defaultTimerPrescaler = EASY_TIMER_PRESCALER;
  2052  0495  300C               	movlw	12
  2053  0496  1283               	bcf	3,5	;RP0=0, select bank0
  2054  0497  1303               	bcf	3,6	;RP1=0, select bank0
  2055  0498  00C6               	movwf	??_main
  2056  0499  0846               	movf	??_main,w
  2057  049A  1683               	bsf	3,5	;RP0=1, select bank1
  2058  049B  1303               	bcf	3,6	;RP1=0, select bank1
  2059  049C  00E4               	movwf	_defaultTimerPrescaler^(0+128)
  2060                           
  2061                           ;main.c: 165:         Buttons_Clear(&buttons);
  2062  049D  30A1               	movlw	(low (main@buttons| 0))& (0+255)
  2063  049E  158A  20CB  118A   	fcall	_Buttons_Clear
  2064                           
  2065                           ;main.c: 166:         ResetTimer();
  2066  04A1  158A  2086  118A   	fcall	_ResetTimer
  2067                           
  2068                           ;main.c: 168:         DrawCurrentScore(&tetrisGame);
  2069  04A4  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2070  04A5  118A  2383  118A   	fcall	_DrawCurrentScore
  2071                           
  2072                           ;main.c: 169:         DrawHighscore(highscore);
  2073  04A8  3002               	movlw	(low _highscore)& (0+255)
  2074  04A9  118A  27EA  118A   	fcall	___eetoi
  2075  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  2076  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  2077  04AE  0821               	movf	?___eetoi+1,w
  2078  04AF  00AD               	movwf	DrawHighscore@highscore+1
  2079  04B0  0820               	movf	?___eetoi,w
  2080  04B1  00AC               	movwf	DrawHighscore@highscore
  2081  04B2  118A  2276  118A   	fcall	_DrawHighscore
  2082  04B5                     l4319:	
  2083                           
  2084                           ;main.c: 172:         {;main.c: 173:             Buttons_Update(&buttons);
  2085  04B5  30A1               	movlw	(low (main@buttons| 0))& (0+255)
  2086  04B6  158A  2370  118A   	fcall	_Buttons_Update
  2087                           
  2088                           ;main.c: 175:             if (buttons.left.pressed)
  2089  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  2090  04BA  1303               	bcf	3,6	;RP1=0, select bank1
  2091  04BB  1C21               	btfss	main@buttons^(0+128),0
  2092  04BC  2CC1               	goto	l4325
  2093                           
  2094                           ;main.c: 176:                 Tetris_MovePlayerLeft(&tetrisGame);
  2095  04BD  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2096  04BE  118A  208A  118A   	fcall	_Tetris_MovePlayerLeft
  2097  04C1                     l4325:	
  2098                           
  2099                           ;main.c: 177:             if (buttons.right.pressed)
  2100  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  2101  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  2102  04C3  1C22               	btfss	(main@buttons^(0+128)+1),0
  2103  04C4  2CC9               	goto	l4329
  2104                           
  2105                           ;main.c: 178:                 Tetris_MovePlayerRight(&tetrisGame);
  2106  04C5  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2107  04C6  118A  2791  118A   	fcall	_Tetris_MovePlayerRight
  2108  04C9                     l4329:	
  2109                           
  2110                           ;main.c: 179:             if (buttons.rotate.pressed)
  2111  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  2112  04CA  1303               	bcf	3,6	;RP1=0, select bank1
  2113  04CB  1C24               	btfss	(main@buttons^(0+128)+3),0
  2114  04CC  2CD1               	goto	l4333
  2115                           
  2116                           ;main.c: 180:                 Tetris_RotatePlayer(&tetrisGame);
  2117  04CD  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2118  04CE  118A  2656  118A   	fcall	_Tetris_RotatePlayer
  2119  04D1                     l4333:	
  2120                           
  2121                           ;main.c: 182:             if (buttons.down.held)
  2122  04D1  1683               	bsf	3,5	;RP0=1, select bank1
  2123  04D2  1303               	bcf	3,6	;RP1=0, select bank1
  2124  04D3  1CA3               	btfss	(main@buttons^(0+128)+2),1
  2125  04D4  2CD8               	goto	l4337
  2126                           
  2127                           ;main.c: 183:                 timerPrescaler = FAST_TIMER_PRESCALER;
  2128  04D5  01E5               	clrf	_timerPrescaler^(0+128)
  2129  04D6  0AE5               	incf	_timerPrescaler^(0+128),f
  2130  04D7  2CE0               	goto	l4339
  2131  04D8                     l4337:	
  2132                           
  2133                           ;main.c: 185:                 timerPrescaler = defaultTimerPrescaler;
  2134  04D8  0864               	movf	_defaultTimerPrescaler^(0+128),w
  2135  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2136  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2137  04DB  00C6               	movwf	??_main
  2138  04DC  0846               	movf	??_main,w
  2139  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  2140  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  2141  04DF  00E5               	movwf	_timerPrescaler^(0+128)
  2142  04E0                     l4339:	
  2143                           
  2144                           ;main.c: 187:             if (updateReady)
  2145  04E0  0866               	movf	_updateReady^(0+128),w
  2146  04E1  1903               	btfsc	3,2
  2147  04E2  2CFF               	goto	l4355
  2148                           
  2149                           ;main.c: 188:             {;main.c: 189:                 updateReady = 0;
  2150  04E3  01E6               	clrf	_updateReady^(0+128)
  2151                           
  2152                           ;main.c: 190:                 uint8_t status = Tetris_UpdateGame(&tetrisGame);
  2153  04E4  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2154  04E5  158A  27AD  118A   	fcall	_Tetris_UpdateGame
  2155  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  2156  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  2157  04EA  00C6               	movwf	??_main
  2158  04EB  0846               	movf	??_main,w
  2159  04EC  1683               	bsf	3,5	;RP0=1, select bank1
  2160  04ED  1303               	bcf	3,6	;RP1=0, select bank1
  2161  04EE  00A0               	movwf	main@status^(0+128)
  2162                           
  2163                           ;main.c: 191:                 if (status == TETRIS_PLAYER_SCORED)
  2164  04EF  3002               	movlw	2
  2165  04F0  0620               	xorwf	main@status^(0+128),w
  2166  04F1  1D03               	btfss	3,2
  2167  04F2  2CFC               	goto	l4351
  2168                           
  2169                           ;main.c: 192:                 {;main.c: 193:                     DrawCurrentScore(&tetri
      +                          sGame);
  2170  04F3  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2171  04F4  118A  2383  118A   	fcall	_DrawCurrentScore
  2172                           
  2173                           ;main.c: 194:                     UpdateDifficulty(&tetrisGame);
  2174  04F7  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2175  04F8  118A  2033  118A   	fcall	_UpdateDifficulty
  2176                           
  2177                           ;main.c: 195:                 }
  2178  04FB  2CFF               	goto	l4355
  2179  04FC                     l4351:	
  2180  04FC  0820               	movf	main@status^(0+128),w
  2181  04FD  1903               	btfsc	3,2
  2182  04FE  2D04               	goto	l4357
  2183  04FF                     l4355:	
  2184                           
  2185                           ;main.c: 202:             DrawTetris(&tetrisGame);
  2186  04FF  30A5               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2187  0500  158A  24BC  118A   	fcall	_DrawTetris
  2188  0503  2CB5               	goto	l4319
  2189  0504                     l4357:	
  2190                           
  2191                           ;main.c: 205:         if (tetrisGame.currentScore > highscore)
  2192  0504  3002               	movlw	(low _highscore)& (0+255)
  2193  0505  118A  27EA  118A   	fcall	___eetoi
  2194  0508  1683               	bsf	3,5	;RP0=1, select bank1
  2195  0509  1303               	bcf	3,6	;RP1=0, select bank1
  2196  050A  0863               	movf	((main@tetrisGame+1)^(0+128)+61),w
  2197  050B  1283               	bcf	3,5	;RP0=0, select bank0
  2198  050C  1303               	bcf	3,6	;RP1=0, select bank0
  2199  050D  0221               	subwf	?___eetoi+1,w
  2200  050E  1D03               	skipz
  2201  050F  2D16               	goto	u4105
  2202  0510  1683               	bsf	3,5	;RP0=1, select bank1
  2203  0511  1303               	bcf	3,6	;RP1=0, select bank1
  2204  0512  0862               	movf	(main@tetrisGame^(0+128)+61),w
  2205  0513  1283               	bcf	3,5	;RP0=0, select bank0
  2206  0514  1303               	bcf	3,6	;RP1=0, select bank0
  2207  0515  0220               	subwf	?___eetoi,w
  2208  0516                     u4105:	
  2209  0516  1803               	skipnc
  2210  0517  2C88               	goto	l4307
  2211                           
  2212                           ;main.c: 206:         {;main.c: 207:             highscore = tetrisGame.currentScore;
  2213  0518  1683               	bsf	3,5	;RP0=1, select bank1
  2214  0519  1303               	bcf	3,6	;RP1=0, select bank1
  2215  051A  0863               	movf	((main@tetrisGame+1)^(0+128)+61),w
  2216  051B  1283               	bcf	3,5	;RP0=0, select bank0
  2217  051C  1303               	bcf	3,6	;RP1=0, select bank0
  2218  051D  00A8               	movwf	___itoee@data+1
  2219  051E  1683               	bsf	3,5	;RP0=1, select bank1
  2220  051F  1303               	bcf	3,6	;RP1=0, select bank1
  2221  0520  0862               	movf	(main@tetrisGame^(0+128)+61),w
  2222  0521  1283               	bcf	3,5	;RP0=0, select bank0
  2223  0522  1303               	bcf	3,6	;RP1=0, select bank0
  2224  0523  00A7               	movwf	___itoee@data
  2225  0524  3002               	movlw	(low _highscore)& (0+255)
  2226  0525  158A  2122  118A   	fcall	___itoee
  2227                           
  2228                           ;main.c: 208:             FlashVictoriously();
  2229  0528  158A  255C  118A   	fcall	_FlashVictoriously
  2230  052B  2C88               	goto	l4307
  2231  052C                     __end_of_main:	
  2232                           
  2233                           	psect	text1
  2234  0033                     __ptext1:	
  2235 ;; *************** function _UpdateDifficulty *****************
  2236 ;; Defined at:
  2237 ;;		line 134 in file "main.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  tetrisGame      1    wreg     PTR struct .
  2240 ;;		 -> main@tetrisGame(63), 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  tetrisGame      1    5[COMMON] PTR struct .
  2243 ;;		 -> main@tetrisGame(63), 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2253 ;;      Params:         0       0       0       0
  2254 ;;      Locals:         1       0       0       0
  2255 ;;      Temps:          2       0       0       0
  2256 ;;      Totals:         3       0       0       0
  2257 ;;Total ram usage:        3 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    1
  2260 ;; This function calls:
  2261 ;;		Nothing
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _UpdateDifficulty
  2269  0033                     _UpdateDifficulty:	
  2270                           
  2271                           ;incstack = 0
  2272                           ; Regs used in _UpdateDifficulty: [wreg-fsr0h+status,2+status,0]
  2273                           ;UpdateDifficulty@tetrisGame stored from wreg
  2274  0033  00F5               	movwf	UpdateDifficulty@tetrisGame
  2275                           
  2276                           ;main.c: 134: static void UpdateDifficulty(Tetris_Game *tetrisGame);main.c: 135: {;main.
      +                          c: 136:     switch (defaultTimerPrescaler)
  2277  0034  2874               	goto	l3093
  2278  0035                     l3079:	
  2279                           
  2280                           ;main.c: 139:         if (tetrisGame->currentScore > EASY_SCORE_LIMIT)
  2281  0035  0875               	movf	UpdateDifficulty@tetrisGame,w
  2282  0036  3E3D               	addlw	61
  2283  0037  0084               	movwf	4
  2284  0038  1383               	bcf	3,7	;select IRP bank0
  2285  0039  0800               	movf	0,w
  2286  003A  00F3               	movwf	??_UpdateDifficulty
  2287  003B  0A84               	incf	4,f
  2288  003C  0800               	movf	0,w
  2289  003D  00F4               	movwf	??_UpdateDifficulty+1
  2290  003E  3000               	movlw	0
  2291  003F  0274               	subwf	??_UpdateDifficulty+1,w
  2292  0040  3004               	movlw	4
  2293  0041  1903               	skipnz
  2294  0042  0273               	subwf	??_UpdateDifficulty,w
  2295  0043  1C03               	skipc
  2296  0044  0008               	return
  2297                           
  2298                           ;main.c: 140:             defaultTimerPrescaler = MEDIUM_TIMER_PRESCALER;
  2299  0045  3009               	movlw	9
  2300  0046  00F3               	movwf	??_UpdateDifficulty
  2301  0047  0873               	movf	??_UpdateDifficulty,w
  2302  0048  00E4               	movwf	_defaultTimerPrescaler^(0+128)
  2303  0049  0008               	return
  2304  004A                     l3083:	
  2305                           
  2306                           ;main.c: 143:         if (tetrisGame->currentScore > MEDIUM_SCORE_LIMIT)
  2307  004A  0875               	movf	UpdateDifficulty@tetrisGame,w
  2308  004B  3E3D               	addlw	61
  2309  004C  0084               	movwf	4
  2310  004D  1383               	bcf	3,7	;select IRP bank0
  2311  004E  0800               	movf	0,w
  2312  004F  00F3               	movwf	??_UpdateDifficulty
  2313  0050  0A84               	incf	4,f
  2314  0051  0800               	movf	0,w
  2315  0052  00F4               	movwf	??_UpdateDifficulty+1
  2316  0053  3000               	movlw	0
  2317  0054  0274               	subwf	??_UpdateDifficulty+1,w
  2318  0055  3008               	movlw	8
  2319  0056  1903               	skipnz
  2320  0057  0273               	subwf	??_UpdateDifficulty,w
  2321  0058  1C03               	skipc
  2322  0059  0008               	return
  2323                           
  2324                           ;main.c: 144:             defaultTimerPrescaler = HARD_TIMER_PRESCALER;
  2325  005A  3006               	movlw	6
  2326  005B  00F3               	movwf	??_UpdateDifficulty
  2327  005C  0873               	movf	??_UpdateDifficulty,w
  2328  005D  00E4               	movwf	_defaultTimerPrescaler^(0+128)
  2329  005E  0008               	return
  2330  005F                     l3087:	
  2331                           
  2332                           ;main.c: 147:         if (tetrisGame->currentScore > HARD_SCORE_LIMIT)
  2333  005F  0875               	movf	UpdateDifficulty@tetrisGame,w
  2334  0060  3E3D               	addlw	61
  2335  0061  0084               	movwf	4
  2336  0062  1383               	bcf	3,7	;select IRP bank0
  2337  0063  0800               	movf	0,w
  2338  0064  00F3               	movwf	??_UpdateDifficulty
  2339  0065  0A84               	incf	4,f
  2340  0066  0800               	movf	0,w
  2341  0067  00F4               	movwf	??_UpdateDifficulty+1
  2342  0068  3000               	movlw	0
  2343  0069  0274               	subwf	??_UpdateDifficulty+1,w
  2344  006A  300B               	movlw	11
  2345  006B  1903               	skipnz
  2346  006C  0273               	subwf	??_UpdateDifficulty,w
  2347  006D  1C03               	skipc
  2348  006E  0008               	return
  2349                           
  2350                           ;main.c: 148:             defaultTimerPrescaler = ULTIMATE_TIMER_PRESCALER;
  2351  006F  3003               	movlw	3
  2352  0070  00F3               	movwf	??_UpdateDifficulty
  2353  0071  0873               	movf	??_UpdateDifficulty,w
  2354  0072  00E4               	movwf	_defaultTimerPrescaler^(0+128)
  2355  0073  0008               	return
  2356  0074                     l3093:	
  2357  0074  1683               	bsf	3,5	;RP0=1, select bank1
  2358  0075  1303               	bcf	3,6	;RP1=0, select bank1
  2359  0076  0864               	movf	_defaultTimerPrescaler^(0+128),w
  2360  0077  00F3               	movwf	??_UpdateDifficulty
  2361  0078  01F4               	clrf	??_UpdateDifficulty+1
  2362                           
  2363                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2364                           ; Switch size 1, requested type "simple"
  2365                           ; Number of cases is 1, Range of values is 0 to 0
  2366                           ; switch strategies available:
  2367                           ; Name         Instructions Cycles
  2368                           ; simple_byte            4     3 (average)
  2369                           ; direct_byte            9     7 (fixed)
  2370                           ; jumptable            260     6 (fixed)
  2371                           ;	Chosen strategy is simple_byte
  2372  0079  0874               	movf	??_UpdateDifficulty+1,w
  2373  007A  3A00               	xorlw	0	; case 0
  2374  007B  1903               	skipnz
  2375  007C  287E               	goto	l4425
  2376  007D  2889               	goto	l116
  2377  007E                     l4425:	
  2378                           
  2379                           ; Switch size 1, requested type "simple"
  2380                           ; Number of cases is 3, Range of values is 6 to 12
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte           10     6 (average)
  2384                           ; direct_byte           24    10 (fixed)
  2385                           ; jumptable            263     9 (fixed)
  2386                           ;	Chosen strategy is simple_byte
  2387  007E  0873               	movf	??_UpdateDifficulty,w
  2388  007F  3A06               	xorlw	6	; case 6
  2389  0080  1903               	skipnz
  2390  0081  285F               	goto	l3087
  2391  0082  3A0F               	xorlw	15	; case 9
  2392  0083  1903               	skipnz
  2393  0084  284A               	goto	l3083
  2394  0085  3A05               	xorlw	5	; case 12
  2395  0086  1903               	skipnz
  2396  0087  2835               	goto	l3079
  2397  0088  2889               	goto	l116
  2398  0089                     l116:	
  2399  0089  0008               	return
  2400  008A                     __end_of_UpdateDifficulty:	
  2401                           
  2402                           	psect	text2
  2403  0FAD                     __ptext2:	
  2404 ;; *************** function _Tetris_UpdateGame *****************
  2405 ;; Defined at:
  2406 ;;		line 351 in file "../Tetris/Tetris.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;  game            1    wreg     PTR struct .
  2409 ;;		 -> main@tetrisGame(63), 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  game            1   37[BANK0 ] PTR struct .
  2412 ;;		 -> main@tetrisGame(63), 
  2413 ;;  rowsCleared     1   36[BANK0 ] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      enum E60
  2416 ;; Registers used:
  2417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2423 ;;      Params:         0       0       0       0
  2424 ;;      Locals:         0       2       0       0
  2425 ;;      Temps:          0       2       0       0
  2426 ;;      Totals:         0       4       0       0
  2427 ;;Total ram usage:        4 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    5
  2430 ;; This function calls:
  2431 ;;		_Tetris_ApplyPlayerToTable
  2432 ;;		_Tetris_ClearFilledRows
  2433 ;;		_Tetris_GetRandomUnit
  2434 ;;		_Tetris_MovePlayerDown
  2435 ;;		_Tetris_PlayerOverlapsEnvironment
  2436 ;;		_Tetris_ResetPlayer
  2437 ;;		_Tetris_ScoreForRowsCleared
  2438 ;; This function is called by:
  2439 ;;		_main
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           
  2444                           ;psect for function _Tetris_UpdateGame
  2445  0FAD                     _Tetris_UpdateGame:	
  2446                           
  2447                           ;incstack = 0
  2448                           ; Regs used in _Tetris_UpdateGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2449                           ;Tetris_UpdateGame@game stored from wreg
  2450  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  2451  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  2452  0FAF  00C5               	movwf	Tetris_UpdateGame@game
  2453                           
  2454                           ;../Tetris/Tetris.c: 351: Tetris_GameState Tetris_UpdateGame(Tetris_Game *game);../Tetri
      +                          s/Tetris.c: 352: {;../Tetris/Tetris.c: 353:     if (!Tetris_MovePlayerDown(game))
  2455  0FB0  0845               	movf	Tetris_UpdateGame@game,w
  2456  0FB1  158A  2426  158A   	fcall	_Tetris_MovePlayerDown
  2457  0FB4  3A00               	xorlw	0
  2458  0FB5  1D03               	skipz
  2459  0FB6  2FFE               	goto	l4263
  2460                           
  2461                           ;../Tetris/Tetris.c: 354:     {;../Tetris/Tetris.c: 355:         uint8_t rowsCleared = T
      +                          etris_ClearFilledRows(game->table);
  2462  0FB7  1283               	bcf	3,5	;RP0=0, select bank0
  2463  0FB8  1303               	bcf	3,6	;RP1=0, select bank0
  2464  0FB9  0845               	movf	Tetris_UpdateGame@game,w
  2465  0FBA  158A  2456  158A   	fcall	_Tetris_ClearFilledRows
  2466  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2467  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0FBF  00C2               	movwf	??_Tetris_UpdateGame
  2469  0FC0  0842               	movf	??_Tetris_UpdateGame,w
  2470  0FC1  00C4               	movwf	Tetris_UpdateGame@rowsCleared
  2471                           
  2472                           ;../Tetris/Tetris.c: 357:         Tetris_ResetPlayer(&game->player, Tetris_GetRandomUnit
      +                          ());
  2473  0FC2  158A  2345  158A   	fcall	_Tetris_GetRandomUnit
  2474  0FC5  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0FC6  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0FC7  082C               	movf	?_Tetris_GetRandomUnit,w
  2477  0FC8  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  2478  0FC9  082D               	movf	?_Tetris_GetRandomUnit+1,w
  2479  0FCA  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  2480  0FCB  0845               	movf	Tetris_UpdateGame@game,w
  2481  0FCC  3E30               	addlw	48
  2482  0FCD  158A  2292  158A   	fcall	_Tetris_ResetPlayer
  2483                           
  2484                           ;../Tetris/Tetris.c: 358:         if (Tetris_PlayerOverlapsEnvironment(game))
  2485  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  2486  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  2487  0FD2  0845               	movf	Tetris_UpdateGame@game,w
  2488  0FD3  158A  2615  158A   	fcall	_Tetris_PlayerOverlapsEnvironment
  2489  0FD6  3A00               	xorlw	0
  2490  0FD7  1903               	skipnz
  2491  0FD8  2FDB               	goto	l4253
  2492                           
  2493                           ;../Tetris/Tetris.c: 359:             return TETRIS_GAME_OVER;
  2494  0FD9  3000               	movlw	0
  2495  0FDA  0008               	return
  2496  0FDB                     l4253:	
  2497                           
  2498                           ;../Tetris/Tetris.c: 360:         Tetris_ApplyPlayerToTable(game);
  2499  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  2500  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  2501  0FDD  0845               	movf	Tetris_UpdateGame@game,w
  2502  0FDE  118A  26C6  158A   	fcall	_Tetris_ApplyPlayerToTable
  2503                           
  2504                           ;../Tetris/Tetris.c: 362:         if (rowsCleared != 0)
  2505  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  2506  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  2507  0FE3  0844               	movf	Tetris_UpdateGame@rowsCleared,w
  2508  0FE4  1903               	btfsc	3,2
  2509  0FE5  2FFE               	goto	l4263
  2510                           
  2511                           ;../Tetris/Tetris.c: 363:         {;../Tetris/Tetris.c: 364:             game->currentSc
      +                          ore += Tetris_ScoreForRowsCleared(rowsCleared);
  2512  0FE6  0844               	movf	Tetris_UpdateGame@rowsCleared,w
  2513  0FE7  158A  22D8         	fcall	_Tetris_ScoreForRowsCleared
  2514  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  2515  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  2516  0FEB  00C2               	movwf	??_Tetris_UpdateGame
  2517  0FEC  01C3               	clrf	??_Tetris_UpdateGame+1
  2518  0FED  0845               	movf	Tetris_UpdateGame@game,w
  2519  0FEE  3E3D               	addlw	61
  2520  0FEF  0084               	movwf	4
  2521  0FF0  0842               	movf	??_Tetris_UpdateGame,w
  2522  0FF1  1383               	bcf	3,7	;select IRP bank0
  2523  0FF2  0780               	addwf	0,f
  2524  0FF3  0F84               	incfsz	4,f
  2525  0FF4  0800               	movf	0,w
  2526  0FF5  1803               	skipnc
  2527  0FF6  0A00               	incf	0,w
  2528  0FF7  00FF               	movwf	127
  2529  0FF8  0843               	movf	??_Tetris_UpdateGame+1,w
  2530  0FF9  077F               	addwf	127,w
  2531  0FFA  0080               	movwf	0
  2532  0FFB  0384               	decf	4,f
  2533                           
  2534                           ;../Tetris/Tetris.c: 365:             return TETRIS_PLAYER_SCORED;
  2535  0FFC  3002               	movlw	2
  2536  0FFD  0008               	return
  2537  0FFE                     l4263:	
  2538                           
  2539                           ;../Tetris/Tetris.c: 369:     return TETRIS_GAME_CONTINUES;
  2540  0FFE  3001               	movlw	1
  2541  0FFF  0008               	return
  2542  1000                     __end_of_Tetris_UpdateGame:	
  2543                           
  2544                           	psect	text3
  2545  0AD8                     __ptext3:	
  2546 ;; *************** function _Tetris_ScoreForRowsCleared *****************
  2547 ;; Defined at:
  2548 ;;		line 316 in file "../Tetris/Tetris.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  rowsCleared     1    wreg     unsigned char 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  rowsCleared     1    5[COMMON] unsigned char 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      unsigned char 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2562 ;;      Params:         0       0       0       0
  2563 ;;      Locals:         1       0       0       0
  2564 ;;      Temps:          2       0       0       0
  2565 ;;      Totals:         3       0       0       0
  2566 ;;Total ram usage:        3 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    1
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_Tetris_UpdateGame
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _Tetris_ScoreForRowsCleared
  2578  0AD8                     _Tetris_ScoreForRowsCleared:	
  2579                           
  2580                           ;incstack = 0
  2581                           ; Regs used in _Tetris_ScoreForRowsCleared: [wreg-fsr0h+status,2+status,0]
  2582                           ;Tetris_ScoreForRowsCleared@rowsCleared stored from wreg
  2583  0AD8  00F5               	movwf	Tetris_ScoreForRowsCleared@rowsCleared
  2584                           
  2585                           ;../Tetris/Tetris.c: 316: static uint8_t Tetris_ScoreForRowsCleared(uint8_t rowsCleared)
      +                          ;../Tetris/Tetris.c: 317: {;../Tetris/Tetris.c: 318:     switch (rowsCleared)
  2586  0AD9  2AE4               	goto	l2865
  2587  0ADA                     l2843:	
  2588  0ADA  3000               	movlw	0
  2589  0ADB  0008               	return
  2590  0ADC                     l2847:	
  2591  0ADC  3001               	movlw	1
  2592  0ADD  0008               	return
  2593  0ADE                     l2851:	
  2594  0ADE  3003               	movlw	3
  2595  0ADF  0008               	return
  2596  0AE0                     l2855:	
  2597  0AE0  3005               	movlw	5
  2598  0AE1  0008               	return
  2599  0AE2                     l2859:	
  2600  0AE2  3007               	movlw	7
  2601  0AE3  0008               	return
  2602  0AE4                     l2865:	
  2603  0AE4  0875               	movf	Tetris_ScoreForRowsCleared@rowsCleared,w
  2604  0AE5  00F3               	movwf	??_Tetris_ScoreForRowsCleared
  2605  0AE6  01F4               	clrf	??_Tetris_ScoreForRowsCleared+1
  2606                           
  2607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2608                           ; Switch size 1, requested type "simple"
  2609                           ; Number of cases is 1, Range of values is 0 to 0
  2610                           ; switch strategies available:
  2611                           ; Name         Instructions Cycles
  2612                           ; simple_byte            4     3 (average)
  2613                           ; direct_byte            9     7 (fixed)
  2614                           ; jumptable            260     6 (fixed)
  2615                           ;	Chosen strategy is simple_byte
  2616  0AE7  0874               	movf	??_Tetris_ScoreForRowsCleared+1,w
  2617  0AE8  3A00               	xorlw	0	; case 0
  2618  0AE9  1903               	skipnz
  2619  0AEA  2AEC               	goto	l4427
  2620  0AEB  2AE2               	goto	l2859
  2621  0AEC                     l4427:	
  2622                           
  2623                           ; Switch size 1, requested type "simple"
  2624                           ; Number of cases is 4, Range of values is 0 to 3
  2625                           ; switch strategies available:
  2626                           ; Name         Instructions Cycles
  2627                           ; simple_byte           13     7 (average)
  2628                           ; direct_byte           15     7 (fixed)
  2629                           ; jumptable            260     6 (fixed)
  2630                           ;	Chosen strategy is simple_byte
  2631  0AEC  0873               	movf	??_Tetris_ScoreForRowsCleared,w
  2632  0AED  3A00               	xorlw	0	; case 0
  2633  0AEE  1903               	skipnz
  2634  0AEF  2ADA               	goto	l2843
  2635  0AF0  3A01               	xorlw	1	; case 1
  2636  0AF1  1903               	skipnz
  2637  0AF2  2ADC               	goto	l2847
  2638  0AF3  3A03               	xorlw	3	; case 2
  2639  0AF4  1903               	skipnz
  2640  0AF5  2ADE               	goto	l2851
  2641  0AF6  3A01               	xorlw	1	; case 3
  2642  0AF7  1903               	skipnz
  2643  0AF8  2AE0               	goto	l2855
  2644  0AF9  2AE2               	goto	l2859
  2645  0AFA  0008               	return
  2646  0AFB                     __end_of_Tetris_ScoreForRowsCleared:	
  2647                           
  2648                           	psect	text4
  2649  0C26                     __ptext4:	
  2650 ;; *************** function _Tetris_MovePlayerDown *****************
  2651 ;; Defined at:
  2652 ;;		line 392 in file "../Tetris/Tetris.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  game            1    wreg     PTR struct .
  2655 ;;		 -> main@tetrisGame(63), 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  game            1   13[BANK0 ] PTR struct .
  2658 ;;		 -> main@tetrisGame(63), 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      unsigned char 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2668 ;;      Params:         0       0       0       0
  2669 ;;      Locals:         0       1       0       0
  2670 ;;      Temps:          0       1       0       0
  2671 ;;      Totals:         0       2       0       0
  2672 ;;Total ram usage:        2 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    4
  2675 ;; This function calls:
  2676 ;;		_Tetris_ApplyPlayerToTable
  2677 ;;		_Tetris_PlayerOverlapsEnvironment
  2678 ;;		_Tetris_RemovePlayerFromTable
  2679 ;; This function is called by:
  2680 ;;		_Tetris_UpdateGame
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           
  2685                           ;psect for function _Tetris_MovePlayerDown
  2686  0C26                     _Tetris_MovePlayerDown:	
  2687                           
  2688                           ;incstack = 0
  2689                           ; Regs used in _Tetris_MovePlayerDown: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  2690                           ;Tetris_MovePlayerDown@game stored from wreg
  2691  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  2692  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  2693  0C28  00AD               	movwf	Tetris_MovePlayerDown@game
  2694                           
  2695                           ;../Tetris/Tetris.c: 392: uint8_t Tetris_MovePlayerDown(Tetris_Game *game);../Tetris/Tet
      +                          ris.c: 393: {;../Tetris/Tetris.c: 394:     Tetris_RemovePlayerFromTable(game);
  2696  0C29  082D               	movf	Tetris_MovePlayerDown@game,w
  2697  0C2A  158A  2526  158A   	fcall	_Tetris_RemovePlayerFromTable
  2698                           
  2699                           ;../Tetris/Tetris.c: 395:     ++game->player.position.y;
  2700  0C2D  3001               	movlw	1
  2701  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0C2F  1303               	bcf	3,6	;RP1=0, select bank0
  2703  0C30  00AC               	movwf	??_Tetris_MovePlayerDown
  2704  0C31  082D               	movf	Tetris_MovePlayerDown@game,w
  2705  0C32  3E31               	addlw	49
  2706  0C33  0084               	movwf	4
  2707  0C34  082C               	movf	??_Tetris_MovePlayerDown,w
  2708  0C35  1383               	bcf	3,7	;select IRP bank0
  2709  0C36  0780               	addwf	0,f
  2710                           
  2711                           ;../Tetris/Tetris.c: 397:     if (Tetris_PlayerOverlapsEnvironment(game) || !Tetris_Appl
      +                          yPlayerToTable(game))
  2712  0C37  082D               	movf	Tetris_MovePlayerDown@game,w
  2713  0C38  158A  2615  158A   	fcall	_Tetris_PlayerOverlapsEnvironment
  2714  0C3B  3A00               	xorlw	0
  2715  0C3C  1D03               	skipz
  2716  0C3D  2C47               	goto	l3857
  2717  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  2718  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  2719  0C40  082D               	movf	Tetris_MovePlayerDown@game,w
  2720  0C41  118A  26C6  158A   	fcall	_Tetris_ApplyPlayerToTable
  2721  0C44  3A00               	xorlw	0
  2722  0C45  1D03               	skipz
  2723  0C46  2C54               	goto	l3865
  2724  0C47                     l3857:	
  2725                           
  2726                           ;../Tetris/Tetris.c: 398:     {;../Tetris/Tetris.c: 399:         --game->player.position
      +                          .y;
  2727  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  2728  0C48  1303               	bcf	3,6	;RP1=0, select bank0
  2729  0C49  082D               	movf	Tetris_MovePlayerDown@game,w
  2730  0C4A  3E31               	addlw	49
  2731  0C4B  0084               	movwf	4
  2732  0C4C  3001               	movlw	1
  2733  0C4D  1383               	bcf	3,7	;select IRP bank0
  2734  0C4E  0280               	subwf	0,f
  2735                           
  2736                           ;../Tetris/Tetris.c: 400:         Tetris_ApplyPlayerToTable(game);
  2737  0C4F  082D               	movf	Tetris_MovePlayerDown@game,w
  2738  0C50  118A  26C6         	fcall	_Tetris_ApplyPlayerToTable
  2739                           
  2740                           ;../Tetris/Tetris.c: 401:         return 0;
  2741  0C52  3000               	movlw	0
  2742  0C53  0008               	return
  2743  0C54                     l3865:	
  2744                           
  2745                           ;../Tetris/Tetris.c: 404:     return 1;
  2746  0C54  3001               	movlw	1
  2747  0C55  0008               	return
  2748  0C56                     __end_of_Tetris_MovePlayerDown:	
  2749                           
  2750                           	psect	text5
  2751  0B45                     __ptext5:	
  2752 ;; *************** function _Tetris_GetRandomUnit *****************
  2753 ;; Defined at:
  2754 ;;		line 328 in file "../Tetris/Tetris.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;		None
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;		None
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  2   12[BANK0 ] PTR const struct .
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0, pclath, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2768 ;;      Params:         0       0       0       0
  2769 ;;      Locals:         0       0       0       0
  2770 ;;      Temps:          0       2       0       0
  2771 ;;      Totals:         0       2       0       0
  2772 ;;Total ram usage:        2 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    3
  2775 ;; This function calls:
  2776 ;;		___awmod
  2777 ;;		___wmul
  2778 ;;		_rand
  2779 ;; This function is called by:
  2780 ;;		_main
  2781 ;;		_Tetris_UpdateGame
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           
  2786                           ;psect for function _Tetris_GetRandomUnit
  2787  0B45                     _Tetris_GetRandomUnit:	
  2788                           
  2789                           ;../Tetris/Tetris.c: 330:     return Tetris_units + (rand() % TETRIS_NUM_UNITS);
  2790                           
  2791                           ;incstack = 0
  2792                           ; Regs used in _Tetris_GetRandomUnit: [wreg+status,2+status,0+pclath+cstack]
  2793  0B45  158A  271B  158A   	fcall	_rand
  2794  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  2795  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  2796  0B4A  0829               	movf	?_rand+1,w
  2797  0B4B  00B2               	movwf	___awmod@dividend+1
  2798  0B4C  0828               	movf	?_rand,w
  2799  0B4D  00B1               	movwf	___awmod@dividend
  2800  0B4E  3007               	movlw	7
  2801  0B4F  00AF               	movwf	___awmod@divisor
  2802  0B50  3000               	movlw	0
  2803  0B51  00B0               	movwf	___awmod@divisor+1
  2804  0B52  158A  2760  158A   	fcall	___awmod
  2805  0B55  1283               	bcf	3,5	;RP0=0, select bank0
  2806  0B56  1303               	bcf	3,6	;RP1=0, select bank0
  2807  0B57  0830               	movf	?___awmod+1,w
  2808  0B58  00B6               	movwf	___wmul@multiplier+1
  2809  0B59  082F               	movf	?___awmod,w
  2810  0B5A  00B5               	movwf	___wmul@multiplier
  2811  0B5B  3022               	movlw	34
  2812  0B5C  00B7               	movwf	___wmul@multiplicand
  2813  0B5D  3000               	movlw	0
  2814  0B5E  00B8               	movwf	___wmul@multiplicand+1
  2815  0B5F  158A  22B5         	fcall	___wmul
  2816  0B61  3088               	movlw	low (_Tetris_units| (0+32768))
  2817  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0B64  00BB               	movwf	??_Tetris_GetRandomUnit
  2820  0B65  3081               	movlw	high (_Tetris_units| (0+32768))
  2821  0B66  00BC               	movwf	??_Tetris_GetRandomUnit+1
  2822  0B67  0835               	movf	?___wmul,w
  2823  0B68  073B               	addwf	??_Tetris_GetRandomUnit,w
  2824  0B69  00AC               	movwf	?_Tetris_GetRandomUnit
  2825  0B6A  0836               	movf	?___wmul+1,w
  2826  0B6B  1803               	skipnc
  2827  0B6C  0A36               	incf	?___wmul+1,w
  2828  0B6D  073C               	addwf	??_Tetris_GetRandomUnit+1,w
  2829  0B6E  00AD               	movwf	?_Tetris_GetRandomUnit+1
  2830  0B6F  0008               	return
  2831  0B70                     __end_of_Tetris_GetRandomUnit:	
  2832                           
  2833                           	psect	text6
  2834  0F1B                     __ptext6:	
  2835 ;; *************** function _rand *****************
  2836 ;; Defined at:
  2837 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;		None
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;		None
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  2    8[BANK0 ] int 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0, pclath, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2851 ;;      Params:         0       2       0       0
  2852 ;;      Locals:         0       0       0       0
  2853 ;;      Temps:          0       5       0       0
  2854 ;;      Totals:         0       7       0       0
  2855 ;;Total ram usage:        7 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    2
  2858 ;; This function calls:
  2859 ;;		___lmul
  2860 ;; This function is called by:
  2861 ;;		_Tetris_GetRandomUnit
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _rand
  2867  0F1B                     _rand:	
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2871  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  2873  0F1D  084A               	movf	_randx+3,w
  2874  0F1E  00A3               	movwf	___lmul@multiplier+3
  2875  0F1F  0849               	movf	_randx+2,w
  2876  0F20  00A2               	movwf	___lmul@multiplier+2
  2877  0F21  0848               	movf	_randx+1,w
  2878  0F22  00A1               	movwf	___lmul@multiplier+1
  2879  0F23  0847               	movf	_randx,w
  2880  0F24  00A0               	movwf	___lmul@multiplier
  2881  0F25  3041               	movlw	65
  2882  0F26  00A7               	movwf	___lmul@multiplicand+3
  2883  0F27  30C6               	movlw	198
  2884  0F28  00A6               	movwf	___lmul@multiplicand+2
  2885  0F29  304E               	movlw	78
  2886  0F2A  00A5               	movwf	___lmul@multiplicand+1
  2887  0F2B  306D               	movlw	109
  2888  0F2C  00A4               	movwf	___lmul@multiplicand
  2889  0F2D  158A  2697  158A   	fcall	___lmul
  2890  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  2892  0F32  0823               	movf	?___lmul+3,w
  2893  0F33  00CA               	movwf	_randx+3
  2894  0F34  0822               	movf	?___lmul+2,w
  2895  0F35  00C9               	movwf	_randx+2
  2896  0F36  0821               	movf	?___lmul+1,w
  2897  0F37  00C8               	movwf	_randx+1
  2898  0F38  0820               	movf	?___lmul,w
  2899  0F39  00C7               	movwf	_randx
  2900  0F3A  3039               	movlw	57
  2901  0F3B  07C7               	addwf	_randx,f
  2902  0F3C  3030               	movlw	48
  2903  0F3D  1803               	skipnc
  2904  0F3E  3031               	movlw	49
  2905  0F3F  07C8               	addwf	_randx+1,f
  2906  0F40  3000               	movlw	0
  2907  0F41  1803               	skipnc
  2908  0F42  3001               	movlw	1
  2909  0F43  07C9               	addwf	_randx+2,f
  2910  0F44  3000               	movlw	0
  2911  0F45  1803               	skipnc
  2912  0F46  3001               	movlw	1
  2913  0F47  07CA               	addwf	_randx+3,f
  2914  0F48  0847               	movf	_randx,w
  2915  0F49  00AA               	movwf	??_rand
  2916  0F4A  0848               	movf	_randx+1,w
  2917  0F4B  00AB               	movwf	??_rand+1
  2918  0F4C  0849               	movf	_randx+2,w
  2919  0F4D  00AC               	movwf	??_rand+2
  2920  0F4E  084A               	movf	_randx+3,w
  2921  0F4F  00AD               	movwf	??_rand+3
  2922  0F50  3010               	movlw	16
  2923  0F51  00AE               	movwf	??_rand+4
  2924  0F52                     u3235:	
  2925  0F52  0D2D               	rlf	??_rand+3,w
  2926  0F53  0CAD               	rrf	??_rand+3,f
  2927  0F54  0CAC               	rrf	??_rand+2,f
  2928  0F55  0CAB               	rrf	??_rand+1,f
  2929  0F56  0CAA               	rrf	??_rand,f
  2930  0F57  0BAE               	decfsz	??_rand+4,f
  2931  0F58  2F52               	goto	u3235
  2932  0F59  30FF               	movlw	255
  2933  0F5A  052A               	andwf	??_rand,w
  2934  0F5B  00A8               	movwf	?_rand
  2935  0F5C  307F               	movlw	127
  2936  0F5D  052B               	andwf	??_rand+1,w
  2937  0F5E  00A9               	movwf	?_rand+1
  2938  0F5F  0008               	return
  2939  0F60                     __end_of_rand:	
  2940                           
  2941                           	psect	text7
  2942  0E97                     __ptext7:	
  2943 ;; *************** function ___lmul *****************
  2944 ;; Defined at:
  2945 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2948 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  product         4    4[COMMON] unsigned long 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  4    0[BANK0 ] unsigned long 
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2960 ;;      Params:         0       8       0       0
  2961 ;;      Locals:         4       0       0       0
  2962 ;;      Temps:          1       0       0       0
  2963 ;;      Totals:         5       8       0       0
  2964 ;;Total ram usage:       13 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    1
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_rand
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function ___lmul
  2976  0E97                     ___lmul:	
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2980  0E97  3000               	movlw	0
  2981  0E98  00F7               	movwf	___lmul@product+3
  2982  0E99  3000               	movlw	0
  2983  0E9A  00F6               	movwf	___lmul@product+2
  2984  0E9B  3000               	movlw	0
  2985  0E9C  00F5               	movwf	___lmul@product+1
  2986  0E9D  3000               	movlw	0
  2987  0E9E  00F4               	movwf	___lmul@product
  2988  0E9F                     l3571:	
  2989  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  2990  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  2991  0EA1  1C20               	btfss	___lmul@multiplier,0
  2992  0EA2  2EB7               	goto	l3575
  2993  0EA3  0824               	movf	___lmul@multiplicand,w
  2994  0EA4  07F4               	addwf	___lmul@product,f
  2995  0EA5  0825               	movf	___lmul@multiplicand+1,w
  2996  0EA6  1103               	clrz
  2997  0EA7  1803               	skipnc
  2998  0EA8  3E01               	addlw	1
  2999  0EA9  1D03               	btfss	3,2
  3000  0EAA  07F5               	addwf	___lmul@product+1,f
  3001  0EAB  0826               	movf	___lmul@multiplicand+2,w
  3002  0EAC  1103               	clrz
  3003  0EAD  1803               	skipnc
  3004  0EAE  3E01               	addlw	1
  3005  0EAF  1D03               	btfss	3,2
  3006  0EB0  07F6               	addwf	___lmul@product+2,f
  3007  0EB1  0827               	movf	___lmul@multiplicand+3,w
  3008  0EB2  1103               	clrz
  3009  0EB3  1803               	skipnc
  3010  0EB4  3E01               	addlw	1
  3011  0EB5  1D03               	btfss	3,2
  3012  0EB6  07F7               	addwf	___lmul@product+3,f
  3013  0EB7                     l3575:	
  3014  0EB7  3001               	movlw	1
  3015  0EB8  00F3               	movwf	??___lmul
  3016  0EB9                     u3075:	
  3017  0EB9  1003               	clrc
  3018  0EBA  0DA4               	rlf	___lmul@multiplicand,f
  3019  0EBB  0DA5               	rlf	___lmul@multiplicand+1,f
  3020  0EBC  0DA6               	rlf	___lmul@multiplicand+2,f
  3021  0EBD  0DA7               	rlf	___lmul@multiplicand+3,f
  3022  0EBE  0BF3               	decfsz	??___lmul,f
  3023  0EBF  2EB9               	goto	u3075
  3024  0EC0  3001               	movlw	1
  3025  0EC1                     u3085:	
  3026  0EC1  1003               	clrc
  3027  0EC2  0CA3               	rrf	___lmul@multiplier+3,f
  3028  0EC3  0CA2               	rrf	___lmul@multiplier+2,f
  3029  0EC4  0CA1               	rrf	___lmul@multiplier+1,f
  3030  0EC5  0CA0               	rrf	___lmul@multiplier,f
  3031  0EC6  3EFF               	addlw	-1
  3032  0EC7  1D03               	skipz
  3033  0EC8  2EC1               	goto	u3085
  3034  0EC9  0823               	movf	___lmul@multiplier+3,w
  3035  0ECA  0422               	iorwf	___lmul@multiplier+2,w
  3036  0ECB  0421               	iorwf	___lmul@multiplier+1,w
  3037  0ECC  0420               	iorwf	___lmul@multiplier,w
  3038  0ECD  1D03               	skipz
  3039  0ECE  2E9F               	goto	l3571
  3040  0ECF  0877               	movf	___lmul@product+3,w
  3041  0ED0  00A3               	movwf	?___lmul+3
  3042  0ED1  0876               	movf	___lmul@product+2,w
  3043  0ED2  00A2               	movwf	?___lmul+2
  3044  0ED3  0875               	movf	___lmul@product+1,w
  3045  0ED4  00A1               	movwf	?___lmul+1
  3046  0ED5  0874               	movf	___lmul@product,w
  3047  0ED6  00A0               	movwf	?___lmul
  3048  0ED7  0008               	return
  3049  0ED8                     __end_of___lmul:	
  3050                           
  3051                           	psect	text8
  3052  0AB5                     __ptext8:	
  3053 ;; *************** function ___wmul *****************
  3054 ;; Defined at:
  3055 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;  multiplier      2   21[BANK0 ] unsigned int 
  3058 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;  product         2   25[BANK0 ] unsigned int 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  2   21[BANK0 ] unsigned int 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3070 ;;      Params:         0       4       0       0
  3071 ;;      Locals:         0       2       0       0
  3072 ;;      Temps:          0       0       0       0
  3073 ;;      Totals:         0       6       0       0
  3074 ;;Total ram usage:        6 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    1
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_Tetris_GetRandomUnit
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           
  3085                           ;psect for function ___wmul
  3086  0AB5                     ___wmul:	
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3090  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0AB7  01B9               	clrf	___wmul@product
  3093  0AB8  01BA               	clrf	___wmul@product+1
  3094  0AB9                     l2649:	
  3095  0AB9  1C35               	btfss	___wmul@multiplier,0
  3096  0ABA  2AC1               	goto	l615
  3097  0ABB  0837               	movf	___wmul@multiplicand,w
  3098  0ABC  07B9               	addwf	___wmul@product,f
  3099  0ABD  1803               	skipnc
  3100  0ABE  0ABA               	incf	___wmul@product+1,f
  3101  0ABF  0838               	movf	___wmul@multiplicand+1,w
  3102  0AC0  07BA               	addwf	___wmul@product+1,f
  3103  0AC1                     l615:	
  3104  0AC1  3001               	movlw	1
  3105  0AC2                     u1945:	
  3106  0AC2  1003               	clrc
  3107  0AC3  0DB7               	rlf	___wmul@multiplicand,f
  3108  0AC4  0DB8               	rlf	___wmul@multiplicand+1,f
  3109  0AC5  3EFF               	addlw	-1
  3110  0AC6  1D03               	skipz
  3111  0AC7  2AC2               	goto	u1945
  3112  0AC8  3001               	movlw	1
  3113  0AC9                     u1955:	
  3114  0AC9  1003               	clrc
  3115  0ACA  0CB6               	rrf	___wmul@multiplier+1,f
  3116  0ACB  0CB5               	rrf	___wmul@multiplier,f
  3117  0ACC  3EFF               	addlw	-1
  3118  0ACD  1D03               	skipz
  3119  0ACE  2AC9               	goto	u1955
  3120  0ACF  0835               	movf	___wmul@multiplier,w
  3121  0AD0  0436               	iorwf	___wmul@multiplier+1,w
  3122  0AD1  1D03               	btfss	3,2
  3123  0AD2  2AB9               	goto	l2649
  3124  0AD3  083A               	movf	___wmul@product+1,w
  3125  0AD4  00B6               	movwf	?___wmul+1
  3126  0AD5  0839               	movf	___wmul@product,w
  3127  0AD6  00B5               	movwf	?___wmul
  3128  0AD7  0008               	return
  3129  0AD8                     __end_of___wmul:	
  3130                           
  3131                           	psect	text9
  3132  0F60                     __ptext9:	
  3133 ;; *************** function ___awmod *****************
  3134 ;; Defined at:
  3135 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  divisor         2   15[BANK0 ] int 
  3138 ;;  dividend        2   17[BANK0 ] int 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;  sign            1   20[BANK0 ] unsigned char 
  3141 ;;  counter         1   19[BANK0 ] unsigned char 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  2   15[BANK0 ] int 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2, status,0
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3151 ;;      Params:         0       4       0       0
  3152 ;;      Locals:         0       2       0       0
  3153 ;;      Temps:          1       0       0       0
  3154 ;;      Totals:         1       6       0       0
  3155 ;;Total ram usage:        7 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    1
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_Tetris_GetRandomUnit
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           
  3166                           ;psect for function ___awmod
  3167  0F60                     ___awmod:	
  3168                           
  3169                           ;incstack = 0
  3170                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3171  0F60  1283               	bcf	3,5	;RP0=0, select bank0
  3172  0F61  1303               	bcf	3,6	;RP1=0, select bank0
  3173  0F62  01B4               	clrf	___awmod@sign
  3174  0F63  1FB2               	btfss	___awmod@dividend+1,7
  3175  0F64  2F6C               	goto	l3739
  3176  0F65  09B1               	comf	___awmod@dividend,f
  3177  0F66  09B2               	comf	___awmod@dividend+1,f
  3178  0F67  0AB1               	incf	___awmod@dividend,f
  3179  0F68  1903               	skipnz
  3180  0F69  0AB2               	incf	___awmod@dividend+1,f
  3181  0F6A  01B4               	clrf	___awmod@sign
  3182  0F6B  0AB4               	incf	___awmod@sign,f
  3183  0F6C                     l3739:	
  3184  0F6C  1FB0               	btfss	___awmod@divisor+1,7
  3185  0F6D  2F73               	goto	l3743
  3186  0F6E  09AF               	comf	___awmod@divisor,f
  3187  0F6F  09B0               	comf	___awmod@divisor+1,f
  3188  0F70  0AAF               	incf	___awmod@divisor,f
  3189  0F71  1903               	skipnz
  3190  0F72  0AB0               	incf	___awmod@divisor+1,f
  3191  0F73                     l3743:	
  3192  0F73  082F               	movf	___awmod@divisor,w
  3193  0F74  0430               	iorwf	___awmod@divisor+1,w
  3194  0F75  1903               	btfsc	3,2
  3195  0F76  2FA0               	goto	l3761
  3196  0F77  01B3               	clrf	___awmod@counter
  3197  0F78  0AB3               	incf	___awmod@counter,f
  3198  0F79                     l3751:	
  3199  0F79  1BB0               	btfsc	___awmod@divisor+1,7
  3200  0F7A  2F87               	goto	l3753
  3201  0F7B  3001               	movlw	1
  3202  0F7C                     u3275:	
  3203  0F7C  1003               	clrc
  3204  0F7D  0DAF               	rlf	___awmod@divisor,f
  3205  0F7E  0DB0               	rlf	___awmod@divisor+1,f
  3206  0F7F  3EFF               	addlw	-1
  3207  0F80  1D03               	skipz
  3208  0F81  2F7C               	goto	u3275
  3209  0F82  3001               	movlw	1
  3210  0F83  00F8               	movwf	??___awmod
  3211  0F84  0878               	movf	??___awmod,w
  3212  0F85  07B3               	addwf	___awmod@counter,f
  3213  0F86  2F79               	goto	l3751
  3214  0F87                     l3753:	
  3215  0F87  0830               	movf	___awmod@divisor+1,w
  3216  0F88  0232               	subwf	___awmod@dividend+1,w
  3217  0F89  1D03               	skipz
  3218  0F8A  2F8D               	goto	u3295
  3219  0F8B  082F               	movf	___awmod@divisor,w
  3220  0F8C  0231               	subwf	___awmod@dividend,w
  3221  0F8D                     u3295:	
  3222  0F8D  1C03               	skipc
  3223  0F8E  2F95               	goto	l3757
  3224  0F8F  082F               	movf	___awmod@divisor,w
  3225  0F90  02B1               	subwf	___awmod@dividend,f
  3226  0F91  0830               	movf	___awmod@divisor+1,w
  3227  0F92  1C03               	skipc
  3228  0F93  03B2               	decf	___awmod@dividend+1,f
  3229  0F94  02B2               	subwf	___awmod@dividend+1,f
  3230  0F95                     l3757:	
  3231  0F95  3001               	movlw	1
  3232  0F96                     u3305:	
  3233  0F96  1003               	clrc
  3234  0F97  0CB0               	rrf	___awmod@divisor+1,f
  3235  0F98  0CAF               	rrf	___awmod@divisor,f
  3236  0F99  3EFF               	addlw	-1
  3237  0F9A  1D03               	skipz
  3238  0F9B  2F96               	goto	u3305
  3239  0F9C  3001               	movlw	1
  3240  0F9D  02B3               	subwf	___awmod@counter,f
  3241  0F9E  1D03               	btfss	3,2
  3242  0F9F  2F87               	goto	l3753
  3243  0FA0                     l3761:	
  3244  0FA0  0834               	movf	___awmod@sign,w
  3245  0FA1  1903               	btfsc	3,2
  3246  0FA2  2FA8               	goto	l3765
  3247  0FA3  09B1               	comf	___awmod@dividend,f
  3248  0FA4  09B2               	comf	___awmod@dividend+1,f
  3249  0FA5  0AB1               	incf	___awmod@dividend,f
  3250  0FA6  1903               	skipnz
  3251  0FA7  0AB2               	incf	___awmod@dividend+1,f
  3252  0FA8                     l3765:	
  3253  0FA8  0832               	movf	___awmod@dividend+1,w
  3254  0FA9  00B0               	movwf	?___awmod+1
  3255  0FAA  0831               	movf	___awmod@dividend,w
  3256  0FAB  00AF               	movwf	?___awmod
  3257  0FAC  0008               	return
  3258  0FAD                     __end_of___awmod:	
  3259                           
  3260                           	psect	text10
  3261  0C56                     __ptext10:	
  3262 ;; *************** function _Tetris_ClearFilledRows *****************
  3263 ;; Defined at:
  3264 ;;		line 372 in file "../Tetris/Tetris.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;  gameTable       1    wreg     PTR unsigned int 
  3267 ;;		 -> main@tetrisGame(63), 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  gameTable       1    7[COMMON] PTR unsigned int 
  3270 ;;		 -> main@tetrisGame(63), 
  3271 ;;  i               1    8[COMMON] unsigned char 
  3272 ;;  rowsCleared     1    6[COMMON] unsigned char 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      unsigned char 
  3275 ;; Registers used:
  3276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3282 ;;      Params:         0       0       0       0
  3283 ;;      Locals:         3       0       0       0
  3284 ;;      Temps:          0       4       0       0
  3285 ;;      Totals:         3       4       0       0
  3286 ;;Total ram usage:        7 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    2
  3289 ;; This function calls:
  3290 ;;		_Tetris_ShiftTableDown
  3291 ;; This function is called by:
  3292 ;;		_Tetris_UpdateGame
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function _Tetris_ClearFilledRows
  3298  0C56                     _Tetris_ClearFilledRows:	
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in _Tetris_ClearFilledRows: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3302                           ;Tetris_ClearFilledRows@gameTable stored from wreg
  3303  0C56  00F7               	movwf	Tetris_ClearFilledRows@gameTable
  3304                           
  3305                           ;../Tetris/Tetris.c: 372: uint8_t Tetris_ClearFilledRows(uint16_t *gameTable);../Tetris/
      +                          Tetris.c: 373: {;../Tetris/Tetris.c: 374:     uint8_t rowsCleared = 0;
  3306  0C57  01F6               	clrf	Tetris_ClearFilledRows@rowsCleared
  3307                           
  3308                           ;../Tetris/Tetris.c: 376:     for (uint8_t i = 0; i < TETRIS_TABLE_HEIGHT;)
  3309  0C58  01F8               	clrf	Tetris_ClearFilledRows@i
  3310  0C59                     l3875:	
  3311                           
  3312                           ;../Tetris/Tetris.c: 377:     {;../Tetris/Tetris.c: 378:         if (gameTable[i] == 0xF
      +                          FFF)
  3313  0C59  0878               	movf	Tetris_ClearFilledRows@i,w
  3314  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  3315  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  3316  0C5C  00A6               	movwf	??_Tetris_ClearFilledRows
  3317  0C5D  0726               	addwf	??_Tetris_ClearFilledRows,w
  3318  0C5E  0777               	addwf	Tetris_ClearFilledRows@gameTable,w
  3319  0C5F  00A7               	movwf	??_Tetris_ClearFilledRows+1
  3320  0C60  0827               	movf	??_Tetris_ClearFilledRows+1,w
  3321  0C61  0084               	movwf	4
  3322  0C62  1383               	bcf	3,7	;select IRP bank0
  3323  0C63  0800               	movf	0,w
  3324  0C64  00A8               	movwf	??_Tetris_ClearFilledRows+2
  3325  0C65  0A84               	incf	4,f
  3326  0C66  0800               	movf	0,w
  3327  0C67  00A9               	movwf	??_Tetris_ClearFilledRows+3
  3328  0C68  0A28               	incf	??_Tetris_ClearFilledRows+2,w
  3329  0C69  1D03               	skipz
  3330  0C6A  2C7D               	goto	l3881
  3331  0C6B  0A29               	incf	??_Tetris_ClearFilledRows+3,w
  3332  0C6C  1D03               	btfss	3,2
  3333  0C6D  2C7D               	goto	l3881
  3334                           
  3335                           ;../Tetris/Tetris.c: 379:         {;../Tetris/Tetris.c: 380:             Tetris_ShiftTab
      +                          leDown(gameTable, i);
  3336  0C6E  0878               	movf	Tetris_ClearFilledRows@i,w
  3337  0C6F  00A6               	movwf	??_Tetris_ClearFilledRows
  3338  0C70  0826               	movf	??_Tetris_ClearFilledRows,w
  3339  0C71  00F3               	movwf	Tetris_ShiftTableDown@upto
  3340  0C72  0877               	movf	Tetris_ClearFilledRows@gameTable,w
  3341  0C73  158A  26D8  158A   	fcall	_Tetris_ShiftTableDown
  3342                           
  3343                           ;../Tetris/Tetris.c: 381:             ++rowsCleared;
  3344  0C76  3001               	movlw	1
  3345  0C77  1283               	bcf	3,5	;RP0=0, select bank0
  3346  0C78  1303               	bcf	3,6	;RP1=0, select bank0
  3347  0C79  00A6               	movwf	??_Tetris_ClearFilledRows
  3348  0C7A  0826               	movf	??_Tetris_ClearFilledRows,w
  3349  0C7B  07F6               	addwf	Tetris_ClearFilledRows@rowsCleared,f
  3350                           
  3351                           ;../Tetris/Tetris.c: 382:         }
  3352  0C7C  2C81               	goto	l3883
  3353  0C7D                     l3881:	
  3354                           
  3355                           ;../Tetris/Tetris.c: 384:         {;../Tetris/Tetris.c: 385:             ++i;
  3356  0C7D  3001               	movlw	1
  3357  0C7E  00A6               	movwf	??_Tetris_ClearFilledRows
  3358  0C7F  0826               	movf	??_Tetris_ClearFilledRows,w
  3359  0C80  07F8               	addwf	Tetris_ClearFilledRows@i,f
  3360  0C81                     l3883:	
  3361                           
  3362                           ;../Tetris/Tetris.c: 387:     }
  3363  0C81  3018               	movlw	24
  3364  0C82  0278               	subwf	Tetris_ClearFilledRows@i,w
  3365  0C83  1C03               	skipc
  3366  0C84  2C59               	goto	l3875
  3367                           
  3368                           ;../Tetris/Tetris.c: 389:     return rowsCleared;
  3369  0C85  0876               	movf	Tetris_ClearFilledRows@rowsCleared,w
  3370  0C86  0008               	return
  3371  0C87                     __end_of_Tetris_ClearFilledRows:	
  3372                           
  3373                           	psect	text11
  3374  0ED8                     __ptext11:	
  3375 ;; *************** function _Tetris_ShiftTableDown *****************
  3376 ;; Defined at:
  3377 ;;		line 302 in file "../Tetris/Tetris.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  gameTable       1    wreg     PTR unsigned int 
  3380 ;;		 -> main@tetrisGame(63), 
  3381 ;;  upto            1    3[COMMON] unsigned char 
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;  gameTable       1    4[COMMON] PTR unsigned int 
  3384 ;;		 -> main@tetrisGame(63), 
  3385 ;;  i               1    5[COMMON] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3395 ;;      Params:         1       0       0       0
  3396 ;;      Locals:         2       0       0       0
  3397 ;;      Temps:          0       6       0       0
  3398 ;;      Totals:         3       6       0       0
  3399 ;;Total ram usage:        9 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    1
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_Tetris_ClearFilledRows
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           
  3410                           ;psect for function _Tetris_ShiftTableDown
  3411  0ED8                     _Tetris_ShiftTableDown:	
  3412                           
  3413                           ;incstack = 0
  3414                           ; Regs used in _Tetris_ShiftTableDown: [wreg-fsr0h+status,2+status,0]
  3415                           ;Tetris_ShiftTableDown@gameTable stored from wreg
  3416  0ED8  00F4               	movwf	Tetris_ShiftTableDown@gameTable
  3417                           
  3418                           ;../Tetris/Tetris.c: 302: static void Tetris_ShiftTableDown(uint16_t *gameTable, uint8_t
      +                           upto);../Tetris/Tetris.c: 303: {;../Tetris/Tetris.c: 304:     uint8_t i;;../Tetris/Tetr
      +                          is.c: 306:     for (i = upto; i != 0; --i)
  3419  0ED9  0873               	movf	Tetris_ShiftTableDown@upto,w
  3420  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0EDC  00A0               	movwf	??_Tetris_ShiftTableDown
  3423  0EDD  0820               	movf	??_Tetris_ShiftTableDown,w
  3424  0EDE  00F5               	movwf	Tetris_ShiftTableDown@i
  3425  0EDF                     l3693:	
  3426  0EDF  0875               	movf	Tetris_ShiftTableDown@i,w
  3427  0EE0  1903               	btfsc	3,2
  3428  0EE1  2F0F               	goto	l3707
  3429                           
  3430                           ;../Tetris/Tetris.c: 307:     {;../Tetris/Tetris.c: 308:         if (gameTable[i] == 0)
  3431  0EE2  0875               	movf	Tetris_ShiftTableDown@i,w
  3432  0EE3  00A0               	movwf	??_Tetris_ShiftTableDown
  3433  0EE4  0720               	addwf	??_Tetris_ShiftTableDown,w
  3434  0EE5  0774               	addwf	Tetris_ShiftTableDown@gameTable,w
  3435  0EE6  00A1               	movwf	??_Tetris_ShiftTableDown+1
  3436  0EE7  0821               	movf	??_Tetris_ShiftTableDown+1,w
  3437  0EE8  0084               	movwf	4
  3438  0EE9  1383               	bcf	3,7	;select IRP bank0
  3439  0EEA  0800               	movf	0,w
  3440  0EEB  00A2               	movwf	??_Tetris_ShiftTableDown+2
  3441  0EEC  0A84               	incf	4,f
  3442  0EED  0800               	movf	0,w
  3443  0EEE  00A3               	movwf	??_Tetris_ShiftTableDown+3
  3444  0EEF  0822               	movf	??_Tetris_ShiftTableDown+2,w
  3445  0EF0  0423               	iorwf	??_Tetris_ShiftTableDown+3,w
  3446  0EF1  1903               	btfsc	3,2
  3447  0EF2  2F0F               	goto	l3707
  3448                           
  3449                           ;../Tetris/Tetris.c: 310:         gameTable[i] = gameTable[i - 1];
  3450  0EF3  0875               	movf	Tetris_ShiftTableDown@i,w
  3451  0EF4  00A0               	movwf	??_Tetris_ShiftTableDown
  3452  0EF5  0720               	addwf	??_Tetris_ShiftTableDown,w
  3453  0EF6  0774               	addwf	Tetris_ShiftTableDown@gameTable,w
  3454  0EF7  00A1               	movwf	??_Tetris_ShiftTableDown+1
  3455  0EF8  0821               	movf	??_Tetris_ShiftTableDown+1,w
  3456  0EF9  3EFE               	addlw	-2
  3457  0EFA  0084               	movwf	4
  3458  0EFB  0800               	movf	0,w
  3459  0EFC  00A2               	movwf	??_Tetris_ShiftTableDown+2
  3460  0EFD  0A84               	incf	4,f
  3461  0EFE  0800               	movf	0,w
  3462  0EFF  00A3               	movwf	??_Tetris_ShiftTableDown+3
  3463  0F00  0875               	movf	Tetris_ShiftTableDown@i,w
  3464  0F01  00A4               	movwf	??_Tetris_ShiftTableDown+4
  3465  0F02  0724               	addwf	??_Tetris_ShiftTableDown+4,w
  3466  0F03  0774               	addwf	Tetris_ShiftTableDown@gameTable,w
  3467  0F04  00A5               	movwf	??_Tetris_ShiftTableDown+5
  3468  0F05  0825               	movf	??_Tetris_ShiftTableDown+5,w
  3469  0F06  0084               	movwf	4
  3470  0F07  0822               	movf	??_Tetris_ShiftTableDown+2,w
  3471  0F08  0080               	movwf	0
  3472  0F09  0A84               	incf	4,f
  3473  0F0A  0823               	movf	??_Tetris_ShiftTableDown+3,w
  3474  0F0B  0080               	movwf	0
  3475                           
  3476                           ;../Tetris/Tetris.c: 311:     }
  3477  0F0C  3001               	movlw	1
  3478  0F0D  02F5               	subwf	Tetris_ShiftTableDown@i,f
  3479  0F0E  2EDF               	goto	l3693
  3480  0F0F                     l3707:	
  3481                           
  3482                           ;../Tetris/Tetris.c: 313:     gameTable[i] = 0;
  3483  0F0F  0875               	movf	Tetris_ShiftTableDown@i,w
  3484  0F10  00A0               	movwf	??_Tetris_ShiftTableDown
  3485  0F11  0720               	addwf	??_Tetris_ShiftTableDown,w
  3486  0F12  0774               	addwf	Tetris_ShiftTableDown@gameTable,w
  3487  0F13  00A1               	movwf	??_Tetris_ShiftTableDown+1
  3488  0F14  0821               	movf	??_Tetris_ShiftTableDown+1,w
  3489  0F15  0084               	movwf	4
  3490  0F16  1383               	bcf	3,7	;select IRP bank0
  3491  0F17  0180               	clrf	0
  3492  0F18  0A84               	incf	4,f
  3493  0F19  0180               	clrf	0
  3494  0F1A  0008               	return
  3495  0F1B                     __end_of_Tetris_ShiftTableDown:	
  3496                           
  3497                           	psect	text12
  3498  0656                     __ptext12:	
  3499 ;; *************** function _Tetris_RotatePlayer *****************
  3500 ;; Defined at:
  3501 ;;		line 453 in file "../Tetris/Tetris.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  game            1    wreg     PTR struct .
  3504 ;;		 -> main@tetrisGame(63), 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;  game            1   19[BANK0 ] PTR struct .
  3507 ;;		 -> main@tetrisGame(63), 
  3508 ;;  oldRotation     1   18[BANK0 ] unsigned char 
  3509 ;; Return value:  Size  Location     Type
  3510 ;;                  1    wreg      void 
  3511 ;; Registers used:
  3512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3513 ;; Tracked objects:
  3514 ;;		On entry : 0/0
  3515 ;;		On exit  : 0/0
  3516 ;;		Unchanged: 0/0
  3517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3518 ;;      Params:         0       0       0       0
  3519 ;;      Locals:         0       2       0       0
  3520 ;;      Temps:          0       6       0       0
  3521 ;;      Totals:         0       8       0       0
  3522 ;;Total ram usage:        8 bytes
  3523 ;; Hardware stack levels used:    1
  3524 ;; Hardware stack levels required when called:    4
  3525 ;; This function calls:
  3526 ;;		_Tetris_ApplyPlayerToTable
  3527 ;;		_Tetris_PlayerOverlapsEnvironment
  3528 ;;		_Tetris_PlayerUnitBitsAreValid
  3529 ;;		_Tetris_RemovePlayerFromTable
  3530 ;;		_Tetris_UpdatePlayerUnitBits
  3531 ;;		___lbmod
  3532 ;; This function is called by:
  3533 ;;		_main
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           
  3538                           ;psect for function _Tetris_RotatePlayer
  3539  0656                     _Tetris_RotatePlayer:	
  3540                           
  3541                           ;incstack = 0
  3542                           ; Regs used in _Tetris_RotatePlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  3543                           ;Tetris_RotatePlayer@game stored from wreg
  3544  0656  1283               	bcf	3,5	;RP0=0, select bank0
  3545  0657  1303               	bcf	3,6	;RP1=0, select bank0
  3546  0658  00B3               	movwf	Tetris_RotatePlayer@game
  3547                           
  3548                           ;../Tetris/Tetris.c: 453: void Tetris_RotatePlayer(Tetris_Game *game);../Tetris/Tetris.c
      +                          : 454: {;../Tetris/Tetris.c: 455:     Tetris_RemovePlayerFromTable(game);
  3549  0659  0833               	movf	Tetris_RotatePlayer@game,w
  3550  065A  158A  2526  118A   	fcall	_Tetris_RemovePlayerFromTable
  3551                           
  3552                           ;../Tetris/Tetris.c: 457:     uint8_t oldRotation = game->player.rotation;
  3553  065D  1283               	bcf	3,5	;RP0=0, select bank0
  3554  065E  1303               	bcf	3,6	;RP1=0, select bank0
  3555  065F  0833               	movf	Tetris_RotatePlayer@game,w
  3556  0660  3E3C               	addlw	60
  3557  0661  0084               	movwf	4
  3558  0662  1383               	bcf	3,7	;select IRP bank0
  3559  0663  0800               	movf	0,w
  3560  0664  00AC               	movwf	??_Tetris_RotatePlayer
  3561  0665  082C               	movf	??_Tetris_RotatePlayer,w
  3562  0666  00B2               	movwf	Tetris_RotatePlayer@oldRotation
  3563                           
  3564                           ;../Tetris/Tetris.c: 458:     ++game->player.rotation;
  3565  0667  3001               	movlw	1
  3566  0668  00AC               	movwf	??_Tetris_RotatePlayer
  3567  0669  0833               	movf	Tetris_RotatePlayer@game,w
  3568  066A  3E3C               	addlw	60
  3569  066B  0084               	movwf	4
  3570  066C  082C               	movf	??_Tetris_RotatePlayer,w
  3571  066D  0780               	addwf	0,f
  3572                           
  3573                           ;../Tetris/Tetris.c: 459:     game->player.rotation %= game->player.unit->numRotations;
  3574  066E  3001               	movlw	1
  3575  066F  00AC               	movwf	??_Tetris_RotatePlayer
  3576  0670  3000               	movlw	0
  3577  0671  00AD               	movwf	??_Tetris_RotatePlayer+1
  3578  0672  0833               	movf	Tetris_RotatePlayer@game,w
  3579  0673  3E32               	addlw	50
  3580  0674  0084               	movwf	4
  3581  0675  0800               	movf	0,w
  3582  0676  00AE               	movwf	??_Tetris_RotatePlayer+2
  3583  0677  0A84               	incf	4,f
  3584  0678  0800               	movf	0,w
  3585  0679  00AF               	movwf	??_Tetris_RotatePlayer+3
  3586  067A  082C               	movf	??_Tetris_RotatePlayer,w
  3587  067B  072E               	addwf	??_Tetris_RotatePlayer+2,w
  3588  067C  0084               	movwf	4
  3589  067D  082D               	movf	??_Tetris_RotatePlayer+1,w
  3590  067E  1803               	skipnc
  3591  067F  0A2D               	incf	??_Tetris_RotatePlayer+1,w
  3592  0680  072F               	addwf	??_Tetris_RotatePlayer+3,w
  3593  0681  00FF               	movwf	127
  3594  0682  118A  2100  118A   	fcall	stringtab
  3595  0685  00B0               	movwf	??_Tetris_RotatePlayer+4
  3596  0686  0830               	movf	??_Tetris_RotatePlayer+4,w
  3597  0687  00F3               	movwf	___lbmod@divisor
  3598  0688  0833               	movf	Tetris_RotatePlayer@game,w
  3599  0689  3E3C               	addlw	60
  3600  068A  0084               	movwf	4
  3601  068B  1383               	bcf	3,7	;select IRP bank0
  3602  068C  0800               	movf	0,w
  3603  068D  158A  2320  118A   	fcall	___lbmod
  3604  0690  1283               	bcf	3,5	;RP0=0, select bank0
  3605  0691  1303               	bcf	3,6	;RP1=0, select bank0
  3606  0692  00B1               	movwf	??_Tetris_RotatePlayer+5
  3607  0693  0833               	movf	Tetris_RotatePlayer@game,w
  3608  0694  3E3C               	addlw	60
  3609  0695  0084               	movwf	4
  3610  0696  0831               	movf	??_Tetris_RotatePlayer+5,w
  3611  0697  1383               	bcf	3,7	;select IRP bank0
  3612  0698  0080               	movwf	0
  3613                           
  3614                           ;../Tetris/Tetris.c: 460:     Tetris_UpdatePlayerUnitBits(&game->player);
  3615  0699  0833               	movf	Tetris_RotatePlayer@game,w
  3616  069A  3E30               	addlw	48
  3617  069B  118A  252C  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  3618                           
  3619                           ;../Tetris/Tetris.c: 461:     if (!Tetris_PlayerUnitBitsAreValid(&game->player) || Tetri
      +                          s_PlayerOverlapsEnvironment(game))
  3620  069E  1283               	bcf	3,5	;RP0=0, select bank0
  3621  069F  1303               	bcf	3,6	;RP1=0, select bank0
  3622  06A0  0833               	movf	Tetris_RotatePlayer@game,w
  3623  06A1  3E30               	addlw	48
  3624  06A2  158A  24F1  118A   	fcall	_Tetris_PlayerUnitBitsAreValid
  3625  06A5  3A00               	xorlw	0
  3626  06A6  1903               	skipnz
  3627  06A7  2EB1               	goto	l4235
  3628  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  3629  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  3630  06AA  0833               	movf	Tetris_RotatePlayer@game,w
  3631  06AB  158A  2615  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  3632  06AE  3A00               	xorlw	0
  3633  06AF  1903               	skipnz
  3634  06B0  2EC0               	goto	l4239
  3635  06B1                     l4235:	
  3636                           
  3637                           ;../Tetris/Tetris.c: 462:     {;../Tetris/Tetris.c: 463:         game->player.rotation =
      +                           oldRotation;
  3638  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  3639  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  3640  06B3  0832               	movf	Tetris_RotatePlayer@oldRotation,w
  3641  06B4  00AC               	movwf	??_Tetris_RotatePlayer
  3642  06B5  0833               	movf	Tetris_RotatePlayer@game,w
  3643  06B6  3E3C               	addlw	60
  3644  06B7  0084               	movwf	4
  3645  06B8  082C               	movf	??_Tetris_RotatePlayer,w
  3646  06B9  1383               	bcf	3,7	;select IRP bank0
  3647  06BA  0080               	movwf	0
  3648                           
  3649                           ;../Tetris/Tetris.c: 464:         Tetris_UpdatePlayerUnitBits(&game->player);
  3650  06BB  0833               	movf	Tetris_RotatePlayer@game,w
  3651  06BC  3E30               	addlw	48
  3652  06BD  118A  252C  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  3653  06C0                     l4239:	
  3654                           
  3655                           ;../Tetris/Tetris.c: 467:     Tetris_ApplyPlayerToTable(game);
  3656  06C0  1283               	bcf	3,5	;RP0=0, select bank0
  3657  06C1  1303               	bcf	3,6	;RP1=0, select bank0
  3658  06C2  0833               	movf	Tetris_RotatePlayer@game,w
  3659  06C3  118A  26C6         	fcall	_Tetris_ApplyPlayerToTable
  3660  06C5  0008               	return
  3661  06C6                     __end_of_Tetris_RotatePlayer:	
  3662                           
  3663                           	psect	text13
  3664  0B20                     __ptext13:	
  3665 ;; *************** function ___lbmod *****************
  3666 ;; Defined at:
  3667 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lbmod.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  dividend        1    wreg     unsigned char 
  3670 ;;  divisor         1    3[COMMON] unsigned char 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  dividend        1    0[BANK0 ] unsigned char 
  3673 ;;  rem             1    2[BANK0 ] unsigned char 
  3674 ;;  counter         1    1[BANK0 ] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      unsigned char 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3684 ;;      Params:         1       0       0       0
  3685 ;;      Locals:         0       3       0       0
  3686 ;;      Temps:          3       0       0       0
  3687 ;;      Totals:         4       3       0       0
  3688 ;;Total ram usage:        7 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    1
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_Tetris_RotatePlayer
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function ___lbmod
  3700  0B20                     ___lbmod:	
  3701                           
  3702                           ;incstack = 0
  3703                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3704                           ;___lbmod@dividend stored from wreg
  3705  0B20  1283               	bcf	3,5	;RP0=0, select bank0
  3706  0B21  1303               	bcf	3,6	;RP1=0, select bank0
  3707  0B22  00A0               	movwf	___lbmod@dividend
  3708  0B23  3008               	movlw	8
  3709  0B24  00F4               	movwf	??___lbmod
  3710  0B25  0874               	movf	??___lbmod,w
  3711  0B26  00A1               	movwf	___lbmod@counter
  3712  0B27  01A2               	clrf	___lbmod@rem
  3713  0B28                     l4005:	
  3714  0B28  0820               	movf	___lbmod@dividend,w
  3715  0B29  00F4               	movwf	??___lbmod
  3716  0B2A  3007               	movlw	7
  3717  0B2B                     u3625:	
  3718  0B2B  1003               	clrc
  3719  0B2C  0CF4               	rrf	??___lbmod,f
  3720  0B2D  3EFF               	addlw	-1
  3721  0B2E  1D03               	skipz
  3722  0B2F  2B2B               	goto	u3625
  3723  0B30  0822               	movf	___lbmod@rem,w
  3724  0B31  00F5               	movwf	??___lbmod+1
  3725  0B32  0775               	addwf	??___lbmod+1,w
  3726  0B33  0474               	iorwf	??___lbmod,w
  3727  0B34  00F6               	movwf	??___lbmod+2
  3728  0B35  0876               	movf	??___lbmod+2,w
  3729  0B36  00A2               	movwf	___lbmod@rem
  3730  0B37  1003               	clrc
  3731  0B38  0DA0               	rlf	___lbmod@dividend,f
  3732  0B39  0873               	movf	___lbmod@divisor,w
  3733  0B3A  0222               	subwf	___lbmod@rem,w
  3734  0B3B  1C03               	skipc
  3735  0B3C  2B3F               	goto	l825
  3736  0B3D  0873               	movf	___lbmod@divisor,w
  3737  0B3E  02A2               	subwf	___lbmod@rem,f
  3738  0B3F                     l825:	
  3739  0B3F  3001               	movlw	1
  3740  0B40  02A1               	subwf	___lbmod@counter,f
  3741  0B41  1D03               	btfss	3,2
  3742  0B42  2B28               	goto	l4005
  3743  0B43  0822               	movf	___lbmod@rem,w
  3744  0B44  0008               	return
  3745  0B45                     __end_of___lbmod:	
  3746                           
  3747                           	psect	text14
  3748  0CF1                     __ptext14:	
  3749 ;; *************** function _Tetris_PlayerUnitBitsAreValid *****************
  3750 ;; Defined at:
  3751 ;;		line 283 in file "../Tetris/Tetris.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  player          1    wreg     PTR const struct .
  3754 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  player          1   10[BANK0 ] PTR const struct .
  3757 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      unsigned char 
  3760 ;; Registers used:
  3761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3767 ;;      Params:         0       0       0       0
  3768 ;;      Locals:         0       1       0       0
  3769 ;;      Temps:          4       0       0       0
  3770 ;;      Totals:         4       1       0       0
  3771 ;;Total ram usage:        5 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    3
  3774 ;; This function calls:
  3775 ;;		_Tetris_CountUnitBits
  3776 ;; This function is called by:
  3777 ;;		_Tetris_RotatePlayer
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           
  3782                           ;psect for function _Tetris_PlayerUnitBitsAreValid
  3783  0CF1                     _Tetris_PlayerUnitBitsAreValid:	
  3784                           
  3785                           ;incstack = 0
  3786                           ; Regs used in _Tetris_PlayerUnitBitsAreValid: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath+cstack]
  3787                           ;Tetris_PlayerUnitBitsAreValid@player stored from wreg
  3788  0CF1  1283               	bcf	3,5	;RP0=0, select bank0
  3789  0CF2  1303               	bcf	3,6	;RP1=0, select bank0
  3790  0CF3  00AA               	movwf	Tetris_PlayerUnitBitsAreValid@player
  3791                           
  3792                           ;../Tetris/Tetris.c: 283: static uint8_t Tetris_PlayerUnitBitsAreValid(const Tetris_Play
      +                          er *player);../Tetris/Tetris.c: 284: {;../Tetris/Tetris.c: 285:     return Tetris_CountU
      +                          nitBits(player->unit->bits[player->rotation])
  3793  0CF4  082A               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3794  0CF5  3E04               	addlw	4
  3795  0CF6  00F3               	movwf	Tetris_CountUnitBits@unitBits
  3796  0CF7  3000               	movlw	0
  3797  0CF8  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  3798  0CF9  158A  2656  158A   	fcall	_Tetris_CountUnitBits
  3799  0CFC  00F5               	movwf	??_Tetris_PlayerUnitBitsAreValid
  3800  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0CFF  082A               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3803  0D00  3E02               	addlw	2
  3804  0D01  0084               	movwf	4
  3805  0D02  1383               	bcf	3,7	;select IRP bank0
  3806  0D03  0800               	movf	0,w
  3807  0D04  00F6               	movwf	??_Tetris_PlayerUnitBitsAreValid+1
  3808  0D05  0A84               	incf	4,f
  3809  0D06  0800               	movf	0,w
  3810  0D07  00F7               	movwf	??_Tetris_PlayerUnitBitsAreValid+2
  3811  0D08  082A               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3812  0D09  3E0C               	addlw	12
  3813  0D0A  0084               	movwf	4
  3814  0D0B  0800               	movf	0,w
  3815  0D0C  00F8               	movwf	??_Tetris_PlayerUnitBitsAreValid+3
  3816  0D0D  3002               	movlw	2
  3817  0D0E                     u3425:	
  3818  0D0E  1003               	clrc
  3819  0D0F  0DF8               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,f
  3820  0D10  3EFF               	addlw	-1
  3821  0D11  1D03               	skipz
  3822  0D12  2D0E               	goto	u3425
  3823  0D13  1003               	clrc
  3824  0D14  0D78               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,w
  3825  0D15  3E02               	addlw	2
  3826  0D16  0776               	addwf	??_Tetris_PlayerUnitBitsAreValid+1,w
  3827  0D17  00F3               	movwf	Tetris_CountUnitBits@unitBits
  3828  0D18  0877               	movf	??_Tetris_PlayerUnitBitsAreValid+2,w
  3829  0D19  1803               	skipnc
  3830  0D1A  3E01               	addlw	1
  3831  0D1B  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  3832  0D1C  158A  2656  158A   	fcall	_Tetris_CountUnitBits
  3833  0D1F  0675               	xorwf	??_Tetris_PlayerUnitBitsAreValid,w
  3834  0D20  1D03               	btfss	3,2
  3835  0D21  2D24               	goto	u3430
  3836  0D22  3001               	movlw	1
  3837  0D23  0008               	return
  3838  0D24                     u3430:	
  3839  0D24  3000               	movlw	0
  3840  0D25  0008               	return
  3841  0D26                     __end_of_Tetris_PlayerUnitBitsAreValid:	
  3842                           
  3843                           	psect	text15
  3844  0E56                     __ptext15:	
  3845 ;; *************** function _Tetris_CountUnitBits *****************
  3846 ;; Defined at:
  3847 ;;		line 247 in file "../Tetris/Tetris.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  unitBits        2    3[COMMON] PTR const unsigned int 
  3850 ;;		 -> tetrisGame.player(13), Tetris_units.bits(32), Tetris_units(238), main@tetrisGame(63), 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  j               1    8[BANK0 ] unsigned char 
  3853 ;;  mask            2    5[BANK0 ] unsigned int 
  3854 ;;  i               1    9[BANK0 ] unsigned char 
  3855 ;;  result          1    7[BANK0 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      unsigned char 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3865 ;;      Params:         2       0       0       0
  3866 ;;      Locals:         0       5       0       0
  3867 ;;      Temps:          0       5       0       0
  3868 ;;      Totals:         2      10       0       0
  3869 ;;Total ram usage:       12 bytes
  3870 ;; Hardware stack levels used:    2
  3871 ;; Hardware stack levels required when called:    1
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_Tetris_PlayerUnitBitsAreValid
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _Tetris_CountUnitBits
  3881  0E56                     _Tetris_CountUnitBits:	
  3882                           
  3883                           ;../Tetris/Tetris.c: 247: static uint8_t Tetris_CountUnitBits(const uint16_t *unitBits);
      +                          ../Tetris/Tetris.c: 248: {;../Tetris/Tetris.c: 249:     uint8_t result = 0;
  3884                           
  3885                           ;incstack = 0
  3886                           ; Regs used in _Tetris_CountUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3887  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  3888  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  3889  0E58  01A7               	clrf	Tetris_CountUnitBits@result
  3890                           
  3891                           ;../Tetris/Tetris.c: 250:     for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  3892  0E59  01A9               	clrf	Tetris_CountUnitBits@i
  3893  0E5A                     l3663:	
  3894                           
  3895                           ;../Tetris/Tetris.c: 251:     {;../Tetris/Tetris.c: 252:         uint16_t mask = 1;
  3896  0E5A  3001               	movlw	1
  3897  0E5B  00A5               	movwf	Tetris_CountUnitBits@mask
  3898  0E5C  3000               	movlw	0
  3899  0E5D  00A6               	movwf	Tetris_CountUnitBits@mask+1
  3900                           
  3901                           ;../Tetris/Tetris.c: 253:         for (uint8_t j = 0; j < TETRIS_TABLE_WIDTH; ++j)
  3902  0E5E  01A8               	clrf	Tetris_CountUnitBits@j
  3903  0E5F                     l3671:	
  3904                           
  3905                           ;../Tetris/Tetris.c: 254:         {;../Tetris/Tetris.c: 255:             if (unitBits[i]
      +                           & mask)
  3906  0E5F  0829               	movf	Tetris_CountUnitBits@i,w
  3907  0E60  00A0               	movwf	??_Tetris_CountUnitBits
  3908  0E61  0720               	addwf	??_Tetris_CountUnitBits,w
  3909  0E62  0773               	addwf	Tetris_CountUnitBits@unitBits,w
  3910  0E63  0084               	movwf	4
  3911  0E64  0874               	movf	Tetris_CountUnitBits@unitBits+1,w
  3912  0E65  1803               	skipnc
  3913  0E66  0A74               	incf	Tetris_CountUnitBits@unitBits+1,w
  3914  0E67  00FF               	movwf	127
  3915  0E68  118A  2100  158A   	fcall	stringtab
  3916  0E6B  00A1               	movwf	??_Tetris_CountUnitBits+1
  3917  0E6C  118A  2100  158A   	fcall	stringtab
  3918  0E6F  00A2               	movwf	??_Tetris_CountUnitBits+2
  3919  0E70  0825               	movf	Tetris_CountUnitBits@mask,w
  3920  0E71  0521               	andwf	??_Tetris_CountUnitBits+1,w
  3921  0E72  00A3               	movwf	??_Tetris_CountUnitBits+3
  3922  0E73  0826               	movf	Tetris_CountUnitBits@mask+1,w
  3923  0E74  0522               	andwf	??_Tetris_CountUnitBits+2,w
  3924  0E75  00A4               	movwf	??_Tetris_CountUnitBits+4
  3925  0E76  0823               	movf	??_Tetris_CountUnitBits+3,w
  3926  0E77  0424               	iorwf	??_Tetris_CountUnitBits+4,w
  3927  0E78  1903               	btfsc	3,2
  3928  0E79  2E7E               	goto	l3675
  3929                           
  3930                           ;../Tetris/Tetris.c: 256:                 ++result;
  3931  0E7A  3001               	movlw	1
  3932  0E7B  00A0               	movwf	??_Tetris_CountUnitBits
  3933  0E7C  0820               	movf	??_Tetris_CountUnitBits,w
  3934  0E7D  07A7               	addwf	Tetris_CountUnitBits@result,f
  3935  0E7E                     l3675:	
  3936                           
  3937                           ;../Tetris/Tetris.c: 257:             mask <<= 1;
  3938  0E7E  3001               	movlw	1
  3939  0E7F                     u3185:	
  3940  0E7F  1003               	clrc
  3941  0E80  0DA5               	rlf	Tetris_CountUnitBits@mask,f
  3942  0E81  0DA6               	rlf	Tetris_CountUnitBits@mask+1,f
  3943  0E82  3EFF               	addlw	-1
  3944  0E83  1D03               	skipz
  3945  0E84  2E7F               	goto	u3185
  3946                           
  3947                           ;../Tetris/Tetris.c: 258:         }
  3948  0E85  3001               	movlw	1
  3949  0E86  00A0               	movwf	??_Tetris_CountUnitBits
  3950  0E87  0820               	movf	??_Tetris_CountUnitBits,w
  3951  0E88  07A8               	addwf	Tetris_CountUnitBits@j,f
  3952  0E89  3010               	movlw	16
  3953  0E8A  0228               	subwf	Tetris_CountUnitBits@j,w
  3954  0E8B  1C03               	skipc
  3955  0E8C  2E5F               	goto	l3671
  3956                           
  3957                           ;../Tetris/Tetris.c: 259:     }
  3958  0E8D  3001               	movlw	1
  3959  0E8E  00A0               	movwf	??_Tetris_CountUnitBits
  3960  0E8F  0820               	movf	??_Tetris_CountUnitBits,w
  3961  0E90  07A9               	addwf	Tetris_CountUnitBits@i,f
  3962  0E91  3004               	movlw	4
  3963  0E92  0229               	subwf	Tetris_CountUnitBits@i,w
  3964  0E93  1C03               	skipc
  3965  0E94  2E5A               	goto	l3663
  3966                           
  3967                           ;../Tetris/Tetris.c: 260:     return result;
  3968  0E95  0827               	movf	Tetris_CountUnitBits@result,w
  3969  0E96  0008               	return
  3970  0E97                     __end_of_Tetris_CountUnitBits:	
  3971                           
  3972                           	psect	text16
  3973  00E1                     __ptext16:	
  3974 ;; *************** function _Tetris_ResetGame *****************
  3975 ;; Defined at:
  3976 ;;		line 344 in file "../Tetris/Tetris.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  game            1    wreg     PTR struct .
  3979 ;;		 -> main@tetrisGame(63), 
  3980 ;;  playerUnit      2   34[BANK0 ] PTR const struct .
  3981 ;;		 -> Tetris_units(238), 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  game            1   36[BANK0 ] PTR struct .
  3984 ;;		 -> main@tetrisGame(63), 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3994 ;;      Params:         0       2       0       0
  3995 ;;      Locals:         0       1       0       0
  3996 ;;      Temps:          0       0       0       0
  3997 ;;      Totals:         0       3       0       0
  3998 ;;Total ram usage:        3 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    5
  4001 ;; This function calls:
  4002 ;;		_Tetris_ApplyPlayerToTable
  4003 ;;		_Tetris_ResetPlayer
  4004 ;;		_memset
  4005 ;; This function is called by:
  4006 ;;		_main
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function _Tetris_ResetGame
  4012  00E1                     _Tetris_ResetGame:	
  4013                           
  4014                           ;incstack = 0
  4015                           ; Regs used in _Tetris_ResetGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4016                           ;Tetris_ResetGame@game stored from wreg
  4017  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  4018  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  4019  00E3  00C4               	movwf	Tetris_ResetGame@game
  4020                           
  4021                           ;../Tetris/Tetris.c: 344: void Tetris_ResetGame(Tetris_Game *game, const Tetris_Unit *pl
      +                          ayerUnit);../Tetris/Tetris.c: 345: {;../Tetris/Tetris.c: 346:     memset(game, 0, sizeof
      +                           * game);
  4022  00E4  3000               	movlw	0
  4023  00E5  00F3               	movwf	memset@c
  4024  00E6  00F4               	movwf	memset@c+1
  4025  00E7  303F               	movlw	63
  4026  00E8  00F5               	movwf	memset@n
  4027  00E9  3000               	movlw	0
  4028  00EA  00F6               	movwf	memset@n+1
  4029  00EB  0844               	movf	Tetris_ResetGame@game,w
  4030  00EC  158A  21D5  118A   	fcall	_memset
  4031                           
  4032                           ;../Tetris/Tetris.c: 347:     Tetris_ResetPlayer(&game->player, playerUnit);
  4033  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  4034  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  4035  00F1  0842               	movf	Tetris_ResetGame@playerUnit,w
  4036  00F2  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  4037  00F3  0843               	movf	Tetris_ResetGame@playerUnit+1,w
  4038  00F4  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  4039  00F5  0844               	movf	Tetris_ResetGame@game,w
  4040  00F6  3E30               	addlw	48
  4041  00F7  158A  2292  118A   	fcall	_Tetris_ResetPlayer
  4042                           
  4043                           ;../Tetris/Tetris.c: 348:     Tetris_ApplyPlayerToTable(game);
  4044  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  4045  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  4046  00FC  0844               	movf	Tetris_ResetGame@game,w
  4047  00FD  118A  26C6         	fcall	_Tetris_ApplyPlayerToTable
  4048  00FF  0008               	return
  4049  0100                     __end_of_Tetris_ResetGame:	
  4050                           
  4051                           	psect	text17
  4052  0A92                     __ptext17:	
  4053 ;; *************** function _Tetris_ResetPlayer *****************
  4054 ;; Defined at:
  4055 ;;		line 295 in file "../Tetris/Tetris.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;  player          1    wreg     PTR struct .
  4058 ;;		 -> main@tetrisGame(63), 
  4059 ;;  playerUnit      2   29[BANK0 ] PTR const struct .
  4060 ;;		 -> Tetris_units(238), 
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  player          1   33[BANK0 ] PTR struct .
  4063 ;;		 -> main@tetrisGame(63), 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4073 ;;      Params:         0       2       0       0
  4074 ;;      Locals:         0       1       0       0
  4075 ;;      Temps:          0       2       0       0
  4076 ;;      Totals:         0       5       0       0
  4077 ;;Total ram usage:        5 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    4
  4080 ;; This function calls:
  4081 ;;		_Tetris_SetPlayerUnit
  4082 ;; This function is called by:
  4083 ;;		_Tetris_ResetGame
  4084 ;;		_Tetris_UpdateGame
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function _Tetris_ResetPlayer
  4090  0A92                     _Tetris_ResetPlayer:	
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in _Tetris_ResetPlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4094                           ;Tetris_ResetPlayer@player stored from wreg
  4095  0A92  1283               	bcf	3,5	;RP0=0, select bank0
  4096  0A93  1303               	bcf	3,6	;RP1=0, select bank0
  4097  0A94  00C1               	movwf	Tetris_ResetPlayer@player
  4098                           
  4099                           ;../Tetris/Tetris.c: 295: static void Tetris_ResetPlayer(Tetris_Player *player, const Te
      +                          tris_Unit *playerUnit);../Tetris/Tetris.c: 296: {;../Tetris/Tetris.c: 297:     player->p
      +                          osition = Tetris_playerStartingPosition;
  4100  0A95  3082               	movlw	low (_Tetris_playerStartingPosition| (0+32768))
  4101  0A96  0084               	movwf	4
  4102  0A97  3081               	movlw	high (_Tetris_playerStartingPosition| (0+32768))
  4103  0A98  00FF               	movwf	127
  4104  0A99  118A  2100  158A   	fcall	stringtab
  4105  0A9C  00BF               	movwf	??_Tetris_ResetPlayer
  4106  0A9D  118A  2100  158A   	fcall	stringtab
  4107  0AA0  00C0               	movwf	??_Tetris_ResetPlayer+1
  4108  0AA1  0841               	movf	Tetris_ResetPlayer@player,w
  4109  0AA2  0084               	movwf	4
  4110  0AA3  083F               	movf	??_Tetris_ResetPlayer,w
  4111  0AA4  1383               	bcf	3,7	;select IRP bank0
  4112  0AA5  0080               	movwf	0
  4113  0AA6  0A84               	incf	4,f
  4114  0AA7  0840               	movf	??_Tetris_ResetPlayer+1,w
  4115  0AA8  0080               	movwf	0
  4116                           
  4117                           ;../Tetris/Tetris.c: 298:     player->rotation = 0;
  4118  0AA9  0841               	movf	Tetris_ResetPlayer@player,w
  4119  0AAA  3E0C               	addlw	12
  4120  0AAB  0084               	movwf	4
  4121  0AAC  0180               	clrf	0
  4122                           
  4123                           ;../Tetris/Tetris.c: 299:     Tetris_SetPlayerUnit(player, playerUnit);
  4124  0AAD  083D               	movf	Tetris_ResetPlayer@playerUnit,w
  4125  0AAE  00AA               	movwf	Tetris_SetPlayerUnit@unit
  4126  0AAF  083E               	movf	Tetris_ResetPlayer@playerUnit+1,w
  4127  0AB0  00AB               	movwf	Tetris_SetPlayerUnit@unit+1
  4128  0AB1  0841               	movf	Tetris_ResetPlayer@player,w
  4129  0AB2  158A  2151         	fcall	_Tetris_SetPlayerUnit
  4130  0AB4  0008               	return
  4131  0AB5                     __end_of_Tetris_ResetPlayer:	
  4132                           
  4133                           	psect	text18
  4134  0951                     __ptext18:	
  4135 ;; *************** function _Tetris_SetPlayerUnit *****************
  4136 ;; Defined at:
  4137 ;;		line 289 in file "../Tetris/Tetris.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  player          1    wreg     PTR struct .
  4140 ;;		 -> main@tetrisGame(63), 
  4141 ;;  unit            2   10[BANK0 ] PTR const struct .
  4142 ;;		 -> Tetris_units(238), 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;  player          1    8[COMMON] PTR struct .
  4145 ;;		 -> main@tetrisGame(63), 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4155 ;;      Params:         0       2       0       0
  4156 ;;      Locals:         1       0       0       0
  4157 ;;      Temps:          0       0       0       0
  4158 ;;      Totals:         1       2       0       0
  4159 ;;Total ram usage:        3 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    3
  4162 ;; This function calls:
  4163 ;;		_Tetris_UpdatePlayerUnitBits
  4164 ;; This function is called by:
  4165 ;;		_Tetris_ResetPlayer
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           
  4170                           ;psect for function _Tetris_SetPlayerUnit
  4171  0951                     _Tetris_SetPlayerUnit:	
  4172                           
  4173                           ;incstack = 0
  4174                           ; Regs used in _Tetris_SetPlayerUnit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4175                           ;Tetris_SetPlayerUnit@player stored from wreg
  4176  0951  00F8               	movwf	Tetris_SetPlayerUnit@player
  4177                           
  4178                           ;../Tetris/Tetris.c: 289: static void Tetris_SetPlayerUnit(Tetris_Player *player, const 
      +                          Tetris_Unit *unit);../Tetris/Tetris.c: 290: {;../Tetris/Tetris.c: 291:     player->unit 
      +                          = unit;
  4179  0952  0878               	movf	Tetris_SetPlayerUnit@player,w
  4180  0953  3E02               	addlw	2
  4181  0954  0084               	movwf	4
  4182  0955  1283               	bcf	3,5	;RP0=0, select bank0
  4183  0956  1303               	bcf	3,6	;RP1=0, select bank0
  4184  0957  082A               	movf	Tetris_SetPlayerUnit@unit,w
  4185  0958  1383               	bcf	3,7	;select IRP bank0
  4186  0959  0080               	movwf	0
  4187  095A  0A84               	incf	4,f
  4188  095B  082B               	movf	Tetris_SetPlayerUnit@unit+1,w
  4189  095C  0080               	movwf	0
  4190                           
  4191                           ;../Tetris/Tetris.c: 292:     Tetris_UpdatePlayerUnitBits(player);
  4192  095D  0878               	movf	Tetris_SetPlayerUnit@player,w
  4193  095E  118A  252C         	fcall	_Tetris_UpdatePlayerUnitBits
  4194  0960  0008               	return
  4195  0961                     __end_of_Tetris_SetPlayerUnit:	
  4196                           
  4197                           	psect	text19
  4198  052C                     __ptext19:	
  4199 ;; *************** function _Tetris_UpdatePlayerUnitBits *****************
  4200 ;; Defined at:
  4201 ;;		line 263 in file "../Tetris/Tetris.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  player          1    wreg     PTR struct .
  4204 ;;		 -> main@tetrisGame(63), 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  player          1    7[COMMON] PTR struct .
  4207 ;;		 -> main@tetrisGame(63), 
  4208 ;;  i               1    4[COMMON] unsigned char 
  4209 ;;  i               1    3[COMMON] unsigned char 
  4210 ;;  i               1    5[COMMON] unsigned char 
  4211 ;;  shift           1    6[COMMON] char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4221 ;;      Params:         0       0       0       0
  4222 ;;      Locals:         5       0       0       0
  4223 ;;      Temps:          0      10       0       0
  4224 ;;      Totals:         5      10       0       0
  4225 ;;Total ram usage:       15 bytes
  4226 ;; Hardware stack levels used:    2
  4227 ;; Hardware stack levels required when called:    1
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_Tetris_SetPlayerUnit
  4232 ;;		_Tetris_RotatePlayer
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function _Tetris_UpdatePlayerUnitBits
  4238  052C                     _Tetris_UpdatePlayerUnitBits:	
  4239                           
  4240                           ;incstack = 0
  4241                           ; Regs used in _Tetris_UpdatePlayerUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h]
  4242                           ;Tetris_UpdatePlayerUnitBits@player stored from wreg
  4243  052C  00F7               	movwf	Tetris_UpdatePlayerUnitBits@player
  4244                           
  4245                           ;../Tetris/Tetris.c: 263: static void Tetris_UpdatePlayerUnitBits(Tetris_Player *player)
      +                          ;../Tetris/Tetris.c: 264: {;../Tetris/Tetris.c: 265:     for (uint8_t i = 0; i < TETRIS_
      +                          UNIT_HEIGHT; ++i)
  4246  052D  01F5               	clrf	Tetris_UpdatePlayerUnitBits@i
  4247  052E                     l2367:	
  4248                           
  4249                           ;../Tetris/Tetris.c: 266:         player->unitBits[i] = player->unit->bits[player->rotat
      +                          ion][i];
  4250  052E  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4251  052F  3E02               	addlw	2
  4252  0530  0084               	movwf	4
  4253  0531  1383               	bcf	3,7	;select IRP bank0
  4254  0532  0800               	movf	0,w
  4255  0533  1283               	bcf	3,5	;RP0=0, select bank0
  4256  0534  1303               	bcf	3,6	;RP1=0, select bank0
  4257  0535  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4258  0536  0A84               	incf	4,f
  4259  0537  0800               	movf	0,w
  4260  0538  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4261  0539  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4262  053A  3E0C               	addlw	12
  4263  053B  0084               	movwf	4
  4264  053C  0800               	movf	0,w
  4265  053D  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  4266  053E  3002               	movlw	2
  4267  053F                     u1555:	
  4268  053F  1003               	clrc
  4269  0540  0DA2               	rlf	??_Tetris_UpdatePlayerUnitBits+2,f
  4270  0541  3EFF               	addlw	-1
  4271  0542  1D03               	skipz
  4272  0543  2D3F               	goto	u1555
  4273  0544  1003               	clrc
  4274  0545  0D22               	rlf	??_Tetris_UpdatePlayerUnitBits+2,w
  4275  0546  3E02               	addlw	2
  4276  0547  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4277  0548  00A3               	movwf	??_Tetris_UpdatePlayerUnitBits+3
  4278  0549  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4279  054A  1803               	skipnc
  4280  054B  3E01               	addlw	1
  4281  054C  00A4               	movwf	??_Tetris_UpdatePlayerUnitBits+4
  4282  054D  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  4283  054E  00A5               	movwf	??_Tetris_UpdatePlayerUnitBits+5
  4284  054F  0725               	addwf	??_Tetris_UpdatePlayerUnitBits+5,w
  4285  0550  0723               	addwf	??_Tetris_UpdatePlayerUnitBits+3,w
  4286  0551  0084               	movwf	4
  4287  0552  0824               	movf	??_Tetris_UpdatePlayerUnitBits+4,w
  4288  0553  1803               	skipnc
  4289  0554  0A24               	incf	??_Tetris_UpdatePlayerUnitBits+4,w
  4290  0555  00FF               	movwf	127
  4291  0556  118A  2100  118A   	fcall	stringtab
  4292  0559  00A6               	movwf	??_Tetris_UpdatePlayerUnitBits+6
  4293  055A  118A  2100  118A   	fcall	stringtab
  4294  055D  00A7               	movwf	??_Tetris_UpdatePlayerUnitBits+7
  4295  055E  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  4296  055F  00A8               	movwf	??_Tetris_UpdatePlayerUnitBits+8
  4297  0560  0728               	addwf	??_Tetris_UpdatePlayerUnitBits+8,w
  4298  0561  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4299  0562  00A9               	movwf	??_Tetris_UpdatePlayerUnitBits+9
  4300  0563  0829               	movf	??_Tetris_UpdatePlayerUnitBits+9,w
  4301  0564  3E04               	addlw	4
  4302  0565  0084               	movwf	4
  4303  0566  0826               	movf	??_Tetris_UpdatePlayerUnitBits+6,w
  4304  0567  1383               	bcf	3,7	;select IRP bank0
  4305  0568  0080               	movwf	0
  4306  0569  0A84               	incf	4,f
  4307  056A  0827               	movf	??_Tetris_UpdatePlayerUnitBits+7,w
  4308  056B  0080               	movwf	0
  4309  056C  3001               	movlw	1
  4310  056D  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4311  056E  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4312  056F  07F5               	addwf	Tetris_UpdatePlayerUnitBits@i,f
  4313  0570  3004               	movlw	4
  4314  0571  0275               	subwf	Tetris_UpdatePlayerUnitBits@i,w
  4315  0572  1C03               	skipc
  4316  0573  2D2E               	goto	l2367
  4317                           
  4318                           ;../Tetris/Tetris.c: 268:     int8_t shift = 8 - player->position.x + Tetris_unitPivot.x
      +                          ;
  4319  0574  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4320  0575  0084               	movwf	4
  4321  0576  0800               	movf	0,w
  4322  0577  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4323  0578  3084               	movlw	low (_Tetris_unitPivot| (0+32768))
  4324  0579  0084               	movwf	4
  4325  057A  3081               	movlw	high (_Tetris_unitPivot| (0+32768))
  4326  057B  00FF               	movwf	127
  4327  057C  118A  2100  118A   	fcall	stringtab
  4328  057F  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4329  0580  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4330  0581  0221               	subwf	??_Tetris_UpdatePlayerUnitBits+1,w
  4331  0582  3E08               	addlw	8
  4332  0583  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  4333  0584  0822               	movf	??_Tetris_UpdatePlayerUnitBits+2,w
  4334  0585  00F6               	movwf	Tetris_UpdatePlayerUnitBits@shift
  4335                           
  4336                           ;../Tetris/Tetris.c: 270:     if (shift > 0)
  4337  0586  0876               	movf	Tetris_UpdatePlayerUnitBits@shift,w
  4338  0587  3A80               	xorlw	128
  4339  0588  3E7F               	addlw	-129
  4340  0589  1C03               	skipc
  4341  058A  2DA8               	goto	l2389
  4342                           
  4343                           ;../Tetris/Tetris.c: 271:     {;../Tetris/Tetris.c: 272:         for (uint8_t i = 0; i <
      +                           TETRIS_UNIT_HEIGHT; ++i)
  4344  058B  01F3               	clrf	Tetris_UpdatePlayerUnitBits@i_381
  4345  058C                     l2383:	
  4346                           
  4347                           ;../Tetris/Tetris.c: 273:             player->unitBits[i] <<= shift;
  4348  058C  0873               	movf	Tetris_UpdatePlayerUnitBits@i_381,w
  4349  058D  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4350  058E  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4351  058F  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4352  0590  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4353  0591  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4354  0592  3E04               	addlw	4
  4355  0593  0084               	movwf	4
  4356  0594  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  4357  0595  1383               	bcf	3,7	;select IRP bank0
  4358  0596  2D9C               	goto	u1580
  4359  0597                     u1585:	
  4360  0597  1003               	clrc
  4361  0598  0D80               	rlf	0,f
  4362  0599  0A84               	incf	4,f
  4363  059A  0D80               	rlf	0,f
  4364  059B  0384               	decf	4,f
  4365  059C                     u1580:	
  4366  059C  3EFF               	addlw	-1
  4367  059D  1D03               	skipz
  4368  059E  2D97               	goto	u1585
  4369  059F  3001               	movlw	1
  4370  05A0  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4371  05A1  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4372  05A2  07F3               	addwf	Tetris_UpdatePlayerUnitBits@i_381,f
  4373  05A3  3004               	movlw	4
  4374  05A4  0273               	subwf	Tetris_UpdatePlayerUnitBits@i_381,w
  4375  05A5  1803               	btfsc	3,0
  4376  05A6  0008               	return
  4377  05A7  2D8C               	goto	l2383
  4378  05A8                     l2389:	
  4379                           
  4380                           ;../Tetris/Tetris.c: 276:     {;../Tetris/Tetris.c: 277:         shift = -shift;
  4381  05A8  09F6               	comf	Tetris_UpdatePlayerUnitBits@shift,f
  4382  05A9  0AF6               	incf	Tetris_UpdatePlayerUnitBits@shift,f
  4383                           
  4384                           ;../Tetris/Tetris.c: 278:         for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4385  05AA  01F4               	clrf	Tetris_UpdatePlayerUnitBits@i_382
  4386  05AB                     l2397:	
  4387                           
  4388                           ;../Tetris/Tetris.c: 279:             player->unitBits[i] >>= shift;
  4389  05AB  0874               	movf	Tetris_UpdatePlayerUnitBits@i_382,w
  4390  05AC  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4391  05AD  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4392  05AE  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4393  05AF  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4394  05B0  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4395  05B1  3E04               	addlw	4
  4396  05B2  0084               	movwf	4
  4397  05B3  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  4398  05B4  1383               	bcf	3,7	;select IRP bank0
  4399  05B5  2DBB               	goto	u1600
  4400  05B6                     u1605:	
  4401  05B6  0A84               	incf	4,f
  4402  05B7  1003               	clrc
  4403  05B8  0C80               	rrf	0,f
  4404  05B9  0384               	decf	4,f
  4405  05BA  0C80               	rrf	0,f
  4406  05BB                     u1600:	
  4407  05BB  3EFF               	addlw	-1
  4408  05BC  1D03               	skipz
  4409  05BD  2DB6               	goto	u1605
  4410  05BE  3001               	movlw	1
  4411  05BF  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4412  05C0  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4413  05C1  07F4               	addwf	Tetris_UpdatePlayerUnitBits@i_382,f
  4414  05C2  3004               	movlw	4
  4415  05C3  0274               	subwf	Tetris_UpdatePlayerUnitBits@i_382,w
  4416  05C4  1803               	btfsc	3,0
  4417  05C5  0008               	return
  4418  05C6  2DAB               	goto	l2397
  4419  05C7                     __end_of_Tetris_UpdatePlayerUnitBits:	
  4420                           
  4421                           	psect	text20
  4422  0791                     __ptext20:	
  4423 ;; *************** function _Tetris_MovePlayerRight *****************
  4424 ;; Defined at:
  4425 ;;		line 430 in file "../Tetris/Tetris.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  game            1    wreg     PTR struct .
  4428 ;;		 -> main@tetrisGame(63), 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  game            1   16[BANK0 ] PTR struct .
  4431 ;;		 -> main@tetrisGame(63), 
  4432 ;;  i               1   15[BANK0 ] unsigned char 
  4433 ;;  i               1   14[BANK0 ] unsigned char 
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      void 
  4436 ;; Registers used:
  4437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4443 ;;      Params:         0       0       0       0
  4444 ;;      Locals:         0       3       0       0
  4445 ;;      Temps:          0       2       0       0
  4446 ;;      Totals:         0       5       0       0
  4447 ;;Total ram usage:        5 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    4
  4450 ;; This function calls:
  4451 ;;		_Tetris_ApplyPlayerToTable
  4452 ;;		_Tetris_PlayerOverlapsEnvironment
  4453 ;;		_Tetris_PlayerTouchingRightBound
  4454 ;;		_Tetris_RemovePlayerFromTable
  4455 ;; This function is called by:
  4456 ;;		_main
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           
  4461                           ;psect for function _Tetris_MovePlayerRight
  4462  0791                     _Tetris_MovePlayerRight:	
  4463                           
  4464                           ;incstack = 0
  4465                           ; Regs used in _Tetris_MovePlayerRight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  4466                           ;Tetris_MovePlayerRight@game stored from wreg
  4467  0791  1283               	bcf	3,5	;RP0=0, select bank0
  4468  0792  1303               	bcf	3,6	;RP1=0, select bank0
  4469  0793  00B0               	movwf	Tetris_MovePlayerRight@game
  4470                           
  4471                           ;../Tetris/Tetris.c: 430: void Tetris_MovePlayerRight(Tetris_Game *game);../Tetris/Tetri
      +                          s.c: 431: {;../Tetris/Tetris.c: 432:     if (Tetris_PlayerTouchingRightBound(&game->play
      +                          er))
  4472  0794  0830               	movf	Tetris_MovePlayerRight@game,w
  4473  0795  3E30               	addlw	48
  4474  0796  158A  2211  118A   	fcall	_Tetris_PlayerTouchingRightBound
  4475  0799  3A00               	xorlw	0
  4476  079A  1D03               	btfss	3,2
  4477  079B  0008               	return
  4478                           
  4479                           ;../Tetris/Tetris.c: 435:     Tetris_RemovePlayerFromTable(game);
  4480  079C  1283               	bcf	3,5	;RP0=0, select bank0
  4481  079D  1303               	bcf	3,6	;RP1=0, select bank0
  4482  079E  0830               	movf	Tetris_MovePlayerRight@game,w
  4483  079F  158A  2526  118A   	fcall	_Tetris_RemovePlayerFromTable
  4484                           
  4485                           ;../Tetris/Tetris.c: 437:     for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4486  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  4487  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  4488  07A4  01AE               	clrf	Tetris_MovePlayerRight@i
  4489  07A5                     l4203:	
  4490                           
  4491                           ;../Tetris/Tetris.c: 438:         game->player.unitBits[i] >>= 1;
  4492  07A5  082E               	movf	Tetris_MovePlayerRight@i,w
  4493  07A6  00AC               	movwf	??_Tetris_MovePlayerRight
  4494  07A7  072C               	addwf	??_Tetris_MovePlayerRight,w
  4495  07A8  0730               	addwf	Tetris_MovePlayerRight@game,w
  4496  07A9  00AD               	movwf	??_Tetris_MovePlayerRight+1
  4497  07AA  082D               	movf	??_Tetris_MovePlayerRight+1,w
  4498  07AB  3E34               	addlw	52
  4499  07AC  0084               	movwf	4
  4500  07AD  0A84               	incf	4,f
  4501  07AE  1003               	clrc
  4502  07AF  1383               	bcf	3,7	;select IRP bank0
  4503  07B0  0C80               	rrf	0,f
  4504  07B1  0384               	decf	4,f
  4505  07B2  0C80               	rrf	0,f
  4506  07B3  3001               	movlw	1
  4507  07B4  00AC               	movwf	??_Tetris_MovePlayerRight
  4508  07B5  082C               	movf	??_Tetris_MovePlayerRight,w
  4509  07B6  07AE               	addwf	Tetris_MovePlayerRight@i,f
  4510  07B7  3004               	movlw	4
  4511  07B8  022E               	subwf	Tetris_MovePlayerRight@i,w
  4512  07B9  1C03               	skipc
  4513  07BA  2FA5               	goto	l4203
  4514                           
  4515                           ;../Tetris/Tetris.c: 440:     if (Tetris_PlayerOverlapsEnvironment(game))
  4516  07BB  0830               	movf	Tetris_MovePlayerRight@game,w
  4517  07BC  158A  2615  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  4518  07BF  3A00               	xorlw	0
  4519  07C0  1903               	skipnz
  4520  07C1  2FDC               	goto	l4223
  4521                           
  4522                           ;../Tetris/Tetris.c: 441:     {;../Tetris/Tetris.c: 442:         for (uint8_t i = 0; i <
      +                           TETRIS_UNIT_HEIGHT; ++i)
  4523  07C2  1283               	bcf	3,5	;RP0=0, select bank0
  4524  07C3  1303               	bcf	3,6	;RP1=0, select bank0
  4525  07C4  01AF               	clrf	Tetris_MovePlayerRight@i_510
  4526  07C5                     l4217:	
  4527                           
  4528                           ;../Tetris/Tetris.c: 443:             game->player.unitBits[i] <<= 1;
  4529  07C5  082F               	movf	Tetris_MovePlayerRight@i_510,w
  4530  07C6  00AC               	movwf	??_Tetris_MovePlayerRight
  4531  07C7  072C               	addwf	??_Tetris_MovePlayerRight,w
  4532  07C8  0730               	addwf	Tetris_MovePlayerRight@game,w
  4533  07C9  00AD               	movwf	??_Tetris_MovePlayerRight+1
  4534  07CA  082D               	movf	??_Tetris_MovePlayerRight+1,w
  4535  07CB  3E34               	addlw	52
  4536  07CC  0084               	movwf	4
  4537  07CD  1003               	clrc
  4538  07CE  1383               	bcf	3,7	;select IRP bank0
  4539  07CF  0D80               	rlf	0,f
  4540  07D0  0A84               	incf	4,f
  4541  07D1  0D80               	rlf	0,f
  4542  07D2  0384               	decf	4,f
  4543  07D3  3001               	movlw	1
  4544  07D4  00AC               	movwf	??_Tetris_MovePlayerRight
  4545  07D5  082C               	movf	??_Tetris_MovePlayerRight,w
  4546  07D6  07AF               	addwf	Tetris_MovePlayerRight@i_510,f
  4547  07D7  3004               	movlw	4
  4548  07D8  022F               	subwf	Tetris_MovePlayerRight@i_510,w
  4549  07D9  1803               	btfsc	3,0
  4550  07DA  2FE6               	goto	l4225
  4551  07DB  2FC5               	goto	l4217
  4552  07DC                     l4223:	
  4553                           
  4554                           ;../Tetris/Tetris.c: 446:     {;../Tetris/Tetris.c: 447:         ++game->player.position
      +                          .x;
  4555  07DC  3001               	movlw	1
  4556  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  4557  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  4558  07DF  00AC               	movwf	??_Tetris_MovePlayerRight
  4559  07E0  0830               	movf	Tetris_MovePlayerRight@game,w
  4560  07E1  3E30               	addlw	48
  4561  07E2  0084               	movwf	4
  4562  07E3  082C               	movf	??_Tetris_MovePlayerRight,w
  4563  07E4  1383               	bcf	3,7	;select IRP bank0
  4564  07E5  0780               	addwf	0,f
  4565  07E6                     l4225:	
  4566                           
  4567                           ;../Tetris/Tetris.c: 450:     Tetris_ApplyPlayerToTable(game);
  4568  07E6  0830               	movf	Tetris_MovePlayerRight@game,w
  4569  07E7  118A  26C6         	fcall	_Tetris_ApplyPlayerToTable
  4570  07E9  0008               	return
  4571  07EA                     __end_of_Tetris_MovePlayerRight:	
  4572                           
  4573                           	psect	text21
  4574  0A11                     __ptext21:	
  4575 ;; *************** function _Tetris_PlayerTouchingRightBound *****************
  4576 ;; Defined at:
  4577 ;;		line 208 in file "../Tetris/Tetris.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  player          1    wreg     PTR struct .
  4580 ;;		 -> main@tetrisGame(63), 
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  player          1    7[COMMON] PTR struct .
  4583 ;;		 -> main@tetrisGame(63), 
  4584 ;;  i               1    8[COMMON] unsigned char 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      unsigned char 
  4587 ;; Registers used:
  4588 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4594 ;;      Params:         0       0       0       0
  4595 ;;      Locals:         2       0       0       0
  4596 ;;      Temps:          4       0       0       0
  4597 ;;      Totals:         6       0       0       0
  4598 ;;Total ram usage:        6 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    1
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_Tetris_MovePlayerRight
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           
  4609                           ;psect for function _Tetris_PlayerTouchingRightBound
  4610  0A11                     _Tetris_PlayerTouchingRightBound:	
  4611                           
  4612                           ;incstack = 0
  4613                           ; Regs used in _Tetris_PlayerTouchingRightBound: [wreg-fsr0h+status,2+status,0]
  4614                           ;Tetris_PlayerTouchingRightBound@player stored from wreg
  4615  0A11  00F7               	movwf	Tetris_PlayerTouchingRightBound@player
  4616                           
  4617                           ;../Tetris/Tetris.c: 208: static uint8_t Tetris_PlayerTouchingRightBound(Tetris_Player *
      +                          player);../Tetris/Tetris.c: 209: {;../Tetris/Tetris.c: 210:     for (uint8_t i = 0; i < 
      +                          TETRIS_UNIT_HEIGHT; ++i)
  4618  0A12  01F8               	clrf	Tetris_PlayerTouchingRightBound@i
  4619  0A13                     l2817:	
  4620                           
  4621                           ;../Tetris/Tetris.c: 211:     {;../Tetris/Tetris.c: 212:         if (player->unitBits[i]
      +                           & 0x0001)
  4622  0A13  0878               	movf	Tetris_PlayerTouchingRightBound@i,w
  4623  0A14  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  4624  0A15  0773               	addwf	??_Tetris_PlayerTouchingRightBound,w
  4625  0A16  0777               	addwf	Tetris_PlayerTouchingRightBound@player,w
  4626  0A17  00F4               	movwf	??_Tetris_PlayerTouchingRightBound+1
  4627  0A18  0874               	movf	??_Tetris_PlayerTouchingRightBound+1,w
  4628  0A19  3E04               	addlw	4
  4629  0A1A  0084               	movwf	4
  4630  0A1B  1383               	bcf	3,7	;select IRP bank0
  4631  0A1C  0800               	movf	0,w
  4632  0A1D  00F5               	movwf	??_Tetris_PlayerTouchingRightBound+2
  4633  0A1E  0A84               	incf	4,f
  4634  0A1F  0800               	movf	0,w
  4635  0A20  00F6               	movwf	??_Tetris_PlayerTouchingRightBound+3
  4636  0A21  1C75               	btfss	??_Tetris_PlayerTouchingRightBound+2,0
  4637  0A22  2A25               	goto	l2823
  4638                           
  4639                           ;../Tetris/Tetris.c: 213:             return 1;
  4640  0A23  3001               	movlw	1
  4641  0A24  0008               	return
  4642  0A25                     l2823:	
  4643                           
  4644                           ;../Tetris/Tetris.c: 214:     }
  4645  0A25  3001               	movlw	1
  4646  0A26  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  4647  0A27  0873               	movf	??_Tetris_PlayerTouchingRightBound,w
  4648  0A28  07F8               	addwf	Tetris_PlayerTouchingRightBound@i,f
  4649  0A29  3004               	movlw	4
  4650  0A2A  0278               	subwf	Tetris_PlayerTouchingRightBound@i,w
  4651  0A2B  1C03               	skipc
  4652  0A2C  2A13               	goto	l2817
  4653                           
  4654                           ;../Tetris/Tetris.c: 216:     return 0;
  4655  0A2D  3000               	movlw	0
  4656  0A2E  0008               	return
  4657  0A2F                     __end_of_Tetris_PlayerTouchingRightBound:	
  4658                           
  4659                           	psect	text22
  4660  008A                     __ptext22:	
  4661 ;; *************** function _Tetris_MovePlayerLeft *****************
  4662 ;; Defined at:
  4663 ;;		line 407 in file "../Tetris/Tetris.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  game            1    wreg     PTR struct .
  4666 ;;		 -> main@tetrisGame(63), 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  game            1   16[BANK0 ] PTR struct .
  4669 ;;		 -> main@tetrisGame(63), 
  4670 ;;  i               1   15[BANK0 ] unsigned char 
  4671 ;;  i               1   14[BANK0 ] unsigned char 
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4681 ;;      Params:         0       0       0       0
  4682 ;;      Locals:         0       3       0       0
  4683 ;;      Temps:          0       2       0       0
  4684 ;;      Totals:         0       5       0       0
  4685 ;;Total ram usage:        5 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:    4
  4688 ;; This function calls:
  4689 ;;		_Tetris_ApplyPlayerToTable
  4690 ;;		_Tetris_PlayerOverlapsEnvironment
  4691 ;;		_Tetris_PlayerTouchingLeftBound
  4692 ;;		_Tetris_RemovePlayerFromTable
  4693 ;; This function is called by:
  4694 ;;		_main
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           
  4699                           ;psect for function _Tetris_MovePlayerLeft
  4700  008A                     _Tetris_MovePlayerLeft:	
  4701                           
  4702                           ;incstack = 0
  4703                           ; Regs used in _Tetris_MovePlayerLeft: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  4704                           ;Tetris_MovePlayerLeft@game stored from wreg
  4705  008A  1283               	bcf	3,5	;RP0=0, select bank0
  4706  008B  1303               	bcf	3,6	;RP1=0, select bank0
  4707  008C  00B0               	movwf	Tetris_MovePlayerLeft@game
  4708                           
  4709                           ;../Tetris/Tetris.c: 407: void Tetris_MovePlayerLeft(Tetris_Game *game);../Tetris/Tetris
      +                          .c: 408: {;../Tetris/Tetris.c: 409:     if (Tetris_PlayerTouchingLeftBound(&game->player
      +                          ))
  4710  008D  0830               	movf	Tetris_MovePlayerLeft@game,w
  4711  008E  3E30               	addlw	48
  4712  008F  158A  21F3  118A   	fcall	_Tetris_PlayerTouchingLeftBound
  4713  0092  3A00               	xorlw	0
  4714  0093  1D03               	btfss	3,2
  4715  0094  0008               	return
  4716                           
  4717                           ;../Tetris/Tetris.c: 412:     Tetris_RemovePlayerFromTable(game);
  4718  0095  1283               	bcf	3,5	;RP0=0, select bank0
  4719  0096  1303               	bcf	3,6	;RP1=0, select bank0
  4720  0097  0830               	movf	Tetris_MovePlayerLeft@game,w
  4721  0098  158A  2526  118A   	fcall	_Tetris_RemovePlayerFromTable
  4722                           
  4723                           ;../Tetris/Tetris.c: 414:     for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4724  009B  1283               	bcf	3,5	;RP0=0, select bank0
  4725  009C  1303               	bcf	3,6	;RP1=0, select bank0
  4726  009D  01AE               	clrf	Tetris_MovePlayerLeft@i
  4727  009E                     l4167:	
  4728                           
  4729                           ;../Tetris/Tetris.c: 415:         game->player.unitBits[i] <<= 1;
  4730  009E  082E               	movf	Tetris_MovePlayerLeft@i,w
  4731  009F  00AC               	movwf	??_Tetris_MovePlayerLeft
  4732  00A0  072C               	addwf	??_Tetris_MovePlayerLeft,w
  4733  00A1  0730               	addwf	Tetris_MovePlayerLeft@game,w
  4734  00A2  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  4735  00A3  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  4736  00A4  3E34               	addlw	52
  4737  00A5  0084               	movwf	4
  4738  00A6  1003               	clrc
  4739  00A7  1383               	bcf	3,7	;select IRP bank0
  4740  00A8  0D80               	rlf	0,f
  4741  00A9  0A84               	incf	4,f
  4742  00AA  0D80               	rlf	0,f
  4743  00AB  0384               	decf	4,f
  4744  00AC  3001               	movlw	1
  4745  00AD  00AC               	movwf	??_Tetris_MovePlayerLeft
  4746  00AE  082C               	movf	??_Tetris_MovePlayerLeft,w
  4747  00AF  07AE               	addwf	Tetris_MovePlayerLeft@i,f
  4748  00B0  3004               	movlw	4
  4749  00B1  022E               	subwf	Tetris_MovePlayerLeft@i,w
  4750  00B2  1C03               	skipc
  4751  00B3  289E               	goto	l4167
  4752                           
  4753                           ;../Tetris/Tetris.c: 417:     if (Tetris_PlayerOverlapsEnvironment(game))
  4754  00B4  0830               	movf	Tetris_MovePlayerLeft@game,w
  4755  00B5  158A  2615  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  4756  00B8  3A00               	xorlw	0
  4757  00B9  1903               	skipnz
  4758  00BA  28D5               	goto	l4187
  4759                           
  4760                           ;../Tetris/Tetris.c: 418:     {;../Tetris/Tetris.c: 419:         for (uint8_t i = 0; i <
      +                           TETRIS_UNIT_HEIGHT; ++i)
  4761  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  4762  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  4763  00BD  01AF               	clrf	Tetris_MovePlayerLeft@i_496
  4764  00BE                     l4181:	
  4765                           
  4766                           ;../Tetris/Tetris.c: 420:             game->player.unitBits[i] >>= 1;
  4767  00BE  082F               	movf	Tetris_MovePlayerLeft@i_496,w
  4768  00BF  00AC               	movwf	??_Tetris_MovePlayerLeft
  4769  00C0  072C               	addwf	??_Tetris_MovePlayerLeft,w
  4770  00C1  0730               	addwf	Tetris_MovePlayerLeft@game,w
  4771  00C2  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  4772  00C3  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  4773  00C4  3E34               	addlw	52
  4774  00C5  0084               	movwf	4
  4775  00C6  0A84               	incf	4,f
  4776  00C7  1003               	clrc
  4777  00C8  1383               	bcf	3,7	;select IRP bank0
  4778  00C9  0C80               	rrf	0,f
  4779  00CA  0384               	decf	4,f
  4780  00CB  0C80               	rrf	0,f
  4781  00CC  3001               	movlw	1
  4782  00CD  00AC               	movwf	??_Tetris_MovePlayerLeft
  4783  00CE  082C               	movf	??_Tetris_MovePlayerLeft,w
  4784  00CF  07AF               	addwf	Tetris_MovePlayerLeft@i_496,f
  4785  00D0  3004               	movlw	4
  4786  00D1  022F               	subwf	Tetris_MovePlayerLeft@i_496,w
  4787  00D2  1803               	btfsc	3,0
  4788  00D3  28DD               	goto	l4189
  4789  00D4  28BE               	goto	l4181
  4790  00D5                     l4187:	
  4791                           
  4792                           ;../Tetris/Tetris.c: 423:     {;../Tetris/Tetris.c: 424:         --game->player.position
      +                          .x;
  4793  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  4794  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  4795  00D7  0830               	movf	Tetris_MovePlayerLeft@game,w
  4796  00D8  3E30               	addlw	48
  4797  00D9  0084               	movwf	4
  4798  00DA  3001               	movlw	1
  4799  00DB  1383               	bcf	3,7	;select IRP bank0
  4800  00DC  0280               	subwf	0,f
  4801  00DD                     l4189:	
  4802                           
  4803                           ;../Tetris/Tetris.c: 427:     Tetris_ApplyPlayerToTable(game);
  4804  00DD  0830               	movf	Tetris_MovePlayerLeft@game,w
  4805  00DE  118A  26C6         	fcall	_Tetris_ApplyPlayerToTable
  4806  00E0  0008               	return
  4807  00E1                     __end_of_Tetris_MovePlayerLeft:	
  4808                           
  4809                           	psect	text23
  4810  0D26                     __ptext23:	
  4811 ;; *************** function _Tetris_RemovePlayerFromTable *****************
  4812 ;; Defined at:
  4813 ;;		line 219 in file "../Tetris/Tetris.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;  game            1    wreg     PTR struct .
  4816 ;;		 -> main@tetrisGame(63), 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  game            1    7[COMMON] PTR struct .
  4819 ;;		 -> main@tetrisGame(63), 
  4820 ;;  i               1    8[COMMON] unsigned char 
  4821 ;;  start           1    6[COMMON] unsigned char 
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  1    wreg      void 
  4824 ;; Registers used:
  4825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4831 ;;      Params:         0       0       0       0
  4832 ;;      Locals:         3       0       0       0
  4833 ;;      Temps:          0       8       0       0
  4834 ;;      Totals:         3       8       0       0
  4835 ;;Total ram usage:       11 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    3
  4838 ;; This function calls:
  4839 ;;		_Tetris_PlayerTopmostY
  4840 ;; This function is called by:
  4841 ;;		_Tetris_MovePlayerDown
  4842 ;;		_Tetris_MovePlayerLeft
  4843 ;;		_Tetris_MovePlayerRight
  4844 ;;		_Tetris_RotatePlayer
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           
  4849                           ;psect for function _Tetris_RemovePlayerFromTable
  4850  0D26                     _Tetris_RemovePlayerFromTable:	
  4851                           
  4852                           ;incstack = 0
  4853                           ; Regs used in _Tetris_RemovePlayerFromTable: [wreg-fsr0h+status,2+status,0+btemp+1+pcla
      +                          th+cstack]
  4854                           ;Tetris_RemovePlayerFromTable@game stored from wreg
  4855  0D26  00F7               	movwf	Tetris_RemovePlayerFromTable@game
  4856                           
  4857                           ;../Tetris/Tetris.c: 219: static void Tetris_RemovePlayerFromTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 220: {;../Tetris/Tetris.c: 221:     uint8_t start = Tetris_PlayerTopmo
      +                          stY(&game->player);
  4858  0D27  0877               	movf	Tetris_RemovePlayerFromTable@game,w
  4859  0D28  3E30               	addlw	48
  4860  0D29  158A  2172  158A   	fcall	_Tetris_PlayerTopmostY
  4861  0D2C  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0D2D  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0D2E  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4864  0D2F  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  4865  0D30  00F6               	movwf	Tetris_RemovePlayerFromTable@start
  4866                           
  4867                           ;../Tetris/Tetris.c: 222:     for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4868  0D31  01F8               	clrf	Tetris_RemovePlayerFromTable@i
  4869  0D32                     l3613:	
  4870                           
  4871                           ;../Tetris/Tetris.c: 223:     {;../Tetris/Tetris.c: 224:         game->table[start + i] 
      +                          &= ~game->player.unitBits[i];
  4872  0D32  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  4873  0D33  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4874  0D34  0720               	addwf	??_Tetris_RemovePlayerFromTable,w
  4875  0D35  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  4876  0D36  00A1               	movwf	??_Tetris_RemovePlayerFromTable+1
  4877  0D37  0821               	movf	??_Tetris_RemovePlayerFromTable+1,w
  4878  0D38  3E34               	addlw	52
  4879  0D39  0084               	movwf	4
  4880  0D3A  1383               	bcf	3,7	;select IRP bank0
  4881  0D3B  0800               	movf	0,w
  4882  0D3C  00A2               	movwf	??_Tetris_RemovePlayerFromTable+2
  4883  0D3D  0A84               	incf	4,f
  4884  0D3E  0800               	movf	0,w
  4885  0D3F  00A3               	movwf	??_Tetris_RemovePlayerFromTable+3
  4886  0D40  09A2               	comf	??_Tetris_RemovePlayerFromTable+2,f
  4887  0D41  09A3               	comf	??_Tetris_RemovePlayerFromTable+3,f
  4888  0D42  0876               	movf	Tetris_RemovePlayerFromTable@start,w
  4889  0D43  00A4               	movwf	??_Tetris_RemovePlayerFromTable+4
  4890  0D44  0724               	addwf	??_Tetris_RemovePlayerFromTable+4,w
  4891  0D45  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  4892  0D46  00A5               	movwf	??_Tetris_RemovePlayerFromTable+5
  4893  0D47  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  4894  0D48  00A6               	movwf	??_Tetris_RemovePlayerFromTable+6
  4895  0D49  0726               	addwf	??_Tetris_RemovePlayerFromTable+6,w
  4896  0D4A  0725               	addwf	??_Tetris_RemovePlayerFromTable+5,w
  4897  0D4B  00A7               	movwf	??_Tetris_RemovePlayerFromTable+7
  4898  0D4C  0827               	movf	??_Tetris_RemovePlayerFromTable+7,w
  4899  0D4D  0084               	movwf	4
  4900  0D4E  0822               	movf	??_Tetris_RemovePlayerFromTable+2,w
  4901  0D4F  0580               	andwf	0,f
  4902  0D50  0A84               	incf	4,f
  4903  0D51  0823               	movf	??_Tetris_RemovePlayerFromTable+3,w
  4904  0D52  0580               	andwf	0,f
  4905                           
  4906                           ;../Tetris/Tetris.c: 225:     }
  4907  0D53  3001               	movlw	1
  4908  0D54  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4909  0D55  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  4910  0D56  07F8               	addwf	Tetris_RemovePlayerFromTable@i,f
  4911  0D57  3004               	movlw	4
  4912  0D58  0278               	subwf	Tetris_RemovePlayerFromTable@i,w
  4913  0D59  1803               	btfsc	3,0
  4914  0D5A  0008               	return
  4915  0D5B  2D32               	goto	l3613
  4916  0D5C                     __end_of_Tetris_RemovePlayerFromTable:	
  4917                           
  4918                           	psect	text24
  4919  09F3                     __ptext24:	
  4920 ;; *************** function _Tetris_PlayerTouchingLeftBound *****************
  4921 ;; Defined at:
  4922 ;;		line 197 in file "../Tetris/Tetris.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;  player          1    wreg     PTR struct .
  4925 ;;		 -> main@tetrisGame(63), 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  player          1    7[COMMON] PTR struct .
  4928 ;;		 -> main@tetrisGame(63), 
  4929 ;;  i               1    8[COMMON] unsigned char 
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      unsigned char 
  4932 ;; Registers used:
  4933 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4939 ;;      Params:         0       0       0       0
  4940 ;;      Locals:         2       0       0       0
  4941 ;;      Temps:          4       0       0       0
  4942 ;;      Totals:         6       0       0       0
  4943 ;;Total ram usage:        6 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    1
  4946 ;; This function calls:
  4947 ;;		Nothing
  4948 ;; This function is called by:
  4949 ;;		_Tetris_MovePlayerLeft
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           
  4954                           ;psect for function _Tetris_PlayerTouchingLeftBound
  4955  09F3                     _Tetris_PlayerTouchingLeftBound:	
  4956                           
  4957                           ;incstack = 0
  4958                           ; Regs used in _Tetris_PlayerTouchingLeftBound: [wreg-fsr0h+status,2+status,0]
  4959                           ;Tetris_PlayerTouchingLeftBound@player stored from wreg
  4960  09F3  00F7               	movwf	Tetris_PlayerTouchingLeftBound@player
  4961                           
  4962                           ;../Tetris/Tetris.c: 197: static uint8_t Tetris_PlayerTouchingLeftBound(Tetris_Player *p
      +                          layer);../Tetris/Tetris.c: 198: {;../Tetris/Tetris.c: 199:     for (uint8_t i = 0; i < T
      +                          ETRIS_UNIT_HEIGHT; ++i)
  4963  09F4  01F8               	clrf	Tetris_PlayerTouchingLeftBound@i
  4964  09F5                     l2797:	
  4965                           
  4966                           ;../Tetris/Tetris.c: 200:     {;../Tetris/Tetris.c: 201:         if (player->unitBits[i]
      +                           & 0x8000)
  4967  09F5  0878               	movf	Tetris_PlayerTouchingLeftBound@i,w
  4968  09F6  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  4969  09F7  0773               	addwf	??_Tetris_PlayerTouchingLeftBound,w
  4970  09F8  0777               	addwf	Tetris_PlayerTouchingLeftBound@player,w
  4971  09F9  00F4               	movwf	??_Tetris_PlayerTouchingLeftBound+1
  4972  09FA  0874               	movf	??_Tetris_PlayerTouchingLeftBound+1,w
  4973  09FB  3E04               	addlw	4
  4974  09FC  0084               	movwf	4
  4975  09FD  1383               	bcf	3,7	;select IRP bank0
  4976  09FE  0800               	movf	0,w
  4977  09FF  00F5               	movwf	??_Tetris_PlayerTouchingLeftBound+2
  4978  0A00  0A84               	incf	4,f
  4979  0A01  0800               	movf	0,w
  4980  0A02  00F6               	movwf	??_Tetris_PlayerTouchingLeftBound+3
  4981  0A03  1FF6               	btfss	??_Tetris_PlayerTouchingLeftBound+3,7
  4982  0A04  2A07               	goto	l2803
  4983                           
  4984                           ;../Tetris/Tetris.c: 202:             return 1;
  4985  0A05  3001               	movlw	1
  4986  0A06  0008               	return
  4987  0A07                     l2803:	
  4988                           
  4989                           ;../Tetris/Tetris.c: 203:     }
  4990  0A07  3001               	movlw	1
  4991  0A08  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  4992  0A09  0873               	movf	??_Tetris_PlayerTouchingLeftBound,w
  4993  0A0A  07F8               	addwf	Tetris_PlayerTouchingLeftBound@i,f
  4994  0A0B  3004               	movlw	4
  4995  0A0C  0278               	subwf	Tetris_PlayerTouchingLeftBound@i,w
  4996  0A0D  1C03               	skipc
  4997  0A0E  29F5               	goto	l2797
  4998                           
  4999                           ;../Tetris/Tetris.c: 205:     return 0;
  5000  0A0F  3000               	movlw	0
  5001  0A10  0008               	return
  5002  0A11                     __end_of_Tetris_PlayerTouchingLeftBound:	
  5003                           
  5004                           	psect	text25
  5005  0E15                     __ptext25:	
  5006 ;; *************** function _Tetris_PlayerOverlapsEnvironment *****************
  5007 ;; Defined at:
  5008 ;;		line 185 in file "../Tetris/Tetris.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  game            1    wreg     PTR struct .
  5011 ;;		 -> main@tetrisGame(63), 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  game            1    7[COMMON] PTR struct .
  5014 ;;		 -> main@tetrisGame(63), 
  5015 ;;  i               1    8[COMMON] unsigned char 
  5016 ;;  start           1    6[COMMON] unsigned char 
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  1    wreg      unsigned char 
  5019 ;; Registers used:
  5020 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5021 ;; Tracked objects:
  5022 ;;		On entry : 0/0
  5023 ;;		On exit  : 0/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5026 ;;      Params:         0       0       0       0
  5027 ;;      Locals:         3       0       0       0
  5028 ;;      Temps:          0      12       0       0
  5029 ;;      Totals:         3      12       0       0
  5030 ;;Total ram usage:       15 bytes
  5031 ;; Hardware stack levels used:    1
  5032 ;; Hardware stack levels required when called:    3
  5033 ;; This function calls:
  5034 ;;		_Tetris_PlayerTopmostY
  5035 ;; This function is called by:
  5036 ;;		_Tetris_UpdateGame
  5037 ;;		_Tetris_MovePlayerDown
  5038 ;;		_Tetris_MovePlayerLeft
  5039 ;;		_Tetris_MovePlayerRight
  5040 ;;		_Tetris_RotatePlayer
  5041 ;; This function uses a non-reentrant model
  5042 ;;
  5043                           
  5044                           
  5045                           ;psect for function _Tetris_PlayerOverlapsEnvironment
  5046  0E15                     _Tetris_PlayerOverlapsEnvironment:	
  5047                           
  5048                           ;incstack = 0
  5049                           ; Regs used in _Tetris_PlayerOverlapsEnvironment: [wreg-fsr0h+status,2+status,0+btemp+1+
      +                          pclath+cstack]
  5050                           ;Tetris_PlayerOverlapsEnvironment@game stored from wreg
  5051  0E15  00F7               	movwf	Tetris_PlayerOverlapsEnvironment@game
  5052                           
  5053                           ;../Tetris/Tetris.c: 185: static uint8_t Tetris_PlayerOverlapsEnvironment(Tetris_Game *g
      +                          ame);../Tetris/Tetris.c: 186: {;../Tetris/Tetris.c: 187:     uint8_t start = Tetris_Play
      +                          erTopmostY(&game->player);
  5054  0E16  0877               	movf	Tetris_PlayerOverlapsEnvironment@game,w
  5055  0E17  3E30               	addlw	48
  5056  0E18  158A  2172  158A   	fcall	_Tetris_PlayerTopmostY
  5057  0E1B  1283               	bcf	3,5	;RP0=0, select bank0
  5058  0E1C  1303               	bcf	3,6	;RP1=0, select bank0
  5059  0E1D  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5060  0E1E  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  5061  0E1F  00F6               	movwf	Tetris_PlayerOverlapsEnvironment@start
  5062                           
  5063                           ;../Tetris/Tetris.c: 188:     for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5064  0E20  01F8               	clrf	Tetris_PlayerOverlapsEnvironment@i
  5065  0E21                     l3591:	
  5066                           
  5067                           ;../Tetris/Tetris.c: 189:     {;../Tetris/Tetris.c: 190:         if (game->player.unitBi
      +                          ts[i] & game->table[i + start])
  5068  0E21  0878               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  5069  0E22  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5070  0E23  0720               	addwf	??_Tetris_PlayerOverlapsEnvironment,w
  5071  0E24  0777               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  5072  0E25  00A1               	movwf	??_Tetris_PlayerOverlapsEnvironment+1
  5073  0E26  0876               	movf	Tetris_PlayerOverlapsEnvironment@start,w
  5074  0E27  00A2               	movwf	??_Tetris_PlayerOverlapsEnvironment+2
  5075  0E28  0722               	addwf	??_Tetris_PlayerOverlapsEnvironment+2,w
  5076  0E29  0721               	addwf	??_Tetris_PlayerOverlapsEnvironment+1,w
  5077  0E2A  00A3               	movwf	??_Tetris_PlayerOverlapsEnvironment+3
  5078  0E2B  0823               	movf	??_Tetris_PlayerOverlapsEnvironment+3,w
  5079  0E2C  0084               	movwf	4
  5080  0E2D  1383               	bcf	3,7	;select IRP bank0
  5081  0E2E  0800               	movf	0,w
  5082  0E2F  00A4               	movwf	??_Tetris_PlayerOverlapsEnvironment+4
  5083  0E30  0A84               	incf	4,f
  5084  0E31  0800               	movf	0,w
  5085  0E32  00A5               	movwf	??_Tetris_PlayerOverlapsEnvironment+5
  5086  0E33  0878               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  5087  0E34  00A6               	movwf	??_Tetris_PlayerOverlapsEnvironment+6
  5088  0E35  0726               	addwf	??_Tetris_PlayerOverlapsEnvironment+6,w
  5089  0E36  0777               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  5090  0E37  00A7               	movwf	??_Tetris_PlayerOverlapsEnvironment+7
  5091  0E38  0827               	movf	??_Tetris_PlayerOverlapsEnvironment+7,w
  5092  0E39  3E34               	addlw	52
  5093  0E3A  0084               	movwf	4
  5094  0E3B  0800               	movf	0,w
  5095  0E3C  00A8               	movwf	??_Tetris_PlayerOverlapsEnvironment+8
  5096  0E3D  0A84               	incf	4,f
  5097  0E3E  0800               	movf	0,w
  5098  0E3F  00A9               	movwf	??_Tetris_PlayerOverlapsEnvironment+9
  5099  0E40  0824               	movf	??_Tetris_PlayerOverlapsEnvironment+4,w
  5100  0E41  0528               	andwf	??_Tetris_PlayerOverlapsEnvironment+8,w
  5101  0E42  00AA               	movwf	??_Tetris_PlayerOverlapsEnvironment+10
  5102  0E43  0825               	movf	??_Tetris_PlayerOverlapsEnvironment+5,w
  5103  0E44  0529               	andwf	??_Tetris_PlayerOverlapsEnvironment+9,w
  5104  0E45  00AB               	movwf	??_Tetris_PlayerOverlapsEnvironment+11
  5105  0E46  082A               	movf	??_Tetris_PlayerOverlapsEnvironment+10,w
  5106  0E47  042B               	iorwf	??_Tetris_PlayerOverlapsEnvironment+11,w
  5107  0E48  1903               	btfsc	3,2
  5108  0E49  2E4C               	goto	l3597
  5109                           
  5110                           ;../Tetris/Tetris.c: 191:             return 1;
  5111  0E4A  3001               	movlw	1
  5112  0E4B  0008               	return
  5113  0E4C                     l3597:	
  5114                           
  5115                           ;../Tetris/Tetris.c: 192:     }
  5116  0E4C  3001               	movlw	1
  5117  0E4D  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5118  0E4E  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  5119  0E4F  07F8               	addwf	Tetris_PlayerOverlapsEnvironment@i,f
  5120  0E50  3004               	movlw	4
  5121  0E51  0278               	subwf	Tetris_PlayerOverlapsEnvironment@i,w
  5122  0E52  1C03               	skipc
  5123  0E53  2E21               	goto	l3591
  5124                           
  5125                           ;../Tetris/Tetris.c: 194:     return 0;
  5126  0E54  3000               	movlw	0
  5127  0E55  0008               	return
  5128  0E56                     __end_of_Tetris_PlayerOverlapsEnvironment:	
  5129                           
  5130                           	psect	text26
  5131  06C6                     __ptext26:	
  5132 ;; *************** function _Tetris_ApplyPlayerToTable *****************
  5133 ;; Defined at:
  5134 ;;		line 228 in file "../Tetris/Tetris.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  game            1    wreg     PTR struct .
  5137 ;;		 -> main@tetrisGame(63), 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  game            1   11[BANK0 ] PTR struct .
  5140 ;;		 -> main@tetrisGame(63), 
  5141 ;;  i               1   10[BANK0 ] unsigned char 
  5142 ;;  i               1    9[BANK0 ] unsigned char 
  5143 ;;  start           1    8[BANK0 ] unsigned char 
  5144 ;; Return value:  Size  Location     Type
  5145 ;;                  1    wreg      unsigned char 
  5146 ;; Registers used:
  5147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5148 ;; Tracked objects:
  5149 ;;		On entry : 0/0
  5150 ;;		On exit  : 0/0
  5151 ;;		Unchanged: 0/0
  5152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5153 ;;      Params:         0       0       0       0
  5154 ;;      Locals:         0       4       0       0
  5155 ;;      Temps:          0       8       0       0
  5156 ;;      Totals:         0      12       0       0
  5157 ;;Total ram usage:       12 bytes
  5158 ;; Hardware stack levels used:    1
  5159 ;; Hardware stack levels required when called:    3
  5160 ;; This function calls:
  5161 ;;		_Tetris_PlayerTopmostY
  5162 ;; This function is called by:
  5163 ;;		_Tetris_ResetGame
  5164 ;;		_Tetris_UpdateGame
  5165 ;;		_Tetris_MovePlayerDown
  5166 ;;		_Tetris_MovePlayerLeft
  5167 ;;		_Tetris_MovePlayerRight
  5168 ;;		_Tetris_RotatePlayer
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _Tetris_ApplyPlayerToTable
  5174  06C6                     _Tetris_ApplyPlayerToTable:	
  5175                           
  5176                           ;incstack = 0
  5177                           ; Regs used in _Tetris_ApplyPlayerToTable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  5178                           ;Tetris_ApplyPlayerToTable@game stored from wreg
  5179  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  5180  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  5181  06C8  00AB               	movwf	Tetris_ApplyPlayerToTable@game
  5182                           
  5183                           ;../Tetris/Tetris.c: 228: static uint8_t Tetris_ApplyPlayerToTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 229: {;../Tetris/Tetris.c: 230:     uint8_t start = Tetris_PlayerTopmo
      +                          stY(&game->player);
  5184  06C9  082B               	movf	Tetris_ApplyPlayerToTable@game,w
  5185  06CA  3E30               	addlw	48
  5186  06CB  158A  2172  118A   	fcall	_Tetris_PlayerTopmostY
  5187  06CE  1283               	bcf	3,5	;RP0=0, select bank0
  5188  06CF  1303               	bcf	3,6	;RP1=0, select bank0
  5189  06D0  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5190  06D1  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5191  06D2  00A8               	movwf	Tetris_ApplyPlayerToTable@start
  5192                           
  5193                           ;../Tetris/Tetris.c: 232:     for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5194  06D3  01A9               	clrf	Tetris_ApplyPlayerToTable@i
  5195  06D4                     l3627:	
  5196                           
  5197                           ;../Tetris/Tetris.c: 233:     {;../Tetris/Tetris.c: 234:         if (game->player.unitBi
      +                          ts[i] == 0)
  5198  06D4  0829               	movf	Tetris_ApplyPlayerToTable@i,w
  5199  06D5  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5200  06D6  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  5201  06D7  072B               	addwf	Tetris_ApplyPlayerToTable@game,w
  5202  06D8  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  5203  06D9  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5204  06DA  3E34               	addlw	52
  5205  06DB  0084               	movwf	4
  5206  06DC  1383               	bcf	3,7	;select IRP bank0
  5207  06DD  0800               	movf	0,w
  5208  06DE  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  5209  06DF  0A84               	incf	4,f
  5210  06E0  0800               	movf	0,w
  5211  06E1  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  5212  06E2  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  5213  06E3  0423               	iorwf	??_Tetris_ApplyPlayerToTable+3,w
  5214  06E4  1903               	btfsc	3,2
  5215  06E5  2EF8               	goto	l3637
  5216                           
  5217                           ;../Tetris/Tetris.c: 237:         if (start + i >= TETRIS_TABLE_HEIGHT)
  5218  06E6  0828               	movf	Tetris_ApplyPlayerToTable@start,w
  5219  06E7  0729               	addwf	Tetris_ApplyPlayerToTable@i,w
  5220  06E8  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5221  06E9  01A1               	clrf	??_Tetris_ApplyPlayerToTable+1
  5222  06EA  0DA1               	rlf	??_Tetris_ApplyPlayerToTable+1,f
  5223  06EB  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5224  06EC  3A80               	xorlw	128
  5225  06ED  00FF               	movwf	127
  5226  06EE  3080               	movlw	128
  5227  06EF  027F               	subwf	127,w
  5228  06F0  1D03               	skipz
  5229  06F1  2EF4               	goto	u3145
  5230  06F2  3018               	movlw	24
  5231  06F3  0220               	subwf	??_Tetris_ApplyPlayerToTable,w
  5232  06F4                     u3145:	
  5233  06F4  1C03               	skipc
  5234  06F5  2EF8               	goto	l3637
  5235                           
  5236                           ;../Tetris/Tetris.c: 238:             return 0;
  5237  06F6  3000               	movlw	0
  5238  06F7  0008               	return
  5239  06F8                     l3637:	
  5240  06F8  3001               	movlw	1
  5241  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  5242  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  5243  06FB  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5244  06FC  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5245  06FD  07A9               	addwf	Tetris_ApplyPlayerToTable@i,f
  5246  06FE  3004               	movlw	4
  5247  06FF  0229               	subwf	Tetris_ApplyPlayerToTable@i,w
  5248  0700  1C03               	skipc
  5249  0701  2ED4               	goto	l3627
  5250                           
  5251                           ;../Tetris/Tetris.c: 241:     for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5252  0702  01AA               	clrf	Tetris_ApplyPlayerToTable@i_361
  5253  0703                     l3647:	
  5254                           
  5255                           ;../Tetris/Tetris.c: 242:         game->table[start + i] |= game->player.unitBits[i];
  5256  0703  082A               	movf	Tetris_ApplyPlayerToTable@i_361,w
  5257  0704  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5258  0705  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  5259  0706  072B               	addwf	Tetris_ApplyPlayerToTable@game,w
  5260  0707  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  5261  0708  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5262  0709  3E34               	addlw	52
  5263  070A  0084               	movwf	4
  5264  070B  1383               	bcf	3,7	;select IRP bank0
  5265  070C  0800               	movf	0,w
  5266  070D  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  5267  070E  0A84               	incf	4,f
  5268  070F  0800               	movf	0,w
  5269  0710  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  5270  0711  0828               	movf	Tetris_ApplyPlayerToTable@start,w
  5271  0712  00A4               	movwf	??_Tetris_ApplyPlayerToTable+4
  5272  0713  0724               	addwf	??_Tetris_ApplyPlayerToTable+4,w
  5273  0714  072B               	addwf	Tetris_ApplyPlayerToTable@game,w
  5274  0715  00A5               	movwf	??_Tetris_ApplyPlayerToTable+5
  5275  0716  082A               	movf	Tetris_ApplyPlayerToTable@i_361,w
  5276  0717  00A6               	movwf	??_Tetris_ApplyPlayerToTable+6
  5277  0718  0726               	addwf	??_Tetris_ApplyPlayerToTable+6,w
  5278  0719  0725               	addwf	??_Tetris_ApplyPlayerToTable+5,w
  5279  071A  00A7               	movwf	??_Tetris_ApplyPlayerToTable+7
  5280  071B  0827               	movf	??_Tetris_ApplyPlayerToTable+7,w
  5281  071C  0084               	movwf	4
  5282  071D  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  5283  071E  0480               	iorwf	0,f
  5284  071F  0A84               	incf	4,f
  5285  0720  0823               	movf	??_Tetris_ApplyPlayerToTable+3,w
  5286  0721  0480               	iorwf	0,f
  5287  0722  3001               	movlw	1
  5288  0723  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5289  0724  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5290  0725  07AA               	addwf	Tetris_ApplyPlayerToTable@i_361,f
  5291  0726  3004               	movlw	4
  5292  0727  022A               	subwf	Tetris_ApplyPlayerToTable@i_361,w
  5293  0728  1C03               	skipc
  5294  0729  2F03               	goto	l3647
  5295                           
  5296                           ;../Tetris/Tetris.c: 244:     return 1;
  5297  072A  3001               	movlw	1
  5298  072B  0008               	return
  5299  072C                     __end_of_Tetris_ApplyPlayerToTable:	
  5300                           
  5301                           	psect	text27
  5302  0972                     __ptext27:	
  5303 ;; *************** function _Tetris_PlayerTopmostY *****************
  5304 ;; Defined at:
  5305 ;;		line 180 in file "../Tetris/Tetris.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;  player          1    wreg     PTR struct .
  5308 ;;		 -> main@tetrisGame(63), 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  player          1    5[COMMON] PTR struct .
  5311 ;;		 -> main@tetrisGame(63), 
  5312 ;; Return value:  Size  Location     Type
  5313 ;;                  1    wreg      unsigned char 
  5314 ;; Registers used:
  5315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5321 ;;      Params:         0       0       0       0
  5322 ;;      Locals:         1       0       0       0
  5323 ;;      Temps:          2       0       0       0
  5324 ;;      Totals:         3       0       0       0
  5325 ;;Total ram usage:        3 bytes
  5326 ;; Hardware stack levels used:    2
  5327 ;; Hardware stack levels required when called:    1
  5328 ;; This function calls:
  5329 ;;		Nothing
  5330 ;; This function is called by:
  5331 ;;		_Tetris_PlayerOverlapsEnvironment
  5332 ;;		_Tetris_RemovePlayerFromTable
  5333 ;;		_Tetris_ApplyPlayerToTable
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _Tetris_PlayerTopmostY
  5339  0972                     _Tetris_PlayerTopmostY:	
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _Tetris_PlayerTopmostY: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5343                           ;Tetris_PlayerTopmostY@player stored from wreg
  5344  0972  00F5               	movwf	Tetris_PlayerTopmostY@player
  5345                           
  5346                           ;../Tetris/Tetris.c: 180: static uint8_t Tetris_PlayerTopmostY(Tetris_Player *player);..
      +                          /Tetris/Tetris.c: 181: {;../Tetris/Tetris.c: 182:     return player->position.y - Tetris
      +                          _unitPivot.y;
  5347  0973  3085               	movlw	low ((_Tetris_unitPivot+1)| (0+32768))
  5348  0974  0084               	movwf	4
  5349  0975  3081               	movlw	high ((_Tetris_unitPivot+1)| (0+32768))
  5350  0976  1283               	bcf	3,5	;RP0=0, select bank0
  5351  0977  1303               	bcf	3,6	;RP1=0, select bank0
  5352  0978  00FF               	movwf	127
  5353  0979  118A  2100         	fcall	stringtab
  5354  097B  00F3               	movwf	??_Tetris_PlayerTopmostY
  5355  097C  0A75               	incf	Tetris_PlayerTopmostY@player,w
  5356  097D  0084               	movwf	4
  5357  097E  1383               	bcf	3,7	;select IRP bank0
  5358  097F  0800               	movf	0,w
  5359  0980  00F4               	movwf	??_Tetris_PlayerTopmostY+1
  5360  0981  0873               	movf	??_Tetris_PlayerTopmostY,w
  5361  0982  0274               	subwf	??_Tetris_PlayerTopmostY+1,w
  5362  0983  0008               	return
  5363  0984                     __end_of_Tetris_PlayerTopmostY:	
  5364                           
  5365                           	psect	text28
  5366  09B8                     __ptext28:	
  5367 ;; *************** function _Setup *****************
  5368 ;; Defined at:
  5369 ;;		line 118 in file "main.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;		None
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;		None
  5374 ;; Return value:  Size  Location     Type
  5375 ;;                  1    wreg      void 
  5376 ;; Registers used:
  5377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5378 ;; Tracked objects:
  5379 ;;		On entry : 0/0
  5380 ;;		On exit  : 0/0
  5381 ;;		Unchanged: 0/0
  5382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5383 ;;      Params:         0       0       0       0
  5384 ;;      Locals:         0       0       0       0
  5385 ;;      Temps:          0       0       0       0
  5386 ;;      Totals:         0       0       0       0
  5387 ;;Total ram usage:        0 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; Hardware stack levels required when called:    7
  5390 ;; This function calls:
  5391 ;;		_Buttons_Setup
  5392 ;;		_LCD_Clear
  5393 ;;		_LCD_Reset
  5394 ;;		_LCD_SegmentSelection
  5395 ;;		_LCD_SetupPorts
  5396 ;;		_LCD_TurnOn
  5397 ;;		_SetupOscillator
  5398 ;;		_SetupRandomness
  5399 ;;		_SetupTimer
  5400 ;; This function is called by:
  5401 ;;		_main
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           
  5406                           ;psect for function _Setup
  5407  09B8                     _Setup:	
  5408                           
  5409                           ;main.c: 120:     SetupOscillator();
  5410                           
  5411                           ;incstack = 0
  5412                           ; Regs used in _Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5413  09B8  158A  2096  158A   	fcall	_SetupOscillator
  5414                           
  5415                           ;main.c: 121:     SetupRandomness();
  5416  09BB  158A  222F  158A   	fcall	_SetupRandomness
  5417                           
  5418                           ;main.c: 122:     SetupTimer();
  5419  09BE  158A  20FB  158A   	fcall	_SetupTimer
  5420                           
  5421                           ;main.c: 124:     LCD_SetupPorts();
  5422  09C1  158A  226F  158A   	fcall	_LCD_SetupPorts
  5423                           
  5424                           ;main.c: 125:     LCD_Reset();
  5425  09C4  158A  2184  158A   	fcall	_LCD_Reset
  5426                           
  5427                           ;main.c: 126:     LCD_SegmentSelection(LCD_BOTH_SEGMENTS);
  5428  09C7  3003               	movlw	3
  5429  09C8  158A  2131  158A   	fcall	_LCD_SegmentSelection
  5430                           
  5431                           ;main.c: 127:     LCD_Clear();
  5432  09CB  158A  22FB  158A   	fcall	_LCD_Clear
  5433                           
  5434                           ;main.c: 128:     LCD_TurnOn();
  5435  09CE  158A  20B6  158A   	fcall	_LCD_TurnOn
  5436                           
  5437                           ;main.c: 130:     Buttons_Setup();
  5438  09D1  158A  2090         	fcall	_Buttons_Setup
  5439                           
  5440                           ;main.c: 131:     GIE = 1;
  5441  09D3  178B               	bsf	11,7	;volatile
  5442  09D4  0008               	return
  5443  09D5                     __end_of_Setup:	
  5444                           
  5445                           	psect	text29
  5446  08FB                     __ptext29:	
  5447 ;; *************** function _SetupTimer *****************
  5448 ;; Defined at:
  5449 ;;		line 64 in file "main.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  1    wreg      void 
  5456 ;; Registers used:
  5457 ;;		None
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5463 ;;      Params:         0       0       0       0
  5464 ;;      Locals:         0       0       0       0
  5465 ;;      Temps:          0       0       0       0
  5466 ;;      Totals:         0       0       0       0
  5467 ;;Total ram usage:        0 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    1
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		_Setup
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _SetupTimer
  5479  08FB                     _SetupTimer:	
  5480                           
  5481                           ;main.c: 66:     GIE = 1;
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _SetupTimer: []
  5485  08FB  178B               	bsf	11,7	;volatile
  5486                           
  5487                           ;main.c: 67:     TMR1IE = 1;
  5488  08FC  1683               	bsf	3,5	;RP0=1, select bank1
  5489  08FD  1303               	bcf	3,6	;RP1=0, select bank1
  5490  08FE  140C               	bsf	12,0	;volatile
  5491                           
  5492                           ;main.c: 68:     TMR1CS = 0;
  5493  08FF  1283               	bcf	3,5	;RP0=0, select bank0
  5494  0900  1303               	bcf	3,6	;RP1=0, select bank0
  5495  0901  1090               	bcf	16,1	;volatile
  5496                           
  5497                           ;main.c: 69:     PEIE = 1;
  5498  0902  170B               	bsf	11,6	;volatile
  5499                           
  5500                           ;main.c: 70:     TMR1ON = 1;
  5501  0903  1410               	bsf	16,0	;volatile
  5502                           
  5503                           ;main.c: 71:     T1CKPS0 = 1;
  5504  0904  1610               	bsf	16,4	;volatile
  5505                           
  5506                           ;main.c: 72:     T1CKPS1 = 0;
  5507  0905  1290               	bcf	16,5	;volatile
  5508  0906  0008               	return
  5509  0907                     __end_of_SetupTimer:	
  5510                           
  5511                           	psect	text30
  5512  0A2F                     __ptext30:	
  5513 ;; *************** function _SetupRandomness *****************
  5514 ;; Defined at:
  5515 ;;		line 112 in file "main.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  1    wreg      void 
  5522 ;; Registers used:
  5523 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5529 ;;      Params:         0       0       0       0
  5530 ;;      Locals:         0       0       0       0
  5531 ;;      Temps:          0       0       0       0
  5532 ;;      Totals:         0       0       0       0
  5533 ;;Total ram usage:        0 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    3
  5536 ;; This function calls:
  5537 ;;		___eetoi
  5538 ;;		___itoee
  5539 ;;		_srand
  5540 ;; This function is called by:
  5541 ;;		_Setup
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           
  5546                           ;psect for function _SetupRandomness
  5547  0A2F                     _SetupRandomness:	
  5548                           
  5549                           ;main.c: 114:     srand(uniqueSeed);
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _SetupRandomness: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5553  0A2F  3000               	movlw	(low _uniqueSeed)& (0+255)
  5554  0A30  118A  27EA  158A   	fcall	___eetoi
  5555  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  5556  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  5557  0A35  0821               	movf	?___eetoi+1,w
  5558  0A36  00A8               	movwf	srand@x+1
  5559  0A37  0820               	movf	?___eetoi,w
  5560  0A38  00A7               	movwf	srand@x
  5561  0A39  158A  20A3  158A   	fcall	_srand
  5562                           
  5563                           ;main.c: 115:     ++uniqueSeed;
  5564  0A3C  3000               	movlw	(low _uniqueSeed)& (0+255)
  5565  0A3D  118A  27EA  158A   	fcall	___eetoi
  5566  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  5567  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  5568  0A42  0820               	movf	?___eetoi,w
  5569  0A43  3E01               	addlw	1
  5570  0A44  00A7               	movwf	___itoee@data
  5571  0A45  0821               	movf	?___eetoi+1,w
  5572  0A46  1803               	skipnc
  5573  0A47  3E01               	addlw	1
  5574  0A48  3E00               	addlw	0
  5575  0A49  00A8               	movwf	___itoee@data+1
  5576  0A4A  3000               	movlw	(low _uniqueSeed)& (0+255)
  5577  0A4B  158A  2122         	fcall	___itoee
  5578  0A4D  0008               	return
  5579  0A4E                     __end_of_SetupRandomness:	
  5580                           
  5581                           	psect	text31
  5582  08A3                     __ptext31:	
  5583 ;; *************** function _srand *****************
  5584 ;; Defined at:
  5585 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  x               2    7[BANK0 ] unsigned int 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;		None
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5599 ;;      Params:         0       2       0       0
  5600 ;;      Locals:         0       0       0       0
  5601 ;;      Temps:          0       0       0       0
  5602 ;;      Totals:         0       2       0       0
  5603 ;;Total ram usage:        2 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    1
  5606 ;; This function calls:
  5607 ;;		Nothing
  5608 ;; This function is called by:
  5609 ;;		_SetupRandomness
  5610 ;; This function uses a non-reentrant model
  5611 ;;
  5612                           
  5613                           
  5614                           ;psect for function _srand
  5615  08A3                     _srand:	
  5616                           
  5617                           ;incstack = 0
  5618                           ; Regs used in _srand: [wreg]
  5619  08A3  1283               	bcf	3,5	;RP0=0, select bank0
  5620  08A4  1303               	bcf	3,6	;RP1=0, select bank0
  5621  08A5  0827               	movf	srand@x,w
  5622  08A6  00C7               	movwf	_randx
  5623  08A7  0828               	movf	srand@x+1,w
  5624  08A8  00C8               	movwf	_randx+1
  5625  08A9  01C9               	clrf	_randx+2
  5626  08AA  01CA               	clrf	_randx+3
  5627  08AB  0008               	return
  5628  08AC                     __end_of_srand:	
  5629                           
  5630                           	psect	text32
  5631  0922                     __ptext32:	
  5632 ;; *************** function ___itoee *****************
  5633 ;; Defined at:
  5634 ;;		line 157 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;  addr            1    wreg     PTR eeprom void 
  5637 ;;		 -> highscore(2), uniqueSeed(2), 
  5638 ;;  data            2    7[BANK0 ] unsigned int 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  addr            1    8[COMMON] PTR eeprom void 
  5641 ;;		 -> highscore(2), uniqueSeed(2), 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  2    7[BANK0 ] unsigned int 
  5644 ;; Registers used:
  5645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5651 ;;      Params:         0       2       0       0
  5652 ;;      Locals:         1       0       0       0
  5653 ;;      Temps:          0       2       0       0
  5654 ;;      Totals:         1       4       0       0
  5655 ;;Total ram usage:        5 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    2
  5658 ;; This function calls:
  5659 ;;		___memcpyee
  5660 ;; This function is called by:
  5661 ;;		_SetupRandomness
  5662 ;;		_main
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function ___itoee
  5668  0922                     ___itoee:	
  5669                           
  5670                           ;incstack = 0
  5671                           ; Regs used in ___itoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5672                           ;___itoee@addr stored from wreg
  5673  0922  00F8               	movwf	___itoee@addr
  5674  0923  3027               	movlw	(low (___itoee@data| 0))& (0+255)
  5675  0924  1283               	bcf	3,5	;RP0=0, select bank0
  5676  0925  1303               	bcf	3,6	;RP1=0, select bank0
  5677  0926  00A9               	movwf	??___itoee
  5678  0927  0829               	movf	??___itoee,w
  5679  0928  00F3               	movwf	___memcpyee@from
  5680  0929  3002               	movlw	2
  5681  092A  00AA               	movwf	??___itoee+1
  5682  092B  082A               	movf	??___itoee+1,w
  5683  092C  00F4               	movwf	___memcpyee@size
  5684  092D  0878               	movf	___itoee@addr,w
  5685  092E  158A  25D4         	fcall	___memcpyee
  5686  0930  0008               	return
  5687  0931                     __end_of___itoee:	
  5688                           
  5689                           	psect	text33
  5690  0DD4                     __ptext33:	
  5691 ;; *************** function ___memcpyee *****************
  5692 ;; Defined at:
  5693 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  to              1    wreg     PTR eeprom unsigned char
  5696 ;;		 -> highscore(2), uniqueSeed(2), 
  5697 ;;  from            1    3[COMMON] PTR const unsigned char 
  5698 ;;		 -> __fltoee@data(4), __fttoee@data(4), __otoee@data(4), __ltoee@data(4), 
  5699 ;;		 -> __mtoee@data(3), __itoee@data(2), __ctoee@data(1), 
  5700 ;;  size            1    4[COMMON] unsigned char 
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;  to              1    7[COMMON] PTR eeprom unsigned char
  5703 ;;		 -> highscore(2), uniqueSeed(2), 
  5704 ;;  ptr             1    6[COMMON] PTR const unsigned char 
  5705 ;;		 -> __fltoee@data(4), __fttoee@data(4), __otoee@data(4), __ltoee@data(4), 
  5706 ;;		 -> __mtoee@data(3), __itoee@data(2), __ctoee@data(1), 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  1    wreg      void 
  5709 ;; Registers used:
  5710 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5716 ;;      Params:         2       0       0       0
  5717 ;;      Locals:         2       0       0       0
  5718 ;;      Temps:          1       0       0       0
  5719 ;;      Totals:         5       0       0       0
  5720 ;;Total ram usage:        5 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    1
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		___itoee
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           
  5731                           ;psect for function ___memcpyee
  5732  0DD4                     ___memcpyee:	
  5733                           
  5734                           ;incstack = 0
  5735                           ; Regs used in ___memcpyee: [wreg-fsr0h+status,2+status,0]
  5736                           ;___memcpyee@to stored from wreg
  5737  0DD4  00F7               	movwf	___memcpyee@to
  5738                           
  5739                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 39: __memcpy
      +                          ee(__eeprom unsigned char * to, const unsigned char *from, unsigned char size);C:\Progra
      +                          m Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 40: {;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 41:  const unsigned char *ptr
      +                           =from;
  5740  0DD5  0873               	movf	___memcpyee@from,w
  5741  0DD6  00F5               	movwf	??___memcpyee
  5742  0DD7  0875               	movf	??___memcpyee,w
  5743  0DD8  00F6               	movwf	___memcpyee@ptr
  5744  0DD9                     l558:	
  5745                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 43:  while (
      +                          EECON1bits.WR) continue;
  5746                           
  5747  0DD9  1683               	bsf	3,5	;RP0=1, select bank3
  5748  0DDA  1703               	bsf	3,6	;RP1=1, select bank3
  5749  0DDB  188C               	btfsc	12,1	;volsfr
  5750  0DDC  2DD9               	goto	l558
  5751                           
  5752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 44:  EEADR =
      +                           (unsigned char)to - 1U;
  5753  0DDD  0877               	movf	___memcpyee@to,w
  5754  0DDE  3EFF               	addlw	255
  5755  0DDF  1283               	bcf	3,5	;RP0=0, select bank2
  5756  0DE0  1703               	bsf	3,6	;RP1=1, select bank2
  5757  0DE1  008D               	movwf	13	;volatile
  5758                           
  5759                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 46:  EECON1 
      +                          &= 0x7F;
  5760  0DE2  307F               	movlw	127
  5761  0DE3  00F5               	movwf	??___memcpyee
  5762  0DE4  0875               	movf	??___memcpyee,w
  5763  0DE5  1683               	bsf	3,5	;RP0=1, select bank3
  5764  0DE6  1703               	bsf	3,6	;RP1=1, select bank3
  5765  0DE7  058C               	andwf	12,f	;volsfr
  5766  0DE8                     l2461:	
  5767                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 48:  while(s
      +                          ize--) {
  5768                           
  5769                           
  5770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 48:  while(s
      +                          ize--) {
  5771  0DE8  3001               	movlw	1
  5772  0DE9  02F4               	subwf	___memcpyee@size,f
  5773  0DEA  0A74               	incf	___memcpyee@size,w
  5774  0DEB  1903               	btfsc	3,2
  5775  0DEC  0008               	return
  5776  0DED                     l563:	
  5777                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 51:   }
  5778                           
  5779                           
  5780                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 49:   while 
      +                          (EECON1bits.WR) {
  5781  0DED  1683               	bsf	3,5	;RP0=1, select bank3
  5782  0DEE  1703               	bsf	3,6	;RP1=1, select bank3
  5783  0DEF  188C               	btfsc	12,1	;volsfr
  5784  0DF0  2DED               	goto	l563
  5785                           
  5786                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 52:   EEDATA
      +                           = *ptr++;
  5787  0DF1  0876               	movf	___memcpyee@ptr,w
  5788  0DF2  0084               	movwf	4
  5789  0DF3  1383               	bcf	3,7	;select IRP bank0
  5790  0DF4  0800               	movf	0,w
  5791  0DF5  1283               	bcf	3,5	;RP0=0, select bank2
  5792  0DF6  1703               	bsf	3,6	;RP1=1, select bank2
  5793  0DF7  008C               	movwf	12	;volatile
  5794  0DF8  3001               	movlw	1
  5795  0DF9  00F5               	movwf	??___memcpyee
  5796  0DFA  0875               	movf	??___memcpyee,w
  5797  0DFB  07F6               	addwf	___memcpyee@ptr,f
  5798                           
  5799                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 53:   ++EEAD
      +                          R;
  5800  0DFC  3001               	movlw	1
  5801  0DFD  00F5               	movwf	??___memcpyee
  5802  0DFE  0875               	movf	??___memcpyee,w
  5803  0DFF  078D               	addwf	13,f	;volatile
  5804                           
  5805                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 54:   STATUS
      +                          bits.CARRY = 0;
  5806  0E00  1283               	bcf	3,5	;RP0=0, select bank0
  5807  0E01  1303               	bcf	3,6	;RP1=0, select bank0
  5808  0E02  1003               	bcf	3,0	;volatile
  5809                           
  5810                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 55:   if (IN
      +                          TCONbits.GIE) {
  5811  0E03  1B8B               	btfsc	11,7	;volatile
  5812                           
  5813                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 56:    STATU
      +                          Sbits.CARRY = 1;
  5814  0E04  1403               	bsf	3,0	;volatile
  5815                           
  5816                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 58:   INTCON
      +                          bits.GIE = 0;
  5817                           
  5818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 57:   }
  5819  0E05  138B               	bcf	11,7	;volatile
  5820                           
  5821                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 59:   EECON1
      +                          bits.WREN = 1;
  5822  0E06  1683               	bsf	3,5	;RP0=1, select bank3
  5823  0E07  1703               	bsf	3,6	;RP1=1, select bank3
  5824  0E08  150C               	bsf	12,2	;volsfr
  5825                           
  5826                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 60:   EECON2
      +                           = 0x55;
  5827  0E09  3055               	movlw	85
  5828  0E0A  008D               	movwf	13	;volsfr
  5829                           
  5830                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 61:   EECON2
      +                           = 0xAA;
  5831  0E0B  30AA               	movlw	170
  5832  0E0C  008D               	movwf	13	;volsfr
  5833                           
  5834                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 62:   EECON1
      +                          bits.WR = 1;
  5835  0E0D  148C               	bsf	12,1	;volsfr
  5836                           
  5837                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 63:   EECON1
      +                          bits.WREN = 0;
  5838  0E0E  110C               	bcf	12,2	;volsfr
  5839                           
  5840                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 64:   if (ST
      +                          ATUSbits.CARRY) {
  5841  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  5842  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  5843  0E11  1C03               	btfss	3,0	;volatile
  5844  0E12  2DE8               	goto	l2461
  5845                           
  5846                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 65:    INTCO
      +                          Nbits.GIE = 1;
  5847  0E13  178B               	bsf	11,7	;volatile
  5848  0E14  2DE8               	goto	l2461
  5849  0E15                     __end_of___memcpyee:	
  5850                           
  5851                           	psect	text34
  5852  07EA                     __ptext34:	
  5853 ;; *************** function ___eetoi *****************
  5854 ;; Defined at:
  5855 ;;		line 112 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  addr            1    wreg     PTR eeprom void 
  5858 ;;		 -> highscore(2), uniqueSeed(2), 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  addr            1    6[BANK0 ] PTR eeprom void 
  5861 ;;		 -> highscore(2), uniqueSeed(2), 
  5862 ;;  data            2    4[BANK0 ] unsigned int 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  2    0[BANK0 ] unsigned int 
  5865 ;; Registers used:
  5866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5872 ;;      Params:         0       2       0       0
  5873 ;;      Locals:         0       3       0       0
  5874 ;;      Temps:          0       2       0       0
  5875 ;;      Totals:         0       7       0       0
  5876 ;;Total ram usage:        7 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    2
  5879 ;; This function calls:
  5880 ;;		___eecpymem
  5881 ;; This function is called by:
  5882 ;;		_SetupRandomness
  5883 ;;		_main
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function ___eetoi
  5889  07EA                     ___eetoi:	
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in ___eetoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5893                           ;___eetoi@addr stored from wreg
  5894  07EA  1283               	bcf	3,5	;RP0=0, select bank0
  5895  07EB  1303               	bcf	3,6	;RP1=0, select bank0
  5896  07EC  00A6               	movwf	___eetoi@addr
  5897                           
  5898                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 112: __eetoi
      +                          (__eeprom void *addr);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 113: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.
      +                          c: 114:  unsigned int data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\p
      +                          ic\__eeprom.c: 115:  __eecpymem((unsigned char *) &data,addr,2);
  5899  07ED  0826               	movf	___eetoi@addr,w
  5900  07EE  00A2               	movwf	??___eetoi
  5901  07EF  0822               	movf	??___eetoi,w
  5902  07F0  00F3               	movwf	___eecpymem@from
  5903  07F1  3002               	movlw	2
  5904  07F2  00A3               	movwf	??___eetoi+1
  5905  07F3  0823               	movf	??___eetoi+1,w
  5906  07F4  00F4               	movwf	___eecpymem@size
  5907  07F5  3024               	movlw	(low (___eetoi@data| 0))& (0+255)
  5908  07F6  158A  239C         	fcall	___eecpymem
  5909                           
  5910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 116:  return
      +                           data;
  5911  07F8  1283               	bcf	3,5	;RP0=0, select bank0
  5912  07F9  1303               	bcf	3,6	;RP1=0, select bank0
  5913  07FA  0825               	movf	___eetoi@data+1,w
  5914  07FB  00A1               	movwf	?___eetoi+1
  5915  07FC  0824               	movf	___eetoi@data,w
  5916  07FD  00A0               	movwf	?___eetoi
  5917  07FE  0008               	return
  5918  07FF                     __end_of___eetoi:	
  5919                           
  5920                           	psect	text35
  5921  0B9C                     __ptext35:	
  5922 ;; *************** function ___eecpymem *****************
  5923 ;; Defined at:
  5924 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  to              1    wreg     PTR volatile unsigned ch
  5927 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  5928 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  5929 ;;  from            1    3[COMMON] PTR eeprom unsigned char
  5930 ;;		 -> highscore(2), uniqueSeed(2), 
  5931 ;;  size            1    4[COMMON] unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  to              1    7[COMMON] PTR volatile unsigned ch
  5934 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  5935 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  5936 ;;  cp              1    6[COMMON] PTR volatile unsigned ch
  5937 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  5938 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      void 
  5941 ;; Registers used:
  5942 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5948 ;;      Params:         2       0       0       0
  5949 ;;      Locals:         2       0       0       0
  5950 ;;      Temps:          1       0       0       0
  5951 ;;      Totals:         5       0       0       0
  5952 ;;Total ram usage:        5 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    1
  5955 ;; This function calls:
  5956 ;;		Nothing
  5957 ;; This function is called by:
  5958 ;;		___eetoi
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           
  5963                           ;psect for function ___eecpymem
  5964  0B9C                     ___eecpymem:	
  5965                           
  5966                           ;incstack = 0
  5967                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0]
  5968                           ;___eecpymem@to stored from wreg
  5969  0B9C  00F7               	movwf	___eecpymem@to
  5970                           
  5971                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: __eecpyme
      +                          m(volatile unsigned char *to, __eeprom unsigned char * from, unsigned char size);C:\Prog
      +                          ram Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program File
      +                          s (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\M
      +                          icrochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\Microchip\
      +                          xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c90\pic\__eeprom.c: 7: {
  5972  0B9D  0877               	movf	___eecpymem@to,w
  5973  0B9E  00F5               	movwf	??___eecpymem
  5974  0B9F  0875               	movf	??___eecpymem,w
  5975  0BA0  00F6               	movwf	___eecpymem@cp
  5976  0BA1                     l546:	
  5977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10:  while (
      +                          EECON1bits.WR) continue;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\
      +                          __eeprom.c: 10:  __memcpyee(addr,(unsigned char *) &data,2);;C:\Program Files (x86)\Micr
      +                          ochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10: {
  5978                           
  5979  0BA1  1683               	bsf	3,5	;RP0=1, select bank3
  5980  0BA2  1703               	bsf	3,6	;RP1=1, select bank3
  5981  0BA3  188C               	btfsc	12,1	;volsfr
  5982  0BA4  2BA1               	goto	l546
  5983                           
  5984                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 11:  EEADR =
      +                           (unsigned char)from;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 11:  return data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pi
      +                          c\__eeprom.c: 11:  double data;
  5985  0BA5  0873               	movf	___eecpymem@from,w
  5986  0BA6  1283               	bcf	3,5	;RP0=0, select bank2
  5987  0BA7  1703               	bsf	3,6	;RP1=1, select bank2
  5988  0BA8  008D               	movwf	13	;volatile
  5989  0BA9                     l2433:	
  5990                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  5991                           
  5992                           
  5993                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  5994  0BA9  3001               	movlw	1
  5995  0BAA  02F4               	subwf	___eecpymem@size,f
  5996  0BAB  0A74               	incf	___eecpymem@size,w
  5997  0BAC  1903               	btfsc	3,2
  5998  0BAD  0008               	return
  5999  0BAE                     l551:	
  6000  0BAE  1683               	bsf	3,5	;RP0=1, select bank3
  6001  0BAF  1703               	bsf	3,6	;RP1=1, select bank3
  6002  0BB0  188C               	btfsc	12,1	;volsfr
  6003  0BB1  2BAE               	goto	l551
  6004                           
  6005                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:   EECON1
      +                           &= 0x7F;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:
      +                           
  6006  0BB2  307F               	movlw	127
  6007  0BB3  00F5               	movwf	??___eecpymem
  6008  0BB4  0875               	movf	??___eecpymem,w
  6009  0BB5  058C               	andwf	12,f	;volsfr
  6010                           
  6011                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 17:   EECON1
      +                          bits.RD = 1;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 
      +                          17: __fttoee(__eeprom void *addr, float data)
  6012  0BB6  140C               	bsf	12,0	;volsfr
  6013                           
  6014                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:   *cp++ 
      +                          = EEDATA;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:
      +                           {
  6015  0BB7  1283               	bcf	3,5	;RP0=0, select bank2
  6016  0BB8  1703               	bsf	3,6	;RP1=1, select bank2
  6017  0BB9  080C               	movf	12,w	;volatile
  6018  0BBA  00F5               	movwf	??___eecpymem
  6019  0BBB  0876               	movf	___eecpymem@cp,w
  6020  0BBC  0084               	movwf	4
  6021  0BBD  0875               	movf	??___eecpymem,w
  6022  0BBE  1383               	bcf	3,7	;select IRP bank0
  6023  0BBF  0080               	movwf	0
  6024  0BC0  3001               	movlw	1
  6025  0BC1  00F5               	movwf	??___eecpymem
  6026  0BC2  0875               	movf	??___eecpymem,w
  6027  0BC3  07F6               	addwf	___eecpymem@cp,f
  6028                           
  6029                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:   ++EEAD
      +                          R;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:  __mem
      +                          cpyee(addr,(unsigned char *) &data,3);
  6030  0BC4  3001               	movlw	1
  6031  0BC5  00F5               	movwf	??___eecpymem
  6032  0BC6  0875               	movf	??___eecpymem,w
  6033  0BC7  078D               	addwf	13,f	;volatile
  6034  0BC8  2BA9               	goto	l2433
  6035  0BC9                     __end_of___eecpymem:	
  6036                           
  6037                           	psect	text36
  6038  0896                     __ptext36:	
  6039 ;; *************** function _SetupOscillator *****************
  6040 ;; Defined at:
  6041 ;;		line 7 in file "./Frequency.h"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;		None
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;		None
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      void 
  6048 ;; Registers used:
  6049 ;;		None
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6055 ;;      Params:         0       0       0       0
  6056 ;;      Locals:         0       0       0       0
  6057 ;;      Temps:          0       0       0       0
  6058 ;;      Totals:         0       0       0       0
  6059 ;;Total ram usage:        0 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    1
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_Setup
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function _SetupOscillator
  6071  0896                     _SetupOscillator:	
  6072                           
  6073                           ;./Frequency.h: 11:     IRCF0 = 1;
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _SetupOscillator: []
  6077  0896  1683               	bsf	3,5	;RP0=1, select bank1
  6078  0897  1303               	bcf	3,6	;RP1=0, select bank1
  6079  0898  160F               	bsf	15,4	;volatile
  6080                           
  6081                           ;./Frequency.h: 12:     IRCF1 = 1;
  6082  0899  168F               	bsf	15,5	;volatile
  6083                           
  6084                           ;./Frequency.h: 13:     IRCF2 = 1;
  6085  089A  170F               	bsf	15,6	;volatile
  6086  089B  0008               	return
  6087  089C                     __end_of_SetupOscillator:	
  6088                           
  6089                           	psect	text37
  6090  0A6F                     __ptext37:	
  6091 ;; *************** function _LCD_SetupPorts *****************
  6092 ;; Defined at:
  6093 ;;		line 48 in file "LCD.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;		None
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6107 ;;      Params:         0       0       0       0
  6108 ;;      Locals:         0       0       0       0
  6109 ;;      Temps:          0       0       0       0
  6110 ;;      Totals:         0       0       0       0
  6111 ;;Total ram usage:        0 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    1
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_Setup
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           
  6122                           ;psect for function _LCD_SetupPorts
  6123  0A6F                     _LCD_SetupPorts:	
  6124                           
  6125                           ;LCD.c: 50:     ANSELH = 0;
  6126                           
  6127                           ;incstack = 0
  6128                           ; Regs used in _LCD_SetupPorts: [wreg+status,2]
  6129  0A6F  1683               	bsf	3,5	;RP0=1, select bank3
  6130  0A70  1703               	bsf	3,6	;RP1=1, select bank3
  6131  0A71  0189               	clrf	9	;volatile
  6132                           
  6133                           ;LCD.c: 51:     TRISB = 0xFF;
  6134  0A72  30FF               	movlw	255
  6135  0A73  1683               	bsf	3,5	;RP0=1, select bank1
  6136  0A74  1303               	bcf	3,6	;RP1=0, select bank1
  6137  0A75  0086               	movwf	6	;volatile
  6138                           
  6139                           ;LCD.c: 52:     WPUB = 0xFF;
  6140  0A76  30FF               	movlw	255
  6141  0A77  0095               	movwf	21	;volatile
  6142                           
  6143                           ;LCD.c: 53:     nRBPU = 0;
  6144  0A78  1381               	bcf	1,7	;volatile
  6145                           
  6146                           ;LCD.c: 54:     PORTB = 0;
  6147  0A79  1283               	bcf	3,5	;RP0=0, select bank0
  6148  0A7A  1303               	bcf	3,6	;RP1=0, select bank0
  6149  0A7B  0186               	clrf	6	;volatile
  6150                           
  6151                           ;LCD.c: 56:     TRISD = 0;
  6152  0A7C  1683               	bsf	3,5	;RP0=1, select bank1
  6153  0A7D  1303               	bcf	3,6	;RP1=0, select bank1
  6154  0A7E  0188               	clrf	8	;volatile
  6155                           
  6156                           ;LCD.c: 57:     PORTD = 0;
  6157  0A7F  1283               	bcf	3,5	;RP0=0, select bank0
  6158  0A80  1303               	bcf	3,6	;RP1=0, select bank0
  6159  0A81  0188               	clrf	8	;volatile
  6160                           
  6161                           ;LCD.c: 58:     TRISC = 0;
  6162  0A82  1683               	bsf	3,5	;RP0=1, select bank1
  6163  0A83  1303               	bcf	3,6	;RP1=0, select bank1
  6164  0A84  0187               	clrf	7	;volatile
  6165                           
  6166                           ;LCD.c: 59:     PORTC = 0;
  6167  0A85  1283               	bcf	3,5	;RP0=0, select bank0
  6168  0A86  1303               	bcf	3,6	;RP1=0, select bank0
  6169  0A87  0187               	clrf	7	;volatile
  6170                           
  6171                           ;LCD.c: 61:     ANSEL = 0;
  6172  0A88  1683               	bsf	3,5	;RP0=1, select bank3
  6173  0A89  1703               	bsf	3,6	;RP1=1, select bank3
  6174  0A8A  0188               	clrf	8	;volatile
  6175                           
  6176                           ;LCD.c: 62:     TRISA = 0;
  6177  0A8B  1683               	bsf	3,5	;RP0=1, select bank1
  6178  0A8C  1303               	bcf	3,6	;RP1=0, select bank1
  6179  0A8D  0185               	clrf	5	;volatile
  6180                           
  6181                           ;LCD.c: 63:     PORTA = 0;
  6182  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  6183  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  6184  0A90  0185               	clrf	5	;volatile
  6185  0A91  0008               	return
  6186  0A92                     __end_of_LCD_SetupPorts:	
  6187                           
  6188                           	psect	text38
  6189  0984                     __ptext38:	
  6190 ;; *************** function _LCD_Reset *****************
  6191 ;; Defined at:
  6192 ;;		line 66 in file "LCD.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;		None
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;		None
  6197 ;; Return value:  Size  Location     Type
  6198 ;;                  1    wreg      void 
  6199 ;; Registers used:
  6200 ;;		wreg, status,2, status,0, pclath, cstack
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6206 ;;      Params:         0       0       0       0
  6207 ;;      Locals:         0       0       0       0
  6208 ;;      Temps:          0       0       0       0
  6209 ;;      Totals:         0       0       0       0
  6210 ;;Total ram usage:        0 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    6
  6213 ;; This function calls:
  6214 ;;		_LCD_SetX
  6215 ;;		_LCD_SetY
  6216 ;;		_LCD_SetZ
  6217 ;; This function is called by:
  6218 ;;		_Setup
  6219 ;; This function uses a non-reentrant model
  6220 ;;
  6221                           
  6222                           
  6223                           ;psect for function _LCD_Reset
  6224  0984                     _LCD_Reset:	
  6225                           
  6226                           ;LCD.c: 68:     RD1 = 0;
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _LCD_Reset: [wreg+status,2+status,0+pclath+cstack]
  6230  0984  1283               	bcf	3,5	;RP0=0, select bank0
  6231  0985  1303               	bcf	3,6	;RP1=0, select bank0
  6232  0986  1088               	bcf	8,1	;volatile
  6233                           
  6234                           ;LCD.c: 69:     __nop();
  6235  0987  0000               	nop
  6236                           
  6237                           ;LCD.c: 70:     __nop();
  6238  0988  0000               	nop
  6239                           
  6240                           ;LCD.c: 71:     __nop();
  6241  0989  0000               	nop
  6242                           
  6243                           ;LCD.c: 72:     __nop();
  6244  098A  0000               	nop
  6245                           
  6246                           ;LCD.c: 73:     RD1 = 1;
  6247  098B  1283               	bcf	3,5	;RP0=0, select bank0
  6248  098C  1303               	bcf	3,6	;RP1=0, select bank0
  6249  098D  1488               	bsf	8,1	;volatile
  6250                           
  6251                           ;LCD.c: 74:     __nop();
  6252  098E  0000               	nop
  6253                           
  6254                           ;LCD.c: 75:     LCD_SetX(0);
  6255  098F  3000               	movlw	0
  6256  0990  158A  20D7  158A   	fcall	_LCD_SetX
  6257                           
  6258                           ;LCD.c: 76:     LCD_SetY(0);
  6259  0993  3000               	movlw	0
  6260  0994  158A  20E3  158A   	fcall	_LCD_SetY
  6261                           
  6262                           ;LCD.c: 77:     LCD_SetZ(0);
  6263  0997  3000               	movlw	0
  6264  0998  158A  20EF         	fcall	_LCD_SetZ
  6265  099A  0008               	return
  6266  099B                     __end_of_LCD_Reset:	
  6267                           
  6268                           	psect	text39
  6269  08EF                     __ptext39:	
  6270 ;; *************** function _LCD_SetZ *****************
  6271 ;; Defined at:
  6272 ;;		line 140 in file "LCD.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  z               1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  z               1    2[BANK0 ] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      void 
  6279 ;; Registers used:
  6280 ;;		wreg, status,2, status,0, pclath, cstack
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6286 ;;      Params:         0       0       0       0
  6287 ;;      Locals:         0       1       0       0
  6288 ;;      Temps:          0       1       0       0
  6289 ;;      Totals:         0       2       0       0
  6290 ;;Total ram usage:        2 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    5
  6293 ;; This function calls:
  6294 ;;		_LCD_Write
  6295 ;; This function is called by:
  6296 ;;		_LCD_Reset
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           
  6301                           ;psect for function _LCD_SetZ
  6302  08EF                     _LCD_SetZ:	
  6303                           
  6304                           ;incstack = 0
  6305                           ; Regs used in _LCD_SetZ: [wreg+status,2+status,0+pclath+cstack]
  6306                           ;LCD_SetZ@z stored from wreg
  6307  08EF  1283               	bcf	3,5	;RP0=0, select bank0
  6308  08F0  1303               	bcf	3,6	;RP1=0, select bank0
  6309  08F1  00A2               	movwf	LCD_SetZ@z
  6310                           
  6311                           ;LCD.c: 140: void LCD_SetZ(uint8_t z);LCD.c: 141: {;LCD.c: 142:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xC0 | z);
  6312  08F2  0822               	movf	LCD_SetZ@z,w
  6313  08F3  38C0               	iorlw	192
  6314  08F4  00A1               	movwf	??_LCD_SetZ
  6315  08F5  0821               	movf	??_LCD_SetZ,w
  6316  08F6  00F8               	movwf	LCD_Write@data
  6317  08F7  3000               	movlw	0
  6318  08F8  158A  219B         	fcall	_LCD_Write
  6319  08FA  0008               	return
  6320  08FB                     __end_of_LCD_SetZ:	
  6321                           
  6322                           	psect	text40
  6323  0890                     __ptext40:	
  6324 ;; *************** function _Buttons_Setup *****************
  6325 ;; Defined at:
  6326 ;;		line 39 in file "Buttons.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;                  1    wreg      void 
  6333 ;; Registers used:
  6334 ;;		wreg, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6340 ;;      Params:         0       0       0       0
  6341 ;;      Locals:         0       0       0       0
  6342 ;;      Temps:          0       0       0       0
  6343 ;;      Totals:         0       0       0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    2
  6347 ;; This function calls:
  6348 ;;		_Buttons_SetupInterrupts
  6349 ;;		_Buttons_SetupPortB
  6350 ;; This function is called by:
  6351 ;;		_Setup
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           
  6356                           ;psect for function _Buttons_Setup
  6357  0890                     _Buttons_Setup:	
  6358                           
  6359                           ;Buttons.c: 41:     Buttons_SetupPortB();
  6360                           
  6361                           ;incstack = 0
  6362                           ; Regs used in _Buttons_Setup: [wreg+status,2+status,0+pclath+cstack]
  6363  0890  158A  2107  158A   	fcall	_Buttons_SetupPortB
  6364                           
  6365                           ;Buttons.c: 42:     Buttons_SetupInterrupts();
  6366  0893  158A  208B         	fcall	_Buttons_SetupInterrupts
  6367  0895  0008               	return
  6368  0896                     __end_of_Buttons_Setup:	
  6369                           
  6370                           	psect	text41
  6371  0907                     __ptext41:	
  6372 ;; *************** function _Buttons_SetupPortB *****************
  6373 ;; Defined at:
  6374 ;;		line 11 in file "Buttons.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;		None
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      void 
  6381 ;; Registers used:
  6382 ;;		wreg, status,2
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6388 ;;      Params:         0       0       0       0
  6389 ;;      Locals:         0       0       0       0
  6390 ;;      Temps:          0       0       0       0
  6391 ;;      Totals:         0       0       0       0
  6392 ;;Total ram usage:        0 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    1
  6395 ;; This function calls:
  6396 ;;		Nothing
  6397 ;; This function is called by:
  6398 ;;		_Buttons_Setup
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           
  6403                           ;psect for function _Buttons_SetupPortB
  6404  0907                     _Buttons_SetupPortB:	
  6405                           
  6406                           ;Buttons.c: 13:     WPUB = 0b00011111;
  6407                           
  6408                           ;incstack = 0
  6409                           ; Regs used in _Buttons_SetupPortB: [wreg+status,2]
  6410  0907  301F               	movlw	31
  6411  0908  1683               	bsf	3,5	;RP0=1, select bank1
  6412  0909  1303               	bcf	3,6	;RP1=0, select bank1
  6413  090A  0095               	movwf	21	;volatile
  6414                           
  6415                           ;Buttons.c: 14:     nRBPU = 0;
  6416  090B  1381               	bcf	1,7	;volatile
  6417                           
  6418                           ;Buttons.c: 15:     ANSELH = 0;
  6419  090C  1683               	bsf	3,5	;RP0=1, select bank3
  6420  090D  1703               	bsf	3,6	;RP1=1, select bank3
  6421  090E  0189               	clrf	9	;volatile
  6422                           
  6423                           ;Buttons.c: 16:     TRISB = 0xFF;
  6424  090F  30FF               	movlw	255
  6425  0910  1683               	bsf	3,5	;RP0=1, select bank1
  6426  0911  1303               	bcf	3,6	;RP1=0, select bank1
  6427  0912  0086               	movwf	6	;volatile
  6428  0913  0008               	return
  6429  0914                     __end_of_Buttons_SetupPortB:	
  6430                           
  6431                           	psect	text42
  6432  088B                     __ptext42:	
  6433 ;; *************** function _Buttons_SetupInterrupts *****************
  6434 ;; Defined at:
  6435 ;;		line 19 in file "Buttons.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;		None
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      void 
  6442 ;; Registers used:
  6443 ;;		None
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6449 ;;      Params:         0       0       0       0
  6450 ;;      Locals:         0       0       0       0
  6451 ;;      Temps:          0       0       0       0
  6452 ;;      Totals:         0       0       0       0
  6453 ;;Total ram usage:        0 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    1
  6456 ;; This function calls:
  6457 ;;		Nothing
  6458 ;; This function is called by:
  6459 ;;		_Buttons_Setup
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _Buttons_SetupInterrupts
  6465  088B                     _Buttons_SetupInterrupts:	
  6466                           
  6467                           ;Buttons.c: 21:     INTEDG = 0;
  6468                           
  6469                           ;incstack = 0
  6470                           ; Regs used in _Buttons_SetupInterrupts: []
  6471  088B  1683               	bsf	3,5	;RP0=1, select bank1
  6472  088C  1303               	bcf	3,6	;RP1=0, select bank1
  6473  088D  1301               	bcf	1,6	;volatile
  6474                           
  6475                           ;Buttons.c: 22:     INTE = 1;
  6476  088E  160B               	bsf	11,4	;volatile
  6477  088F  0008               	return
  6478  0890                     __end_of_Buttons_SetupInterrupts:	
  6479                           
  6480                           	psect	text43
  6481  0886                     __ptext43:	
  6482 ;; *************** function _ResetTimer *****************
  6483 ;; Defined at:
  6484 ;;		line 75 in file "main.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;		None
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;		None
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      void 
  6491 ;; Registers used:
  6492 ;;		status,2
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6498 ;;      Params:         0       0       0       0
  6499 ;;      Locals:         0       0       0       0
  6500 ;;      Temps:          0       0       0       0
  6501 ;;      Totals:         0       0       0       0
  6502 ;;Total ram usage:        0 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    1
  6505 ;; This function calls:
  6506 ;;		Nothing
  6507 ;; This function is called by:
  6508 ;;		_main
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _ResetTimer
  6514  0886                     _ResetTimer:	
  6515                           
  6516                           ;main.c: 77:     TMR1 = 0;
  6517                           
  6518                           ;incstack = 0
  6519                           ; Regs used in _ResetTimer: [status,2]
  6520  0886  1283               	bcf	3,5	;RP0=0, select bank0
  6521  0887  1303               	bcf	3,6	;RP1=0, select bank0
  6522  0888  018E               	clrf	14	;volatile
  6523  0889  018F               	clrf	15	;volatile
  6524  088A  0008               	return
  6525  088B                     __end_of_ResetTimer:	
  6526                           
  6527                           	psect	text44
  6528  0D5C                     __ptext44:	
  6529 ;; *************** function _FlashVictoriously *****************
  6530 ;; Defined at:
  6531 ;;		line 167 in file "Drawing.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  i               1   12[BANK0 ] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  1    wreg      void 
  6538 ;; Registers used:
  6539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6545 ;;      Params:         0       0       0       0
  6546 ;;      Locals:         0       1       0       0
  6547 ;;      Temps:          0       3       0       0
  6548 ;;      Totals:         0       4       0       0
  6549 ;;Total ram usage:        4 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    7
  6552 ;; This function calls:
  6553 ;;		_DrawHighscoreText
  6554 ;;		_LCD_Clear
  6555 ;;		_LCD_SegmentSelection
  6556 ;;		_LCD_TurnOff
  6557 ;;		_LCD_TurnOn
  6558 ;; This function is called by:
  6559 ;;		_main
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           
  6564                           ;psect for function _FlashVictoriously
  6565  0D5C                     _FlashVictoriously:	
  6566                           
  6567                           ;Drawing.c: 169:     LCD_SegmentSelection(LCD_BOTH_SEGMENTS);
  6568                           
  6569                           ;incstack = 0
  6570                           ; Regs used in _FlashVictoriously: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6571  0D5C  3003               	movlw	3
  6572  0D5D  158A  2131  158A   	fcall	_LCD_SegmentSelection
  6573                           
  6574                           ;Drawing.c: 170:     LCD_Clear();
  6575  0D60  158A  22FB  158A   	fcall	_LCD_Clear
  6576                           
  6577                           ;Drawing.c: 171:     DrawHighscoreText();
  6578  0D63  118A  272C  158A   	fcall	_DrawHighscoreText
  6579                           
  6580                           ;Drawing.c: 173:     for (uint8_t i = 0; i < NUM_FLASHES; ++i)
  6581  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  6582  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  6583  0D68  01AC               	clrf	FlashVictoriously@i
  6584  0D69                     l4295:	
  6585                           
  6586                           ;Drawing.c: 174:     {;Drawing.c: 175:         _delay((unsigned long)((FLASH_DELAY)*(800
      +                          0000/4000.0)));
  6587  0D69  3007               	movlw	7
  6588  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  6589  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  6590  0D6C  00AB               	movwf	??_FlashVictoriously+2
  6591  0D6D  3017               	movlw	23
  6592  0D6E  00AA               	movwf	??_FlashVictoriously+1
  6593  0D6F  306A               	movlw	106
  6594  0D70  00A9               	movwf	??_FlashVictoriously
  6595  0D71                     u4117:	
  6596  0D71  0BA9               	decfsz	??_FlashVictoriously,f
  6597  0D72  2D71               	goto	u4117
  6598  0D73  0BAA               	decfsz	??_FlashVictoriously+1,f
  6599  0D74  2D71               	goto	u4117
  6600  0D75  0BAB               	decfsz	??_FlashVictoriously+2,f
  6601  0D76  2D71               	goto	u4117
  6602                           
  6603                           ;Drawing.c: 176:         LCD_TurnOff();
  6604  0D77  158A  20AC  158A   	fcall	_LCD_TurnOff
  6605                           
  6606                           ;Drawing.c: 177:         _delay((unsigned long)((FLASH_DELAY)*(8000000/4000.0)));
  6607  0D7A  3007               	movlw	7
  6608  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  6609  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  6610  0D7D  00AB               	movwf	??_FlashVictoriously+2
  6611  0D7E  3017               	movlw	23
  6612  0D7F  00AA               	movwf	??_FlashVictoriously+1
  6613  0D80  306A               	movlw	106
  6614  0D81  00A9               	movwf	??_FlashVictoriously
  6615  0D82                     u4127:	
  6616  0D82  0BA9               	decfsz	??_FlashVictoriously,f
  6617  0D83  2D82               	goto	u4127
  6618  0D84  0BAA               	decfsz	??_FlashVictoriously+1,f
  6619  0D85  2D82               	goto	u4127
  6620  0D86  0BAB               	decfsz	??_FlashVictoriously+2,f
  6621  0D87  2D82               	goto	u4127
  6622                           
  6623                           ;Drawing.c: 178:         LCD_TurnOn();
  6624  0D88  158A  20B6  158A   	fcall	_LCD_TurnOn
  6625                           
  6626                           ;Drawing.c: 179:     }
  6627  0D8B  3001               	movlw	1
  6628  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  6629  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
  6630  0D8E  00A9               	movwf	??_FlashVictoriously
  6631  0D8F  0829               	movf	??_FlashVictoriously,w
  6632  0D90  07AC               	addwf	FlashVictoriously@i,f
  6633  0D91  3006               	movlw	6
  6634  0D92  022C               	subwf	FlashVictoriously@i,w
  6635  0D93  1803               	btfsc	3,0
  6636  0D94  0008               	return
  6637  0D95  2D69               	goto	l4295
  6638  0D96                     __end_of_FlashVictoriously:	
  6639                           
  6640                           	psect	text45
  6641  08B6                     __ptext45:	
  6642 ;; *************** function _LCD_TurnOn *****************
  6643 ;; Defined at:
  6644 ;;		line 120 in file "LCD.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      void 
  6651 ;; Registers used:
  6652 ;;		wreg, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6658 ;;      Params:         0       0       0       0
  6659 ;;      Locals:         0       0       0       0
  6660 ;;      Temps:          0       1       0       0
  6661 ;;      Totals:         0       1       0       0
  6662 ;;Total ram usage:        1 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    5
  6665 ;; This function calls:
  6666 ;;		_LCD_Write
  6667 ;; This function is called by:
  6668 ;;		_Setup
  6669 ;;		_FlashVictoriously
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _LCD_TurnOn
  6675  08B6                     _LCD_TurnOn:	
  6676                           
  6677                           ;LCD.c: 122:     LCD_Write(LCD_WRITE_INSTRUCTION, 0x3F);
  6678                           
  6679                           ;incstack = 0
  6680                           ; Regs used in _LCD_TurnOn: [wreg+status,2+status,0+pclath+cstack]
  6681  08B6  303F               	movlw	63
  6682  08B7  1283               	bcf	3,5	;RP0=0, select bank0
  6683  08B8  1303               	bcf	3,6	;RP1=0, select bank0
  6684  08B9  00A1               	movwf	??_LCD_TurnOn
  6685  08BA  0821               	movf	??_LCD_TurnOn,w
  6686  08BB  00F8               	movwf	LCD_Write@data
  6687  08BC  3000               	movlw	0
  6688  08BD  158A  219B         	fcall	_LCD_Write
  6689  08BF  0008               	return
  6690  08C0                     __end_of_LCD_TurnOn:	
  6691                           
  6692                           	psect	text46
  6693  08AC                     __ptext46:	
  6694 ;; *************** function _LCD_TurnOff *****************
  6695 ;; Defined at:
  6696 ;;		line 125 in file "LCD.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, status,0, pclath, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6710 ;;      Params:         0       0       0       0
  6711 ;;      Locals:         0       0       0       0
  6712 ;;      Temps:          0       1       0       0
  6713 ;;      Totals:         0       1       0       0
  6714 ;;Total ram usage:        1 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    5
  6717 ;; This function calls:
  6718 ;;		_LCD_Write
  6719 ;; This function is called by:
  6720 ;;		_FlashVictoriously
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           
  6725                           ;psect for function _LCD_TurnOff
  6726  08AC                     _LCD_TurnOff:	
  6727                           
  6728                           ;LCD.c: 127:     LCD_Write(LCD_WRITE_INSTRUCTION, 0x3E);
  6729                           
  6730                           ;incstack = 0
  6731                           ; Regs used in _LCD_TurnOff: [wreg+status,2+status,0+pclath+cstack]
  6732  08AC  303E               	movlw	62
  6733  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  6734  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  6735  08AF  00A1               	movwf	??_LCD_TurnOff
  6736  08B0  0821               	movf	??_LCD_TurnOff,w
  6737  08B1  00F8               	movwf	LCD_Write@data
  6738  08B2  3000               	movlw	0
  6739  08B3  158A  219B         	fcall	_LCD_Write
  6740  08B5  0008               	return
  6741  08B6                     __end_of_LCD_TurnOff:	
  6742                           
  6743                           	psect	text47
  6744  0AFB                     __ptext47:	
  6745 ;; *************** function _LCD_Clear *****************
  6746 ;; Defined at:
  6747 ;;		line 145 in file "LCD.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;		None
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  y               1    4[BANK0 ] unsigned char 
  6752 ;;  x               1    5[BANK0 ] unsigned char 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  1    wreg      void 
  6755 ;; Registers used:
  6756 ;;		wreg, status,2, status,0, pclath, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6762 ;;      Params:         0       0       0       0
  6763 ;;      Locals:         0       2       0       0
  6764 ;;      Temps:          0       1       0       0
  6765 ;;      Totals:         0       3       0       0
  6766 ;;Total ram usage:        3 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    6
  6769 ;; This function calls:
  6770 ;;		_LCD_SetX
  6771 ;;		_LCD_SetY
  6772 ;;		_LCD_WriteData
  6773 ;; This function is called by:
  6774 ;;		_Setup
  6775 ;;		_FlashVictoriously
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _LCD_Clear
  6781  0AFB                     _LCD_Clear:	
  6782                           
  6783                           ;LCD.c: 147:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  6787  0AFB  1283               	bcf	3,5	;RP0=0, select bank0
  6788  0AFC  1303               	bcf	3,6	;RP1=0, select bank0
  6789  0AFD  01A5               	clrf	LCD_Clear@x
  6790  0AFE                     l3807:	
  6791                           
  6792                           ;LCD.c: 148:     {;LCD.c: 149:         LCD_SetX(x);
  6793  0AFE  0825               	movf	LCD_Clear@x,w
  6794  0AFF  158A  20D7  158A   	fcall	_LCD_SetX
  6795                           
  6796                           ;LCD.c: 150:         LCD_SetY(0);
  6797  0B02  3000               	movlw	0
  6798  0B03  158A  20E3  158A   	fcall	_LCD_SetY
  6799                           
  6800                           ;LCD.c: 151:         for (uint8_t y = 0; y < LCD_SEGMENT_HEIGHT; ++y)
  6801  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  6802  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  6803  0B08  01A4               	clrf	LCD_Clear@y
  6804  0B09                     l3815:	
  6805                           
  6806                           ;LCD.c: 152:             LCD_WriteData(0);
  6807  0B09  3000               	movlw	0
  6808  0B0A  158A  20C0  158A   	fcall	_LCD_WriteData
  6809  0B0D  3001               	movlw	1
  6810  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  6811  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  6812  0B10  00A3               	movwf	??_LCD_Clear
  6813  0B11  0823               	movf	??_LCD_Clear,w
  6814  0B12  07A4               	addwf	LCD_Clear@y,f
  6815  0B13  3040               	movlw	64
  6816  0B14  0224               	subwf	LCD_Clear@y,w
  6817  0B15  1C03               	skipc
  6818  0B16  2B09               	goto	l3815
  6819                           
  6820                           ;LCD.c: 153:     }
  6821  0B17  3001               	movlw	1
  6822  0B18  00A3               	movwf	??_LCD_Clear
  6823  0B19  0823               	movf	??_LCD_Clear,w
  6824  0B1A  07A5               	addwf	LCD_Clear@x,f
  6825  0B1B  3008               	movlw	8
  6826  0B1C  0225               	subwf	LCD_Clear@x,w
  6827  0B1D  1803               	btfsc	3,0
  6828  0B1E  0008               	return
  6829  0B1F  2AFE               	goto	l3807
  6830  0B20                     __end_of_LCD_Clear:	
  6831                           
  6832                           	psect	text48
  6833  072C                     __ptext48:	
  6834 ;; *************** function _DrawHighscoreText *****************
  6835 ;; Defined at:
  6836 ;;		line 139 in file "Drawing.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;		None
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;  y               1    7[BANK0 ] unsigned char 
  6841 ;;  x               1    8[BANK0 ] unsigned char 
  6842 ;;  y               1    6[BANK0 ] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      void 
  6845 ;; Registers used:
  6846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6852 ;;      Params:         0       0       0       0
  6853 ;;      Locals:         0       3       0       0
  6854 ;;      Temps:          0       3       0       0
  6855 ;;      Totals:         0       6       0       0
  6856 ;;Total ram usage:        6 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    6
  6859 ;; This function calls:
  6860 ;;		_LCD_SegmentSelection
  6861 ;;		_LCD_SetX
  6862 ;;		_LCD_SetY
  6863 ;;		_LCD_WriteData
  6864 ;; This function is called by:
  6865 ;;		_FlashVictoriously
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _DrawHighscoreText
  6871  072C                     _DrawHighscoreText:	
  6872                           
  6873                           ;Drawing.c: 141:     uint8_t const baseX = 5;;Drawing.c: 142:     uint8_t const baseY = 
      +                          56;;Drawing.c: 144:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  6874                           
  6875                           ;incstack = 0
  6876 ;; using string table level
  6877                           ; Regs used in _DrawHighscoreText: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6878  072C  3002               	movlw	2
  6879  072D  158A  2131  118A   	fcall	_LCD_SegmentSelection
  6880                           
  6881                           ;Drawing.c: 145:     LCD_SetX(baseX);
  6882  0730  3005               	movlw	5
  6883  0731  158A  20D7  118A   	fcall	_LCD_SetX
  6884                           
  6885                           ;Drawing.c: 146:     LCD_SetY(baseY);
  6886  0734  3038               	movlw	56
  6887  0735  158A  20E3  118A   	fcall	_LCD_SetY
  6888                           
  6889                           ;Drawing.c: 148:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  6890  0738  1283               	bcf	3,5	;RP0=0, select bank0
  6891  0739  1303               	bcf	3,6	;RP1=0, select bank0
  6892  073A  01A6               	clrf	DrawHighscoreText@y
  6893  073B                     l3971:	
  6894                           
  6895                           ;Drawing.c: 149:         LCD_WriteData(Font_hi[y]);
  6896  073B  0826               	movf	DrawHighscoreText@y,w
  6897  073C  3E7A               	addlw	low (_Font_hi| (0+32768))
  6898  073D  0084               	movwf	4
  6899  073E  3081               	movlw	high (_Font_hi| (0+32768))
  6900  073F  1803               	skipnc
  6901  0740  3E01               	addlw	1
  6902  0741  00FF               	movwf	127
  6903  0742  118A  2100  118A   	fcall	stringtab
  6904  0745  158A  20C0  118A   	fcall	_LCD_WriteData
  6905  0748  3001               	movlw	1
  6906  0749  1283               	bcf	3,5	;RP0=0, select bank0
  6907  074A  1303               	bcf	3,6	;RP1=0, select bank0
  6908  074B  00A3               	movwf	??_DrawHighscoreText
  6909  074C  0823               	movf	??_DrawHighscoreText,w
  6910  074D  07A6               	addwf	DrawHighscoreText@y,f
  6911  074E  3008               	movlw	8
  6912  074F  0226               	subwf	DrawHighscoreText@y,w
  6913  0750  1C03               	skipc
  6914  0751  2F3B               	goto	l3971
  6915                           
  6916                           ;Drawing.c: 152:     for (uint8_t x = 0; x < 3; ++x)
  6917  0752  01A8               	clrf	DrawHighscoreText@x
  6918  0753                     l3983:	
  6919                           
  6920                           ;Drawing.c: 153:     {;Drawing.c: 154:         LCD_SetY(baseY);
  6921  0753  3038               	movlw	56
  6922  0754  158A  20E3  118A   	fcall	_LCD_SetY
  6923                           
  6924                           ;Drawing.c: 155:         LCD_SetX(baseX - x - 1);
  6925  0757  1283               	bcf	3,5	;RP0=0, select bank0
  6926  0758  1303               	bcf	3,6	;RP1=0, select bank0
  6927  0759  0828               	movf	DrawHighscoreText@x,w
  6928  075A  3C04               	sublw	4
  6929  075B  158A  20D7  118A   	fcall	_LCD_SetX
  6930                           
  6931                           ;Drawing.c: 156:         for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  6932  075E  1283               	bcf	3,5	;RP0=0, select bank0
  6933  075F  1303               	bcf	3,6	;RP1=0, select bank0
  6934  0760  01A7               	clrf	DrawHighscoreText@y_786
  6935  0761                     l3991:	
  6936                           
  6937                           ;Drawing.c: 157:             LCD_WriteData(Font_score[x][y]);
  6938  0761  0828               	movf	DrawHighscoreText@x,w
  6939  0762  00A3               	movwf	??_DrawHighscoreText
  6940  0763  3002               	movlw	2
  6941  0764                     u3595:	
  6942  0764  1003               	clrc
  6943  0765  0DA3               	rlf	??_DrawHighscoreText,f
  6944  0766  3EFF               	addlw	-1
  6945  0767  1D03               	skipz
  6946  0768  2F64               	goto	u3595
  6947  0769  1003               	clrc
  6948  076A  0D23               	rlf	??_DrawHighscoreText,w
  6949  076B  3E62               	addlw	low (_Font_score| (0+32768))
  6950  076C  00A4               	movwf	??_DrawHighscoreText+1
  6951  076D  3081               	movlw	high (_Font_score| (0+32768))
  6952  076E  1803               	skipnc
  6953  076F  3E01               	addlw	1
  6954  0770  00A5               	movwf	??_DrawHighscoreText+2
  6955  0771  0827               	movf	DrawHighscoreText@y_786,w
  6956  0772  0724               	addwf	??_DrawHighscoreText+1,w
  6957  0773  0084               	movwf	4
  6958  0774  0825               	movf	??_DrawHighscoreText+2,w
  6959  0775  1803               	skipnc
  6960  0776  0A25               	incf	??_DrawHighscoreText+2,w
  6961  0777  00FF               	movwf	127
  6962  0778  118A  2100  118A   	fcall	stringtab
  6963  077B  158A  20C0  118A   	fcall	_LCD_WriteData
  6964  077E  3001               	movlw	1
  6965  077F  1283               	bcf	3,5	;RP0=0, select bank0
  6966  0780  1303               	bcf	3,6	;RP1=0, select bank0
  6967  0781  00A3               	movwf	??_DrawHighscoreText
  6968  0782  0823               	movf	??_DrawHighscoreText,w
  6969  0783  07A7               	addwf	DrawHighscoreText@y_786,f
  6970  0784  3008               	movlw	8
  6971  0785  0227               	subwf	DrawHighscoreText@y_786,w
  6972  0786  1C03               	skipc
  6973  0787  2F61               	goto	l3991
  6974                           
  6975                           ;Drawing.c: 158:     }
  6976  0788  3001               	movlw	1
  6977  0789  00A3               	movwf	??_DrawHighscoreText
  6978  078A  0823               	movf	??_DrawHighscoreText,w
  6979  078B  07A8               	addwf	DrawHighscoreText@x,f
  6980  078C  3003               	movlw	3
  6981  078D  0228               	subwf	DrawHighscoreText@x,w
  6982  078E  1803               	btfsc	3,0
  6983  078F  0008               	return
  6984  0790  2F53               	goto	l3983
  6985  0791                     __end_of_DrawHighscoreText:	
  6986                           
  6987                           	psect	text49
  6988  0CBC                     __ptext49:	
  6989 ;; *************** function _DrawTetris *****************
  6990 ;; Defined at:
  6991 ;;		line 62 in file "Drawing.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  tetrisGame      1    wreg     PTR struct .
  6994 ;;		 -> main@tetrisGame(63), 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  tetrisGame      1   18[BANK0 ] PTR struct .
  6997 ;;		 -> main@tetrisGame(63), 
  6998 ;;  x               1   23[BANK0 ] unsigned char 
  6999 ;;  rightMask       2   21[BANK0 ] unsigned int 
  7000 ;;  leftMask        2   19[BANK0 ] unsigned int 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      void 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7010 ;;      Params:         0       0       0       0
  7011 ;;      Locals:         0       6       0       0
  7012 ;;      Temps:          0       1       0       0
  7013 ;;      Totals:         0       7       0       0
  7014 ;;Total ram usage:        7 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    7
  7017 ;; This function calls:
  7018 ;;		_DrawTetrisGameColumn
  7019 ;; This function is called by:
  7020 ;;		_main
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           
  7025                           ;psect for function _DrawTetris
  7026  0CBC                     _DrawTetris:	
  7027                           
  7028                           ;incstack = 0
  7029                           ; Regs used in _DrawTetris: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7030                           ;DrawTetris@tetrisGame stored from wreg
  7031  0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  7032  0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  7033  0CBE  00B2               	movwf	DrawTetris@tetrisGame
  7034                           
  7035                           ;Drawing.c: 62: void DrawTetris(Tetris_Game *tetrisGame);Drawing.c: 63: {;Drawing.c: 64:
      +                               uint16_t leftMask = 0b0000000000000010;
  7036  0CBF  3002               	movlw	2
  7037  0CC0  00B3               	movwf	DrawTetris@leftMask
  7038  0CC1  3000               	movlw	0
  7039  0CC2  00B4               	movwf	DrawTetris@leftMask+1
  7040                           
  7041                           ;Drawing.c: 65:     uint16_t rightMask = 0b0000000000000001;
  7042  0CC3  3001               	movlw	1
  7043  0CC4  00B5               	movwf	DrawTetris@rightMask
  7044  0CC5  3000               	movlw	0
  7045  0CC6  00B6               	movwf	DrawTetris@rightMask+1
  7046                           
  7047                           ;Drawing.c: 67:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  7048  0CC7  01B7               	clrf	DrawTetris@x
  7049  0CC8                     l4275:	
  7050                           
  7051                           ;Drawing.c: 68:     {;Drawing.c: 69:         DrawTetrisGameColumn(tetrisGame, x, rightMa
      +                          sk, leftMask);
  7052  0CC8  0837               	movf	DrawTetris@x,w
  7053  0CC9  00B1               	movwf	??_DrawTetris
  7054  0CCA  0831               	movf	??_DrawTetris,w
  7055  0CCB  00A3               	movwf	DrawTetrisGameColumn@x
  7056  0CCC  0836               	movf	DrawTetris@rightMask+1,w
  7057  0CCD  00A5               	movwf	DrawTetrisGameColumn@rightMask+1
  7058  0CCE  0835               	movf	DrawTetris@rightMask,w
  7059  0CCF  00A4               	movwf	DrawTetrisGameColumn@rightMask
  7060  0CD0  0834               	movf	DrawTetris@leftMask+1,w
  7061  0CD1  00A7               	movwf	DrawTetrisGameColumn@leftMask+1
  7062  0CD2  0833               	movf	DrawTetris@leftMask,w
  7063  0CD3  00A6               	movwf	DrawTetrisGameColumn@leftMask
  7064  0CD4  0832               	movf	DrawTetris@tetrisGame,w
  7065  0CD5  118A  25C7  158A   	fcall	_DrawTetrisGameColumn
  7066                           
  7067                           ;Drawing.c: 70:         leftMask <<= 2;
  7068  0CD8  3002               	movlw	2
  7069  0CD9  1283               	bcf	3,5	;RP0=0, select bank0
  7070  0CDA  1303               	bcf	3,6	;RP1=0, select bank0
  7071  0CDB                     u3995:	
  7072  0CDB  1003               	clrc
  7073  0CDC  0DB3               	rlf	DrawTetris@leftMask,f
  7074  0CDD  0DB4               	rlf	DrawTetris@leftMask+1,f
  7075  0CDE  3EFF               	addlw	-1
  7076  0CDF  1D03               	skipz
  7077  0CE0  2CDB               	goto	u3995
  7078                           
  7079                           ;Drawing.c: 71:         rightMask <<= 2;
  7080  0CE1  3002               	movlw	2
  7081  0CE2                     u4005:	
  7082  0CE2  1003               	clrc
  7083  0CE3  0DB5               	rlf	DrawTetris@rightMask,f
  7084  0CE4  0DB6               	rlf	DrawTetris@rightMask+1,f
  7085  0CE5  3EFF               	addlw	-1
  7086  0CE6  1D03               	skipz
  7087  0CE7  2CE2               	goto	u4005
  7088                           
  7089                           ;Drawing.c: 72:     }
  7090  0CE8  3001               	movlw	1
  7091  0CE9  00B1               	movwf	??_DrawTetris
  7092  0CEA  0831               	movf	??_DrawTetris,w
  7093  0CEB  07B7               	addwf	DrawTetris@x,f
  7094  0CEC  3008               	movlw	8
  7095  0CED  0237               	subwf	DrawTetris@x,w
  7096  0CEE  1803               	btfsc	3,0
  7097  0CEF  0008               	return
  7098  0CF0  2CC8               	goto	l4275
  7099  0CF1                     __end_of_DrawTetris:	
  7100                           
  7101                           	psect	text50
  7102  05C7                     __ptext50:	
  7103 ;; *************** function _DrawTetrisGameColumn *****************
  7104 ;; Defined at:
  7105 ;;		line 15 in file "Drawing.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  tetrisGame      1    wreg     PTR struct .
  7108 ;;		 -> main@tetrisGame(63), 
  7109 ;;  x               1    3[BANK0 ] unsigned char 
  7110 ;;  rightMask       2    4[BANK0 ] unsigned int 
  7111 ;;  leftMask        2    6[BANK0 ] unsigned int 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  tetrisGame      1   10[BANK0 ] PTR struct .
  7114 ;;		 -> main@tetrisGame(63), 
  7115 ;;  i               1   14[BANK0 ] unsigned char 
  7116 ;;  gameRow         2   12[BANK0 ] unsigned int 
  7117 ;;  lcdRow          1   16[BANK0 ] unsigned char 
  7118 ;;  y               1   15[BANK0 ] unsigned char 
  7119 ;;  tableY          1   11[BANK0 ] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      void 
  7122 ;; Registers used:
  7123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7129 ;;      Params:         0       5       0       0
  7130 ;;      Locals:         0       7       0       0
  7131 ;;      Temps:          0       2       0       0
  7132 ;;      Totals:         0      14       0       0
  7133 ;;Total ram usage:       14 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    6
  7136 ;; This function calls:
  7137 ;;		_LCD_SegmentSelection
  7138 ;;		_LCD_SetX
  7139 ;;		_LCD_SetY
  7140 ;;		_LCD_WriteData
  7141 ;; This function is called by:
  7142 ;;		_DrawTetris
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           
  7147                           ;psect for function _DrawTetrisGameColumn
  7148  05C7                     _DrawTetrisGameColumn:	
  7149                           
  7150                           ;incstack = 0
  7151                           ; Regs used in _DrawTetrisGameColumn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7152                           ;DrawTetrisGameColumn@tetrisGame stored from wreg
  7153  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  7154  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  7155  05C9  00AA               	movwf	DrawTetrisGameColumn@tetrisGame
  7156                           
  7157                           ;Drawing.c: 15: static void DrawTetrisGameColumn(Tetris_Game *tetrisGame, uint8_t x, uin
      +                          t16_t rightMask, uint16_t leftMask);Drawing.c: 16: {;Drawing.c: 17:     uint8_t tableY =
      +                           0;
  7158  05CA  01AB               	clrf	DrawTetrisGameColumn@tableY
  7159                           
  7160                           ;Drawing.c: 19:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  7161  05CB  3002               	movlw	2
  7162  05CC  158A  2131  118A   	fcall	_LCD_SegmentSelection
  7163                           
  7164                           ;Drawing.c: 20:     LCD_SetY(FONT_HEIGHT);
  7165  05CF  3008               	movlw	8
  7166  05D0  158A  20E3  118A   	fcall	_LCD_SetY
  7167                           
  7168                           ;Drawing.c: 21:     LCD_SetX(x);
  7169  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  7170  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  7171  05D5  0823               	movf	DrawTetrisGameColumn@x,w
  7172  05D6  158A  20D7  118A   	fcall	_LCD_SetX
  7173                           
  7174                           ;Drawing.c: 23:     for (uint8_t y = FONT_HEIGHT; y < LCD_HEIGHT; y += GAME_PIXEL_HEIGHT
      +                          )
  7175  05D9  3008               	movlw	8
  7176  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  7177  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  7178  05DC  00A8               	movwf	??_DrawTetrisGameColumn
  7179  05DD  0828               	movf	??_DrawTetrisGameColumn,w
  7180  05DE  00AF               	movwf	DrawTetrisGameColumn@y
  7181  05DF                     l3919:	
  7182                           
  7183                           ;Drawing.c: 24:     {;Drawing.c: 25:         uint16_t gameRow = tetrisGame->table[tableY
      +                          ];
  7184  05DF  082B               	movf	DrawTetrisGameColumn@tableY,w
  7185  05E0  00A8               	movwf	??_DrawTetrisGameColumn
  7186  05E1  0728               	addwf	??_DrawTetrisGameColumn,w
  7187  05E2  072A               	addwf	DrawTetrisGameColumn@tetrisGame,w
  7188  05E3  00A9               	movwf	??_DrawTetrisGameColumn+1
  7189  05E4  0829               	movf	??_DrawTetrisGameColumn+1,w
  7190  05E5  0084               	movwf	4
  7191  05E6  1383               	bcf	3,7	;select IRP bank0
  7192  05E7  0800               	movf	0,w
  7193  05E8  00AC               	movwf	DrawTetrisGameColumn@gameRow
  7194  05E9  0A84               	incf	4,f
  7195  05EA  0800               	movf	0,w
  7196  05EB  00AD               	movwf	DrawTetrisGameColumn@gameRow+1
  7197                           
  7198                           ;Drawing.c: 26:         uint8_t lcdRow = 0;
  7199  05EC  01B0               	clrf	DrawTetrisGameColumn@lcdRow
  7200                           
  7201                           ;Drawing.c: 27:         if (gameRow & rightMask)
  7202  05ED  0824               	movf	DrawTetrisGameColumn@rightMask,w
  7203  05EE  052C               	andwf	DrawTetrisGameColumn@gameRow,w
  7204  05EF  00A8               	movwf	??_DrawTetrisGameColumn
  7205  05F0  0825               	movf	DrawTetrisGameColumn@rightMask+1,w
  7206  05F1  052D               	andwf	DrawTetrisGameColumn@gameRow+1,w
  7207  05F2  00A9               	movwf	??_DrawTetrisGameColumn+1
  7208  05F3  0828               	movf	??_DrawTetrisGameColumn,w
  7209  05F4  0429               	iorwf	??_DrawTetrisGameColumn+1,w
  7210  05F5  1903               	btfsc	3,2
  7211  05F6  2DFB               	goto	l3927
  7212                           
  7213                           ;Drawing.c: 28:             lcdRow = 0x0F;
  7214  05F7  300F               	movlw	15
  7215  05F8  00A8               	movwf	??_DrawTetrisGameColumn
  7216  05F9  0828               	movf	??_DrawTetrisGameColumn,w
  7217  05FA  00B0               	movwf	DrawTetrisGameColumn@lcdRow
  7218  05FB                     l3927:	
  7219                           
  7220                           ;Drawing.c: 29:         if (gameRow & leftMask)
  7221  05FB  0826               	movf	DrawTetrisGameColumn@leftMask,w
  7222  05FC  052C               	andwf	DrawTetrisGameColumn@gameRow,w
  7223  05FD  00A8               	movwf	??_DrawTetrisGameColumn
  7224  05FE  0827               	movf	DrawTetrisGameColumn@leftMask+1,w
  7225  05FF  052D               	andwf	DrawTetrisGameColumn@gameRow+1,w
  7226  0600  00A9               	movwf	??_DrawTetrisGameColumn+1
  7227  0601  0828               	movf	??_DrawTetrisGameColumn,w
  7228  0602  0429               	iorwf	??_DrawTetrisGameColumn+1,w
  7229  0603  1903               	btfsc	3,2
  7230  0604  2E09               	goto	l478
  7231                           
  7232                           ;Drawing.c: 30:             lcdRow |= 0xF0;
  7233  0605  30F0               	movlw	240
  7234  0606  00A8               	movwf	??_DrawTetrisGameColumn
  7235  0607  0828               	movf	??_DrawTetrisGameColumn,w
  7236  0608  04B0               	iorwf	DrawTetrisGameColumn@lcdRow,f
  7237  0609                     l478:	
  7238                           
  7239                           ;Drawing.c: 32:         if (y == 63)
  7240  0609  303F               	movlw	63
  7241  060A  062F               	xorwf	DrawTetrisGameColumn@y,w
  7242  060B  1D03               	btfss	3,2
  7243  060C  2E38               	goto	l3933
  7244                           
  7245                           ;Drawing.c: 33:         {;Drawing.c: 34:             LCD_WriteData(lcdRow);
  7246  060D  0830               	movf	DrawTetrisGameColumn@lcdRow,w
  7247  060E  158A  20C0  118A   	fcall	_LCD_WriteData
  7248                           
  7249                           ;Drawing.c: 35:             LCD_SegmentSelection(LCD_BOTTOM_SEGMENT);
  7250  0611  3001               	movlw	1
  7251  0612  158A  2131  118A   	fcall	_LCD_SegmentSelection
  7252                           
  7253                           ;Drawing.c: 36:             LCD_SetX(x);
  7254  0615  1283               	bcf	3,5	;RP0=0, select bank0
  7255  0616  1303               	bcf	3,6	;RP1=0, select bank0
  7256  0617  0823               	movf	DrawTetrisGameColumn@x,w
  7257  0618  158A  20D7  118A   	fcall	_LCD_SetX
  7258                           
  7259                           ;Drawing.c: 37:             LCD_SetY(0);
  7260  061B  3000               	movlw	0
  7261  061C  158A  20E3  118A   	fcall	_LCD_SetY
  7262                           
  7263                           ;Drawing.c: 38:             LCD_WriteData(lcdRow);
  7264  061F  1283               	bcf	3,5	;RP0=0, select bank0
  7265  0620  1303               	bcf	3,6	;RP1=0, select bank0
  7266  0621  0830               	movf	DrawTetrisGameColumn@lcdRow,w
  7267  0622  158A  20C0  118A   	fcall	_LCD_WriteData
  7268                           
  7269                           ;Drawing.c: 39:             LCD_WriteData(lcdRow);
  7270  0625  1283               	bcf	3,5	;RP0=0, select bank0
  7271  0626  1303               	bcf	3,6	;RP1=0, select bank0
  7272  0627  0830               	movf	DrawTetrisGameColumn@lcdRow,w
  7273  0628  158A  20C0  118A   	fcall	_LCD_WriteData
  7274                           
  7275                           ;Drawing.c: 40:             LCD_WriteData(lcdRow);
  7276  062B  1283               	bcf	3,5	;RP0=0, select bank0
  7277  062C  1303               	bcf	3,6	;RP1=0, select bank0
  7278  062D  0830               	movf	DrawTetrisGameColumn@lcdRow,w
  7279  062E  158A  20C0  118A   	fcall	_LCD_WriteData
  7280                           
  7281                           ;Drawing.c: 41:             LCD_WriteData(lcdRow);
  7282  0631  1283               	bcf	3,5	;RP0=0, select bank0
  7283  0632  1303               	bcf	3,6	;RP1=0, select bank0
  7284  0633  0830               	movf	DrawTetrisGameColumn@lcdRow,w
  7285  0634  158A  20C0  118A   	fcall	_LCD_WriteData
  7286                           
  7287                           ;Drawing.c: 42:         }
  7288  0637  2E47               	goto	l3945
  7289  0638                     l3933:	
  7290                           
  7291                           ;Drawing.c: 44:         {;Drawing.c: 45:             for (uint8_t i = 0; i < GAME_PIXEL_
      +                          HEIGHT; ++i)
  7292  0638  01AE               	clrf	DrawTetrisGameColumn@i
  7293  0639                     l3939:	
  7294                           
  7295                           ;Drawing.c: 46:                 LCD_WriteData(lcdRow);
  7296  0639  0830               	movf	DrawTetrisGameColumn@lcdRow,w
  7297  063A  158A  20C0  118A   	fcall	_LCD_WriteData
  7298  063D  3001               	movlw	1
  7299  063E  1283               	bcf	3,5	;RP0=0, select bank0
  7300  063F  1303               	bcf	3,6	;RP1=0, select bank0
  7301  0640  00A8               	movwf	??_DrawTetrisGameColumn
  7302  0641  0828               	movf	??_DrawTetrisGameColumn,w
  7303  0642  07AE               	addwf	DrawTetrisGameColumn@i,f
  7304  0643  3005               	movlw	5
  7305  0644  022E               	subwf	DrawTetrisGameColumn@i,w
  7306  0645  1C03               	skipc
  7307  0646  2E39               	goto	l3939
  7308  0647                     l3945:	
  7309                           
  7310                           ;Drawing.c: 49:         ++tableY;
  7311  0647  3001               	movlw	1
  7312  0648  1283               	bcf	3,5	;RP0=0, select bank0
  7313  0649  1303               	bcf	3,6	;RP1=0, select bank0
  7314  064A  00A8               	movwf	??_DrawTetrisGameColumn
  7315  064B  0828               	movf	??_DrawTetrisGameColumn,w
  7316  064C  07AB               	addwf	DrawTetrisGameColumn@tableY,f
  7317                           
  7318                           ;Drawing.c: 50:     }
  7319  064D  3005               	movlw	5
  7320  064E  00A8               	movwf	??_DrawTetrisGameColumn
  7321  064F  0828               	movf	??_DrawTetrisGameColumn,w
  7322  0650  07AF               	addwf	DrawTetrisGameColumn@y,f
  7323  0651  3080               	movlw	128
  7324  0652  022F               	subwf	DrawTetrisGameColumn@y,w
  7325  0653  1803               	btfsc	3,0
  7326  0654  0008               	return
  7327  0655  2DDF               	goto	l3919
  7328  0656                     __end_of_DrawTetrisGameColumn:	
  7329                           
  7330                           	psect	text51
  7331  0276                     __ptext51:	
  7332 ;; *************** function _DrawHighscore *****************
  7333 ;; Defined at:
  7334 ;;		line 106 in file "Drawing.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  highscore       2   12[BANK0 ] unsigned int 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  lcdData         1   30[BANK0 ] unsigned char 
  7339 ;;  lcdData         1   29[BANK0 ] unsigned char 
  7340 ;;  lcdData         1   28[BANK0 ] unsigned char 
  7341 ;;  y               1   33[BANK0 ] unsigned char 
  7342 ;;  y               1   32[BANK0 ] unsigned char 
  7343 ;;  y               1   31[BANK0 ] unsigned char 
  7344 ;;  scoreDigits     5   23[BANK0 ] unsigned char [5]
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      void 
  7347 ;; Registers used:
  7348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7354 ;;      Params:         0       2       0       0
  7355 ;;      Locals:         0      11       0       0
  7356 ;;      Temps:          0       9       0       0
  7357 ;;      Totals:         0      22       0       0
  7358 ;;Total ram usage:       22 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    7
  7361 ;; This function calls:
  7362 ;;		_DrawHiMarker
  7363 ;;		_GetDigits
  7364 ;;		_LCD_SegmentSelection
  7365 ;;		_LCD_SetX
  7366 ;;		_LCD_SetY
  7367 ;;		_LCD_WriteData
  7368 ;; This function is called by:
  7369 ;;		_main
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _DrawHighscore
  7375  0276                     _DrawHighscore:	
  7376                           
  7377                           ;Drawing.c: 106: void DrawHighscore(uint16_t highscore);Drawing.c: 107: {;Drawing.c: 108
      +                          :     DrawHiMarker();
  7378                           
  7379                           ;incstack = 0
  7380 ;; using string table level
  7381                           ; Regs used in _DrawHighscore: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7382  0276  158A  23F7  118A   	fcall	_DrawHiMarker
  7383                           
  7384                           ;Drawing.c: 110:     uint8_t scoreDigits[NUM_DIGITS];;Drawing.c: 111:     GetDigits(high
      +                          score, scoreDigits);
  7385  0279  1283               	bcf	3,5	;RP0=0, select bank0
  7386  027A  1303               	bcf	3,6	;RP1=0, select bank0
  7387  027B  082D               	movf	DrawHighscore@highscore+1,w
  7388  027C  00A4               	movwf	GetDigits@n+1
  7389  027D  082C               	movf	DrawHighscore@highscore,w
  7390  027E  00A3               	movwf	GetDigits@n
  7391  027F  3037               	movlw	(low (DrawHighscore@scoreDigits| 0))& (0+255)
  7392  0280  00AE               	movwf	??_DrawHighscore
  7393  0281  082E               	movf	??_DrawHighscore,w
  7394  0282  00A5               	movwf	GetDigits@digits
  7395  0283  158A  2487  118A   	fcall	_GetDigits
  7396                           
  7397                           ;Drawing.c: 113:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  7398  0286  3002               	movlw	2
  7399  0287  158A  2131  118A   	fcall	_LCD_SegmentSelection
  7400                           
  7401                           ;Drawing.c: 114:     LCD_SetX(2);
  7402  028A  3002               	movlw	2
  7403  028B  158A  20D7  118A   	fcall	_LCD_SetX
  7404                           
  7405                           ;Drawing.c: 115:     LCD_SetY(0);
  7406  028E  3000               	movlw	0
  7407  028F  158A  20E3  118A   	fcall	_LCD_SetY
  7408                           
  7409                           ;Drawing.c: 116:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  7410  0292  1283               	bcf	3,5	;RP0=0, select bank0
  7411  0293  1303               	bcf	3,6	;RP1=0, select bank0
  7412  0294  01BF               	clrf	DrawHighscore@y
  7413  0295                     l4115:	
  7414                           
  7415                           ;Drawing.c: 117:     {;Drawing.c: 118:         uint8_t lcdData = Font_digits[scoreDigits
      +                          [0]][y] >> 4;
  7416  0295  0837               	movf	DrawHighscore@scoreDigits,w
  7417  0296  00AE               	movwf	??_DrawHighscore
  7418  0297  3002               	movlw	2
  7419  0298                     u3755:	
  7420  0298  1003               	clrc
  7421  0299  0DAE               	rlf	??_DrawHighscore,f
  7422  029A  3EFF               	addlw	-1
  7423  029B  1D03               	skipz
  7424  029C  2A98               	goto	u3755
  7425  029D  1003               	clrc
  7426  029E  0D2E               	rlf	??_DrawHighscore,w
  7427  029F  3E12               	addlw	low (_Font_digits| (0+32768))
  7428  02A0  00AF               	movwf	??_DrawHighscore+1
  7429  02A1  3081               	movlw	high (_Font_digits| (0+32768))
  7430  02A2  1803               	skipnc
  7431  02A3  3E01               	addlw	1
  7432  02A4  00B0               	movwf	??_DrawHighscore+2
  7433  02A5  083F               	movf	DrawHighscore@y,w
  7434  02A6  072F               	addwf	??_DrawHighscore+1,w
  7435  02A7  0084               	movwf	4
  7436  02A8  0830               	movf	??_DrawHighscore+2,w
  7437  02A9  1803               	skipnc
  7438  02AA  0A30               	incf	??_DrawHighscore+2,w
  7439  02AB  00FF               	movwf	127
  7440  02AC  118A  2100  118A   	fcall	stringtab
  7441  02AF  00B1               	movwf	??_DrawHighscore+3
  7442  02B0  3004               	movlw	4
  7443  02B1                     u3765:	
  7444  02B1  1003               	clrc
  7445  02B2  0CB1               	rrf	??_DrawHighscore+3,f
  7446  02B3  3EFF               	addlw	-1
  7447  02B4  1D03               	skipz
  7448  02B5  2AB1               	goto	u3765
  7449  02B6  0831               	movf	??_DrawHighscore+3,w
  7450  02B7  00B2               	movwf	??_DrawHighscore+4
  7451  02B8  0832               	movf	??_DrawHighscore+4,w
  7452  02B9  00BC               	movwf	DrawHighscore@lcdData
  7453                           
  7454                           ;Drawing.c: 119:         LCD_WriteData(lcdData << 1);
  7455  02BA  083C               	movf	DrawHighscore@lcdData,w
  7456  02BB  00AE               	movwf	??_DrawHighscore
  7457  02BC  072E               	addwf	??_DrawHighscore,w
  7458  02BD  158A  20C0  118A   	fcall	_LCD_WriteData
  7459                           
  7460                           ;Drawing.c: 120:     }
  7461  02C0  3001               	movlw	1
  7462  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  7463  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  7464  02C3  00AE               	movwf	??_DrawHighscore
  7465  02C4  082E               	movf	??_DrawHighscore,w
  7466  02C5  07BF               	addwf	DrawHighscore@y,f
  7467  02C6  3008               	movlw	8
  7468  02C7  023F               	subwf	DrawHighscore@y,w
  7469  02C8  1C03               	skipc
  7470  02C9  2A95               	goto	l4115
  7471                           
  7472                           ;Drawing.c: 122:     LCD_SetX(1);
  7473  02CA  3001               	movlw	1
  7474  02CB  158A  20D7  118A   	fcall	_LCD_SetX
  7475                           
  7476                           ;Drawing.c: 123:     LCD_SetY(0);
  7477  02CE  3000               	movlw	0
  7478  02CF  158A  20E3  118A   	fcall	_LCD_SetY
  7479                           
  7480                           ;Drawing.c: 124:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  7481  02D2  1283               	bcf	3,5	;RP0=0, select bank0
  7482  02D3  1303               	bcf	3,6	;RP1=0, select bank0
  7483  02D4  01C0               	clrf	DrawHighscore@y_777
  7484  02D5                     l4131:	
  7485                           
  7486                           ;Drawing.c: 125:     {;Drawing.c: 126:         uint8_t lcdData = Font_digits[scoreDigits
      +                          [1]][y] | (Font_digits[scoreDigits[2]][y] >> 4);
  7487  02D5  0838               	movf	DrawHighscore@scoreDigits+1,w
  7488  02D6  00AE               	movwf	??_DrawHighscore
  7489  02D7  3002               	movlw	2
  7490  02D8                     u3785:	
  7491  02D8  1003               	clrc
  7492  02D9  0DAE               	rlf	??_DrawHighscore,f
  7493  02DA  3EFF               	addlw	-1
  7494  02DB  1D03               	skipz
  7495  02DC  2AD8               	goto	u3785
  7496  02DD  1003               	clrc
  7497  02DE  0D2E               	rlf	??_DrawHighscore,w
  7498  02DF  3E12               	addlw	low (_Font_digits| (0+32768))
  7499  02E0  00AF               	movwf	??_DrawHighscore+1
  7500  02E1  3081               	movlw	high (_Font_digits| (0+32768))
  7501  02E2  1803               	skipnc
  7502  02E3  3E01               	addlw	1
  7503  02E4  00B0               	movwf	??_DrawHighscore+2
  7504  02E5  0840               	movf	DrawHighscore@y_777,w
  7505  02E6  072F               	addwf	??_DrawHighscore+1,w
  7506  02E7  0084               	movwf	4
  7507  02E8  0830               	movf	??_DrawHighscore+2,w
  7508  02E9  1803               	skipnc
  7509  02EA  0A30               	incf	??_DrawHighscore+2,w
  7510  02EB  00FF               	movwf	127
  7511  02EC  118A  2100  118A   	fcall	stringtab
  7512  02EF  00B1               	movwf	??_DrawHighscore+3
  7513  02F0  0839               	movf	DrawHighscore@scoreDigits+2,w
  7514  02F1  00B2               	movwf	??_DrawHighscore+4
  7515  02F2  3002               	movlw	2
  7516  02F3                     u3795:	
  7517  02F3  1003               	clrc
  7518  02F4  0DB2               	rlf	??_DrawHighscore+4,f
  7519  02F5  3EFF               	addlw	-1
  7520  02F6  1D03               	skipz
  7521  02F7  2AF3               	goto	u3795
  7522  02F8  1003               	clrc
  7523  02F9  0D32               	rlf	??_DrawHighscore+4,w
  7524  02FA  3E12               	addlw	low (_Font_digits| (0+32768))
  7525  02FB  00B3               	movwf	??_DrawHighscore+5
  7526  02FC  3081               	movlw	high (_Font_digits| (0+32768))
  7527  02FD  1803               	skipnc
  7528  02FE  3E01               	addlw	1
  7529  02FF  00B4               	movwf	??_DrawHighscore+6
  7530  0300  0840               	movf	DrawHighscore@y_777,w
  7531  0301  0733               	addwf	??_DrawHighscore+5,w
  7532  0302  0084               	movwf	4
  7533  0303  0834               	movf	??_DrawHighscore+6,w
  7534  0304  1803               	skipnc
  7535  0305  0A34               	incf	??_DrawHighscore+6,w
  7536  0306  00FF               	movwf	127
  7537  0307  118A  2100  118A   	fcall	stringtab
  7538  030A  00B5               	movwf	??_DrawHighscore+7
  7539  030B  3004               	movlw	4
  7540  030C                     u3805:	
  7541  030C  1003               	clrc
  7542  030D  0CB5               	rrf	??_DrawHighscore+7,f
  7543  030E  3EFF               	addlw	-1
  7544  030F  1D03               	skipz
  7545  0310  2B0C               	goto	u3805
  7546  0311  0835               	movf	??_DrawHighscore+7,w
  7547  0312  0431               	iorwf	??_DrawHighscore+3,w
  7548  0313  00B6               	movwf	??_DrawHighscore+8
  7549  0314  0836               	movf	??_DrawHighscore+8,w
  7550  0315  00BD               	movwf	DrawHighscore@lcdData_778
  7551                           
  7552                           ;Drawing.c: 127:         LCD_WriteData(lcdData << 1);
  7553  0316  083D               	movf	DrawHighscore@lcdData_778,w
  7554  0317  00AE               	movwf	??_DrawHighscore
  7555  0318  072E               	addwf	??_DrawHighscore,w
  7556  0319  158A  20C0  118A   	fcall	_LCD_WriteData
  7557                           
  7558                           ;Drawing.c: 128:     }
  7559  031C  3001               	movlw	1
  7560  031D  1283               	bcf	3,5	;RP0=0, select bank0
  7561  031E  1303               	bcf	3,6	;RP1=0, select bank0
  7562  031F  00AE               	movwf	??_DrawHighscore
  7563  0320  082E               	movf	??_DrawHighscore,w
  7564  0321  07C0               	addwf	DrawHighscore@y_777,f
  7565  0322  3008               	movlw	8
  7566  0323  0240               	subwf	DrawHighscore@y_777,w
  7567  0324  1C03               	skipc
  7568  0325  2AD5               	goto	l4131
  7569                           
  7570                           ;Drawing.c: 130:     LCD_SetX(0);
  7571  0326  3000               	movlw	0
  7572  0327  158A  20D7  118A   	fcall	_LCD_SetX
  7573                           
  7574                           ;Drawing.c: 131:     LCD_SetY(0);
  7575  032A  3000               	movlw	0
  7576  032B  158A  20E3  118A   	fcall	_LCD_SetY
  7577                           
  7578                           ;Drawing.c: 132:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  7579  032E  1283               	bcf	3,5	;RP0=0, select bank0
  7580  032F  1303               	bcf	3,6	;RP1=0, select bank0
  7581  0330  01C1               	clrf	DrawHighscore@y_779
  7582  0331                     l4147:	
  7583                           
  7584                           ;Drawing.c: 133:     {;Drawing.c: 134:         uint8_t lcdData = Font_digits[scoreDigits
      +                          [3]][y] | (Font_digits[scoreDigits[4]][y] >> 4);
  7585  0331  083A               	movf	DrawHighscore@scoreDigits+3,w
  7586  0332  00AE               	movwf	??_DrawHighscore
  7587  0333  3002               	movlw	2
  7588  0334                     u3825:	
  7589  0334  1003               	clrc
  7590  0335  0DAE               	rlf	??_DrawHighscore,f
  7591  0336  3EFF               	addlw	-1
  7592  0337  1D03               	skipz
  7593  0338  2B34               	goto	u3825
  7594  0339  1003               	clrc
  7595  033A  0D2E               	rlf	??_DrawHighscore,w
  7596  033B  3E12               	addlw	low (_Font_digits| (0+32768))
  7597  033C  00AF               	movwf	??_DrawHighscore+1
  7598  033D  3081               	movlw	high (_Font_digits| (0+32768))
  7599  033E  1803               	skipnc
  7600  033F  3E01               	addlw	1
  7601  0340  00B0               	movwf	??_DrawHighscore+2
  7602  0341  0841               	movf	DrawHighscore@y_779,w
  7603  0342  072F               	addwf	??_DrawHighscore+1,w
  7604  0343  0084               	movwf	4
  7605  0344  0830               	movf	??_DrawHighscore+2,w
  7606  0345  1803               	skipnc
  7607  0346  0A30               	incf	??_DrawHighscore+2,w
  7608  0347  00FF               	movwf	127
  7609  0348  118A  2100  118A   	fcall	stringtab
  7610  034B  00B1               	movwf	??_DrawHighscore+3
  7611  034C  083B               	movf	DrawHighscore@scoreDigits+4,w
  7612  034D  00B2               	movwf	??_DrawHighscore+4
  7613  034E  3002               	movlw	2
  7614  034F                     u3835:	
  7615  034F  1003               	clrc
  7616  0350  0DB2               	rlf	??_DrawHighscore+4,f
  7617  0351  3EFF               	addlw	-1
  7618  0352  1D03               	skipz
  7619  0353  2B4F               	goto	u3835
  7620  0354  1003               	clrc
  7621  0355  0D32               	rlf	??_DrawHighscore+4,w
  7622  0356  3E12               	addlw	low (_Font_digits| (0+32768))
  7623  0357  00B3               	movwf	??_DrawHighscore+5
  7624  0358  3081               	movlw	high (_Font_digits| (0+32768))
  7625  0359  1803               	skipnc
  7626  035A  3E01               	addlw	1
  7627  035B  00B4               	movwf	??_DrawHighscore+6
  7628  035C  0841               	movf	DrawHighscore@y_779,w
  7629  035D  0733               	addwf	??_DrawHighscore+5,w
  7630  035E  0084               	movwf	4
  7631  035F  0834               	movf	??_DrawHighscore+6,w
  7632  0360  1803               	skipnc
  7633  0361  0A34               	incf	??_DrawHighscore+6,w
  7634  0362  00FF               	movwf	127
  7635  0363  118A  2100  118A   	fcall	stringtab
  7636  0366  00B5               	movwf	??_DrawHighscore+7
  7637  0367  3004               	movlw	4
  7638  0368                     u3845:	
  7639  0368  1003               	clrc
  7640  0369  0CB5               	rrf	??_DrawHighscore+7,f
  7641  036A  3EFF               	addlw	-1
  7642  036B  1D03               	skipz
  7643  036C  2B68               	goto	u3845
  7644  036D  0835               	movf	??_DrawHighscore+7,w
  7645  036E  0431               	iorwf	??_DrawHighscore+3,w
  7646  036F  00B6               	movwf	??_DrawHighscore+8
  7647  0370  0836               	movf	??_DrawHighscore+8,w
  7648  0371  00BE               	movwf	DrawHighscore@lcdData_780
  7649                           
  7650                           ;Drawing.c: 135:         LCD_WriteData(lcdData << 1);
  7651  0372  083E               	movf	DrawHighscore@lcdData_780,w
  7652  0373  00AE               	movwf	??_DrawHighscore
  7653  0374  072E               	addwf	??_DrawHighscore,w
  7654  0375  158A  20C0  118A   	fcall	_LCD_WriteData
  7655                           
  7656                           ;Drawing.c: 136:     }
  7657  0378  3001               	movlw	1
  7658  0379  1283               	bcf	3,5	;RP0=0, select bank0
  7659  037A  1303               	bcf	3,6	;RP1=0, select bank0
  7660  037B  00AE               	movwf	??_DrawHighscore
  7661  037C  082E               	movf	??_DrawHighscore,w
  7662  037D  07C1               	addwf	DrawHighscore@y_779,f
  7663  037E  3008               	movlw	8
  7664  037F  0241               	subwf	DrawHighscore@y_779,w
  7665  0380  1803               	btfsc	3,0
  7666  0381  0008               	return
  7667  0382  2B31               	goto	l4147
  7668  0383                     __end_of_DrawHighscore:	
  7669                           
  7670                           	psect	text52
  7671  0BF7                     __ptext52:	
  7672 ;; *************** function _DrawHiMarker *****************
  7673 ;; Defined at:
  7674 ;;		line 53 in file "Drawing.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;		None
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;  y               1    4[BANK0 ] unsigned char 
  7679 ;; Return value:  Size  Location     Type
  7680 ;;                  1    wreg      void 
  7681 ;; Registers used:
  7682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7683 ;; Tracked objects:
  7684 ;;		On entry : 0/0
  7685 ;;		On exit  : 0/0
  7686 ;;		Unchanged: 0/0
  7687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7688 ;;      Params:         0       0       0       0
  7689 ;;      Locals:         0       1       0       0
  7690 ;;      Temps:          0       1       0       0
  7691 ;;      Totals:         0       2       0       0
  7692 ;;Total ram usage:        2 bytes
  7693 ;; Hardware stack levels used:    1
  7694 ;; Hardware stack levels required when called:    6
  7695 ;; This function calls:
  7696 ;;		_LCD_SegmentSelection
  7697 ;;		_LCD_SetX
  7698 ;;		_LCD_SetY
  7699 ;;		_LCD_WriteData
  7700 ;; This function is called by:
  7701 ;;		_DrawHighscore
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function _DrawHiMarker
  7707  0BF7                     _DrawHiMarker:	
  7708                           
  7709                           ;Drawing.c: 55:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  7710                           
  7711                           ;incstack = 0
  7712 ;; using string table level
  7713                           ; Regs used in _DrawHiMarker: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7714  0BF7  3002               	movlw	2
  7715  0BF8  158A  2131  158A   	fcall	_LCD_SegmentSelection
  7716                           
  7717                           ;Drawing.c: 56:     LCD_SetX(3);
  7718  0BFB  3003               	movlw	3
  7719  0BFC  158A  20D7  158A   	fcall	_LCD_SetX
  7720                           
  7721                           ;Drawing.c: 57:     LCD_SetY(0);
  7722  0BFF  3000               	movlw	0
  7723  0C00  158A  20E3  158A   	fcall	_LCD_SetY
  7724                           
  7725                           ;Drawing.c: 58:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  7726  0C03  1283               	bcf	3,5	;RP0=0, select bank0
  7727  0C04  1303               	bcf	3,6	;RP1=0, select bank0
  7728  0C05  01A4               	clrf	DrawHiMarker@y
  7729  0C06                     l3957:	
  7730                           
  7731                           ;Drawing.c: 59:         LCD_WriteData(Font_hi[y] >> 2);
  7732  0C06  0824               	movf	DrawHiMarker@y,w
  7733  0C07  3E7A               	addlw	low (_Font_hi| (0+32768))
  7734  0C08  0084               	movwf	4
  7735  0C09  3081               	movlw	high (_Font_hi| (0+32768))
  7736  0C0A  1803               	skipnc
  7737  0C0B  3E01               	addlw	1
  7738  0C0C  00FF               	movwf	127
  7739  0C0D  118A  2100  158A   	fcall	stringtab
  7740  0C10  00A3               	movwf	??_DrawHiMarker
  7741  0C11  3002               	movlw	2
  7742  0C12                     u3565:	
  7743  0C12  1003               	clrc
  7744  0C13  0CA3               	rrf	??_DrawHiMarker,f
  7745  0C14  3EFF               	addlw	-1
  7746  0C15  1D03               	skipz
  7747  0C16  2C12               	goto	u3565
  7748  0C17  0823               	movf	??_DrawHiMarker,w
  7749  0C18  158A  20C0  158A   	fcall	_LCD_WriteData
  7750  0C1B  3001               	movlw	1
  7751  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
  7752  0C1D  1303               	bcf	3,6	;RP1=0, select bank0
  7753  0C1E  00A3               	movwf	??_DrawHiMarker
  7754  0C1F  0823               	movf	??_DrawHiMarker,w
  7755  0C20  07A4               	addwf	DrawHiMarker@y,f
  7756  0C21  3008               	movlw	8
  7757  0C22  0224               	subwf	DrawHiMarker@y,w
  7758  0C23  1803               	btfsc	3,0
  7759  0C24  0008               	return
  7760  0C25  2C06               	goto	l3957
  7761  0C26                     __end_of_DrawHiMarker:	
  7762                           
  7763                           	psect	text53
  7764  0383                     __ptext53:	
  7765 ;; *************** function _DrawCurrentScore *****************
  7766 ;; Defined at:
  7767 ;;		line 75 in file "Drawing.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  tetrisGame      1    wreg     PTR struct .
  7770 ;;		 -> main@tetrisGame(63), 
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  tetrisGame      1   29[BANK0 ] PTR struct .
  7773 ;;		 -> main@tetrisGame(63), 
  7774 ;;  lcdData         1   28[BANK0 ] unsigned char 
  7775 ;;  lcdData         1   27[BANK0 ] unsigned char 
  7776 ;;  lcdData         1   26[BANK0 ] unsigned char 
  7777 ;;  y               1   30[BANK0 ] unsigned char 
  7778 ;;  y               1   32[BANK0 ] unsigned char 
  7779 ;;  y               1   31[BANK0 ] unsigned char 
  7780 ;;  scoreDigits     5   21[BANK0 ] unsigned char [5]
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      void 
  7783 ;; Registers used:
  7784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7790 ;;      Params:         0       0       0       0
  7791 ;;      Locals:         0      12       0       0
  7792 ;;      Temps:          0       9       0       0
  7793 ;;      Totals:         0      21       0       0
  7794 ;;Total ram usage:       21 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    6
  7797 ;; This function calls:
  7798 ;;		_GetDigits
  7799 ;;		_LCD_SegmentSelection
  7800 ;;		_LCD_SetX
  7801 ;;		_LCD_SetY
  7802 ;;		_LCD_WriteData
  7803 ;; This function is called by:
  7804 ;;		_main
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           
  7809                           ;psect for function _DrawCurrentScore
  7810  0383                     _DrawCurrentScore:	
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _DrawCurrentScore: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7814                           ;DrawCurrentScore@tetrisGame stored from wreg
  7815  0383  1283               	bcf	3,5	;RP0=0, select bank0
  7816  0384  1303               	bcf	3,6	;RP1=0, select bank0
  7817  0385  00BD               	movwf	DrawCurrentScore@tetrisGame
  7818                           
  7819                           ;Drawing.c: 75: void DrawCurrentScore(Tetris_Game *tetrisGame);Drawing.c: 76: {;Drawing.
      +                          c: 77:     uint8_t scoreDigits[NUM_DIGITS];;Drawing.c: 78:     GetDigits(tetrisGame->cur
      +                          rentScore, scoreDigits);
  7820  0386  083D               	movf	DrawCurrentScore@tetrisGame,w
  7821  0387  3E3D               	addlw	61
  7822  0388  0084               	movwf	4
  7823  0389  1383               	bcf	3,7	;select IRP bank0
  7824  038A  0800               	movf	0,w
  7825  038B  00A3               	movwf	GetDigits@n
  7826  038C  0A84               	incf	4,f
  7827  038D  0800               	movf	0,w
  7828  038E  00A4               	movwf	GetDigits@n+1
  7829  038F  3035               	movlw	(low (DrawCurrentScore@scoreDigits| 0))& (0+255)
  7830  0390  00AC               	movwf	??_DrawCurrentScore
  7831  0391  082C               	movf	??_DrawCurrentScore,w
  7832  0392  00A5               	movwf	GetDigits@digits
  7833  0393  158A  2487  118A   	fcall	_GetDigits
  7834                           
  7835                           ;Drawing.c: 80:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  7836  0396  3002               	movlw	2
  7837  0397  158A  2131  118A   	fcall	_LCD_SegmentSelection
  7838                           
  7839                           ;Drawing.c: 81:     LCD_SetX(7);
  7840  039A  3007               	movlw	7
  7841  039B  158A  20D7  118A   	fcall	_LCD_SetX
  7842                           
  7843                           ;Drawing.c: 82:     LCD_SetY(0);
  7844  039E  3000               	movlw	0
  7845  039F  158A  20E3  118A   	fcall	_LCD_SetY
  7846                           
  7847                           ;Drawing.c: 83:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  7848  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  7849  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  7850  03A4  01BF               	clrf	DrawCurrentScore@y
  7851  03A5                     l4059:	
  7852                           
  7853                           ;Drawing.c: 84:     {;Drawing.c: 85:         uint8_t lcdData = Font_digits[scoreDigits[0
      +                          ]][y] | (Font_digits[scoreDigits[1]][y] >> 4);
  7854  03A5  0835               	movf	DrawCurrentScore@scoreDigits,w
  7855  03A6  00AC               	movwf	??_DrawCurrentScore
  7856  03A7  3002               	movlw	2
  7857  03A8                     u3655:	
  7858  03A8  1003               	clrc
  7859  03A9  0DAC               	rlf	??_DrawCurrentScore,f
  7860  03AA  3EFF               	addlw	-1
  7861  03AB  1D03               	skipz
  7862  03AC  2BA8               	goto	u3655
  7863  03AD  1003               	clrc
  7864  03AE  0D2C               	rlf	??_DrawCurrentScore,w
  7865  03AF  3E12               	addlw	low (_Font_digits| (0+32768))
  7866  03B0  00AD               	movwf	??_DrawCurrentScore+1
  7867  03B1  3081               	movlw	high (_Font_digits| (0+32768))
  7868  03B2  1803               	skipnc
  7869  03B3  3E01               	addlw	1
  7870  03B4  00AE               	movwf	??_DrawCurrentScore+2
  7871  03B5  083F               	movf	DrawCurrentScore@y,w
  7872  03B6  072D               	addwf	??_DrawCurrentScore+1,w
  7873  03B7  0084               	movwf	4
  7874  03B8  082E               	movf	??_DrawCurrentScore+2,w
  7875  03B9  1803               	skipnc
  7876  03BA  0A2E               	incf	??_DrawCurrentScore+2,w
  7877  03BB  00FF               	movwf	127
  7878  03BC  118A  2100  118A   	fcall	stringtab
  7879  03BF  00AF               	movwf	??_DrawCurrentScore+3
  7880  03C0  0836               	movf	DrawCurrentScore@scoreDigits+1,w
  7881  03C1  00B0               	movwf	??_DrawCurrentScore+4
  7882  03C2  3002               	movlw	2
  7883  03C3                     u3665:	
  7884  03C3  1003               	clrc
  7885  03C4  0DB0               	rlf	??_DrawCurrentScore+4,f
  7886  03C5  3EFF               	addlw	-1
  7887  03C6  1D03               	skipz
  7888  03C7  2BC3               	goto	u3665
  7889  03C8  1003               	clrc
  7890  03C9  0D30               	rlf	??_DrawCurrentScore+4,w
  7891  03CA  3E12               	addlw	low (_Font_digits| (0+32768))
  7892  03CB  00B1               	movwf	??_DrawCurrentScore+5
  7893  03CC  3081               	movlw	high (_Font_digits| (0+32768))
  7894  03CD  1803               	skipnc
  7895  03CE  3E01               	addlw	1
  7896  03CF  00B2               	movwf	??_DrawCurrentScore+6
  7897  03D0  083F               	movf	DrawCurrentScore@y,w
  7898  03D1  0731               	addwf	??_DrawCurrentScore+5,w
  7899  03D2  0084               	movwf	4
  7900  03D3  0832               	movf	??_DrawCurrentScore+6,w
  7901  03D4  1803               	skipnc
  7902  03D5  0A32               	incf	??_DrawCurrentScore+6,w
  7903  03D6  00FF               	movwf	127
  7904  03D7  118A  2100  118A   	fcall	stringtab
  7905  03DA  00B3               	movwf	??_DrawCurrentScore+7
  7906  03DB  3004               	movlw	4
  7907  03DC                     u3675:	
  7908  03DC  1003               	clrc
  7909  03DD  0CB3               	rrf	??_DrawCurrentScore+7,f
  7910  03DE  3EFF               	addlw	-1
  7911  03DF  1D03               	skipz
  7912  03E0  2BDC               	goto	u3675
  7913  03E1  0833               	movf	??_DrawCurrentScore+7,w
  7914  03E2  042F               	iorwf	??_DrawCurrentScore+3,w
  7915  03E3  00B4               	movwf	??_DrawCurrentScore+8
  7916  03E4  0834               	movf	??_DrawCurrentScore+8,w
  7917  03E5  00BA               	movwf	DrawCurrentScore@lcdData
  7918                           
  7919                           ;Drawing.c: 86:         LCD_WriteData(lcdData);
  7920  03E6  083A               	movf	DrawCurrentScore@lcdData,w
  7921  03E7  158A  20C0  118A   	fcall	_LCD_WriteData
  7922                           
  7923                           ;Drawing.c: 87:     }
  7924  03EA  3001               	movlw	1
  7925  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  7926  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  7927  03ED  00AC               	movwf	??_DrawCurrentScore
  7928  03EE  082C               	movf	??_DrawCurrentScore,w
  7929  03EF  07BF               	addwf	DrawCurrentScore@y,f
  7930  03F0  3008               	movlw	8
  7931  03F1  023F               	subwf	DrawCurrentScore@y,w
  7932  03F2  1C03               	skipc
  7933  03F3  2BA5               	goto	l4059
  7934                           
  7935                           ;Drawing.c: 89:     LCD_SetX(6);
  7936  03F4  3006               	movlw	6
  7937  03F5  158A  20D7  118A   	fcall	_LCD_SetX
  7938                           
  7939                           ;Drawing.c: 90:     LCD_SetY(0);
  7940  03F8  3000               	movlw	0
  7941  03F9  158A  20E3  118A   	fcall	_LCD_SetY
  7942                           
  7943                           ;Drawing.c: 91:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  7944  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  7945  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  7946  03FE  01C0               	clrf	DrawCurrentScore@y_767
  7947  03FF                     l4075:	
  7948                           
  7949                           ;Drawing.c: 92:     {;Drawing.c: 93:         uint8_t lcdData = Font_digits[scoreDigits[2
      +                          ]][y] | (Font_digits[scoreDigits[3]][y] >> 4);
  7950  03FF  0837               	movf	DrawCurrentScore@scoreDigits+2,w
  7951  0400  00AC               	movwf	??_DrawCurrentScore
  7952  0401  3002               	movlw	2
  7953  0402                     u3695:	
  7954  0402  1003               	clrc
  7955  0403  0DAC               	rlf	??_DrawCurrentScore,f
  7956  0404  3EFF               	addlw	-1
  7957  0405  1D03               	skipz
  7958  0406  2C02               	goto	u3695
  7959  0407  1003               	clrc
  7960  0408  0D2C               	rlf	??_DrawCurrentScore,w
  7961  0409  3E12               	addlw	low (_Font_digits| (0+32768))
  7962  040A  00AD               	movwf	??_DrawCurrentScore+1
  7963  040B  3081               	movlw	high (_Font_digits| (0+32768))
  7964  040C  1803               	skipnc
  7965  040D  3E01               	addlw	1
  7966  040E  00AE               	movwf	??_DrawCurrentScore+2
  7967  040F  0840               	movf	DrawCurrentScore@y_767,w
  7968  0410  072D               	addwf	??_DrawCurrentScore+1,w
  7969  0411  0084               	movwf	4
  7970  0412  082E               	movf	??_DrawCurrentScore+2,w
  7971  0413  1803               	skipnc
  7972  0414  0A2E               	incf	??_DrawCurrentScore+2,w
  7973  0415  00FF               	movwf	127
  7974  0416  118A  2100  118A   	fcall	stringtab
  7975  0419  00AF               	movwf	??_DrawCurrentScore+3
  7976  041A  0838               	movf	DrawCurrentScore@scoreDigits+3,w
  7977  041B  00B0               	movwf	??_DrawCurrentScore+4
  7978  041C  3002               	movlw	2
  7979  041D                     u3705:	
  7980  041D  1003               	clrc
  7981  041E  0DB0               	rlf	??_DrawCurrentScore+4,f
  7982  041F  3EFF               	addlw	-1
  7983  0420  1D03               	skipz
  7984  0421  2C1D               	goto	u3705
  7985  0422  1003               	clrc
  7986  0423  0D30               	rlf	??_DrawCurrentScore+4,w
  7987  0424  3E12               	addlw	low (_Font_digits| (0+32768))
  7988  0425  00B1               	movwf	??_DrawCurrentScore+5
  7989  0426  3081               	movlw	high (_Font_digits| (0+32768))
  7990  0427  1803               	skipnc
  7991  0428  3E01               	addlw	1
  7992  0429  00B2               	movwf	??_DrawCurrentScore+6
  7993  042A  0840               	movf	DrawCurrentScore@y_767,w
  7994  042B  0731               	addwf	??_DrawCurrentScore+5,w
  7995  042C  0084               	movwf	4
  7996  042D  0832               	movf	??_DrawCurrentScore+6,w
  7997  042E  1803               	skipnc
  7998  042F  0A32               	incf	??_DrawCurrentScore+6,w
  7999  0430  00FF               	movwf	127
  8000  0431  118A  2100  118A   	fcall	stringtab
  8001  0434  00B3               	movwf	??_DrawCurrentScore+7
  8002  0435  3004               	movlw	4
  8003  0436                     u3715:	
  8004  0436  1003               	clrc
  8005  0437  0CB3               	rrf	??_DrawCurrentScore+7,f
  8006  0438  3EFF               	addlw	-1
  8007  0439  1D03               	skipz
  8008  043A  2C36               	goto	u3715
  8009  043B  0833               	movf	??_DrawCurrentScore+7,w
  8010  043C  042F               	iorwf	??_DrawCurrentScore+3,w
  8011  043D  00B4               	movwf	??_DrawCurrentScore+8
  8012  043E  0834               	movf	??_DrawCurrentScore+8,w
  8013  043F  00BB               	movwf	DrawCurrentScore@lcdData_768
  8014                           
  8015                           ;Drawing.c: 94:         LCD_WriteData(lcdData);
  8016  0440  083B               	movf	DrawCurrentScore@lcdData_768,w
  8017  0441  158A  20C0  118A   	fcall	_LCD_WriteData
  8018                           
  8019                           ;Drawing.c: 95:     }
  8020  0444  3001               	movlw	1
  8021  0445  1283               	bcf	3,5	;RP0=0, select bank0
  8022  0446  1303               	bcf	3,6	;RP1=0, select bank0
  8023  0447  00AC               	movwf	??_DrawCurrentScore
  8024  0448  082C               	movf	??_DrawCurrentScore,w
  8025  0449  07C0               	addwf	DrawCurrentScore@y_767,f
  8026  044A  3008               	movlw	8
  8027  044B  0240               	subwf	DrawCurrentScore@y_767,w
  8028  044C  1C03               	skipc
  8029  044D  2BFF               	goto	l4075
  8030                           
  8031                           ;Drawing.c: 97:     LCD_SetX(5);
  8032  044E  3005               	movlw	5
  8033  044F  158A  20D7  118A   	fcall	_LCD_SetX
  8034                           
  8035                           ;Drawing.c: 98:     LCD_SetY(0);
  8036  0452  3000               	movlw	0
  8037  0453  158A  20E3  118A   	fcall	_LCD_SetY
  8038                           
  8039                           ;Drawing.c: 99:     for (uint8_t y = 0; y < FONT_HEIGHT; ++y)
  8040  0456  1283               	bcf	3,5	;RP0=0, select bank0
  8041  0457  1303               	bcf	3,6	;RP1=0, select bank0
  8042  0458  01BE               	clrf	DrawCurrentScore@y_769
  8043  0459                     l4091:	
  8044                           
  8045                           ;Drawing.c: 100:     {;Drawing.c: 101:         uint8_t lcdData = Font_digits[scoreDigits
      +                          [4]][y];
  8046  0459  0839               	movf	DrawCurrentScore@scoreDigits+4,w
  8047  045A  00AC               	movwf	??_DrawCurrentScore
  8048  045B  3002               	movlw	2
  8049  045C                     u3735:	
  8050  045C  1003               	clrc
  8051  045D  0DAC               	rlf	??_DrawCurrentScore,f
  8052  045E  3EFF               	addlw	-1
  8053  045F  1D03               	skipz
  8054  0460  2C5C               	goto	u3735
  8055  0461  1003               	clrc
  8056  0462  0D2C               	rlf	??_DrawCurrentScore,w
  8057  0463  3E12               	addlw	low (_Font_digits| (0+32768))
  8058  0464  00AD               	movwf	??_DrawCurrentScore+1
  8059  0465  3081               	movlw	high (_Font_digits| (0+32768))
  8060  0466  1803               	skipnc
  8061  0467  3E01               	addlw	1
  8062  0468  00AE               	movwf	??_DrawCurrentScore+2
  8063  0469  083E               	movf	DrawCurrentScore@y_769,w
  8064  046A  072D               	addwf	??_DrawCurrentScore+1,w
  8065  046B  0084               	movwf	4
  8066  046C  082E               	movf	??_DrawCurrentScore+2,w
  8067  046D  1803               	skipnc
  8068  046E  0A2E               	incf	??_DrawCurrentScore+2,w
  8069  046F  00FF               	movwf	127
  8070  0470  118A  2100  118A   	fcall	stringtab
  8071  0473  00AF               	movwf	??_DrawCurrentScore+3
  8072  0474  082F               	movf	??_DrawCurrentScore+3,w
  8073  0475  00BC               	movwf	DrawCurrentScore@lcdData_770
  8074                           
  8075                           ;Drawing.c: 102:         LCD_WriteData(lcdData);
  8076  0476  083C               	movf	DrawCurrentScore@lcdData_770,w
  8077  0477  158A  20C0  118A   	fcall	_LCD_WriteData
  8078                           
  8079                           ;Drawing.c: 103:     }
  8080  047A  3001               	movlw	1
  8081  047B  1283               	bcf	3,5	;RP0=0, select bank0
  8082  047C  1303               	bcf	3,6	;RP1=0, select bank0
  8083  047D  00AC               	movwf	??_DrawCurrentScore
  8084  047E  082C               	movf	??_DrawCurrentScore,w
  8085  047F  07BE               	addwf	DrawCurrentScore@y_769,f
  8086  0480  3008               	movlw	8
  8087  0481  023E               	subwf	DrawCurrentScore@y_769,w
  8088  0482  1803               	btfsc	3,0
  8089  0483  0008               	return
  8090  0484  2C59               	goto	l4091
  8091  0485                     __end_of_DrawCurrentScore:	
  8092                           
  8093                           	psect	text54
  8094  08C0                     __ptext54:	
  8095 ;; *************** function _LCD_WriteData *****************
  8096 ;; Defined at:
  8097 ;;		line 102 in file "LCD.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;  data            1    wreg     unsigned char 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  data            1    2[BANK0 ] unsigned char 
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  1    wreg      void 
  8104 ;; Registers used:
  8105 ;;		wreg, status,2, status,0, pclath, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8111 ;;      Params:         0       0       0       0
  8112 ;;      Locals:         0       1       0       0
  8113 ;;      Temps:          0       1       0       0
  8114 ;;      Totals:         0       2       0       0
  8115 ;;Total ram usage:        2 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    5
  8118 ;; This function calls:
  8119 ;;		_LCD_Write
  8120 ;; This function is called by:
  8121 ;;		_LCD_Clear
  8122 ;;		_DrawTetrisGameColumn
  8123 ;;		_DrawHiMarker
  8124 ;;		_DrawCurrentScore
  8125 ;;		_DrawHighscore
  8126 ;;		_DrawHighscoreText
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130                           
  8131                           ;psect for function _LCD_WriteData
  8132  08C0                     _LCD_WriteData:	
  8133                           
  8134                           ;incstack = 0
  8135                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0+pclath+cstack]
  8136                           ;LCD_WriteData@data stored from wreg
  8137  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  8138  08C1  1303               	bcf	3,6	;RP1=0, select bank0
  8139  08C2  00A2               	movwf	LCD_WriteData@data
  8140                           
  8141                           ;LCD.c: 102: void LCD_WriteData(uint8_t data);LCD.c: 103: {;LCD.c: 104:     LCD_Write(LC
      +                          D_WRITE_DATA, data);
  8142  08C3  0822               	movf	LCD_WriteData@data,w
  8143  08C4  00A1               	movwf	??_LCD_WriteData
  8144  08C5  0821               	movf	??_LCD_WriteData,w
  8145  08C6  00F8               	movwf	LCD_Write@data
  8146  08C7  3001               	movlw	1
  8147  08C8  158A  219B         	fcall	_LCD_Write
  8148  08CA  0008               	return
  8149  08CB                     __end_of_LCD_WriteData:	
  8150                           
  8151                           	psect	text55
  8152  08E3                     __ptext55:	
  8153 ;; *************** function _LCD_SetY *****************
  8154 ;; Defined at:
  8155 ;;		line 130 in file "LCD.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;  y               1    wreg     unsigned char 
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;  y               1    2[BANK0 ] unsigned char 
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg, status,2, status,0, pclath, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8169 ;;      Params:         0       0       0       0
  8170 ;;      Locals:         0       1       0       0
  8171 ;;      Temps:          0       1       0       0
  8172 ;;      Totals:         0       2       0       0
  8173 ;;Total ram usage:        2 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    5
  8176 ;; This function calls:
  8177 ;;		_LCD_Write
  8178 ;; This function is called by:
  8179 ;;		_LCD_Reset
  8180 ;;		_LCD_Clear
  8181 ;;		_DrawTetrisGameColumn
  8182 ;;		_DrawHiMarker
  8183 ;;		_DrawCurrentScore
  8184 ;;		_DrawHighscore
  8185 ;;		_DrawHighscoreText
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           
  8190                           ;psect for function _LCD_SetY
  8191  08E3                     _LCD_SetY:	
  8192                           
  8193                           ;incstack = 0
  8194                           ; Regs used in _LCD_SetY: [wreg+status,2+status,0+pclath+cstack]
  8195                           ;LCD_SetY@y stored from wreg
  8196  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  8197  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  8198  08E5  00A2               	movwf	LCD_SetY@y
  8199                           
  8200                           ;LCD.c: 130: void LCD_SetY(uint8_t y);LCD.c: 131: {;LCD.c: 132:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0x40 | y);
  8201  08E6  0822               	movf	LCD_SetY@y,w
  8202  08E7  3840               	iorlw	64
  8203  08E8  00A1               	movwf	??_LCD_SetY
  8204  08E9  0821               	movf	??_LCD_SetY,w
  8205  08EA  00F8               	movwf	LCD_Write@data
  8206  08EB  3000               	movlw	0
  8207  08EC  158A  219B         	fcall	_LCD_Write
  8208  08EE  0008               	return
  8209  08EF                     __end_of_LCD_SetY:	
  8210                           
  8211                           	psect	text56
  8212  08D7                     __ptext56:	
  8213 ;; *************** function _LCD_SetX *****************
  8214 ;; Defined at:
  8215 ;;		line 135 in file "LCD.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;  x               1    wreg     unsigned char 
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  x               1    2[BANK0 ] unsigned char 
  8220 ;; Return value:  Size  Location     Type
  8221 ;;                  1    wreg      void 
  8222 ;; Registers used:
  8223 ;;		wreg, status,2, status,0, pclath, cstack
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8229 ;;      Params:         0       0       0       0
  8230 ;;      Locals:         0       1       0       0
  8231 ;;      Temps:          0       1       0       0
  8232 ;;      Totals:         0       2       0       0
  8233 ;;Total ram usage:        2 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:    5
  8236 ;; This function calls:
  8237 ;;		_LCD_Write
  8238 ;; This function is called by:
  8239 ;;		_LCD_Reset
  8240 ;;		_LCD_Clear
  8241 ;;		_DrawTetrisGameColumn
  8242 ;;		_DrawHiMarker
  8243 ;;		_DrawCurrentScore
  8244 ;;		_DrawHighscore
  8245 ;;		_DrawHighscoreText
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           
  8250                           ;psect for function _LCD_SetX
  8251  08D7                     _LCD_SetX:	
  8252                           
  8253                           ;incstack = 0
  8254                           ; Regs used in _LCD_SetX: [wreg+status,2+status,0+pclath+cstack]
  8255                           ;LCD_SetX@x stored from wreg
  8256  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  8257  08D8  1303               	bcf	3,6	;RP1=0, select bank0
  8258  08D9  00A2               	movwf	LCD_SetX@x
  8259                           
  8260                           ;LCD.c: 135: void LCD_SetX(uint8_t x);LCD.c: 136: {;LCD.c: 137:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xB8 | x);
  8261  08DA  0822               	movf	LCD_SetX@x,w
  8262  08DB  38B8               	iorlw	184
  8263  08DC  00A1               	movwf	??_LCD_SetX
  8264  08DD  0821               	movf	??_LCD_SetX,w
  8265  08DE  00F8               	movwf	LCD_Write@data
  8266  08DF  3000               	movlw	0
  8267  08E0  158A  219B         	fcall	_LCD_Write
  8268  08E2  0008               	return
  8269  08E3                     __end_of_LCD_SetX:	
  8270                           
  8271                           	psect	text57
  8272  099B                     __ptext57:	
  8273 ;; *************** function _LCD_Write *****************
  8274 ;; Defined at:
  8275 ;;		line 35 in file "LCD.c"
  8276 ;; Parameters:    Size  Location     Type
  8277 ;;  mode            1    wreg     enum E1321
  8278 ;;  data            1    8[COMMON] unsigned char 
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;  mode            1    0[BANK0 ] enum E1321
  8281 ;; Return value:  Size  Location     Type
  8282 ;;                  1    wreg      void 
  8283 ;; Registers used:
  8284 ;;		wreg, status,2, status,0, pclath, cstack
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8290 ;;      Params:         1       0       0       0
  8291 ;;      Locals:         0       1       0       0
  8292 ;;      Temps:          0       0       0       0
  8293 ;;      Totals:         1       1       0       0
  8294 ;;Total ram usage:        2 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    4
  8297 ;; This function calls:
  8298 ;;		_LCD_BlockWhileBusy
  8299 ;; This function is called by:
  8300 ;;		_LCD_WriteData
  8301 ;;		_LCD_TurnOn
  8302 ;;		_LCD_TurnOff
  8303 ;;		_LCD_SetY
  8304 ;;		_LCD_SetX
  8305 ;;		_LCD_SetZ
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _LCD_Write
  8311  099B                     _LCD_Write:	
  8312                           
  8313                           ;incstack = 0
  8314                           ; Regs used in _LCD_Write: [wreg+status,2+status,0+pclath+cstack]
  8315                           ;LCD_Write@mode stored from wreg
  8316  099B  1283               	bcf	3,5	;RP0=0, select bank0
  8317  099C  1303               	bcf	3,6	;RP1=0, select bank0
  8318  099D  00A0               	movwf	LCD_Write@mode
  8319                           
  8320                           ;LCD.c: 35: static void LCD_Write(LCD_WriteMode mode, uint8_t data);LCD.c: 36: {;LCD.c: 
      +                          37:     LCD_BlockWhileBusy();
  8321  099E  158A  209C  158A   	fcall	_LCD_BlockWhileBusy
  8322                           
  8323                           ;LCD.c: 39:     TRISA = 0;
  8324  09A1  1683               	bsf	3,5	;RP0=1, select bank1
  8325  09A2  1303               	bcf	3,6	;RP1=0, select bank1
  8326  09A3  0185               	clrf	5	;volatile
  8327                           
  8328                           ;LCD.c: 40:     RC3 = 0;
  8329  09A4  1283               	bcf	3,5	;RP0=0, select bank0
  8330  09A5  1303               	bcf	3,6	;RP1=0, select bank0
  8331  09A6  1187               	bcf	7,3	;volatile
  8332                           
  8333                           ;LCD.c: 41:     RC2 = mode;
  8334  09A7  1C20               	btfss	LCD_Write@mode,0
  8335  09A8  29AD               	goto	u3030
  8336  09A9  1283               	bcf	3,5	;RP0=0, select bank0
  8337  09AA  1303               	bcf	3,6	;RP1=0, select bank0
  8338  09AB  1507               	bsf	7,2	;volatile
  8339  09AC  29B0               	goto	l3561
  8340  09AD                     u3030:	
  8341  09AD  1283               	bcf	3,5	;RP0=0, select bank0
  8342  09AE  1303               	bcf	3,6	;RP1=0, select bank0
  8343  09AF  1107               	bcf	7,2	;volatile
  8344  09B0                     l3561:	
  8345                           
  8346                           ;LCD.c: 42:     PORTA = data;
  8347  09B0  0878               	movf	LCD_Write@data,w
  8348  09B1  0085               	movwf	5	;volatile
  8349                           
  8350                           ;LCD.c: 43:     RD0 = 1;
  8351  09B2  1408               	bsf	8,0	;volatile
  8352                           
  8353                           ;LCD.c: 44:     __nop();
  8354  09B3  0000               	nop
  8355                           
  8356                           ;LCD.c: 45:     RD0 = 0;
  8357  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  8358  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  8359  09B6  1008               	bcf	8,0	;volatile
  8360  09B7  0008               	return
  8361  09B8                     __end_of_LCD_Write:	
  8362                           
  8363                           	psect	text58
  8364  089C                     __ptext58:	
  8365 ;; *************** function _LCD_BlockWhileBusy *****************
  8366 ;; Defined at:
  8367 ;;		line 28 in file "LCD.c"
  8368 ;; Parameters:    Size  Location     Type
  8369 ;;		None
  8370 ;; Auto vars:     Size  Location     Type
  8371 ;;		None
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  1    wreg      void 
  8374 ;; Registers used:
  8375 ;;		wreg, status,2, pclath, cstack
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8381 ;;      Params:         0       0       0       0
  8382 ;;      Locals:         0       0       0       0
  8383 ;;      Temps:          0       0       0       0
  8384 ;;      Totals:         0       0       0       0
  8385 ;;Total ram usage:        0 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; Hardware stack levels required when called:    3
  8388 ;; This function calls:
  8389 ;;		_LCD_IsBusy
  8390 ;; This function is called by:
  8391 ;;		_LCD_Write
  8392 ;;		_LCD_ReadData
  8393 ;; This function uses a non-reentrant model
  8394 ;;
  8395                           
  8396                           
  8397                           ;psect for function _LCD_BlockWhileBusy
  8398  089C                     _LCD_BlockWhileBusy:	
  8399  089C                     l3547:	
  8400                           ;LCD.c: 30:     while (LCD_IsBusy())
  8401                           
  8402                           ;incstack = 0
  8403                           ; Regs used in _LCD_BlockWhileBusy: [wreg+status,2+pclath+cstack]
  8404                           
  8405                           
  8406                           ;LCD.c: 30:     while (LCD_IsBusy())
  8407  089C  158A  2114  158A   	fcall	_LCD_IsBusy
  8408  089F  3A00               	xorlw	0
  8409  08A0  1903               	btfsc	3,2
  8410  08A1  0008               	return
  8411  08A2  289C               	goto	l3547
  8412  08A3                     __end_of_LCD_BlockWhileBusy:	
  8413                           
  8414                           	psect	text59
  8415  0914                     __ptext59:	
  8416 ;; *************** function _LCD_IsBusy *****************
  8417 ;; Defined at:
  8418 ;;		line 22 in file "LCD.c"
  8419 ;; Parameters:    Size  Location     Type
  8420 ;;		None
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;  status          1    7[COMMON] unsigned char 
  8423 ;; Return value:  Size  Location     Type
  8424 ;;                  1    wreg      unsigned char 
  8425 ;; Registers used:
  8426 ;;		wreg, status,2, pclath, cstack
  8427 ;; Tracked objects:
  8428 ;;		On entry : 0/0
  8429 ;;		On exit  : 0/0
  8430 ;;		Unchanged: 0/0
  8431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8432 ;;      Params:         0       0       0       0
  8433 ;;      Locals:         2       0       0       0
  8434 ;;      Temps:          1       0       0       0
  8435 ;;      Totals:         3       0       0       0
  8436 ;;Total ram usage:        3 bytes
  8437 ;; Hardware stack levels used:    1
  8438 ;; Hardware stack levels required when called:    2
  8439 ;; This function calls:
  8440 ;;		_LCD_ReadStatus
  8441 ;; This function is called by:
  8442 ;;		_LCD_BlockWhileBusy
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           
  8447                           ;psect for function _LCD_IsBusy
  8448  0914                     _LCD_IsBusy:	
  8449                           
  8450                           ;LCD.c: 24:     uint8_t status = LCD_ReadStatus();
  8451                           
  8452                           ;incstack = 0
  8453                           ; Regs used in _LCD_IsBusy: [wreg+status,2+pclath+cstack]
  8454  0914  158A  2141  158A   	fcall	_LCD_ReadStatus
  8455  0917  00F5               	movwf	??_LCD_IsBusy
  8456  0918  0875               	movf	??_LCD_IsBusy,w
  8457  0919  00F7               	movwf	LCD_IsBusy@status
  8458                           
  8459                           ;LCD.c: 25:     return (status & LCD_BUSY_FLAG) || (status & LCD_RESET_FLAG);
  8460  091A  01F6               	clrf	_LCD_IsBusy$632
  8461  091B  0AF6               	incf	_LCD_IsBusy$632,f
  8462  091C  1FF7               	btfss	LCD_IsBusy@status,7
  8463  091D  1A77               	btfsc	LCD_IsBusy@status,4
  8464  091E  2920               	goto	l3541
  8465  091F  01F6               	clrf	_LCD_IsBusy$632
  8466  0920                     l3541:	
  8467  0920  0876               	movf	_LCD_IsBusy$632,w
  8468  0921  0008               	return
  8469  0922                     __end_of_LCD_IsBusy:	
  8470                           
  8471                           	psect	text60
  8472  0941                     __ptext60:	
  8473 ;; *************** function _LCD_ReadStatus *****************
  8474 ;; Defined at:
  8475 ;;		line 80 in file "LCD.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;		None
  8478 ;; Auto vars:     Size  Location     Type
  8479 ;;  status          1    4[COMMON] unsigned char 
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      unsigned char 
  8482 ;; Registers used:
  8483 ;;		wreg
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8489 ;;      Params:         0       0       0       0
  8490 ;;      Locals:         1       0       0       0
  8491 ;;      Temps:          1       0       0       0
  8492 ;;      Totals:         2       0       0       0
  8493 ;;Total ram usage:        2 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:    1
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		_LCD_IsBusy
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _LCD_ReadStatus
  8505  0941                     _LCD_ReadStatus:	
  8506                           
  8507                           ;LCD.c: 82:     TRISA = 0xFF;
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in _LCD_ReadStatus: [wreg]
  8511  0941  30FF               	movlw	255
  8512  0942  1683               	bsf	3,5	;RP0=1, select bank1
  8513  0943  1303               	bcf	3,6	;RP1=0, select bank1
  8514  0944  0085               	movwf	5	;volatile
  8515                           
  8516                           ;LCD.c: 83:     RC3 = 1;
  8517  0945  1283               	bcf	3,5	;RP0=0, select bank0
  8518  0946  1303               	bcf	3,6	;RP1=0, select bank0
  8519  0947  1587               	bsf	7,3	;volatile
  8520                           
  8521                           ;LCD.c: 84:     RC2 = 0;
  8522  0948  1107               	bcf	7,2	;volatile
  8523                           
  8524                           ;LCD.c: 85:     RD0 = 1;
  8525  0949  1408               	bsf	8,0	;volatile
  8526                           
  8527                           ;LCD.c: 86:     uint8_t status = PORTA;
  8528  094A  0805               	movf	5,w	;volatile
  8529  094B  00F3               	movwf	??_LCD_ReadStatus
  8530  094C  0873               	movf	??_LCD_ReadStatus,w
  8531  094D  00F4               	movwf	LCD_ReadStatus@status
  8532                           
  8533                           ;LCD.c: 87:     RD0 = 0;
  8534  094E  1008               	bcf	8,0	;volatile
  8535                           
  8536                           ;LCD.c: 88:     return status;
  8537  094F  0874               	movf	LCD_ReadStatus@status,w
  8538  0950  0008               	return
  8539  0951                     __end_of_LCD_ReadStatus:	
  8540                           
  8541                           	psect	text61
  8542  0931                     __ptext61:	
  8543 ;; *************** function _LCD_SegmentSelection *****************
  8544 ;; Defined at:
  8545 ;;		line 107 in file "LCD.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  segments        1    wreg     enum E1292
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;  segments        1    3[COMMON] enum E1292
  8550 ;; Return value:  Size  Location     Type
  8551 ;;                  1    wreg      void 
  8552 ;; Registers used:
  8553 ;;		wreg
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/0
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8559 ;;      Params:         0       0       0       0
  8560 ;;      Locals:         1       0       0       0
  8561 ;;      Temps:          0       0       0       0
  8562 ;;      Totals:         1       0       0       0
  8563 ;;Total ram usage:        1 bytes
  8564 ;; Hardware stack levels used:    1
  8565 ;; Hardware stack levels required when called:    1
  8566 ;; This function calls:
  8567 ;;		Nothing
  8568 ;; This function is called by:
  8569 ;;		_Setup
  8570 ;;		_DrawTetrisGameColumn
  8571 ;;		_DrawHiMarker
  8572 ;;		_DrawCurrentScore
  8573 ;;		_DrawHighscore
  8574 ;;		_DrawHighscoreText
  8575 ;;		_FlashVictoriously
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           
  8580                           ;psect for function _LCD_SegmentSelection
  8581  0931                     _LCD_SegmentSelection:	
  8582                           
  8583                           ;incstack = 0
  8584                           ; Regs used in _LCD_SegmentSelection: [wreg]
  8585                           ;LCD_SegmentSelection@segments stored from wreg
  8586  0931  00F3               	movwf	LCD_SegmentSelection@segments
  8587                           
  8588                           ;LCD.c: 107: void LCD_SegmentSelection(LCD_Segments segments);LCD.c: 108: {;LCD.c: 109: 
      +                              if (segments & LCD_TOP_SEGMENT)
  8589  0932  1CF3               	btfss	LCD_SegmentSelection@segments,1
  8590  0933  2938               	goto	l408
  8591                           
  8592                           ;LCD.c: 110:         RC0 = 0;
  8593  0934  1283               	bcf	3,5	;RP0=0, select bank0
  8594  0935  1303               	bcf	3,6	;RP1=0, select bank0
  8595  0936  1007               	bcf	7,0	;volatile
  8596  0937  293B               	goto	l409
  8597  0938                     l408:	
  8598                           ;LCD.c: 111:     else
  8599                           
  8600                           
  8601                           ;LCD.c: 112:         RC0 = 1;
  8602  0938  1283               	bcf	3,5	;RP0=0, select bank0
  8603  0939  1303               	bcf	3,6	;RP1=0, select bank0
  8604  093A  1407               	bsf	7,0	;volatile
  8605  093B                     l409:	
  8606                           
  8607                           ;LCD.c: 114:     if (segments & LCD_BOTTOM_SEGMENT)
  8608  093B  1C73               	btfss	LCD_SegmentSelection@segments,0
  8609  093C  293F               	goto	l410
  8610                           
  8611                           ;LCD.c: 115:         RC1 = 0;
  8612  093D  1087               	bcf	7,1	;volatile
  8613  093E  0008               	return
  8614  093F                     l410:	
  8615                           ;LCD.c: 116:     else
  8616                           
  8617                           
  8618                           ;LCD.c: 117:         RC1 = 1;
  8619  093F  1487               	bsf	7,1	;volatile
  8620  0940  0008               	return
  8621  0941                     __end_of_LCD_SegmentSelection:	
  8622                           
  8623                           	psect	text62
  8624  0C87                     __ptext62:	
  8625 ;; *************** function _GetDigits *****************
  8626 ;; Defined at:
  8627 ;;		line 11 in file "./Digits.h"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  n               2    3[BANK0 ] unsigned int 
  8630 ;;  digits          1    5[BANK0 ] PTR unsigned char 
  8631 ;;		 -> DrawHighscore@scoreDigits(5), DrawCurrentScore@scoreDigits(5), 
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;  newN            2    9[BANK0 ] unsigned int 
  8634 ;;  i               1   11[BANK0 ] unsigned char 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      void 
  8637 ;; Registers used:
  8638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8644 ;;      Params:         0       3       0       0
  8645 ;;      Locals:         0       3       0       0
  8646 ;;      Temps:          0       3       0       0
  8647 ;;      Totals:         0       9       0       0
  8648 ;;Total ram usage:        9 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    2
  8651 ;; This function calls:
  8652 ;;		___bmul
  8653 ;;		___lwdiv
  8654 ;; This function is called by:
  8655 ;;		_DrawCurrentScore
  8656 ;;		_DrawHighscore
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           
  8661                           ;psect for function _GetDigits
  8662  0C87                     _GetDigits:	
  8663                           
  8664                           ;./Digits.h: 11: __attribute__((inline)) void GetDigits(uint16_t n, uint8_t *digits);./D
      +                          igits.h: 12: {;./Digits.h: 13:     uint8_t i = NUM_DIGITS - 1;
  8665                           
  8666                           ;incstack = 0
  8667                           ; Regs used in _GetDigits: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8668  0C87  3004               	movlw	4
  8669  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  8670  0C89  1303               	bcf	3,6	;RP1=0, select bank0
  8671  0C8A  00A6               	movwf	??_GetDigits
  8672  0C8B  0826               	movf	??_GetDigits,w
  8673  0C8C  00AB               	movwf	GetDigits@i
  8674  0C8D                     l3893:	
  8675                           
  8676                           ;./Digits.h: 16:     {;./Digits.h: 17:         uint16_t newN = n / 10;
  8677  0C8D  300A               	movlw	10
  8678  0C8E  00F3               	movwf	___lwdiv@divisor
  8679  0C8F  3000               	movlw	0
  8680  0C90  00F4               	movwf	___lwdiv@divisor+1
  8681  0C91  0824               	movf	GetDigits@n+1,w
  8682  0C92  00F6               	movwf	___lwdiv@dividend+1
  8683  0C93  0823               	movf	GetDigits@n,w
  8684  0C94  00F5               	movwf	___lwdiv@dividend
  8685  0C95  158A  2596  158A   	fcall	___lwdiv
  8686  0C98  0874               	movf	?___lwdiv+1,w
  8687  0C99  1283               	bcf	3,5	;RP0=0, select bank0
  8688  0C9A  1303               	bcf	3,6	;RP1=0, select bank0
  8689  0C9B  00AA               	movwf	GetDigits@newN+1
  8690  0C9C  0873               	movf	?___lwdiv,w
  8691  0C9D  00A9               	movwf	GetDigits@newN
  8692                           
  8693                           ;./Digits.h: 18:         digits[i] = n - newN * 10;
  8694  0C9E  30F6               	movlw	246
  8695  0C9F  00A6               	movwf	??_GetDigits
  8696  0CA0  0826               	movf	??_GetDigits,w
  8697  0CA1  00F3               	movwf	___bmul@multiplicand
  8698  0CA2  0829               	movf	GetDigits@newN,w
  8699  0CA3  158A  2161  158A   	fcall	___bmul
  8700  0CA6  1283               	bcf	3,5	;RP0=0, select bank0
  8701  0CA7  1303               	bcf	3,6	;RP1=0, select bank0
  8702  0CA8  0723               	addwf	GetDigits@n,w
  8703  0CA9  00A7               	movwf	??_GetDigits+1
  8704  0CAA  082B               	movf	GetDigits@i,w
  8705  0CAB  0725               	addwf	GetDigits@digits,w
  8706  0CAC  00A8               	movwf	??_GetDigits+2
  8707  0CAD  0828               	movf	??_GetDigits+2,w
  8708  0CAE  0084               	movwf	4
  8709  0CAF  0827               	movf	??_GetDigits+1,w
  8710  0CB0  1383               	bcf	3,7	;select IRP bank0
  8711  0CB1  0080               	movwf	0
  8712                           
  8713                           ;./Digits.h: 19:         n = newN;
  8714  0CB2  082A               	movf	GetDigits@newN+1,w
  8715  0CB3  00A4               	movwf	GetDigits@n+1
  8716  0CB4  0829               	movf	GetDigits@newN,w
  8717  0CB5  00A3               	movwf	GetDigits@n
  8718                           
  8719                           ;./Digits.h: 21:         if (i == 0)
  8720  0CB6  082B               	movf	GetDigits@i,w
  8721  0CB7  1903               	btfsc	3,2
  8722  0CB8  0008               	return
  8723                           
  8724                           ;./Digits.h: 24:         --i;
  8725  0CB9  3001               	movlw	1
  8726  0CBA  02AB               	subwf	GetDigits@i,f
  8727  0CBB  2C8D               	goto	l3893
  8728  0CBC                     __end_of_GetDigits:	
  8729                           
  8730                           	psect	text63
  8731  0D96                     __ptext63:	
  8732 ;; *************** function ___lwdiv *****************
  8733 ;; Defined at:
  8734 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  divisor         2    3[COMMON] unsigned int 
  8737 ;;  dividend        2    5[COMMON] unsigned int 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  quotient        2    1[BANK0 ] unsigned int 
  8740 ;;  counter         1    0[BANK0 ] unsigned char 
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  2    3[COMMON] unsigned int 
  8743 ;; Registers used:
  8744 ;;		wreg, status,2, status,0
  8745 ;; Tracked objects:
  8746 ;;		On entry : 0/0
  8747 ;;		On exit  : 0/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8750 ;;      Params:         4       0       0       0
  8751 ;;      Locals:         0       3       0       0
  8752 ;;      Temps:          1       0       0       0
  8753 ;;      Totals:         5       3       0       0
  8754 ;;Total ram usage:        8 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; Hardware stack levels required when called:    1
  8757 ;; This function calls:
  8758 ;;		Nothing
  8759 ;; This function is called by:
  8760 ;;		_GetDigits
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           
  8765                           ;psect for function ___lwdiv
  8766  0D96                     ___lwdiv:	
  8767                           
  8768                           ;incstack = 0
  8769                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8770  0D96  1283               	bcf	3,5	;RP0=0, select bank0
  8771  0D97  1303               	bcf	3,6	;RP1=0, select bank0
  8772  0D98  01A1               	clrf	___lwdiv@quotient
  8773  0D99  01A2               	clrf	___lwdiv@quotient+1
  8774  0D9A  0873               	movf	___lwdiv@divisor,w
  8775  0D9B  0474               	iorwf	___lwdiv@divisor+1,w
  8776  0D9C  1903               	btfsc	3,2
  8777  0D9D  2DCF               	goto	l3791
  8778  0D9E  01A0               	clrf	___lwdiv@counter
  8779  0D9F  0AA0               	incf	___lwdiv@counter,f
  8780  0DA0                     l3779:	
  8781  0DA0  1BF4               	btfsc	___lwdiv@divisor+1,7
  8782  0DA1  2DAE               	goto	l3781
  8783  0DA2  3001               	movlw	1
  8784  0DA3                     u3345:	
  8785  0DA3  1003               	clrc
  8786  0DA4  0DF3               	rlf	___lwdiv@divisor,f
  8787  0DA5  0DF4               	rlf	___lwdiv@divisor+1,f
  8788  0DA6  3EFF               	addlw	-1
  8789  0DA7  1D03               	skipz
  8790  0DA8  2DA3               	goto	u3345
  8791  0DA9  3001               	movlw	1
  8792  0DAA  00F7               	movwf	??___lwdiv
  8793  0DAB  0877               	movf	??___lwdiv,w
  8794  0DAC  07A0               	addwf	___lwdiv@counter,f
  8795  0DAD  2DA0               	goto	l3779
  8796  0DAE                     l3781:	
  8797  0DAE  3001               	movlw	1
  8798  0DAF                     u3365:	
  8799  0DAF  1003               	clrc
  8800  0DB0  0DA1               	rlf	___lwdiv@quotient,f
  8801  0DB1  0DA2               	rlf	___lwdiv@quotient+1,f
  8802  0DB2  3EFF               	addlw	-1
  8803  0DB3  1D03               	skipz
  8804  0DB4  2DAF               	goto	u3365
  8805  0DB5  0874               	movf	___lwdiv@divisor+1,w
  8806  0DB6  0276               	subwf	___lwdiv@dividend+1,w
  8807  0DB7  1D03               	skipz
  8808  0DB8  2DBB               	goto	u3375
  8809  0DB9  0873               	movf	___lwdiv@divisor,w
  8810  0DBA  0275               	subwf	___lwdiv@dividend,w
  8811  0DBB                     u3375:	
  8812  0DBB  1C03               	skipc
  8813  0DBC  2DC4               	goto	l3787
  8814  0DBD  0873               	movf	___lwdiv@divisor,w
  8815  0DBE  02F5               	subwf	___lwdiv@dividend,f
  8816  0DBF  0874               	movf	___lwdiv@divisor+1,w
  8817  0DC0  1C03               	skipc
  8818  0DC1  03F6               	decf	___lwdiv@dividend+1,f
  8819  0DC2  02F6               	subwf	___lwdiv@dividend+1,f
  8820  0DC3  1421               	bsf	___lwdiv@quotient,0
  8821  0DC4                     l3787:	
  8822  0DC4  3001               	movlw	1
  8823  0DC5                     u3385:	
  8824  0DC5  1003               	clrc
  8825  0DC6  0CF4               	rrf	___lwdiv@divisor+1,f
  8826  0DC7  0CF3               	rrf	___lwdiv@divisor,f
  8827  0DC8  3EFF               	addlw	-1
  8828  0DC9  1D03               	skipz
  8829  0DCA  2DC5               	goto	u3385
  8830  0DCB  3001               	movlw	1
  8831  0DCC  02A0               	subwf	___lwdiv@counter,f
  8832  0DCD  1D03               	btfss	3,2
  8833  0DCE  2DAE               	goto	l3781
  8834  0DCF                     l3791:	
  8835  0DCF  0822               	movf	___lwdiv@quotient+1,w
  8836  0DD0  00F4               	movwf	?___lwdiv+1
  8837  0DD1  0821               	movf	___lwdiv@quotient,w
  8838  0DD2  00F3               	movwf	?___lwdiv
  8839  0DD3  0008               	return
  8840  0DD4                     __end_of___lwdiv:	
  8841                           
  8842                           	psect	text64
  8843  0961                     __ptext64:	
  8844 ;; *************** function ___bmul *****************
  8845 ;; Defined at:
  8846 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  multiplier      1    wreg     unsigned char 
  8849 ;;  multiplicand    1    3[COMMON] unsigned char 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  multiplier      1    6[COMMON] unsigned char 
  8852 ;;  product         1    5[COMMON] unsigned char 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      unsigned char 
  8855 ;; Registers used:
  8856 ;;		wreg, status,2, status,0
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8862 ;;      Params:         1       0       0       0
  8863 ;;      Locals:         2       0       0       0
  8864 ;;      Temps:          1       0       0       0
  8865 ;;      Totals:         4       0       0       0
  8866 ;;Total ram usage:        4 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    1
  8869 ;; This function calls:
  8870 ;;		Nothing
  8871 ;; This function is called by:
  8872 ;;		_GetDigits
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           
  8877                           ;psect for function ___bmul
  8878  0961                     ___bmul:	
  8879                           
  8880                           ;incstack = 0
  8881                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  8882                           ;___bmul@multiplier stored from wreg
  8883  0961  00F6               	movwf	___bmul@multiplier
  8884  0962  01F5               	clrf	___bmul@product
  8885  0963                     l2663:	
  8886  0963  1C76               	btfss	___bmul@multiplier,0
  8887  0964  2969               	goto	l2667
  8888  0965  0873               	movf	___bmul@multiplicand,w
  8889  0966  00F4               	movwf	??___bmul
  8890  0967  0874               	movf	??___bmul,w
  8891  0968  07F5               	addwf	___bmul@product,f
  8892  0969                     l2667:	
  8893  0969  1003               	clrc
  8894  096A  0DF3               	rlf	___bmul@multiplicand,f
  8895  096B  1003               	clrc
  8896  096C  0CF6               	rrf	___bmul@multiplier,f
  8897  096D  0876               	movf	___bmul@multiplier,w
  8898  096E  1D03               	btfss	3,2
  8899  096F  2963               	goto	l2663
  8900  0970  0875               	movf	___bmul@product,w
  8901  0971  0008               	return
  8902  0972                     __end_of___bmul:	
  8903                           
  8904                           	psect	text65
  8905  0B70                     __ptext65:	
  8906 ;; *************** function _Buttons_Update *****************
  8907 ;; Defined at:
  8908 ;;		line 50 in file "Buttons.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  buttons         1    wreg     PTR struct .
  8911 ;;		 -> main@buttons(4), 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  buttons         1    6[COMMON] PTR struct .
  8914 ;;		 -> main@buttons(4), 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      void 
  8917 ;; Registers used:
  8918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8924 ;;      Params:         0       0       0       0
  8925 ;;      Locals:         1       0       0       0
  8926 ;;      Temps:          0       0       0       0
  8927 ;;      Totals:         1       0       0       0
  8928 ;;Total ram usage:        1 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    2
  8931 ;; This function calls:
  8932 ;;		_Buttons_UpdateButton
  8933 ;; This function is called by:
  8934 ;;		_main
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           
  8939                           ;psect for function _Buttons_Update
  8940  0B70                     _Buttons_Update:	
  8941                           
  8942                           ;incstack = 0
  8943                           ; Regs used in _Buttons_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8944                           ;Buttons_Update@buttons stored from wreg
  8945  0B70  00F6               	movwf	Buttons_Update@buttons
  8946                           
  8947                           ;Buttons.c: 50: void Buttons_Update(Buttons *buttons);Buttons.c: 51: {;Buttons.c: 52:   
      +                            Buttons_UpdateButton(&buttons->left, RB2);
  8948  0B71  3000               	movlw	0
  8949  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  8950  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  8951  0B74  1906               	btfsc	6,2	;volatile
  8952  0B75  3001               	movlw	1
  8953  0B76  00F3               	movwf	Buttons_UpdateButton@nHeld
  8954  0B77  0876               	movf	Buttons_Update@buttons,w
  8955  0B78  158A  224E  158A   	fcall	_Buttons_UpdateButton
  8956                           
  8957                           ;Buttons.c: 53:     Buttons_UpdateButton(&buttons->right, RB3);
  8958  0B7B  3000               	movlw	0
  8959  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  8960  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  8961  0B7E  1986               	btfsc	6,3	;volatile
  8962  0B7F  3001               	movlw	1
  8963  0B80  00F3               	movwf	Buttons_UpdateButton@nHeld
  8964  0B81  0876               	movf	Buttons_Update@buttons,w
  8965  0B82  3E01               	addlw	1
  8966  0B83  158A  224E  158A   	fcall	_Buttons_UpdateButton
  8967                           
  8968                           ;Buttons.c: 54:     Buttons_UpdateButton(&buttons->down, RB4);
  8969  0B86  3000               	movlw	0
  8970  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  8971  0B88  1303               	bcf	3,6	;RP1=0, select bank0
  8972  0B89  1A06               	btfsc	6,4	;volatile
  8973  0B8A  3001               	movlw	1
  8974  0B8B  00F3               	movwf	Buttons_UpdateButton@nHeld
  8975  0B8C  0876               	movf	Buttons_Update@buttons,w
  8976  0B8D  3E02               	addlw	2
  8977  0B8E  158A  224E  158A   	fcall	_Buttons_UpdateButton
  8978                           
  8979                           ;Buttons.c: 55:     Buttons_UpdateButton(&buttons->rotate, RB1);
  8980  0B91  3000               	movlw	0
  8981  0B92  1283               	bcf	3,5	;RP0=0, select bank0
  8982  0B93  1303               	bcf	3,6	;RP1=0, select bank0
  8983  0B94  1886               	btfsc	6,1	;volatile
  8984  0B95  3001               	movlw	1
  8985  0B96  00F3               	movwf	Buttons_UpdateButton@nHeld
  8986  0B97  0876               	movf	Buttons_Update@buttons,w
  8987  0B98  3E03               	addlw	3
  8988  0B99  158A  224E         	fcall	_Buttons_UpdateButton
  8989  0B9B  0008               	return
  8990  0B9C                     __end_of_Buttons_Update:	
  8991                           
  8992                           	psect	text66
  8993  0A4E                     __ptext66:	
  8994 ;; *************** function _Buttons_UpdateButton *****************
  8995 ;; Defined at:
  8996 ;;		line 25 in file "Buttons.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  button          1    wreg     PTR struct .
  8999 ;;		 -> main@buttons(4), 
  9000 ;;  nHeld           1    3[COMMON] unsigned char 
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;  button          1    5[COMMON] PTR struct .
  9003 ;;		 -> main@buttons(4), 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  1    wreg      void 
  9006 ;; Registers used:
  9007 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9013 ;;      Params:         1       0       0       0
  9014 ;;      Locals:         1       0       0       0
  9015 ;;      Temps:          1       0       0       0
  9016 ;;      Totals:         3       0       0       0
  9017 ;;Total ram usage:        3 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    1
  9020 ;; This function calls:
  9021 ;;		Nothing
  9022 ;; This function is called by:
  9023 ;;		_Buttons_Update
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           
  9028                           ;psect for function _Buttons_UpdateButton
  9029  0A4E                     _Buttons_UpdateButton:	
  9030                           
  9031                           ;incstack = 0
  9032                           ; Regs used in _Buttons_UpdateButton: [wreg-fsr0h+status,2+status,0]
  9033                           ;Buttons_UpdateButton@button stored from wreg
  9034  0A4E  00F5               	movwf	Buttons_UpdateButton@button
  9035                           
  9036                           ;Buttons.c: 25: static void Buttons_UpdateButton(Button *button, uint8_t nHeld);Buttons.
      +                          c: 26: {;Buttons.c: 27:     if (!nHeld)
  9037  0A4F  0873               	movf	Buttons_UpdateButton@nHeld,w
  9038  0A50  1D03               	btfss	3,2
  9039  0A51  2A67               	goto	l2925
  9040                           
  9041                           ;Buttons.c: 28:     {;Buttons.c: 29:         button->pressed = !button->held;
  9042  0A52  0875               	movf	Buttons_UpdateButton@button,w
  9043  0A53  0084               	movwf	4
  9044  0A54  1003               	clrc
  9045  0A55  1383               	bcf	3,7	;select IRP bank0
  9046  0A56  1C80               	btfss	0,1
  9047  0A57  1403               	setc
  9048  0A58  3000               	movlw	0
  9049  0A59  1803               	skipnc
  9050  0A5A  3001               	movlw	1
  9051  0A5B  00F4               	movwf	??_Buttons_UpdateButton
  9052  0A5C  0875               	movf	Buttons_UpdateButton@button,w
  9053  0A5D  0084               	movwf	4
  9054  0A5E  0800               	movf	0,w
  9055  0A5F  0674               	xorwf	??_Buttons_UpdateButton,w
  9056  0A60  39FE               	andlw	-2
  9057  0A61  0674               	xorwf	??_Buttons_UpdateButton,w
  9058  0A62  0080               	movwf	0
  9059                           
  9060                           ;Buttons.c: 30:         button->held = 1;
  9061  0A63  0875               	movf	Buttons_UpdateButton@button,w
  9062  0A64  0084               	movwf	4
  9063  0A65  1480               	bsf	0,1
  9064                           
  9065                           ;Buttons.c: 31:     }
  9066  0A66  0008               	return
  9067  0A67                     l2925:	
  9068                           
  9069                           ;Buttons.c: 33:     {;Buttons.c: 34:         button->pressed = 0;
  9070  0A67  0875               	movf	Buttons_UpdateButton@button,w
  9071  0A68  0084               	movwf	4
  9072  0A69  1383               	bcf	3,7	;select IRP bank0
  9073  0A6A  1000               	bcf	0,0
  9074                           
  9075                           ;Buttons.c: 35:         button->held = 0;
  9076  0A6B  0875               	movf	Buttons_UpdateButton@button,w
  9077  0A6C  0084               	movwf	4
  9078  0A6D  1080               	bcf	0,1
  9079  0A6E  0008               	return
  9080  0A6F                     __end_of_Buttons_UpdateButton:	
  9081                           
  9082                           	psect	text67
  9083  08CB                     __ptext67:	
  9084 ;; *************** function _Buttons_Clear *****************
  9085 ;; Defined at:
  9086 ;;		line 45 in file "Buttons.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  buttons         1    wreg     PTR struct .
  9089 ;;		 -> main@buttons(4), 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  buttons         1    8[COMMON] PTR struct .
  9092 ;;		 -> main@buttons(4), 
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  1    wreg      void 
  9095 ;; Registers used:
  9096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9102 ;;      Params:         0       0       0       0
  9103 ;;      Locals:         1       0       0       0
  9104 ;;      Temps:          0       0       0       0
  9105 ;;      Totals:         1       0       0       0
  9106 ;;Total ram usage:        1 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    2
  9109 ;; This function calls:
  9110 ;;		_memset
  9111 ;; This function is called by:
  9112 ;;		_main
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           
  9117                           ;psect for function _Buttons_Clear
  9118  08CB                     _Buttons_Clear:	
  9119                           
  9120                           ;incstack = 0
  9121                           ; Regs used in _Buttons_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9122                           ;Buttons_Clear@buttons stored from wreg
  9123  08CB  00F8               	movwf	Buttons_Clear@buttons
  9124                           
  9125                           ;Buttons.c: 45: void Buttons_Clear(Buttons *buttons);Buttons.c: 46: {;Buttons.c: 47:    
      +                           memset(buttons, 0, sizeof *buttons);
  9126  08CC  3000               	movlw	0
  9127  08CD  00F3               	movwf	memset@c
  9128  08CE  00F4               	movwf	memset@c+1
  9129  08CF  3004               	movlw	4
  9130  08D0  00F5               	movwf	memset@n
  9131  08D1  3000               	movlw	0
  9132  08D2  00F6               	movwf	memset@n+1
  9133  08D3  0878               	movf	Buttons_Clear@buttons,w
  9134  08D4  158A  21D5         	fcall	_memset
  9135  08D6  0008               	return
  9136  08D7                     __end_of_Buttons_Clear:	
  9137                           
  9138                           	psect	text68
  9139  09D5                     __ptext68:	
  9140 ;; *************** function _memset *****************
  9141 ;; Defined at:
  9142 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\memset.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  p1              1    wreg     PTR void 
  9145 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  9146 ;;  c               2    3[COMMON] int 
  9147 ;;  n               2    5[COMMON] unsigned int 
  9148 ;; Auto vars:     Size  Location     Type
  9149 ;;  p1              1    1[BANK0 ] PTR void 
  9150 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  9151 ;;  p               1    0[BANK0 ] PTR unsigned char 
  9152 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  9153 ;; Return value:  Size  Location     Type
  9154 ;;                  1    wreg      PTR void 
  9155 ;; Registers used:
  9156 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9162 ;;      Params:         4       0       0       0
  9163 ;;      Locals:         0       2       0       0
  9164 ;;      Temps:          1       0       0       0
  9165 ;;      Totals:         5       2       0       0
  9166 ;;Total ram usage:        7 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    1
  9169 ;; This function calls:
  9170 ;;		Nothing
  9171 ;; This function is called by:
  9172 ;;		_Tetris_ResetGame
  9173 ;;		_Buttons_Clear
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function _memset
  9179  09D5                     _memset:	
  9180                           
  9181                           ;incstack = 0
  9182                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  9183                           ;memset@p1 stored from wreg
  9184  09D5  1283               	bcf	3,5	;RP0=0, select bank0
  9185  09D6  1303               	bcf	3,6	;RP1=0, select bank0
  9186  09D7  00A1               	movwf	memset@p1
  9187  09D8  0821               	movf	memset@p1,w
  9188  09D9  00F7               	movwf	??_memset
  9189  09DA  0877               	movf	??_memset,w
  9190  09DB  00A0               	movwf	memset@p
  9191  09DC                     l3847:	
  9192  09DC  3001               	movlw	1
  9193  09DD  02F5               	subwf	memset@n,f
  9194  09DE  3000               	movlw	0
  9195  09DF  1C03               	skipc
  9196  09E0  03F6               	decf	memset@n+1,f
  9197  09E1  02F6               	subwf	memset@n+1,f
  9198  09E2  0A75               	incf	memset@n,w
  9199  09E3  1903               	btfsc	3,2
  9200  09E4  0A76               	incf	memset@n+1,w
  9201  09E5  1903               	btfsc	3,2
  9202  09E6  0008               	return
  9203  09E7  0873               	movf	memset@c,w
  9204  09E8  00F7               	movwf	??_memset
  9205  09E9  0820               	movf	memset@p,w
  9206  09EA  0084               	movwf	4
  9207  09EB  0877               	movf	??_memset,w
  9208  09EC  1383               	bcf	3,7	;select IRP bank0
  9209  09ED  0080               	movwf	0
  9210  09EE  3001               	movlw	1
  9211  09EF  00F7               	movwf	??_memset
  9212  09F0  0877               	movf	??_memset,w
  9213  09F1  07A0               	addwf	memset@p,f
  9214  09F2  29DC               	goto	l3847
  9215  09F3                     __end_of_memset:	
  9216                           
  9217                           	psect	text69
  9218  0BC9                     __ptext69:	
  9219 ;; *************** function _InterruptHandler *****************
  9220 ;; Defined at:
  9221 ;;		line 80 in file "main.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;		None
  9224 ;; Auto vars:     Size  Location     Type
  9225 ;;		None
  9226 ;; Return value:  Size  Location     Type
  9227 ;;                  1    wreg      void 
  9228 ;; Registers used:
  9229 ;;		wreg, status,2, status,0
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9235 ;;      Params:         0       0       0       0
  9236 ;;      Locals:         0       0       0       0
  9237 ;;      Temps:          3       0       0       0
  9238 ;;      Totals:         3       0       0       0
  9239 ;;Total ram usage:        3 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; This function calls:
  9242 ;;		Nothing
  9243 ;; This function is called by:
  9244 ;;		Interrupt level 1
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _InterruptHandler
  9250  0BC9                     _InterruptHandler:	
  9251                           
  9252                           ;main.c: 82:     static uint8_t timerInterruptCounter = 0;;main.c: 84:     if (INTE && I
      +                          NTF)
  9253  0BC9  1A0B               	btfsc	11,4	;volatile
  9254  0BCA  1C8B               	btfss	11,1	;volatile
  9255  0BCB  2BDA               	goto	i1l3385
  9256                           
  9257                           ;main.c: 85:     {;main.c: 86:         _delay((unsigned long)((25)*(8000000/4000000.0)))
      +                          ;
  9258  0BCC  3010               	movlw	16
  9259  0BCD  00F0               	movwf	??_InterruptHandler
  9260  0BCE                     u413_27:	
  9261  0BCE  0BF0               	decfsz	??_InterruptHandler,f
  9262  0BCF  2BCE               	goto	u413_27
  9263  0BD0  0000               	nop
  9264                           
  9265                           ;main.c: 87:         INTF = 0;
  9266  0BD1  108B               	bcf	11,1	;volatile
  9267                           
  9268                           ;main.c: 89:         if (!paused)
  9269  0BD2  087A               	movf	_paused,w
  9270  0BD3  1D03               	btfss	3,2
  9271  0BD4  2BD9               	goto	i1l3383
  9272                           
  9273                           ;main.c: 90:         {;main.c: 91:             paused = 1;
  9274  0BD5  01FA               	clrf	_paused
  9275  0BD6  0AFA               	incf	_paused,f
  9276  0BD7  0063               	sleep	;# 
  9277                           
  9278                           ;main.c: 93:         }
  9279  0BD8  2BDA               	goto	i1l3385
  9280  0BD9                     i1l3383:	
  9281                           
  9282                           ;main.c: 95:         {;main.c: 96:             paused = 0;
  9283  0BD9  01FA               	clrf	_paused
  9284  0BDA                     i1l3385:	
  9285                           
  9286                           ;main.c: 100:     if (TMR1IE && TMR1IF)
  9287  0BDA  1683               	bsf	3,5	;RP0=1, select bank1
  9288  0BDB  1303               	bcf	3,6	;RP1=0, select bank1
  9289  0BDC  1C0C               	btfss	12,0	;volatile
  9290  0BDD  2BF0               	goto	i1l99
  9291  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  9292  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  9293  0BE0  1C0C               	btfss	12,0	;volatile
  9294  0BE1  2BF0               	goto	i1l99
  9295                           
  9296                           ;main.c: 101:     {;main.c: 102:         TMR1IF = 0;
  9297  0BE2  100C               	bcf	12,0	;volatile
  9298                           
  9299                           ;main.c: 103:         ++timerInterruptCounter;
  9300  0BE3  3001               	movlw	1
  9301  0BE4  00F0               	movwf	??_InterruptHandler
  9302  0BE5  0870               	movf	??_InterruptHandler,w
  9303  0BE6  07F9               	addwf	InterruptHandler@timerInterruptCounter,f
  9304                           
  9305                           ;main.c: 104:         if (timerInterruptCounter >= timerPrescaler)
  9306  0BE7  1683               	bsf	3,5	;RP0=1, select bank1
  9307  0BE8  1303               	bcf	3,6	;RP1=0, select bank1
  9308  0BE9  0865               	movf	_timerPrescaler^(0+128),w
  9309  0BEA  0279               	subwf	InterruptHandler@timerInterruptCounter,w
  9310  0BEB  1C03               	skipc
  9311  0BEC  2BF0               	goto	i1l99
  9312                           
  9313                           ;main.c: 105:         {;main.c: 106:             updateReady = 1;
  9314  0BED  01E6               	clrf	_updateReady^(0+128)
  9315  0BEE  0AE6               	incf	_updateReady^(0+128),f
  9316                           
  9317                           ;main.c: 107:             timerInterruptCounter = 0;
  9318  0BEF  01F9               	clrf	InterruptHandler@timerInterruptCounter
  9319  0BF0                     i1l99:	
  9320  0BF0  0872               	movf	??_InterruptHandler+2,w
  9321  0BF1  008A               	movwf	10
  9322  0BF2  0E71               	swapf	(??_InterruptHandler+1)^(0+4294967168),w
  9323  0BF3  0083               	movwf	3
  9324  0BF4  0EFE               	swapf	126,f
  9325  0BF5  0E7E               	swapf	126,w
  9326  0BF6  0009               	retfie
  9327  0BF7                     __end_of_InterruptHandler:	
  9328  007E                     btemp	set	126	;btemp
  9329  007E                     wtemp0	set	126
  9330                           
  9331                           	psect	intentry
  9332  0004                     __pintentry:	
  9333                           ;incstack = 0
  9334                           ; Regs used in _InterruptHandler: [wreg+status,2+status,0]
  9335                           
  9336  0004                     interrupt_function:	
  9337  007E                     saved_w	set	btemp
  9338  0004  00FE               	movwf	btemp
  9339  0005  0E03               	swapf	3,w
  9340  0006  00F1               	movwf	??_InterruptHandler+1
  9341  0007  080A               	movf	10,w
  9342  0008  00F2               	movwf	??_InterruptHandler+2
  9343  0009  158A  2BC9         	ljmp	_InterruptHandler


Data Sizes:
    Strings     0
    Constant    356
    Data        7
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     39      43
    BANK1            80     68      71
    BANK2            80      0       0

Pointer List with Targets:

    DrawTetris@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetris@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawCurrentScore@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    UpdateDifficulty@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetrisGameColumn@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    main@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    memset@p1	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    memset@p	PTR unsigned char  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    __itoee@addr	PTR eeprom void  size(1) Largest target is 2
		 -> highscore(EEDATA[2]), uniqueSeed(EEDATA[2]), 

    __eetoi@addr	PTR eeprom void  size(1) Largest target is 2
		 -> highscore(EEDATA[2]), uniqueSeed(EEDATA[2]), 

    __memcpyee@to	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> highscore(EEDATA[2]), uniqueSeed(EEDATA[2]), 

    __memcpyee@from	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[4]), __fttoee@data(COMMON[4]), __otoee@data(COMMON[4]), __ltoee@data(COMMON[4]), 
		 -> __mtoee@data(COMMON[3]), __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    __memcpyee@ptr	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[4]), __fttoee@data(COMMON[4]), __otoee@data(COMMON[4]), __ltoee@data(COMMON[4]), 
		 -> __mtoee@data(COMMON[3]), __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> highscore(EEDATA[2]), uniqueSeed(EEDATA[2]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    DrawCurrentScore@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawCurrentScore@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    DrawTetris@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    DrawTetrisGameColumn@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetrisGameColumn@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    GetDigits@digits	PTR unsigned char  size(1) Largest target is 5
		 -> DrawHighscore@scoreDigits(BANK0[5]), DrawCurrentScore@scoreDigits(BANK0[5]), 

    Buttons_Update@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_Clear@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_UpdateButton@button	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Tetris_RotatePlayer@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerRight@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerLeft@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerDown@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ClearFilledRows@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_UpdateGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    sp__memset	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetUnit	PTR const struct . size(2) Largest target is 238
		 -> NULL(NULL[0]), Tetris_units(CODE[238]), 

    Tetris_ShiftTableDown@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetPlayer@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_SetPlayerUnit@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerUnitBitsAreValid@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerUnitBitsAreValid@player	PTR const struct . size(1) Largest target is 63
		 -> tetrisGame.player(BANK0[13]), main@tetrisGame(BANK1[63]), 

    Tetris_UpdatePlayerUnitBits@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdatePlayerUnitBits@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_CountUnitBits@unitBits	PTR const unsigned int  size(2) Largest target is 238
		 -> tetrisGame.player(BANK0[13]), Tetris_units.bits(CODE[32]), Tetris_units(CODE[238]), main@tetrisGame(BANK1[63]), 

    Tetris_ApplyPlayerToTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_RemovePlayerFromTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingRightBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingRightBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingLeftBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingLeftBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerOverlapsEnvironment@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTopmostY@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTopmostY@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetRandomUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    S91$unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    UpdateDifficulty@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    UpdateDifficulty@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 


Critical Paths under _main in COMMON

    _main->_Buttons_Clear
    _main->___itoee
    _Tetris_UpdateGame->_Tetris_ClearFilledRows
    _Tetris_UpdateGame->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerDown->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerDown->_Tetris_RemovePlayerFromTable
    _Tetris_GetRandomUnit->___awmod
    _rand->___lmul
    ___wmul->___awmod
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_PlayerOverlapsEnvironment
    _Tetris_RotatePlayer->_Tetris_PlayerUnitBitsAreValid
    _Tetris_RotatePlayer->_Tetris_RemovePlayerFromTable
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetPlayer->_Tetris_SetPlayerUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerRight->_Tetris_PlayerTouchingRightBound
    _Tetris_MovePlayerRight->_Tetris_RemovePlayerFromTable
    _Tetris_MovePlayerLeft->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerLeft->_Tetris_PlayerTouchingLeftBound
    _Tetris_MovePlayerLeft->_Tetris_RemovePlayerFromTable
    _Tetris_RemovePlayerFromTable->_Tetris_PlayerTopmostY
    _Tetris_PlayerOverlapsEnvironment->_Tetris_PlayerTopmostY
    _Tetris_ApplyPlayerToTable->_Tetris_PlayerTopmostY
    _SetupRandomness->___itoee
    ___itoee->___memcpyee
    ___eetoi->___eecpymem
    _LCD_SetZ->_LCD_Write
    _LCD_TurnOn->_LCD_Write
    _LCD_TurnOff->_LCD_Write
    _LCD_WriteData->_LCD_Write
    _LCD_SetY->_LCD_Write
    _LCD_SetX->_LCD_Write
    _LCD_BlockWhileBusy->_LCD_IsBusy
    _LCD_IsBusy->_LCD_ReadStatus
    _GetDigits->___lwdiv
    _Buttons_Update->_Buttons_UpdateButton
    _Buttons_Clear->_memset

Critical Paths under _InterruptHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Tetris_UpdateGame
    _Tetris_UpdateGame->_Tetris_ResetPlayer
    _Tetris_MovePlayerDown->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerDown->_Tetris_PlayerOverlapsEnvironment
    _Tetris_GetRandomUnit->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_ApplyPlayerToTable
    _Tetris_RotatePlayer->_Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ResetPlayer
    _Tetris_ResetPlayer->_Tetris_GetRandomUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerRight->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerLeft->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerLeft->_Tetris_PlayerOverlapsEnvironment
    _SetupRandomness->___itoee
    _srand->___eetoi
    ___itoee->___eetoi
    _LCD_Reset->_LCD_SetX
    _LCD_Reset->_LCD_SetY
    _LCD_Reset->_LCD_SetZ
    _LCD_SetZ->_LCD_Write
    _FlashVictoriously->_DrawHighscoreText
    _LCD_TurnOn->_LCD_Write
    _LCD_TurnOff->_LCD_Write
    _LCD_Clear->_LCD_SetX
    _LCD_Clear->_LCD_SetY
    _LCD_Clear->_LCD_WriteData
    _DrawHighscoreText->_LCD_SetX
    _DrawHighscoreText->_LCD_SetY
    _DrawHighscoreText->_LCD_WriteData
    _DrawTetris->_DrawTetrisGameColumn
    _DrawTetrisGameColumn->_LCD_SetX
    _DrawTetrisGameColumn->_LCD_SetY
    _DrawTetrisGameColumn->_LCD_WriteData
    _DrawHighscore->_GetDigits
    _DrawHiMarker->_LCD_SetX
    _DrawHiMarker->_LCD_SetY
    _DrawHiMarker->_LCD_WriteData
    _DrawCurrentScore->_GetDigits
    _LCD_WriteData->_LCD_Write
    _LCD_SetY->_LCD_Write
    _LCD_SetX->_LCD_Write
    _GetDigits->___lwdiv
    _Buttons_Clear->_memset

Critical Paths under _InterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                69    69      0   55023
                                             38 BANK0      1     1      0
                                              0 BANK1     68    68      0
                      _Buttons_Clear
                     _Buttons_Update
                   _DrawCurrentScore
                      _DrawHighscore
                         _DrawTetris
                  _FlashVictoriously
                         _ResetTimer
                              _Setup
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerLeft
             _Tetris_MovePlayerRight
                   _Tetris_ResetGame
                _Tetris_RotatePlayer
                  _Tetris_UpdateGame
                   _UpdateDifficulty
                            ___eetoi
                            ___itoee
 ---------------------------------------------------------------------------------
 (1) _UpdateDifficulty                                     3     3      0      99
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_UpdateGame                                    4     4      0    6956
                                             34 BANK0      4     4      0
          _Tetris_ApplyPlayerToTable
             _Tetris_ClearFilledRows
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerDown
   _Tetris_PlayerOverlapsEnvironment
                 _Tetris_ResetPlayer
         _Tetris_ScoreForRowsCleared
 ---------------------------------------------------------------------------------
 (2) _Tetris_ScoreForRowsCleared                           3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_MovePlayerDown                                2     2      0    2178
                                             12 BANK0      2     2      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_GetRandomUnit                                 2     2      0    1173
                                             27 BANK0      2     2      0
                            ___awmod
                             ___wmul
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                              8 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              3 COMMON     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                             21 BANK0      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              8 COMMON     1     1      0
                                             15 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _Tetris_ClearFilledRows                               7     7      0     738
                                              6 COMMON     3     3      0
                                              6 BANK0      4     4      0
              _Tetris_ShiftTableDown
 ---------------------------------------------------------------------------------
 (3) _Tetris_ShiftTableDown                                9     8      1     473
                                              3 COMMON     3     2      1
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_RotatePlayer                                  8     8      0    3848
                                             12 BANK0      8     8      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
      _Tetris_PlayerUnitBitsAreValid
       _Tetris_RemovePlayerFromTable
        _Tetris_UpdatePlayerUnitBits
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     322
                                              3 COMMON     4     3      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerUnitBitsAreValid                        5     5      0     581
                                              5 COMMON     4     4      0
                                             10 BANK0      1     1      0
               _Tetris_CountUnitBits
 ---------------------------------------------------------------------------------
 (4) _Tetris_CountUnitBits                                12    10      2     452
                                              3 COMMON     2     0      2
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_ResetGame                                     3     1      2    2801
                                             34 BANK0      3     1      2
          _Tetris_ApplyPlayerToTable
               _Tetris_GetRandomUnit (ARG)
                 _Tetris_ResetPlayer
                             _memset
 ---------------------------------------------------------------------------------
 (2) _Tetris_ResetPlayer                                   5     3      2    1142
                                             29 BANK0      5     3      2
               _Tetris_GetRandomUnit (ARG)
               _Tetris_SetPlayerUnit
 ---------------------------------------------------------------------------------
 (3) _Tetris_SetPlayerUnit                                 3     1      2     766
                                              8 COMMON     1     1      0
                                             10 BANK0      2     0      2
        _Tetris_UpdatePlayerUnitBits
 ---------------------------------------------------------------------------------
 (5) _Tetris_UpdatePlayerUnitBits                         15    15      0     547
                                              3 COMMON     5     5      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerRight                               5     5      0    2530
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerTouchingRightBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingRightBound                      6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerLeft                                5     5      0    2530
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
     _Tetris_PlayerTouchingLeftBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (3) _Tetris_RemovePlayerFromTable                        11    11      0     540
                                              6 COMMON     3     3      0
                                              0 BANK0      8     8      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingLeftBound                       6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerOverlapsEnvironment                    15    15      0     576
                                              6 COMMON     3     3      0
                                              0 BANK0     12    12      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (3) _Tetris_ApplyPlayerToTable                           12    12      0     840
                                              0 BANK0     12    12      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (4) _Tetris_PlayerTopmostY                                3     3      0     139
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    8631
                      _Buttons_Setup
                          _LCD_Clear
                          _LCD_Reset
               _LCD_SegmentSelection
                     _LCD_SetupPorts
                         _LCD_TurnOn
                    _SetupOscillator
                    _SetupRandomness
                         _SetupTimer
 ---------------------------------------------------------------------------------
 (2) _SetupTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetupRandomness                                      0     0      0    3068
                            ___eetoi
                            ___itoee
                              _srand
 ---------------------------------------------------------------------------------
 (3) _srand                                                2     0      2      98
                                              7 BANK0      2     0      2
                            ___eetoi (ARG)
 ---------------------------------------------------------------------------------
 (1) ___itoee                                              5     3      2    1498
                                              8 COMMON     1     1      0
                                              7 BANK0      4     2      2
                            ___eetoi (ARG)
                         ___memcpyee
 ---------------------------------------------------------------------------------
 (2) ___memcpyee                                           5     3      2    1229
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___eetoi                                              7     5      2    1472
                                              0 BANK0      7     5      2
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (2) ___eecpymem                                           5     3      2    1229
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _SetupOscillator                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_SetupPorts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2307
                           _LCD_SetX
                           _LCD_SetY
                           _LCD_SetZ
 ---------------------------------------------------------------------------------
 (3) _LCD_SetZ                                             2     2      0     769
                                              1 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _Buttons_Setup                                        0     0      0       0
            _Buttons_SetupInterrupts
                 _Buttons_SetupPortB
 ---------------------------------------------------------------------------------
 (3) _Buttons_SetupPortB                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Buttons_SetupInterrupts                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FlashVictoriously                                    4     4      0    6741
                                              9 BANK0      4     4      0
                  _DrawHighscoreText
                          _LCD_Clear
               _LCD_SegmentSelection
                        _LCD_TurnOff
                         _LCD_TurnOn
 ---------------------------------------------------------------------------------
 (2) _LCD_TurnOn                                           1     1      0     738
                                              1 BANK0      1     1      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_TurnOff                                          1     1      0     738
                                              1 BANK0      1     1      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            3     3      0    2474
                                              3 BANK0      3     3      0
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _DrawHighscoreText                                    6     6      0    2679
                                              3 BANK0      6     6      0
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _DrawTetris                                           7     7      0    3516
                                             17 BANK0      7     7      0
               _DrawTetrisGameColumn
 ---------------------------------------------------------------------------------
 (2) _DrawTetrisGameColumn                                14     9      5    3276
                                              3 BANK0     14     9      5
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _DrawHighscore                                       22    20      2    6765
                                             12 BANK0     22    20      2
                       _DrawHiMarker
                          _GetDigits
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
                            ___eetoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _DrawHiMarker                                         2     2      0    2450
                                              3 BANK0      2     2      0
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _DrawCurrentScore                                    21    21      0    4297
                                             12 BANK0     21    21      0
                          _GetDigits
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (3) _LCD_WriteData                                        2     2      0     769
                                              1 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_SetY                                             2     2      0     769
                                              1 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_SetX                                             2     2      0     769
                                              1 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1     738
                                              8 COMMON     1     0      1
                                              0 BANK0      1     1      0
                 _LCD_BlockWhileBusy
 ---------------------------------------------------------------------------------
 (4) _LCD_BlockWhileBusy                                   0     0      0     136
                         _LCD_IsBusy
 ---------------------------------------------------------------------------------
 (5) _LCD_IsBusy                                           3     3      0     136
                                              5 COMMON     3     3      0
                     _LCD_ReadStatus
 ---------------------------------------------------------------------------------
 (6) _LCD_ReadStatus                                       2     2      0      34
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_SegmentSelection                                 1     1      0      44
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GetDigits                                            9     6      3    1178
                                              3 BANK0      9     6      3
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     168
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _Buttons_Update                                       1     1      0     689
                                              6 COMMON     1     1      0
               _Buttons_UpdateButton
 ---------------------------------------------------------------------------------
 (2) _Buttons_UpdateButton                                 3     2      1     568
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Buttons_Clear                                        1     1      0     636
                                              8 COMMON     1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     569
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandler                                     3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buttons_Clear
     _memset
   _Buttons_Update
     _Buttons_UpdateButton
   _DrawCurrentScore
     _GetDigits
       ___bmul
       ___lwdiv
     _LCD_SegmentSelection
     _LCD_SetX
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetY
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_WriteData
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
   _DrawHighscore
     _DrawHiMarker
       _LCD_SegmentSelection
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
     _GetDigits
       ___bmul
       ___lwdiv
     _LCD_SegmentSelection
     _LCD_SetX
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetY
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_WriteData
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     ___eetoi (ARG)
       ___eecpymem
   _DrawTetris
     _DrawTetrisGameColumn
       _LCD_SegmentSelection
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
   _FlashVictoriously
     _DrawHighscoreText
       _LCD_SegmentSelection
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
     _LCD_Clear
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
     _LCD_SegmentSelection
     _LCD_TurnOff
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_TurnOn
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
   _ResetTimer
   _Setup
     _Buttons_Setup
       _Buttons_SetupInterrupts
       _Buttons_SetupPortB
     _LCD_Clear
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
     _LCD_Reset
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetZ
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
     _LCD_SegmentSelection
     _LCD_SetupPorts
     _LCD_TurnOn
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _SetupOscillator
     _SetupRandomness
       ___eetoi
         ___eecpymem
       ___itoee
         ___eetoi (ARG)
           ___eecpymem
         ___memcpyee (ARG)
       _srand
         ___eetoi (ARG)
           ___eecpymem
     _SetupTimer
   _Tetris_GetRandomUnit
     ___awmod
       _rand (ARG)
         ___lmul
     ___wmul
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _Tetris_MovePlayerLeft
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingLeftBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_MovePlayerRight
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingRightBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_ResetGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_GetRandomUnit (ARG)
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_ResetPlayer (ARG)
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _memset (ARG)
   _Tetris_RotatePlayer
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerUnitBitsAreValid
       _Tetris_CountUnitBits
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
     _Tetris_UpdatePlayerUnitBits
     ___lbmod
   _Tetris_UpdateGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_ClearFilledRows
       _Tetris_ShiftTableDown
     _Tetris_GetRandomUnit
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_MovePlayerDown
       _Tetris_ApplyPlayerToTable
         _Tetris_PlayerTopmostY
       _Tetris_PlayerOverlapsEnvironment
         _Tetris_PlayerTopmostY
       _Tetris_RemovePlayerFromTable
         _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_ResetPlayer
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _Tetris_ScoreForRowsCleared
   _UpdateDifficulty
   ___eetoi
     ___eecpymem
   ___itoee
     ___eetoi (ARG)
       ___eecpymem
     ___memcpyee (ARG)

 _InterruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     44      47       5       88.8%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     27      2B       3       53.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7D      10        0.0%
ABS                  0      0      7D       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       4       0        1.6%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 30 21:10:41 2019

                        ?_UpdateDifficulty 0070                             _LCD_ReadStatus 0941  
                  __end_of_SetupRandomness 0A4E                                ?_LCD_IsBusy 0070  
                                        pc 0002                  ??_Buttons_SetupInterrupts 0073  
                           ___bmul@product 0075                                __CFG_CP$OFF 0000  
                       ??_UpdateDifficulty 0073                                         fsr 0004  
                      ___wmul@multiplicand 0037                                ?_LCD_TurnOn 0070  
                                      l116 0089                                        l410 093F  
                                      l408 0938                                        l409 093B  
                                      l551 0BAE                                        l615 0AC1  
                                      l546 0BA1                                        l563 0DED  
                                      l478 0609                                        l558 0DD9  
                                      l825 0B3F                                        _GIE 005F  
                                      _RB1 0031                                        _RB2 0032  
                                      _RC0 0038                                        _RB3 0033  
                                      _RC1 0039                                        _RB4 0034  
                                      _RC2 003A                                        _RD0 0040  
                                      _RC3 003B                                        _RD1 0041  
                             __CFG_CPD$OFF 0000                       LCD_ReadStatus@status 0074  
                                      fsr0 0004                                        indf 0000  
                             ___awmod@sign 0034                 DrawTetrisGameColumn@lcdRow 0030  
                             ?_LCD_TurnOff 0070                    __end_of_SetupOscillator 089C  
               DrawTetrisGameColumn@tableY 002B                               __CFG_LVP$OFF 0000  
                   _Tetris_MovePlayerRight 0791                                       l4005 0B28  
                                     l2433 0BA9                                       l4131 02D5  
                                     l4115 0295                                       l4203 07A5  
                                     l3083 004A                                       l2461 0DE8  
                                     l3093 0074                                       l4223 07DC  
                                     l2383 058C                                       l2367 052E  
                                     l3087 005F                                       l3079 0035  
                                     l4225 07E6                                       l4217 07C5  
                                     l4091 0459                                       l4075 03FF  
                                     l4059 03A5                                       l4147 0331  
                                     l2803 0A07                                       l4235 06B1  
                                     l4307 0488                                       l3541 0920  
                                     l3613 0D32                                       l4181 00BE  
                                     l2397 05AB                                       l2389 05A8  
                                     l4253 0FDB                                       l4333 04D1  
                                     l4325 04C1                                       l2663 0963  
                                     l4167 009E                                       l2823 0A25  
                                     l4239 06C0                                       l4263 0FFE  
                                     l4351 04FC                                       l4319 04B5  
                                     l3561 09B0                                       l2817 0A13  
                                     l2649 0AB9                                       l4425 007E  
                                     l4337 04D8                                       l4329 04C9  
                                     l2667 0969                                       l3547 089C  
                                     l4275 0CC8                                       l3627 06D4  
                                     l4187 00D5                                       l3707 0F0F  
                                     l3571 0E9F                                       l4427 0AEC  
                                     l2851 0ADE                                       l2843 0ADA  
                                     l4355 04FF                                       l4339 04E0  
                                     l2925 0A67                                       l3637 06F8  
                                     l4189 00DD                                       l4357 0504  
                                     l3815 0B09                                       l3807 0AFE  
                                     l4295 0D69                                       l3647 0703  
                                     l3591 0E21                                       l3671 0E5F  
                                     l3663 0E5A                                       l3751 0F79  
                                     l3743 0F73                                       l3575 0EB7  
                                     l2855 0AE0                                       l2847 0ADC  
                                     l3753 0F87                                       l3761 0FA0  
                                     l2865 0AE4                                       l3675 0E7E  
                                     l3739 0F6C                                       l2859 0AE2  
                                     l3781 0DAE                                       l3933 0638  
                                     l3597 0E4C                                       l2797 09F5  
                                     l3693 0EDF                                       l3765 0FA8  
                                     l3757 0F95                                       l3847 09DC  
                                     l3791 0DCF                                       l3927 05FB  
                                     l3919 05DF                                       l3945 0647  
                                     l3881 0C7D                                       l3865 0C54  
                                     l3857 0C47                                       l3787 0DC4  
                                     l3779 0DA0                                       l3939 0639  
                                     l3971 073B                                       l3883 0C81  
                                     l3875 0C59                                       l3893 0C8D  
                                     l3957 0C06                                       l3991 0761  
                                     l3983 0753                                       u3030 09AD  
                                     u1600 05BB                                       u4005 0CE2  
                                     u1605 05B6                                       u3145 06F4  
                                     u3305 0F96                                       u4105 0516  
                                     u1555 053F                                       u3075 0EB9  
                                     u3235 0F52                                       u1580 059C  
                                     u4117 0D71                                       u3085 0EC1  
                                     u3430 0D24                                       u4127 0D82  
                                     u3345 0DA3                                       u1585 0597  
                                     u3185 0E7F                                       u3425 0D0E  
                                     u3275 0F7C                                       u3365 0DAF  
                                     u3375 0DBB                                       u3295 0F8D  
                                     u3385 0DC5                                       u3705 041D  
                                     u3625 0B2B                                       u1945 0AC2  
            ?_Tetris_RemovePlayerFromTable 0070                                       u3715 0436  
                                     u1955 0AC9                                       _PEIE 005E  
                                     u3565 0C12                                       u3805 030C  
             Tetris_ResetPlayer@playerUnit 003D                                       _INTE 005C  
                                     _INTF 0059                                       u3735 045C  
                                     u3655 03A8                                       u3665 03C3  
                                     u3825 0334                                       u3675 03DC  
                                     u3835 034F                                       u3755 0298  
                                     u3595 0764                                       u3845 0368  
                                     u3765 02B1                                       u3695 0402  
                                     u3785 02D8                                       u3795 02F3  
                                     i1l99 0BF0                                       u3995 0CDB  
                                     _TMR1 000E                                       _WPUB 0095  
                              main@buttons 00A1                               __CFG_WRT$OFF 0000  
               ?_Tetris_ApplyPlayerToTable 0070                                       _main 0485  
                                     _rand 0F1B                         __size_of_LCD_Clear 0025  
                                     btemp 007E                         __size_of_LCD_Reset 0017  
                                     start 000B              Tetris_ApplyPlayerToTable@game 002B  
                       __size_of_LCD_Write 001D                              __CFG_IESO$OFF 0000  
                   __size_of_Buttons_Clear 000C                     __end_of_LCD_ReadStatus 0951  
                            _LCD_WriteData 08C0                          ___bmul@multiplier 0076  
                   __size_of_Buttons_Setup 0006                              __CFG_MCLRE$ON 0000  
                          __end_of_Font_hi 0182                               ___itoee@addr 0078  
                             ___itoee@data 0027                             _LCD_SetupPorts 0A6F  
             __end_of_Tetris_CountUnitBits 0E97                           __end_of_LCD_SetX 08E3  
                         __end_of_LCD_SetY 08EF                           __end_of_LCD_SetZ 08FB  
    __end_of_Tetris_PlayerUnitBitsAreValid 0D26     __size_of_Tetris_PlayerUnitBitsAreValid 0035  
            _Tetris_PlayerUnitBitsAreValid 0CF1                                      ?_main 0070  
                   ??_Tetris_GetRandomUnit 003B                            __end_of___eetoi 07FF  
                                    ?_rand 0028                                      _EEADR 010D  
                            __CFG_WDTE$OFF 0000                            __end_of___awmod 0FAD  
                          __end_of___lbmod 0B45                                      _ANSEL 0188  
                          __end_of___itoee 0931                                      _IRCF0 047C  
                                    _IRCF1 047D                                      _IRCF2 047E  
                          __end_of___lwdiv 0DD4                                      _PORTA 0005  
                                    _PORTB 0006                                      _PORTC 0007  
                                    _PORTD 0008                                      _TRISA 0085  
                                    _TRISB 0086                                      _TRISC 0087  
                                    _TRISD 0088                        ___lmul@multiplicand 0024  
                               _DrawTetris 0CBC                             __CFG_FCMEN$OFF 0000  
                __size_of_Tetris_ResetGame 001F                                      _nRBPU 040F  
                                    _Setup 09B8                Tetris_PlayerTopmostY@player 0075  
                                    _randx 0047                                      _srand 08A3  
                      __size_of_LCD_IsBusy 000E           Tetris_PlayerTouchingRightBound@i 0078  
                     __end_of_DrawHiMarker 0C26                             __CFG_BOREN$OFF 0000  
                     Tetris_ResetGame@game 0044                                      pclath 000A  
               DrawCurrentScore@tetrisGame 003D                              ___memcpyee@to 0077  
                                    status 0003                                      wtemp0 007E  
                      __size_of_LCD_TurnOn 000A          __end_of_Tetris_ApplyPlayerToTable 072C  
             ??_Tetris_ScoreForRowsCleared 0073                             ?_LCD_WriteData 0070  
                          ?_LCD_ReadStatus 0070                         DrawHighscore@y_777 0040  
                       DrawHighscore@y_779 0041                    __size_of_Buttons_Update 002C  
      __end_of_Tetris_UpdatePlayerUnitBits 05C7                _Tetris_UpdatePlayerUnitBits 052C  
                          __initialization 000D                                 _Font_score 0162  
                   __end_of_LCD_SetupPorts 0A92                               __end_of_main 052C  
                             __end_of_rand 0F60                           ?_SetupRandomness 0070  
                 Tetris_CountUnitBits@mask 0025                      Tetris_CountUnitBits@i 0029  
                    Tetris_CountUnitBits@j 0028                        __end_of_Font_digits 0162  
                Buttons_UpdateButton@nHeld 0073                         DrawHighscoreText@x 0028  
                       DrawHighscoreText@y 0026                         __size_of_GetDigits 0035  
                                   ??_main 0046                                     ??_rand 002A  
                        __end_of_LCD_Clear 0B20                    ?_Tetris_ClearFilledRows 0070  
                        __end_of_LCD_Reset 099B                              _Buttons_Clear 08CB  
                     _Buttons_UpdateButton 0A4E                          DrawCurrentScore@y 003F  
                        __end_of_LCD_Write 09B8                              _Buttons_Setup 0890  
                                   ?_Setup 0070                     DrawHighscore@highscore 002C  
     Tetris_PlayerOverlapsEnvironment@game 0077                           ?_SetupOscillator 0070  
                  Tetris_ClearFilledRows@i 0078                                     _EEDATA 010C  
                                   _EECON1 018C                                     _EECON2 018D  
           __size_of_Tetris_MovePlayerLeft 0057             __size_of_Tetris_MovePlayerDown 0030  
                                   ?_srand 0027                                     _ANSELH 0189  
            __end_of_Tetris_MovePlayerLeft 00E1              __end_of_Tetris_MovePlayerDown 0C56  
                                   i1l3383 0BD9                                     i1l3385 0BDA  
                                   _INTEDG 040E             __size_of_Tetris_PlayerTopmostY 0012  
                                   u413_27 0BCE              __end_of_Tetris_PlayerTopmostY 0984  
                                   _TMR1IE 0460                                     _TMR1IF 0060  
                                   _TMR1CS 0081                                     _TMR1ON 0080  
                               _ResetTimer 0886             ??_Tetris_RemovePlayerFromTable 0020  
                           __CFG_PWRTE$OFF 0000                   __end_of_DrawCurrentScore 0485  
                       _Tetris_ResetPlayer 0A92                                     ___bmul 0961  
                          ?_LCD_SetupPorts 0070                                     ___lmul 0E97  
                                   ___wmul 0AB5                                  ??___eetoi 0022  
                                ??___awmod 0078                                  ??___lbmod 0074  
                                ??___itoee 0029                                  ??___lwdiv 0077  
                                   _memset 09D5                                     _paused 007A  
                          ___awmod@divisor 002F                                 _SetupTimer 08FB  
                      ?_Tetris_ResetPlayer 003D             __end_of_Tetris_ClearFilledRows 0C87  
                          ___awmod@counter 0033                             ?_Buttons_Clear 0070  
                          GetDigits@digits 0025                      ?_Buttons_UpdateButton 0073  
                             __pdataCOMMON 007A              __size_of_LCD_SegmentSelection 0010  
                           ?_Buttons_Setup 0070             ?_Tetris_PlayerUnitBitsAreValid 0070  
             Tetris_UpdatePlayerUnitBits@i 0075               __end_of_DrawTetrisGameColumn 0656  
                                   saved_w 007E                                ?_DrawTetris 0070  
                                   srand@x 0027                             ___memcpyee@ptr 0076  
                     __size_of_LCD_TurnOff 000A                                 ___eecpymem 0B9C  
                     ??_Tetris_ResetPlayer 003F                            ___lbmod@divisor 0073  
                     _Tetris_CountUnitBits 0E56                    __end_of__initialization 0030  
                          ___lbmod@counter 0021                                  ?_LCD_SetX 0070  
                                ?_LCD_SetY 0070                                  ?_LCD_SetZ 0070  
                        __end_of_GetDigits 0CBC                            ??_LCD_WriteData 0021  
                    __end_of_DrawHighscore 0383              __size_of_Tetris_SetPlayerUnit 0010  
                              _Font_digits 0112                        ___bmul@multiplicand 0073  
                               ___memcpyee 0DD4                                  LCD_SetX@x 0022  
                                LCD_SetY@y 0022                                  LCD_SetZ@z 0022  
                           __pcstackCOMMON 0070             __size_of_Tetris_ShiftTableDown 0043  
                            __end_of_Setup 09D5                               ??_LCD_IsBusy 0075  
            __end_of_Tetris_ShiftTableDown 0F1B                               __pidataBANK0 0882  
                             __pidataBANK1 0002                         _Buttons_SetupPortB 0907  
                            __end_of_srand 08AC                __size_of_LCD_BlockWhileBusy 0007  
                             ??_LCD_TurnOn 0021                  __size_of_InterruptHandler 002E  
                      ?_Buttons_SetupPortB 0070                    ?_Tetris_MovePlayerRight 0070  
 __end_of_Tetris_PlayerOverlapsEnvironment 0E56  __size_of_Tetris_PlayerOverlapsEnvironment 0041  
       ??_Tetris_PlayerOverlapsEnvironment 0020          ?_Tetris_PlayerOverlapsEnvironment 0070  
         _Tetris_PlayerOverlapsEnvironment 0E15                      __size_of_DrawHiMarker 002F  
                         _Tetris_ResetGame 00E1                  __size_of_UpdateDifficulty 0057  
                                  ??_Setup 0079                 Buttons_UpdateButton@button 0075  
                            GetDigits@newN 0029                                    ??_srand 0078  
                               __pbssBANK1 00E6                         __end_of_LCD_IsBusy 0922  
                    ?_Tetris_CountUnitBits 0073                                 ??_LCD_SetX 0021  
                               ??_LCD_SetY 0021                                 ??_LCD_SetZ 0021  
              ??_Tetris_ApplyPlayerToTable 0020         __end_of_Tetris_ScoreForRowsCleared 0AFB  
               _Tetris_ScoreForRowsCleared 0AD8                                ?_ResetTimer 0070  
                       __end_of_LCD_TurnOn 08C0                       ??_Buttons_SetupPortB 0073  
    InterruptHandler@timerInterruptCounter 0079                             _Buttons_Update 0B70  
           Tetris_RotatePlayer@oldRotation 0032                                 __pmaintext 0485  
                      __size_of_DrawTetris 0035                                    ?___bmul 0073  
                                  ?___lmul 0020               __size_of_Tetris_RotatePlayer 0070  
                                  ?___wmul 0035                                 __pintentry 0004  
                   DrawHighscoreText@y_786 0027                     DrawHighscoreText@baseX 0187  
                   DrawHighscoreText@baseY 0186                    DrawCurrentScore@lcdData 003A  
                                  ?_memset 0073                             ___lmul@product 0074  
                             _DrawHiMarker 0BF7                            ??_Buttons_Clear 0078  
                              ?_SetupTimer 0070                     ??_Buttons_UpdateButton 0074  
                                  _T1CKPS0 0084                                    _T1CKPS1 0085  
                          ??_Buttons_Setup 0073             __end_of_Tetris_MovePlayerRight 07EA  
                   Tetris_MovePlayerLeft@i 002E                                 __stringtab 0100  
                              ?___eecpymem 0073                           ??_LCD_ReadStatus 0073  
                   __end_of_Buttons_Update 0B9C                                    _Font_hi 017A  
                 ?_Buttons_SetupInterrupts 0070                                ?___memcpyee 0073  
                            LCD_Write@data 0078                              LCD_Write@mode 0020  
                     _DrawTetrisGameColumn 05C7      __end_of_Tetris_playerStartingPosition 0184  
            _Tetris_playerStartingPosition 0182                            __size_of___bmul 0011  
                        LCD_WriteData@data 0022                   Tetris_SetPlayerUnit@unit 002A  
                                  ___eetoi 07EA                            __size_of___lmul 0041  
                                  ___awmod 0F60                                    ___lbmod 0B20  
                          __size_of___wmul 0023                                    ___itoee 0922  
                                  ___lwdiv 0D96            Tetris_PlayerTouchingLeftBound@i 0078  
                          __size_of_memset 001E                  _Tetris_ApplyPlayerToTable 06C6  
                                  __ptext1 0033                                    __ptext2 0FAD  
                                  __ptext3 0AD8                                    __ptext4 0C26  
                                  __ptext5 0B45                                    __ptext6 0F1B  
                                  __ptext7 0E97                                    __ptext8 0AB5  
                                  __ptext9 0F60              __size_of_Tetris_GetRandomUnit 002B  
     __size_of_Tetris_UpdatePlayerUnitBits 009B                           ___awmod@dividend 0031  
                      __size_of_ResetTimer 0005                                  _LCD_Clear 0AFB  
                                _LCD_Reset 0984                  Tetris_MovePlayerLeft@game 0030  
    Tetris_ScoreForRowsCleared@rowsCleared 0075                                  _LCD_Write 099B  
                Tetris_MovePlayerDown@game 002D                     ??_Tetris_CountUnitBits 0020  
                     end_of_initialization 0030                             DrawHighscore@y 003F  
        Tetris_ClearFilledRows@rowsCleared 0076                                    memset@c 0073  
                                  memset@n 0075                                    memset@p 0020  
                      __size_of_SetupTimer 000C                       DrawTetris@tetrisGame 0032  
                         ??_LCD_SetupPorts 0073                            ?_Buttons_Update 0070  
                           main@tetrisGame 00A5                           _Tetris_unitPivot 0184  
                        ?_DrawCurrentScore 0070                      ?_DrawTetrisGameColumn 0023  
                Tetris_ShiftTableDown@upto 0073                         ??_DrawCurrentScore 002C  
                          ___memcpyee@from 0073                            ___memcpyee@size 0074  
                             __pstringtext 0100          Tetris_UpdatePlayerUnitBits@player 0077  
                      __size_of___eecpymem 002D                           _InterruptHandler 0BC9  
    Tetris_PlayerTouchingRightBound@player 0077                Tetris_MovePlayerRight@i_510 002F  
              DrawCurrentScore@lcdData_770 003C                   __size_of_SetupRandomness 001F  
              DrawCurrentScore@lcdData_768 003B                           ___lbmod@dividend 0020  
                             ??_DrawTetris 0031                           _UpdateDifficulty 0033  
                               ?_LCD_Clear 0070                        __size_of___memcpyee 0041  
                     Buttons_Clear@buttons 0078                                 ?_LCD_Reset 0070  
                               ?_LCD_Write 0078              Tetris_RemovePlayerFromTable@i 0078  
                    Tetris_UpdateGame@game 0045                                ___lbmod@rem 0022  
          __end_of_Buttons_SetupInterrupts 0890                                 _uniqueSeed 0000  
                    _Tetris_MovePlayerLeft 008A                      _Tetris_MovePlayerDown 0C26  
                 __size_of_SetupOscillator 0006                                 LCD_Clear@x 0025  
                               LCD_Clear@y 0024               __end_of_LCD_SegmentSelection 0941  
          ??_Tetris_PlayerUnitBitsAreValid 0075                      _Tetris_PlayerTopmostY 0972  
                        __size_of_LCD_SetX 000C                          __size_of_LCD_SetY 000C  
                        __size_of_LCD_SetZ 000C                                 main@status 00A0  
                 __end_of_Tetris_ResetGame 0100                                  _GetDigits 0C87  
                     DrawHighscore@lcdData 003C                         __end_of_DrawTetris 0CF1  
                           __end_of___bmul 0972                             __end_of___lmul 0ED8  
                           __end_of___wmul 0AD8                              __pidataCOMMON 07FF  
               Tetris_ResetGame@playerUnit 0042                          _FlashVictoriously 0D5C  
                           __end_of_memset 09F3               __end_of_Tetris_SetPlayerUnit 0961  
   __end_of_Tetris_PlayerTouchingLeftBound 0A11    __size_of_Tetris_PlayerTouchingLeftBound 001E  
           _Tetris_PlayerTouchingLeftBound 09F3                         ?_FlashVictoriously 0070  
                      start_initialization 000D                              ??_LCD_TurnOff 0021  
      Tetris_PlayerUnitBitsAreValid@player 002A                        _Tetris_RotatePlayer 0656  
                       __end_of_Font_score 017A                        ??_FlashVictoriously 0029  
                 DrawHighscore@lcdData_780 003E                   DrawHighscore@lcdData_778 003D  
              __size_of_Tetris_ResetPlayer 0023                      DrawCurrentScore@y_767 0040  
                    DrawCurrentScore@y_769 003E                               ??_ResetTimer 0073  
              ?_Tetris_ScoreForRowsCleared 0070                   __CFG_FOSC$INTRC_NOCLKOUT 0000  
                   ??_DrawTetrisGameColumn 0028                      __end_of_LCD_WriteData 08CB  
                               ?_GetDigits 0023                                   ??___bmul 0074  
               __end_of_LCD_BlockWhileBusy 08A3                       ?_Tetris_RotatePlayer 0070  
                                 ??___lmul 0073                                   ??___wmul 0079  
         Tetris_RemovePlayerFromTable@game 0077                  __end_of_FlashVictoriously 0D96  
                              __pdataBANK0 0047                                __pdataBANK1 00E4  
                    _Tetris_ShiftTableDown 0ED8                                   ??_memset 0077  
                             ??_SetupTimer 0073                                __pbssEEDATA 0000  
                        _DrawHighscoreText 072C                     __size_of_DrawHighscore 010D  
                              __pbssCOMMON 0079                                  ___latbits 0001  
                            __pcstackBANK0 0020                              __pcstackBANK1 00A0  
                       __end_of_ResetTimer 088B                         ?_DrawHighscoreText 0070  
                              ??_LCD_Clear 0023                          _Tetris_UpdateGame 0FAD  
                              ??_LCD_Reset 0079         __size_of_Tetris_ApplyPlayerToTable 0066  
             Tetris_UpdateGame@rowsCleared 0044                                ??_LCD_Write 0079  
                        ??_SetupRandomness 0079                         ?_Tetris_UpdateGame 0070  
                             ??___eecpymem 0075                     ?_Tetris_MovePlayerLeft 0070  
                   ?_Tetris_MovePlayerDown 0070                        __end_of_LCD_TurnOff 08B6  
                      ??_DrawHighscoreText 0023                DrawTetrisGameColumn@gameRow 002C  
                   ?_Tetris_PlayerTopmostY 0070                 UpdateDifficulty@tetrisGame 0075  
                       __end_of_SetupTimer 0907             __end_ofDrawHighscoreText@baseX 0188  
           __end_ofDrawHighscoreText@baseY 0187                              DrawHiMarker@y 0024  
                      ??_Tetris_UpdateGame 0042                __size_of_Buttons_SetupPortB 000D  
                             ??___memcpyee 0075                           ___lwdiv@dividend 0075  
                    ??_Tetris_RotatePlayer 002C                       __end_of_Tetris_units 0276  
                 ??_Tetris_ClearFilledRows 0026               ?_Tetris_UpdatePlayerUnitBits 0070  
                                 ?___eetoi 0020                          ??_SetupOscillator 0073  
                                 ?___awmod 002F                                   ?___lbmod 0073  
                                 ?___itoee 0027                                   ?___lwdiv 0073  
                    _defaultTimerPrescaler 00E4             Tetris_ShiftTableDown@gameTable 0074  
                __end_of_DrawHighscoreText 0791                         __end_of___eecpymem 0BC9  
                                _highscore 0002                      __end_of_Buttons_Clear 08D7  
         __size_of_Buttons_SetupInterrupts 0005                   __end_of_Tetris_unitPivot 0186  
            __size_of_Buttons_UpdateButton 0021                      __end_of_Buttons_Setup 0896  
                     _LCD_SegmentSelection 0931                  __end_of_Tetris_UpdateGame 1000  
                           __size_of_Setup 001D                           ___lwdiv@quotient 0021  
           Tetris_ApplyPlayerToTable@i_361 002A                         __end_of___memcpyee 0E15  
                      DrawTetris@rightMask 0035                           ??_Buttons_Update 0076  
                           __size_of_srand 0009                             _timerPrescaler 00E5  
           Tetris_ApplyPlayerToTable@start 0028                          interrupt_function 0004  
                                 _LCD_SetX 08D7                                   _LCD_SetY 08E3  
                 __end_of_InterruptHandler 0BF7                                   _LCD_SetZ 08EF  
                           ___wmul@product 0039                    Tetris_MovePlayerRight@i 002E  
             __end_of_Tetris_GetRandomUnit 0B70             DrawTetrisGameColumn@tetrisGame 002A  
                            _DrawHighscore 0276                       _Tetris_SetPlayerUnit 0951  
                              ??_GetDigits 0026                   __end_of_UpdateDifficulty 008A  
                   Tetris_ShiftTableDown@i 0075                     ?_Tetris_ShiftTableDown 0073  
               __size_of_FlashVictoriously 003A                DrawCurrentScore@scoreDigits 0035  
            ??_Tetris_UpdatePlayerUnitBits 0020                      DrawTetrisGameColumn@i 002E  
                    DrawTetrisGameColumn@x 0023                      DrawTetrisGameColumn@y 002F  
               Tetris_CountUnitBits@result 0027                                __stringbase 0112  
                        ___wmul@multiplier 0035                      ?_LCD_SegmentSelection 0070  
                __size_of_DrawCurrentScore 0102                      Buttons_Update@buttons 0076  
      __size_of_Tetris_ScoreForRowsCleared 0023                                _LCD_TurnOff 08AC  
             Tetris_CountUnitBits@unitBits 0073                          ___lmul@multiplier 0020  
        Tetris_PlayerOverlapsEnvironment@i 0078    __end_of_Tetris_PlayerTouchingRightBound 0A2F  
 __size_of_Tetris_PlayerTouchingRightBound 001E          ??_Tetris_PlayerTouchingRightBound 0073  
         ?_Tetris_PlayerTouchingRightBound 0070            _Tetris_PlayerTouchingRightBound 0A11  
            __size_of_Tetris_CountUnitBits 0041                           LCD_IsBusy@status 0077  
                           ?_DrawHighscore 002C                                 _EECON1bits 018C  
                    ?_Tetris_SetPlayerUnit 002A                          ?_Tetris_ResetGame 0042  
               Tetris_SetPlayerUnit@player 0078            __size_of_Tetris_ClearFilledRows 0031  
                  __size_of_LCD_ReadStatus 0010                   ??_Tetris_MovePlayerRight 002C  
                       ??_Tetris_ResetGame 0079                           __size_of___eetoi 0015  
                         __size_of___awmod 004D                           __size_of___lbmod 0025  
                         __size_of___itoee 000F                           __size_of___lwdiv 003E  
        Tetris_RemovePlayerFromTable@start 0076                 __size_of_DrawHighscoreText 0065  
                       __end_of__stringtab 0112                   DrawHighscore@scoreDigits 0037  
               __size_of_Tetris_UpdateGame 0053                            ___lwdiv@divisor 0073  
                          ___lwdiv@counter 0020                         DrawTetris@leftMask 0033  
                                 __ptext10 0C56                                   __ptext11 0ED8  
                                 __ptext20 0791                                   __ptext12 0656  
                                 __ptext21 0A11                                   __ptext13 0B20  
                                 __ptext30 0A2F                                   __ptext22 008A  
                                 __ptext14 0CF1                                   __ptext31 08A3  
                                 __ptext23 0D26                                   __ptext15 0E56  
                                 __ptext40 0890                                   __ptext32 0922  
                                 __ptext24 09F3                                   __ptext16 00E1  
                                 __ptext41 0907                                   __ptext33 0DD4  
                                 __ptext25 0E15                                   __ptext17 0A92  
                                 __ptext50 05C7                                   __ptext42 088B  
                                 __ptext34 07EA                                   __ptext26 06C6  
                                 __ptext18 0951                                   __ptext51 0276  
                                 __ptext43 0886                                   __ptext35 0B9C  
                                 __ptext27 0972                                   __ptext19 052C  
                                 __ptext60 0941                                   __ptext52 0BF7  
                                 __ptext44 0D5C                                   __ptext36 0896  
                                 __ptext28 09B8                                   __ptext61 0931  
                                 __ptext53 0383                                   __ptext45 08B6  
                                 __ptext37 0A6F                                   __ptext29 08FB  
                                 __ptext62 0C87                                   __ptext54 08C0  
                                 __ptext46 08AC                                   __ptext38 0984  
                                 __ptext63 0D96                                   __ptext55 08E3  
                                 __ptext47 0AFB                                   __ptext39 08EF  
                                 __ptext64 0961                                   __ptext56 08D7  
                                 __ptext48 072C                                   __ptext65 0B70  
                                 __ptext57 099B                                   __ptext49 0CBC  
                                 __ptext66 0A4E                                   __ptext58 089C  
                                 __ptext67 08CB                                   __ptext59 0914  
                                 __ptext68 09D5                                   __ptext69 0BC9  
                        __CFG_BOR4V$BOR40V 0000              DrawTetrisGameColumn@rightMask 0024  
     Tetris_PlayerTouchingLeftBound@player 0077                         FlashVictoriously@i 002C  
         ??_Tetris_PlayerTouchingLeftBound 0073            ?_Tetris_PlayerTouchingLeftBound 0070  
                            __size_of_main 00A7                              __size_of_rand 0045  
                  Tetris_RotatePlayer@game 0033                                 _LCD_IsBusy 0914  
               Tetris_MovePlayerLeft@i_496 002F            Tetris_ClearFilledRows@gameTable 0077  
                            ?_DrawHiMarker 0070                    __size_of_LCD_SetupPorts 0023  
                               _LCD_TurnOn 08B6                    _Buttons_SetupInterrupts 088B  
                   ??_LCD_SegmentSelection 0073                            _SetupRandomness 0A2F  
                          ___eecpymem@from 0073                            ___eecpymem@size 0074  
                               _INTCONbits 000B                       _Tetris_GetRandomUnit 0B45  
                       _LCD_BlockWhileBusy 089C                    ??_Tetris_MovePlayerLeft 002C  
                  ??_Tetris_MovePlayerDown 002C                     _Tetris_ClearFilledRows 0C56  
                                 memset@p1 0021                               _Tetris_units 0188  
             DrawTetrisGameColumn@leftMask 0026               LCD_SegmentSelection@segments 0073  
                  ??_Tetris_PlayerTopmostY 0073                 __end_of_Tetris_ResetPlayer 0AB5  
                 Tetris_ResetPlayer@player 0041                                   intlevel1 0000  
                      ?_LCD_BlockWhileBusy 0070                                 GetDigits@i 002B  
                               GetDigits@n 0023                            ??_DrawHighscore 002E  
                          _SetupOscillator 0896                     ??_Tetris_SetPlayerUnit 0078  
                                stringcode 010A      Tetris_PlayerOverlapsEnvironment@start 0076  
            __size_of_DrawTetrisGameColumn 008F           Tetris_UpdatePlayerUnitBits@i_381 0073  
         Tetris_UpdatePlayerUnitBits@i_382 0074                             _LCD_IsBusy$632 0076  
                           ??_DrawHiMarker 0023            __size_of_Tetris_MovePlayerRight 0059  
                     ??_LCD_BlockWhileBusy 0078           Tetris_UpdatePlayerUnitBits@shift 0076  
               Tetris_MovePlayerRight@game 0030                      ?_Tetris_GetRandomUnit 002C  
                              DrawTetris@x 0037                           _DrawCurrentScore 0383  
                                 stringtab 0100                     __size_of_LCD_WriteData 000B  
     __end_of_Tetris_RemovePlayerFromTable 0D5C      __size_of_Tetris_RemovePlayerFromTable 0036  
             _Tetris_RemovePlayerFromTable 0D26                              ___eecpymem@cp 0076  
                            ___eecpymem@to 0077                 __end_of_Buttons_SetupPortB 0914  
                               _STATUSbits 0003                __end_of_Tetris_RotatePlayer 06C6  
                        ?_InterruptHandler 0070               __end_of_Buttons_UpdateButton 0A6F  
               Tetris_ApplyPlayerToTable@i 0029                    ??_Tetris_ShiftTableDown 0020  
                       ??_InterruptHandler 0070                                _updateReady 00E6  
                             ___eetoi@addr 0026                               ___eetoi@data 0024  
