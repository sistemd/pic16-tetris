

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 29 16:55:55 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F884
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2
    64                           	psect	text49,local,class=CODE,merge=1,delta=2
    65                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text51,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.05
    71                           ; Generated 20/12/2018 GMT
    72                           ; 
    73                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F884 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  008F                     	;# 
   149  0090                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0093                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0095                     	;# 
   157  0096                     	;# 
   158  0097                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009A                     	;# 
   162  009B                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  0105                     	;# 
   168  0107                     	;# 
   169  0108                     	;# 
   170  0109                     	;# 
   171  010C                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  0185                     	;# 
   177  0187                     	;# 
   178  0188                     	;# 
   179  0189                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182  0000                     	;# 
   183  0001                     	;# 
   184  0002                     	;# 
   185  0003                     	;# 
   186  0004                     	;# 
   187  0005                     	;# 
   188  0006                     	;# 
   189  0007                     	;# 
   190  0008                     	;# 
   191  0009                     	;# 
   192  000A                     	;# 
   193  000B                     	;# 
   194  000C                     	;# 
   195  000D                     	;# 
   196  000E                     	;# 
   197  000E                     	;# 
   198  000F                     	;# 
   199  0010                     	;# 
   200  0011                     	;# 
   201  0012                     	;# 
   202  0013                     	;# 
   203  0014                     	;# 
   204  0015                     	;# 
   205  0015                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001B                     	;# 
   212  001B                     	;# 
   213  001C                     	;# 
   214  001D                     	;# 
   215  001E                     	;# 
   216  001F                     	;# 
   217  0081                     	;# 
   218  0085                     	;# 
   219  0086                     	;# 
   220  0087                     	;# 
   221  0088                     	;# 
   222  0089                     	;# 
   223  008C                     	;# 
   224  008D                     	;# 
   225  008E                     	;# 
   226  008F                     	;# 
   227  0090                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0093                     	;# 
   231  0093                     	;# 
   232  0093                     	;# 
   233  0094                     	;# 
   234  0095                     	;# 
   235  0096                     	;# 
   236  0097                     	;# 
   237  0098                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  0105                     	;# 
   246  0107                     	;# 
   247  0108                     	;# 
   248  0109                     	;# 
   249  010C                     	;# 
   250  010C                     	;# 
   251  010D                     	;# 
   252  010E                     	;# 
   253  010F                     	;# 
   254  0185                     	;# 
   255  0187                     	;# 
   256  0188                     	;# 
   257  0189                     	;# 
   258  018C                     	;# 
   259  018D                     	;# 
   260  0000                     	;# 
   261  0001                     	;# 
   262  0002                     	;# 
   263  0003                     	;# 
   264  0004                     	;# 
   265  0005                     	;# 
   266  0006                     	;# 
   267  0007                     	;# 
   268  0008                     	;# 
   269  0009                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000D                     	;# 
   274  000E                     	;# 
   275  000E                     	;# 
   276  000F                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0013                     	;# 
   281  0014                     	;# 
   282  0015                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001D                     	;# 
   293  001E                     	;# 
   294  001F                     	;# 
   295  0081                     	;# 
   296  0085                     	;# 
   297  0086                     	;# 
   298  0087                     	;# 
   299  0088                     	;# 
   300  0089                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  008F                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0093                     	;# 
   309  0093                     	;# 
   310  0093                     	;# 
   311  0094                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  009F                     	;# 
   323  0105                     	;# 
   324  0107                     	;# 
   325  0108                     	;# 
   326  0109                     	;# 
   327  010C                     	;# 
   328  010C                     	;# 
   329  010D                     	;# 
   330  010E                     	;# 
   331  010F                     	;# 
   332  0185                     	;# 
   333  0187                     	;# 
   334  0188                     	;# 
   335  0189                     	;# 
   336  018C                     	;# 
   337  018D                     	;# 
   338  0000                     	;# 
   339  0001                     	;# 
   340  0002                     	;# 
   341  0003                     	;# 
   342  0004                     	;# 
   343  0005                     	;# 
   344  0006                     	;# 
   345  0007                     	;# 
   346  0008                     	;# 
   347  0009                     	;# 
   348  000A                     	;# 
   349  000B                     	;# 
   350  000C                     	;# 
   351  000D                     	;# 
   352  000E                     	;# 
   353  000E                     	;# 
   354  000F                     	;# 
   355  0010                     	;# 
   356  0011                     	;# 
   357  0012                     	;# 
   358  0013                     	;# 
   359  0014                     	;# 
   360  0015                     	;# 
   361  0015                     	;# 
   362  0016                     	;# 
   363  0017                     	;# 
   364  0018                     	;# 
   365  0019                     	;# 
   366  001A                     	;# 
   367  001B                     	;# 
   368  001B                     	;# 
   369  001C                     	;# 
   370  001D                     	;# 
   371  001E                     	;# 
   372  001F                     	;# 
   373  0081                     	;# 
   374  0085                     	;# 
   375  0086                     	;# 
   376  0087                     	;# 
   377  0088                     	;# 
   378  0089                     	;# 
   379  008C                     	;# 
   380  008D                     	;# 
   381  008E                     	;# 
   382  008F                     	;# 
   383  0090                     	;# 
   384  0091                     	;# 
   385  0092                     	;# 
   386  0093                     	;# 
   387  0093                     	;# 
   388  0093                     	;# 
   389  0094                     	;# 
   390  0095                     	;# 
   391  0096                     	;# 
   392  0097                     	;# 
   393  0098                     	;# 
   394  0099                     	;# 
   395  009A                     	;# 
   396  009B                     	;# 
   397  009C                     	;# 
   398  009D                     	;# 
   399  009E                     	;# 
   400  009F                     	;# 
   401  0105                     	;# 
   402  0107                     	;# 
   403  0108                     	;# 
   404  0109                     	;# 
   405  010C                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  010F                     	;# 
   410  0185                     	;# 
   411  0187                     	;# 
   412  0188                     	;# 
   413  0189                     	;# 
   414  018C                     	;# 
   415  018D                     	;# 
   416  0000                     	;# 
   417  0001                     	;# 
   418  0002                     	;# 
   419  0003                     	;# 
   420  0004                     	;# 
   421  0005                     	;# 
   422  0006                     	;# 
   423  0007                     	;# 
   424  0008                     	;# 
   425  0009                     	;# 
   426  000A                     	;# 
   427  000B                     	;# 
   428  000C                     	;# 
   429  000D                     	;# 
   430  000E                     	;# 
   431  000E                     	;# 
   432  000F                     	;# 
   433  0010                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0013                     	;# 
   437  0014                     	;# 
   438  0015                     	;# 
   439  0015                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001B                     	;# 
   447  001C                     	;# 
   448  001D                     	;# 
   449  001E                     	;# 
   450  001F                     	;# 
   451  0081                     	;# 
   452  0085                     	;# 
   453  0086                     	;# 
   454  0087                     	;# 
   455  0088                     	;# 
   456  0089                     	;# 
   457  008C                     	;# 
   458  008D                     	;# 
   459  008E                     	;# 
   460  008F                     	;# 
   461  0090                     	;# 
   462  0091                     	;# 
   463  0092                     	;# 
   464  0093                     	;# 
   465  0093                     	;# 
   466  0093                     	;# 
   467  0094                     	;# 
   468  0095                     	;# 
   469  0096                     	;# 
   470  0097                     	;# 
   471  0098                     	;# 
   472  0099                     	;# 
   473  009A                     	;# 
   474  009B                     	;# 
   475  009C                     	;# 
   476  009D                     	;# 
   477  009E                     	;# 
   478  009F                     	;# 
   479  0105                     	;# 
   480  0107                     	;# 
   481  0108                     	;# 
   482  0109                     	;# 
   483  010C                     	;# 
   484  010C                     	;# 
   485  010D                     	;# 
   486  010E                     	;# 
   487  010F                     	;# 
   488  0185                     	;# 
   489  0187                     	;# 
   490  0188                     	;# 
   491  0189                     	;# 
   492  018C                     	;# 
   493  018D                     	;# 
   494                           
   495                           	psect	idataBANK0
   496  0DFD                     __pidataBANK0:	
   497                           
   498                           ;initializer for _randx
   499  0DFD  3401               	retlw	1
   500  0DFE  3400               	retlw	0
   501  0DFF  3400               	retlw	0
   502  0E00  3400               	retlw	0
   503                           
   504                           	psect	idataBANK1
   505  07FD                     __pidataBANK1:	
   506                           
   507                           ;initializer for _timerPrescaler
   508  07FD  3410               	retlw	16
   509                           
   510                           	psect	stringtext
   511  0100                     __pstringtext:	
   512  0100                     stringtab:	
   513  0100                     __stringtab:	
   514                           
   515                           ;	String table - string pointers are 2 bytes each
   516  0100  1BFF               	btfsc	btemp+1,7
   517  0101  290A               	ljmp	stringcode
   518  0102  1383               	bcf	3,7
   519  0103  187F               	btfsc	btemp+1,0
   520  0104  1783               	bsf	3,7
   521  0105  0800               	movf	0,w
   522  0106  0A84               	incf	4,f
   523  0107  1903               	skipnz
   524  0108  0AFF               	incf	btemp+1,f
   525  0109  0008               	return
   526  010A                     stringcode:	
   527  010A  087F               	movf	btemp+1,w
   528  010B  397F               	andlw	127
   529  010C  008A               	movwf	10
   530  010D  0804               	movf	4,w
   531  010E  0A84               	incf	4,f
   532  010F  1903               	skipnz
   533  0110  0AFF               	incf	btemp+1,f
   534  0111  0082               	movwf	2
   535  0112                     __stringbase:	
   536  0112                     __end_of__stringtab:	
   537  0112                     _Tetris_playerStartingPosition:	
   538  0112  3408               	retlw	8
   539  0113  3402               	retlw	2
   540  0114                     __end_of_Tetris_playerStartingPosition:	
   541  0114                     _Tetris_unitPivot:	
   542  0114  3403               	retlw	3
   543  0115  3402               	retlw	2
   544  0116                     __end_of_Tetris_unitPivot:	
   545  0116                     _Tetris_units:	
   546  0116  3449               	retlw	73
   547  0117  3402               	retlw	2
   548  0118  3410               	retlw	16
   549  0119  3400               	retlw	0
   550  011A  3410               	retlw	16
   551  011B  3400               	retlw	0
   552  011C  3410               	retlw	16
   553  011D  3400               	retlw	0
   554  011E  3410               	retlw	16
   555  011F  3400               	retlw	0
   556  0120  3400               	retlw	0
   557  0121  3400               	retlw	0
   558  0122  3400               	retlw	0
   559  0123  3400               	retlw	0
   560  0124  343C               	retlw	60
   561  0125  3400               	retlw	0
   562  0126  3400               	retlw	0
   563  0127  3400               	retlw	0
   564  0128  3400               	retlw	0
   565  0129  3400               	retlw	0
   566  012A  3400               	retlw	0
   567  012B  3400               	retlw	0
   568  012C  3400               	retlw	0
   569  012D  3400               	retlw	0
   570  012E  3400               	retlw	0
   571  012F  3400               	retlw	0
   572  0130  3400               	retlw	0
   573  0131  3400               	retlw	0
   574  0132  3400               	retlw	0
   575  0133  3400               	retlw	0
   576  0134  3400               	retlw	0
   577  0135  3400               	retlw	0
   578  0136  3400               	retlw	0
   579  0137  3400               	retlw	0
   580  0138  344F               	retlw	79
   581  0139  3401               	retlw	1
   582  013A  3400               	retlw	0
   583  013B  3400               	retlw	0
   584  013C  3418               	retlw	24
   585  013D  3400               	retlw	0
   586  013E  3418               	retlw	24
   587  013F  3400               	retlw	0
   588  0140  3400               	retlw	0
   589  0141  3400               	retlw	0
   590  0142  3400               	retlw	0
   591  0143  3400               	retlw	0
   592  0144  3400               	retlw	0
   593  0145  3400               	retlw	0
   594  0146  3400               	retlw	0
   595  0147  3400               	retlw	0
   596  0148  3400               	retlw	0
   597  0149  3400               	retlw	0
   598  014A  3400               	retlw	0
   599  014B  3400               	retlw	0
   600  014C  3400               	retlw	0
   601  014D  3400               	retlw	0
   602  014E  3400               	retlw	0
   603  014F  3400               	retlw	0
   604  0150  3400               	retlw	0
   605  0151  3400               	retlw	0
   606  0152  3400               	retlw	0
   607  0153  3400               	retlw	0
   608  0154  3400               	retlw	0
   609  0155  3400               	retlw	0
   610  0156  3400               	retlw	0
   611  0157  3400               	retlw	0
   612  0158  3400               	retlw	0
   613  0159  3400               	retlw	0
   614  015A  3454               	retlw	84
   615  015B  3404               	retlw	4
   616  015C  3400               	retlw	0
   617  015D  3400               	retlw	0
   618  015E  3410               	retlw	16
   619  015F  3400               	retlw	0
   620  0160  3438               	retlw	56
   621  0161  3400               	retlw	0
   622  0162  3400               	retlw	0
   623  0163  3400               	retlw	0
   624  0164  3400               	retlw	0
   625  0165  3400               	retlw	0
   626  0166  3410               	retlw	16
   627  0167  3400               	retlw	0
   628  0168  3418               	retlw	24
   629  0169  3400               	retlw	0
   630  016A  3410               	retlw	16
   631  016B  3400               	retlw	0
   632  016C  3400               	retlw	0
   633  016D  3400               	retlw	0
   634  016E  3400               	retlw	0
   635  016F  3400               	retlw	0
   636  0170  3438               	retlw	56
   637  0171  3400               	retlw	0
   638  0172  3410               	retlw	16
   639  0173  3400               	retlw	0
   640  0174  3400               	retlw	0
   641  0175  3400               	retlw	0
   642  0176  3410               	retlw	16
   643  0177  3400               	retlw	0
   644  0178  3430               	retlw	48
   645  0179  3400               	retlw	0
   646  017A  3410               	retlw	16
   647  017B  3400               	retlw	0
   648  017C  344C               	retlw	76
   649  017D  3404               	retlw	4
   650  017E  3400               	retlw	0
   651  017F  3400               	retlw	0
   652  0180  3410               	retlw	16
   653  0181  3400               	retlw	0
   654  0182  3410               	retlw	16
   655  0183  3400               	retlw	0
   656  0184  3418               	retlw	24
   657  0185  3400               	retlw	0
   658  0186  3400               	retlw	0
   659  0187  3400               	retlw	0
   660  0188  3408               	retlw	8
   661  0189  3400               	retlw	0
   662  018A  3438               	retlw	56
   663  018B  3400               	retlw	0
   664  018C  3400               	retlw	0
   665  018D  3400               	retlw	0
   666  018E  3400               	retlw	0
   667  018F  3400               	retlw	0
   668  0190  3430               	retlw	48
   669  0191  3400               	retlw	0
   670  0192  3410               	retlw	16
   671  0193  3400               	retlw	0
   672  0194  3410               	retlw	16
   673  0195  3400               	retlw	0
   674  0196  3400               	retlw	0
   675  0197  3400               	retlw	0
   676  0198  3400               	retlw	0
   677  0199  3400               	retlw	0
   678  019A  3438               	retlw	56
   679  019B  3400               	retlw	0
   680  019C  3420               	retlw	32
   681  019D  3400               	retlw	0
   682  019E  344A               	retlw	74
   683  019F  3404               	retlw	4
   684  01A0  3400               	retlw	0
   685  01A1  3400               	retlw	0
   686  01A2  3410               	retlw	16
   687  01A3  3400               	retlw	0
   688  01A4  3410               	retlw	16
   689  01A5  3400               	retlw	0
   690  01A6  3430               	retlw	48
   691  01A7  3400               	retlw	0
   692  01A8  3400               	retlw	0
   693  01A9  3400               	retlw	0
   694  01AA  3420               	retlw	32
   695  01AB  3400               	retlw	0
   696  01AC  3438               	retlw	56
   697  01AD  3400               	retlw	0
   698  01AE  3400               	retlw	0
   699  01AF  3400               	retlw	0
   700  01B0  3400               	retlw	0
   701  01B1  3400               	retlw	0
   702  01B2  3418               	retlw	24
   703  01B3  3400               	retlw	0
   704  01B4  3410               	retlw	16
   705  01B5  3400               	retlw	0
   706  01B6  3410               	retlw	16
   707  01B7  3400               	retlw	0
   708  01B8  3400               	retlw	0
   709  01B9  3400               	retlw	0
   710  01BA  3420               	retlw	32
   711  01BB  3400               	retlw	0
   712  01BC  3438               	retlw	56
   713  01BD  3400               	retlw	0
   714  01BE  3400               	retlw	0
   715  01BF  3400               	retlw	0
   716  01C0  3453               	retlw	83
   717  01C1  3402               	retlw	2
   718  01C2  3400               	retlw	0
   719  01C3  3400               	retlw	0
   720  01C4  3418               	retlw	24
   721  01C5  3400               	retlw	0
   722  01C6  3430               	retlw	48
   723  01C7  3400               	retlw	0
   724  01C8  3400               	retlw	0
   725  01C9  3400               	retlw	0
   726  01CA  3400               	retlw	0
   727  01CB  3400               	retlw	0
   728  01CC  3410               	retlw	16
   729  01CD  3400               	retlw	0
   730  01CE  3418               	retlw	24
   731  01CF  3400               	retlw	0
   732  01D0  3408               	retlw	8
   733  01D1  3400               	retlw	0
   734  01D2  3400               	retlw	0
   735  01D3  3400               	retlw	0
   736  01D4  3400               	retlw	0
   737  01D5  3400               	retlw	0
   738  01D6  3400               	retlw	0
   739  01D7  3400               	retlw	0
   740  01D8  3400               	retlw	0
   741  01D9  3400               	retlw	0
   742  01DA  3400               	retlw	0
   743  01DB  3400               	retlw	0
   744  01DC  3400               	retlw	0
   745  01DD  3400               	retlw	0
   746  01DE  3400               	retlw	0
   747  01DF  3400               	retlw	0
   748  01E0  3400               	retlw	0
   749  01E1  3400               	retlw	0
   750  01E2  345A               	retlw	90
   751  01E3  3402               	retlw	2
   752  01E4  3400               	retlw	0
   753  01E5  3400               	retlw	0
   754  01E6  3430               	retlw	48
   755  01E7  3400               	retlw	0
   756  01E8  3418               	retlw	24
   757  01E9  3400               	retlw	0
   758  01EA  3400               	retlw	0
   759  01EB  3400               	retlw	0
   760  01EC  3400               	retlw	0
   761  01ED  3400               	retlw	0
   762  01EE  3408               	retlw	8
   763  01EF  3400               	retlw	0
   764  01F0  3418               	retlw	24
   765  01F1  3400               	retlw	0
   766  01F2  3410               	retlw	16
   767  01F3  3400               	retlw	0
   768  01F4  3400               	retlw	0
   769  01F5  3400               	retlw	0
   770  01F6  3400               	retlw	0
   771  01F7  3400               	retlw	0
   772  01F8  3400               	retlw	0
   773  01F9  3400               	retlw	0
   774  01FA  3400               	retlw	0
   775  01FB  3400               	retlw	0
   776  01FC  3400               	retlw	0
   777  01FD  3400               	retlw	0
   778  01FE  3400               	retlw	0
   779  01FF  3400               	retlw	0
   780  0200  3400               	retlw	0
   781  0201  3400               	retlw	0
   782  0202  3400               	retlw	0
   783  0203  3400               	retlw	0
   784  0204                     __end_of_Tetris_units:	
   785  000E                     _TMR1	set	14
   786  0007                     _PORTC	set	7
   787  0008                     _PORTD	set	8
   788  0006                     _PORTB	set	6
   789  0005                     _PORTA	set	5
   790  0039                     _RC1	set	57
   791  0038                     _RC0	set	56
   792  0041                     _RD1	set	65
   793  0040                     _RD0	set	64
   794  003A                     _RC2	set	58
   795  003B                     _RC3	set	59
   796  0031                     _RB1	set	49
   797  0034                     _RB4	set	52
   798  0033                     _RB3	set	51
   799  0032                     _RB2	set	50
   800  005F                     _GIE	set	95
   801  0060                     _TMR1IF	set	96
   802  0059                     _INTF	set	89
   803  005C                     _INTE	set	92
   804  0085                     _T1CKPS1	set	133
   805  0084                     _T1CKPS0	set	132
   806  0080                     _TMR1ON	set	128
   807  005E                     _PEIE	set	94
   808  0081                     _TMR1CS	set	129
   809  0087                     _TRISC	set	135
   810  0088                     _TRISD	set	136
   811  0085                     _TRISA	set	133
   812  0095                     _WPUB	set	149
   813  0086                     _TRISB	set	134
   814  040E                     _INTEDG	set	1038
   815  040F                     _nRBPU	set	1039
   816  0460                     _TMR1IE	set	1120
   817  047E                     _IRCF2	set	1150
   818  047D                     _IRCF1	set	1149
   819  047C                     _IRCF0	set	1148
   820  0188                     _ANSEL	set	392
   821  0189                     _ANSELH	set	393
   822                           
   823                           ; #config settings
   824  0000                     
   825                           	psect	cinit
   826  000D                     start_initialization:	
   827  000D                     __initialization:	
   828                           
   829                           ; Initialize objects allocated to BANK1
   830  000D  1683               	bsf	3,5	;RP0=1, select bank1
   831  000E  1303               	bcf	3,6	;RP1=0, select bank1
   832  000F  118A  27FD  118A   	fcall	__pidataBANK1	;fetch initializer
   833  0012  00E4               	movwf	__pdataBANK1& (0+127)
   834                           
   835                           ; Initialize objects allocated to BANK0
   836  0013  1283               	bcf	3,5	;RP0=0, select bank0
   837  0014  1303               	bcf	3,6	;RP1=0, select bank0
   838  0015  158A  25FD  118A   	fcall	__pidataBANK0	;fetch initializer
   839  0018  00C7               	movwf	__pdataBANK0& (0+127)
   840  0019  158A  25FE  118A   	fcall	__pidataBANK0+1	;fetch initializer
   841  001C  00C8               	movwf	(__pdataBANK0+1)& (0+127)
   842  001D  158A  25FF  118A   	fcall	__pidataBANK0+2	;fetch initializer
   843  0020  00C9               	movwf	(__pdataBANK0+2)& (0+127)
   844  0021  158A  2600         	fcall	__pidataBANK0+3	;fetch initializer
   845  0023  00CA               	movwf	(__pdataBANK0+3)& (0+127)
   846                           
   847                           ; Clear objects allocated to BANK1
   848  0024  1683               	bsf	3,5	;RP0=1, select bank1
   849  0025  1303               	bcf	3,6	;RP1=0, select bank1
   850  0026  01E3               	clrf	__pbssBANK1& (0+127)
   851                           
   852                           ; Clear objects allocated to COMMON
   853  0027  01FA               	clrf	__pbssCOMMON& (0+127)
   854  0028                     end_of_initialization:	
   855                           ;End of C runtime variable initialization code
   856                           
   857  0028                     __end_of__initialization:	
   858  0028  0183               	clrf	3
   859  0029  118A  2BBD         	ljmp	_main	;jump to C main() function
   860                           
   861                           	psect	bssCOMMON
   862  007A                     __pbssCOMMON:	
   863  007A                     InterruptHandler@timerInterruptCounter:	
   864  007A                     	ds	1
   865                           
   866                           	psect	dataBANK0
   867  0047                     __pdataBANK0:	
   868  0047                     _randx:	
   869  0047                     	ds	4
   870                           
   871                           	psect	bssBANK1
   872  00E3                     __pbssBANK1:	
   873  00E3                     _updateReady:	
   874  00E3                     	ds	1
   875                           
   876                           	psect	dataBANK1
   877  00E4                     __pdataBANK1:	
   878  00E4                     _timerPrescaler:	
   879  00E4                     	ds	1
   880                           
   881                           	psect	cstackBANK1
   882  00A0                     __pcstackBANK1:	
   883  00A0                     main@buttons:	
   884                           
   885                           ; 4 bytes @ 0x0
   886  00A0                     	ds	4
   887  00A4                     main@tetrisGame:	
   888                           
   889                           ; 63 bytes @ 0x4
   890  00A4                     	ds	63
   891                           
   892                           	psect	cstackCOMMON
   893  0070                     __pcstackCOMMON:	
   894  0070                     ?_Buttons_SetupPortsAndInterrups:	
   895  0070                     ?_LCD_SetupPorts:	
   896                           ; 1 bytes @ 0x0
   897                           
   898  0070                     ?_LCD_Reset:	
   899                           ; 1 bytes @ 0x0
   900                           
   901  0070                     ?_LCD_SegmentSelection:	
   902                           ; 1 bytes @ 0x0
   903                           
   904  0070                     ?_LCD_Clear:	
   905                           ; 1 bytes @ 0x0
   906                           
   907  0070                     ?_LCD_TurnOn:	
   908                           ; 1 bytes @ 0x0
   909                           
   910  0070                     ?_Buttons_Clear:	
   911                           ; 1 bytes @ 0x0
   912                           
   913  0070                     ?_Buttons_Update:	
   914                           ; 1 bytes @ 0x0
   915                           
   916  0070                     ?_Tetris_MovePlayerLeft:	
   917                           ; 1 bytes @ 0x0
   918                           
   919  0070                     ?_Tetris_MovePlayerRight:	
   920                           ; 1 bytes @ 0x0
   921                           
   922  0070                     ?_Tetris_RotatePlayer:	
   923                           ; 1 bytes @ 0x0
   924                           
   925  0070                     ?_Tetris_UpdateGame:	
   926                           ; 1 bytes @ 0x0
   927                           
   928  0070                     ?_RedrawTetrisOnLCD:	
   929                           ; 1 bytes @ 0x0
   930                           
   931  0070                     ?_Tetris_MovePlayerDown:	
   932                           ; 1 bytes @ 0x0
   933                           
   934  0070                     ?_Tetris_ClearFilledRows:	
   935                           ; 1 bytes @ 0x0
   936                           
   937  0070                     ?_LCD_ReadStatus:	
   938                           ; 1 bytes @ 0x0
   939                           
   940  0070                     ?_LCD_SetX:	
   941                           ; 1 bytes @ 0x0
   942                           
   943  0070                     ?_LCD_SetY:	
   944                           ; 1 bytes @ 0x0
   945                           
   946  0070                     ?_LCD_SetZ:	
   947                           ; 1 bytes @ 0x0
   948                           
   949  0070                     ?_SetupOscillator:	
   950                           ; 1 bytes @ 0x0
   951                           
   952  0070                     ?_SetupTimer:	
   953                           ; 1 bytes @ 0x0
   954                           
   955  0070                     ?_ResetTimer:	
   956                           ; 1 bytes @ 0x0
   957                           
   958  0070                     ?_InterruptHandler:	
   959                           ; 1 bytes @ 0x0
   960                           
   961  0070                     ??_InterruptHandler:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_main:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_Tetris_PlayerTopmostY:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_Tetris_PlayerOverlapsEnvironment:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_Tetris_PlayerTouchingLeftBound:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_Tetris_PlayerTouchingRightBound:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ?_Tetris_RemovePlayerFromTable:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_Tetris_ApplyPlayerToTable:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ?_Tetris_UpdatePlayerUnitBits:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_Tetris_PlayerUnitBitsAreValid:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ?_Tetris_ScoreForRowsCleared:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_Buttons_SetupPortB:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ?_Buttons_SetupInterrupts:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ?_LCD_IsBusy:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_LCD_BlockWhileBusy:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ?_LCD_WriteData:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009                           
  1010                           ; 1 bytes @ 0x0
  1011  0070                     	ds	3
  1012  0073                     ??_Buttons_SetupPortsAndInterrups:	
  1013  0073                     ??_LCD_SetupPorts:	
  1014                           ; 1 bytes @ 0x3
  1015                           
  1016  0073                     ??_LCD_SegmentSelection:	
  1017                           ; 1 bytes @ 0x3
  1018                           
  1019  0073                     ?_memset:	
  1020                           ; 1 bytes @ 0x3
  1021                           
  1022  0073                     ??_LCD_ReadStatus:	
  1023                           ; 1 bytes @ 0x3
  1024                           
  1025  0073                     ??_SetupOscillator:	
  1026                           ; 1 bytes @ 0x3
  1027                           
  1028  0073                     ??_SetupTimer:	
  1029                           ; 1 bytes @ 0x3
  1030                           
  1031  0073                     ??_ResetTimer:	
  1032                           ; 1 bytes @ 0x3
  1033                           
  1034  0073                     ??_Tetris_PlayerTopmostY:	
  1035                           ; 1 bytes @ 0x3
  1036                           
  1037  0073                     ??_Tetris_PlayerTouchingLeftBound:	
  1038                           ; 1 bytes @ 0x3
  1039                           
  1040  0073                     ??_Tetris_PlayerTouchingRightBound:	
  1041                           ; 1 bytes @ 0x3
  1042                           
  1043  0073                     ?_Tetris_CountUnitBits:	
  1044                           ; 1 bytes @ 0x3
  1045                           
  1046  0073                     ?_Tetris_ShiftTableDown:	
  1047                           ; 1 bytes @ 0x3
  1048                           
  1049  0073                     ??_Tetris_ScoreForRowsCleared:	
  1050                           ; 1 bytes @ 0x3
  1051                           
  1052  0073                     ??_Buttons_SetupPortB:	
  1053                           ; 1 bytes @ 0x3
  1054                           
  1055  0073                     ??_Buttons_SetupInterrupts:	
  1056                           ; 1 bytes @ 0x3
  1057                           
  1058  0073                     ?_Buttons_UpdateButton:	
  1059                           ; 1 bytes @ 0x3
  1060                           
  1061  0073                     ??___lmul:	
  1062                           ; 1 bytes @ 0x3
  1063                           
  1064  0073                     ?___lbmod:	
  1065                           ; 1 bytes @ 0x3
  1066                           
  1067  0073                     Tetris_UpdatePlayerUnitBits@i_323:	
  1068                           ; 1 bytes @ 0x3
  1069                           
  1070  0073                     Tetris_ShiftTableDown@upto:	
  1071                           ; 1 bytes @ 0x3
  1072                           
  1073  0073                     Buttons_UpdateButton@nHeld:	
  1074                           ; 1 bytes @ 0x3
  1075                           
  1076  0073                     LCD_SegmentSelection@segments:	
  1077                           ; 1 bytes @ 0x3
  1078                           
  1079  0073                     ___lbmod@divisor:	
  1080                           ; 1 bytes @ 0x3
  1081                           
  1082  0073                     Tetris_CountUnitBits@unitBits:	
  1083                           ; 1 bytes @ 0x3
  1084                           
  1085  0073                     memset@c:	
  1086                           ; 2 bytes @ 0x3
  1087                           
  1088                           
  1089                           ; 2 bytes @ 0x3
  1090  0073                     	ds	1
  1091  0074                     ??_Tetris_ShiftTableDown:	
  1092  0074                     ??_Buttons_UpdateButton:	
  1093                           ; 1 bytes @ 0x4
  1094                           
  1095  0074                     ??___lbmod:	
  1096                           ; 1 bytes @ 0x4
  1097                           
  1098  0074                     Tetris_UpdatePlayerUnitBits@i_324:	
  1099                           ; 1 bytes @ 0x4
  1100                           
  1101  0074                     LCD_ReadStatus@status:	
  1102                           ; 1 bytes @ 0x4
  1103                           
  1104  0074                     ___lmul@product:	
  1105                           ; 1 bytes @ 0x4
  1106                           
  1107                           
  1108                           ; 4 bytes @ 0x4
  1109  0074                     	ds	1
  1110  0075                     ??_Tetris_CountUnitBits:	
  1111  0075                     ??_LCD_IsBusy:	
  1112                           ; 1 bytes @ 0x5
  1113                           
  1114  0075                     Tetris_PlayerTopmostY@player:	
  1115                           ; 1 bytes @ 0x5
  1116                           
  1117  0075                     Tetris_UpdatePlayerUnitBits@i:	
  1118                           ; 1 bytes @ 0x5
  1119                           
  1120  0075                     Tetris_ScoreForRowsCleared@rowsCleared:	
  1121                           ; 1 bytes @ 0x5
  1122                           
  1123  0075                     Buttons_UpdateButton@button:	
  1124                           ; 1 bytes @ 0x5
  1125                           
  1126  0075                     memset@n:	
  1127                           ; 1 bytes @ 0x5
  1128                           
  1129                           
  1130                           ; 2 bytes @ 0x5
  1131  0075                     	ds	1
  1132  0076                     ??_Buttons_Update:	
  1133  0076                     Tetris_PlayerOverlapsEnvironment@start:	
  1134                           ; 1 bytes @ 0x6
  1135                           
  1136  0076                     Tetris_RemovePlayerFromTable@start:	
  1137                           ; 1 bytes @ 0x6
  1138                           
  1139  0076                     Tetris_ApplyPlayerToTable@start:	
  1140                           ; 1 bytes @ 0x6
  1141                           
  1142  0076                     Tetris_UpdatePlayerUnitBits@shift:	
  1143                           ; 1 bytes @ 0x6
  1144                           
  1145  0076                     Buttons_Update@buttons:	
  1146                           ; 1 bytes @ 0x6
  1147                           
  1148  0076                     _LCD_IsBusy$575:	
  1149                           ; 1 bytes @ 0x6
  1150                           
  1151                           
  1152                           ; 1 bytes @ 0x6
  1153  0076                     	ds	1
  1154  0077                     ??_memset:	
  1155  0077                     Tetris_PlayerOverlapsEnvironment@i:	
  1156                           ; 1 bytes @ 0x7
  1157                           
  1158  0077                     Tetris_PlayerTouchingLeftBound@player:	
  1159                           ; 1 bytes @ 0x7
  1160                           
  1161  0077                     Tetris_PlayerTouchingRightBound@player:	
  1162                           ; 1 bytes @ 0x7
  1163                           
  1164  0077                     Tetris_RemovePlayerFromTable@game:	
  1165                           ; 1 bytes @ 0x7
  1166                           
  1167  0077                     Tetris_ApplyPlayerToTable@i:	
  1168                           ; 1 bytes @ 0x7
  1169                           
  1170  0077                     Tetris_UpdatePlayerUnitBits@player:	
  1171                           ; 1 bytes @ 0x7
  1172                           
  1173  0077                     LCD_IsBusy@status:	
  1174                           ; 1 bytes @ 0x7
  1175                           
  1176  0077                     ___lbmod@dividend:	
  1177                           ; 1 bytes @ 0x7
  1178                           
  1179                           
  1180                           ; 1 bytes @ 0x7
  1181  0077                     	ds	1
  1182  0078                     ?_Tetris_SetPlayerUnit:	
  1183  0078                     ??_LCD_BlockWhileBusy:	
  1184                           ; 1 bytes @ 0x8
  1185                           
  1186  0078                     ?_LCD_Write:	
  1187                           ; 1 bytes @ 0x8
  1188                           
  1189  0078                     ??___awmod:	
  1190                           ; 1 bytes @ 0x8
  1191                           
  1192  0078                     Tetris_PlayerOverlapsEnvironment@game:	
  1193                           ; 1 bytes @ 0x8
  1194                           
  1195  0078                     Tetris_PlayerTouchingLeftBound@i:	
  1196                           ; 1 bytes @ 0x8
  1197                           
  1198  0078                     Tetris_PlayerTouchingRightBound@i:	
  1199                           ; 1 bytes @ 0x8
  1200                           
  1201  0078                     Tetris_RemovePlayerFromTable@i:	
  1202                           ; 1 bytes @ 0x8
  1203                           
  1204  0078                     Tetris_ApplyPlayerToTable@i_303:	
  1205                           ; 1 bytes @ 0x8
  1206                           
  1207  0078                     LCD_Write@data:	
  1208                           ; 1 bytes @ 0x8
  1209                           
  1210  0078                     ___lbmod@counter:	
  1211                           ; 1 bytes @ 0x8
  1212                           
  1213  0078                     memset@p:	
  1214                           ; 1 bytes @ 0x8
  1215                           
  1216  0078                     Tetris_SetPlayerUnit@unit:	
  1217                           ; 1 bytes @ 0x8
  1218                           
  1219                           
  1220                           ; 2 bytes @ 0x8
  1221  0078                     	ds	1
  1222  0079                     ??_LCD_Write:	
  1223  0079                     ??___wmul:	
  1224                           ; 1 bytes @ 0x9
  1225                           
  1226  0079                     Tetris_ApplyPlayerToTable@game:	
  1227                           ; 1 bytes @ 0x9
  1228                           
  1229  0079                     LCD_Write@mode:	
  1230                           ; 1 bytes @ 0x9
  1231                           
  1232  0079                     ___lbmod@rem:	
  1233                           ; 1 bytes @ 0x9
  1234                           
  1235  0079                     memset@p1:	
  1236                           ; 1 bytes @ 0x9
  1237                           
  1238                           
  1239                           ; 1 bytes @ 0x9
  1240  0079                     	ds	1
  1241  007A                     ??_LCD_Reset:	
  1242  007A                     ??_Tetris_ResetGame:	
  1243                           ; 1 bytes @ 0xA
  1244                           
  1245  007A                     ??_Buttons_Clear:	
  1246                           ; 1 bytes @ 0xA
  1247                           
  1248  007A                     ??_Tetris_SetPlayerUnit:	
  1249                           ; 1 bytes @ 0xA
  1250                           
  1251                           
  1252                           	psect	cstackBANK0
  1253  0020                     __pcstackBANK0:	
  1254                           ; 1 bytes @ 0xA
  1255                           
  1256  0020                     ??_LCD_TurnOn:	
  1257  0020                     ??_LCD_SetX:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260  0020                     ??_LCD_SetY:	
  1261                           ; 1 bytes @ 0x0
  1262                           
  1263  0020                     ??_LCD_SetZ:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0020                     ??_Tetris_PlayerOverlapsEnvironment:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0020                     ??_Tetris_RemovePlayerFromTable:	
  1270                           ; 1 bytes @ 0x0
  1271                           
  1272  0020                     ??_Tetris_ApplyPlayerToTable:	
  1273                           ; 1 bytes @ 0x0
  1274                           
  1275  0020                     ??_Tetris_UpdatePlayerUnitBits:	
  1276                           ; 1 bytes @ 0x0
  1277                           
  1278  0020                     ??_LCD_WriteData:	
  1279                           ; 1 bytes @ 0x0
  1280                           
  1281  0020                     ?___lmul:	
  1282                           ; 1 bytes @ 0x0
  1283                           
  1284  0020                     Tetris_ShiftTableDown@gameTable:	
  1285                           ; 4 bytes @ 0x0
  1286                           
  1287  0020                     Buttons_Clear@buttons:	
  1288                           ; 1 bytes @ 0x0
  1289                           
  1290  0020                     Tetris_CountUnitBits@mask:	
  1291                           ; 1 bytes @ 0x0
  1292                           
  1293  0020                     ___lmul@multiplier:	
  1294                           ; 2 bytes @ 0x0
  1295                           
  1296                           
  1297                           ; 4 bytes @ 0x0
  1298  0020                     	ds	1
  1299  0021                     Tetris_ShiftTableDown@i:	
  1300  0021                     LCD_WriteData@data:	
  1301                           ; 1 bytes @ 0x1
  1302                           
  1303  0021                     LCD_SetY@y:	
  1304                           ; 1 bytes @ 0x1
  1305                           
  1306  0021                     LCD_SetX@x:	
  1307                           ; 1 bytes @ 0x1
  1308                           
  1309  0021                     LCD_SetZ@z:	
  1310                           ; 1 bytes @ 0x1
  1311                           
  1312                           
  1313                           ; 1 bytes @ 0x1
  1314  0021                     	ds	1
  1315  0022                     ??_LCD_Clear:	
  1316  0022                     ??_RedrawTetrisOnLCD:	
  1317                           ; 1 bytes @ 0x2
  1318                           
  1319  0022                     ??_Tetris_ClearFilledRows:	
  1320                           ; 1 bytes @ 0x2
  1321                           
  1322  0022                     Tetris_CountUnitBits@result:	
  1323                           ; 1 bytes @ 0x2
  1324                           
  1325                           
  1326                           ; 1 bytes @ 0x2
  1327  0022                     	ds	1
  1328  0023                     Tetris_CountUnitBits@j:	
  1329  0023                     LCD_Clear@y:	
  1330                           ; 1 bytes @ 0x3
  1331                           
  1332                           
  1333                           ; 1 bytes @ 0x3
  1334  0023                     	ds	1
  1335  0024                     Tetris_CountUnitBits@i:	
  1336  0024                     LCD_Clear@x:	
  1337                           ; 1 bytes @ 0x4
  1338                           
  1339  0024                     RedrawTetrisOnLCD@tetrisGame:	
  1340                           ; 1 bytes @ 0x4
  1341                           
  1342  0024                     ___lmul@multiplicand:	
  1343                           ; 1 bytes @ 0x4
  1344                           
  1345                           
  1346                           ; 4 bytes @ 0x4
  1347  0024                     	ds	1
  1348  0025                     ??_Tetris_PlayerUnitBitsAreValid:	
  1349  0025                     RedrawTetrisOnLCD@leftMask:	
  1350                           ; 1 bytes @ 0x5
  1351                           
  1352                           
  1353                           ; 2 bytes @ 0x5
  1354  0025                     	ds	1
  1355  0026                     Tetris_ClearFilledRows@rowsCleared:	
  1356                           
  1357                           ; 1 bytes @ 0x6
  1358  0026                     	ds	1
  1359  0027                     Tetris_ClearFilledRows@gameTable:	
  1360  0027                     RedrawTetrisOnLCD@rightMask:	
  1361                           ; 1 bytes @ 0x7
  1362                           
  1363                           
  1364                           ; 2 bytes @ 0x7
  1365  0027                     	ds	1
  1366  0028                     ?_rand:	
  1367  0028                     Tetris_ClearFilledRows@i:	
  1368                           ; 2 bytes @ 0x8
  1369                           
  1370                           
  1371                           ; 1 bytes @ 0x8
  1372  0028                     	ds	1
  1373  0029                     Tetris_PlayerUnitBitsAreValid@player:	
  1374  0029                     RedrawTetrisOnLCD@tableY:	
  1375                           ; 1 bytes @ 0x9
  1376                           
  1377                           
  1378                           ; 1 bytes @ 0x9
  1379  0029                     	ds	1
  1380  002A                     ??_rand:	
  1381  002A                     Tetris_SetPlayerUnit@player:	
  1382                           ; 1 bytes @ 0xA
  1383                           
  1384  002A                     RedrawTetrisOnLCD@gameRow:	
  1385                           ; 1 bytes @ 0xA
  1386                           
  1387                           
  1388                           ; 2 bytes @ 0xA
  1389  002A                     	ds	2
  1390  002C                     ??_Tetris_MovePlayerLeft:	
  1391  002C                     ??_Tetris_MovePlayerRight:	
  1392                           ; 1 bytes @ 0xC
  1393                           
  1394  002C                     ??_Tetris_RotatePlayer:	
  1395                           ; 1 bytes @ 0xC
  1396                           
  1397  002C                     ??_Tetris_MovePlayerDown:	
  1398                           ; 1 bytes @ 0xC
  1399                           
  1400  002C                     ?_Tetris_GetRandomUnit:	
  1401                           ; 1 bytes @ 0xC
  1402                           
  1403  002C                     RedrawTetrisOnLCD@i:	
  1404                           ; 2 bytes @ 0xC
  1405                           
  1406                           
  1407                           ; 1 bytes @ 0xC
  1408  002C                     	ds	1
  1409  002D                     Tetris_MovePlayerDown@game:	
  1410  002D                     RedrawTetrisOnLCD@y:	
  1411                           ; 1 bytes @ 0xD
  1412                           
  1413                           
  1414                           ; 1 bytes @ 0xD
  1415  002D                     	ds	1
  1416  002E                     Tetris_MovePlayerLeft@i:	
  1417  002E                     Tetris_MovePlayerRight@i:	
  1418                           ; 1 bytes @ 0xE
  1419                           
  1420  002E                     RedrawTetrisOnLCD@x:	
  1421                           ; 1 bytes @ 0xE
  1422                           
  1423                           
  1424                           ; 1 bytes @ 0xE
  1425  002E                     	ds	1
  1426  002F                     ?___awmod:	
  1427  002F                     Tetris_MovePlayerLeft@i_438:	
  1428                           ; 2 bytes @ 0xF
  1429                           
  1430  002F                     Tetris_MovePlayerRight@i_452:	
  1431                           ; 1 bytes @ 0xF
  1432                           
  1433  002F                     RedrawTetrisOnLCD@lcdRow:	
  1434                           ; 1 bytes @ 0xF
  1435                           
  1436  002F                     ___awmod@divisor:	
  1437                           ; 1 bytes @ 0xF
  1438                           
  1439                           
  1440                           ; 2 bytes @ 0xF
  1441  002F                     	ds	1
  1442  0030                     Tetris_MovePlayerLeft@game:	
  1443  0030                     Tetris_MovePlayerRight@game:	
  1444                           ; 1 bytes @ 0x10
  1445                           
  1446                           
  1447                           ; 1 bytes @ 0x10
  1448  0030                     	ds	1
  1449  0031                     ___awmod@dividend:	
  1450                           
  1451                           ; 2 bytes @ 0x11
  1452  0031                     	ds	1
  1453  0032                     Tetris_RotatePlayer@oldRotation:	
  1454                           
  1455                           ; 1 bytes @ 0x12
  1456  0032                     	ds	1
  1457  0033                     Tetris_RotatePlayer@game:	
  1458  0033                     ___awmod@counter:	
  1459                           ; 1 bytes @ 0x13
  1460                           
  1461                           
  1462                           ; 1 bytes @ 0x13
  1463  0033                     	ds	1
  1464  0034                     ___awmod@sign:	
  1465                           
  1466                           ; 1 bytes @ 0x14
  1467  0034                     	ds	1
  1468  0035                     ?___wmul:	
  1469  0035                     ___wmul@multiplier:	
  1470                           ; 2 bytes @ 0x15
  1471                           
  1472                           
  1473                           ; 2 bytes @ 0x15
  1474  0035                     	ds	2
  1475  0037                     ___wmul@multiplicand:	
  1476                           
  1477                           ; 2 bytes @ 0x17
  1478  0037                     	ds	2
  1479  0039                     ___wmul@product:	
  1480                           
  1481                           ; 2 bytes @ 0x19
  1482  0039                     	ds	2
  1483  003B                     ??_Tetris_GetRandomUnit:	
  1484                           
  1485                           ; 1 bytes @ 0x1B
  1486  003B                     	ds	2
  1487  003D                     ?_Tetris_ResetPlayer:	
  1488  003D                     Tetris_ResetPlayer@playerUnit:	
  1489                           ; 1 bytes @ 0x1D
  1490                           
  1491                           
  1492                           ; 2 bytes @ 0x1D
  1493  003D                     	ds	2
  1494  003F                     ??_Tetris_ResetPlayer:	
  1495                           
  1496                           ; 1 bytes @ 0x1F
  1497  003F                     	ds	2
  1498  0041                     Tetris_ResetPlayer@player:	
  1499                           
  1500                           ; 1 bytes @ 0x21
  1501  0041                     	ds	1
  1502  0042                     ?_Tetris_ResetGame:	
  1503  0042                     ??_Tetris_UpdateGame:	
  1504                           ; 1 bytes @ 0x22
  1505                           
  1506  0042                     Tetris_ResetGame@playerUnit:	
  1507                           ; 1 bytes @ 0x22
  1508                           
  1509                           
  1510                           ; 2 bytes @ 0x22
  1511  0042                     	ds	2
  1512  0044                     Tetris_ResetGame@game:	
  1513  0044                     Tetris_UpdateGame@rowsCleared:	
  1514                           ; 1 bytes @ 0x24
  1515                           
  1516                           
  1517                           ; 1 bytes @ 0x24
  1518  0044                     	ds	1
  1519  0045                     Tetris_UpdateGame@game:	
  1520                           
  1521                           ; 1 bytes @ 0x25
  1522  0045                     	ds	1
  1523  0046                     ??_main:	
  1524                           
  1525                           ; 1 bytes @ 0x26
  1526  0046                     	ds	1
  1527                           
  1528                           	psect	maintext
  1529  03BD                     __pmaintext:	
  1530 ;;
  1531 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1532 ;;
  1533 ;; *************** function _main *****************
  1534 ;; Defined at:
  1535 ;;		line 86 in file "main.c"
  1536 ;; Parameters:    Size  Location     Type
  1537 ;;		None
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  tetrisGame     63    4[BANK1 ] struct .
  1540 ;;  buttons         4    0[BANK1 ] struct .
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1545 ;; Tracked objects:
  1546 ;;		On entry : B00/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1550 ;;      Params:         0       0       0       0
  1551 ;;      Locals:         0       0      67       0
  1552 ;;      Temps:          0       1       0       0
  1553 ;;      Totals:         0       1      67       0
  1554 ;;Total ram usage:       68 bytes
  1555 ;; Hardware stack levels required when called:    7
  1556 ;; This function calls:
  1557 ;;		_Buttons_Clear
  1558 ;;		_Buttons_SetupPortsAndInterrups
  1559 ;;		_Buttons_Update
  1560 ;;		_LCD_Clear
  1561 ;;		_LCD_Reset
  1562 ;;		_LCD_SegmentSelection
  1563 ;;		_LCD_SetupPorts
  1564 ;;		_LCD_TurnOn
  1565 ;;		_RedrawTetrisOnLCD
  1566 ;;		_ResetTimer
  1567 ;;		_SetupOscillator
  1568 ;;		_SetupTimer
  1569 ;;		_Tetris_GetRandomUnit
  1570 ;;		_Tetris_MovePlayerLeft
  1571 ;;		_Tetris_MovePlayerRight
  1572 ;;		_Tetris_ResetGame
  1573 ;;		_Tetris_RotatePlayer
  1574 ;;		_Tetris_UpdateGame
  1575 ;; This function is called by:
  1576 ;;		Startup code after reset
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           
  1581                           ;psect for function _main
  1582  03BD                     _main:	
  1583                           
  1584                           ;main.c: 90:     SetupOscillator();
  1585                           
  1586                           ;incstack = 0
  1587                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1588  03BD  158A  2612  118A   	fcall	_SetupOscillator
  1589                           
  1590                           ;main.c: 92:     Buttons_SetupPortsAndInterrups();
  1591  03C0  158A  260C  118A   	fcall	_Buttons_SetupPortsAndInterrups
  1592                           
  1593                           ;main.c: 94:     LCD_SetupPorts();
  1594  03C3  158A  2797  118A   	fcall	_LCD_SetupPorts
  1595                           
  1596                           ;main.c: 95:     LCD_Reset();
  1597  03C6  158A  26AC  118A   	fcall	_LCD_Reset
  1598                           
  1599                           ;main.c: 96:     LCD_SegmentSelection(LCD_BOTH_SEGMENTS);
  1600  03C9  3003               	movlw	3
  1601  03CA  158A  269C  118A   	fcall	_LCD_SegmentSelection
  1602                           
  1603                           ;main.c: 97:     LCD_Clear();
  1604  03CD  118A  2082  118A   	fcall	_LCD_Clear
  1605                           
  1606                           ;main.c: 98:     LCD_TurnOn();
  1607  03D0  158A  261F  118A   	fcall	_LCD_TurnOn
  1608                           
  1609                           ;main.c: 100:     Buttons buttons;;main.c: 101:     Tetris_Game tetrisGame;;main.c: 103:
      +                               SetupTimer();
  1610  03D3  158A  2634  118A   	fcall	_SetupTimer
  1611  03D6                     l2943:	
  1612                           
  1613                           ;main.c: 106:     {;main.c: 107:         Tetris_ResetGame(&tetrisGame, Tetris_GetRandomU
      +                          nit());
  1614  03D6  118A  2057  118A   	fcall	_Tetris_GetRandomUnit
  1615  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  1616  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  1617  03DB  082C               	movf	?_Tetris_GetRandomUnit,w
  1618  03DC  00C2               	movwf	Tetris_ResetGame@playerUnit
  1619  03DD  082D               	movf	?_Tetris_GetRandomUnit+1,w
  1620  03DE  00C3               	movwf	Tetris_ResetGame@playerUnit+1
  1621  03DF  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  1622  03E0  158A  2736  118A   	fcall	_Tetris_ResetGame
  1623                           
  1624                           ;main.c: 108:         Buttons_Clear(&buttons);
  1625  03E3  30A0               	movlw	(low (main@buttons| 0))& (0+255)
  1626  03E4  158A  2670  118A   	fcall	_Buttons_Clear
  1627                           
  1628                           ;main.c: 109:         ResetTimer();
  1629  03E7  158A  2601  118A   	fcall	_ResetTimer
  1630  03EA                     l2949:	
  1631                           
  1632                           ;main.c: 112:         {;main.c: 113:             Buttons_Update(&buttons);
  1633  03EA  30A0               	movlw	(low (main@buttons| 0))& (0+255)
  1634  03EB  118A  202B  118A   	fcall	_Buttons_Update
  1635                           
  1636                           ;main.c: 115:             if (buttons.left.pressed)
  1637  03EE  1683               	bsf	3,5	;RP0=1, select bank1
  1638  03EF  1303               	bcf	3,6	;RP1=0, select bank1
  1639  03F0  1C20               	btfss	main@buttons^(0+128),0
  1640  03F1  2BF6               	goto	l2955
  1641                           
  1642                           ;main.c: 116:                 Tetris_MovePlayerLeft(&tetrisGame);
  1643  03F2  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  1644  03F3  118A  24E2  118A   	fcall	_Tetris_MovePlayerLeft
  1645  03F6                     l2955:	
  1646                           
  1647                           ;main.c: 117:             if (buttons.right.pressed)
  1648  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  1649  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  1650  03F8  1C21               	btfss	(main@buttons^(0+128)+1),0
  1651  03F9  2BFE               	goto	l2959
  1652                           
  1653                           ;main.c: 118:                 Tetris_MovePlayerRight(&tetrisGame);
  1654  03FA  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  1655  03FB  118A  2489  118A   	fcall	_Tetris_MovePlayerRight
  1656  03FE                     l2959:	
  1657                           
  1658                           ;main.c: 119:             if (buttons.rotate.pressed)
  1659  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  1660  03FF  1303               	bcf	3,6	;RP1=0, select bank1
  1661  0400  1C23               	btfss	(main@buttons^(0+128)+3),0
  1662  0401  2C06               	goto	l2963
  1663                           
  1664                           ;main.c: 120:                 Tetris_RotatePlayer(&tetrisGame);
  1665  0402  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  1666  0403  118A  234D  118A   	fcall	_Tetris_RotatePlayer
  1667  0406                     l2963:	
  1668                           
  1669                           ;main.c: 122:             if (buttons.down.held)
  1670  0406  1683               	bsf	3,5	;RP0=1, select bank1
  1671  0407  1303               	bcf	3,6	;RP1=0, select bank1
  1672  0408  1CA2               	btfss	(main@buttons^(0+128)+2),1
  1673  0409  2C0D               	goto	l2967
  1674                           
  1675                           ;main.c: 123:                 timerPrescaler = FAST_TIMER_PRESCALER;
  1676  040A  01E4               	clrf	_timerPrescaler^(0+128)
  1677  040B  0AE4               	incf	_timerPrescaler^(0+128),f
  1678  040C  2C15               	goto	l2969
  1679  040D                     l2967:	
  1680                           
  1681                           ;main.c: 125:                 timerPrescaler = DEFAULT_TIMER_PRESCALER;
  1682  040D  3010               	movlw	16
  1683  040E  1283               	bcf	3,5	;RP0=0, select bank0
  1684  040F  1303               	bcf	3,6	;RP1=0, select bank0
  1685  0410  00C6               	movwf	??_main
  1686  0411  0846               	movf	??_main,w
  1687  0412  1683               	bsf	3,5	;RP0=1, select bank1
  1688  0413  1303               	bcf	3,6	;RP1=0, select bank1
  1689  0414  00E4               	movwf	_timerPrescaler^(0+128)
  1690  0415                     l2969:	
  1691                           
  1692                           ;main.c: 127:             if (updateReady)
  1693  0415  0863               	movf	_updateReady^(0+128),w
  1694  0416  1903               	btfsc	3,2
  1695  0417  2C20               	goto	l2977
  1696                           
  1697                           ;main.c: 128:             {;main.c: 129:                 updateReady = 0;
  1698  0418  01E3               	clrf	_updateReady^(0+128)
  1699                           
  1700                           ;main.c: 130:                 if (Tetris_UpdateGame(&tetrisGame) == TETRIS_GAME_OVER)
  1701  0419  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  1702  041A  118A  2586  118A   	fcall	_Tetris_UpdateGame
  1703  041D  3A00               	xorlw	0
  1704  041E  1903               	btfsc	3,2
  1705  041F  2BD6               	goto	l2943
  1706  0420                     l2977:	
  1707                           
  1708                           ;main.c: 134:             RedrawTetrisOnLCD(&tetrisGame);
  1709  0420  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  1710  0421  118A  2204  118A   	fcall	_RedrawTetrisOnLCD
  1711  0424  2BEA               	goto	l2949
  1712  0425                     __end_of_main:	
  1713                           
  1714                           	psect	text1
  1715  0586                     __ptext1:	
  1716 ;; *************** function _Tetris_UpdateGame *****************
  1717 ;; Defined at:
  1718 ;;		line 350 in file "../Tetris/Tetris.c"
  1719 ;; Parameters:    Size  Location     Type
  1720 ;;  game            1    wreg     PTR struct .
  1721 ;;		 -> main@tetrisGame(63), 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  game            1   37[BANK0 ] PTR struct .
  1724 ;;		 -> main@tetrisGame(63), 
  1725 ;;  rowsCleared     1   36[BANK0 ] unsigned char 
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  1    wreg      enum E60
  1728 ;; Registers used:
  1729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1735 ;;      Params:         0       0       0       0
  1736 ;;      Locals:         0       2       0       0
  1737 ;;      Temps:          0       2       0       0
  1738 ;;      Totals:         0       4       0       0
  1739 ;;Total ram usage:        4 bytes
  1740 ;; Hardware stack levels used:    1
  1741 ;; Hardware stack levels required when called:    5
  1742 ;; This function calls:
  1743 ;;		_Tetris_ApplyPlayerToTable
  1744 ;;		_Tetris_ClearFilledRows
  1745 ;;		_Tetris_GetRandomUnit
  1746 ;;		_Tetris_MovePlayerDown
  1747 ;;		_Tetris_PlayerOverlapsEnvironment
  1748 ;;		_Tetris_ResetPlayer
  1749 ;;		_Tetris_ScoreForRowsCleared
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           
  1756                           ;psect for function _Tetris_UpdateGame
  1757  0586                     _Tetris_UpdateGame:	
  1758                           
  1759                           ;incstack = 0
  1760                           ; Regs used in _Tetris_UpdateGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1761                           ;Tetris_UpdateGame@game stored from wreg
  1762  0586  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0587  1303               	bcf	3,6	;RP1=0, select bank0
  1764  0588  00C5               	movwf	Tetris_UpdateGame@game
  1765                           
  1766                           ;../Tetris/Tetris.c: 350: Tetris_GameState Tetris_UpdateGame(Tetris_Game *game);../Tetri
      +                          s/Tetris.c: 351: {;../Tetris/Tetris.c: 352:  if (!Tetris_MovePlayerDown(game))
  1767  0589  0845               	movf	Tetris_UpdateGame@game,w
  1768  058A  118A  27BB  118A   	fcall	_Tetris_MovePlayerDown
  1769  058D  3A00               	xorlw	0
  1770  058E  1D03               	skipz
  1771  058F  2DD0               	goto	l2871
  1772                           
  1773                           ;../Tetris/Tetris.c: 353:  {;../Tetris/Tetris.c: 354:   uint8_t rowsCleared = Tetris_Cle
      +                          arFilledRows(game->table);
  1774  0590  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0591  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0592  0845               	movf	Tetris_UpdateGame@game,w
  1777  0593  118A  278A  118A   	fcall	_Tetris_ClearFilledRows
  1778  0596  1283               	bcf	3,5	;RP0=0, select bank0
  1779  0597  1303               	bcf	3,6	;RP1=0, select bank0
  1780  0598  00C2               	movwf	??_Tetris_UpdateGame
  1781  0599  0842               	movf	??_Tetris_UpdateGame,w
  1782  059A  00C4               	movwf	Tetris_UpdateGame@rowsCleared
  1783                           
  1784                           ;../Tetris/Tetris.c: 355:   game->currentScore += Tetris_ScoreForRowsCleared(rowsCleared
      +                          );
  1785  059B  0844               	movf	Tetris_UpdateGame@rowsCleared,w
  1786  059C  118A  20A7  118A   	fcall	_Tetris_ScoreForRowsCleared
  1787  059F  1283               	bcf	3,5	;RP0=0, select bank0
  1788  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  1789  05A1  00C2               	movwf	??_Tetris_UpdateGame
  1790  05A2  01C3               	clrf	??_Tetris_UpdateGame+1
  1791  05A3  0845               	movf	Tetris_UpdateGame@game,w
  1792  05A4  3E3D               	addlw	61
  1793  05A5  0084               	movwf	4
  1794  05A6  0842               	movf	??_Tetris_UpdateGame,w
  1795  05A7  1383               	bcf	3,7	;select IRP bank0
  1796  05A8  0780               	addwf	0,f
  1797  05A9  0F84               	incfsz	4,f
  1798  05AA  0800               	movf	0,w
  1799  05AB  1803               	skipnc
  1800  05AC  0A00               	incf	0,w
  1801  05AD  00FF               	movwf	127
  1802  05AE  0843               	movf	??_Tetris_UpdateGame+1,w
  1803  05AF  077F               	addwf	127,w
  1804  05B0  0080               	movwf	0
  1805  05B1  0384               	decf	4,f
  1806                           
  1807                           ;../Tetris/Tetris.c: 357:   Tetris_ResetPlayer(&game->player, Tetris_GetRandomUnit());
  1808  05B2  118A  2057  118A   	fcall	_Tetris_GetRandomUnit
  1809  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  1810  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  1811  05B7  082C               	movf	?_Tetris_GetRandomUnit,w
  1812  05B8  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  1813  05B9  082D               	movf	?_Tetris_GetRandomUnit+1,w
  1814  05BA  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  1815  05BB  0845               	movf	Tetris_UpdateGame@game,w
  1816  05BC  3E30               	addlw	48
  1817  05BD  158A  27BA  118A   	fcall	_Tetris_ResetPlayer
  1818                           
  1819                           ;../Tetris/Tetris.c: 358:   if (Tetris_PlayerOverlapsEnvironment(game))
  1820  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1821  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1822  05C2  0845               	movf	Tetris_UpdateGame@game,w
  1823  05C3  118A  26DC  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  1824  05C6  3A00               	xorlw	0
  1825  05C7  1903               	skipnz
  1826  05C8  2DCB               	goto	l2869
  1827                           
  1828                           ;../Tetris/Tetris.c: 359:    return TETRIS_GAME_OVER;
  1829  05C9  3000               	movlw	0
  1830  05CA  0008               	return
  1831  05CB                     l2869:	
  1832                           
  1833                           ;../Tetris/Tetris.c: 360:   Tetris_ApplyPlayerToTable(game);
  1834  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  1835  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  1836  05CD  0845               	movf	Tetris_UpdateGame@game,w
  1837  05CE  118A  2425         	fcall	_Tetris_ApplyPlayerToTable
  1838  05D0                     l2871:	
  1839                           
  1840                           ;../Tetris/Tetris.c: 363:  return TETRIS_GAME_CONTINUES;
  1841  05D0  3001               	movlw	1
  1842  05D1  0008               	return
  1843  05D2                     __end_of_Tetris_UpdateGame:	
  1844                           
  1845                           	psect	text2
  1846  00A7                     __ptext2:	
  1847 ;; *************** function _Tetris_ScoreForRowsCleared *****************
  1848 ;; Defined at:
  1849 ;;		line 315 in file "../Tetris/Tetris.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  rowsCleared     1    wreg     unsigned char 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  rowsCleared     1    5[COMMON] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      unsigned char 
  1856 ;; Registers used:
  1857 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1863 ;;      Params:         0       0       0       0
  1864 ;;      Locals:         1       0       0       0
  1865 ;;      Temps:          2       0       0       0
  1866 ;;      Totals:         3       0       0       0
  1867 ;;Total ram usage:        3 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    1
  1870 ;; This function calls:
  1871 ;;		Nothing
  1872 ;; This function is called by:
  1873 ;;		_Tetris_UpdateGame
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           
  1878                           ;psect for function _Tetris_ScoreForRowsCleared
  1879  00A7                     _Tetris_ScoreForRowsCleared:	
  1880                           
  1881                           ;incstack = 0
  1882                           ; Regs used in _Tetris_ScoreForRowsCleared: [wreg-fsr0h+status,2+status,0]
  1883                           ;Tetris_ScoreForRowsCleared@rowsCleared stored from wreg
  1884  00A7  00F5               	movwf	Tetris_ScoreForRowsCleared@rowsCleared
  1885                           
  1886                           ;../Tetris/Tetris.c: 315: static uint8_t Tetris_ScoreForRowsCleared(uint8_t rowsCleared)
      +                          ;../Tetris/Tetris.c: 316: {;../Tetris/Tetris.c: 317:  switch (rowsCleared)
  1887  00A8  28B3               	goto	l2201
  1888  00A9                     l2179:	
  1889  00A9  3000               	movlw	0
  1890  00AA  0008               	return
  1891  00AB                     l2183:	
  1892  00AB  3001               	movlw	1
  1893  00AC  0008               	return
  1894  00AD                     l2187:	
  1895  00AD  3003               	movlw	3
  1896  00AE  0008               	return
  1897  00AF                     l2191:	
  1898  00AF  3005               	movlw	5
  1899  00B0  0008               	return
  1900  00B1                     l2195:	
  1901  00B1  3007               	movlw	7
  1902  00B2  0008               	return
  1903  00B3                     l2201:	
  1904  00B3  0875               	movf	Tetris_ScoreForRowsCleared@rowsCleared,w
  1905  00B4  00F3               	movwf	??_Tetris_ScoreForRowsCleared
  1906  00B5  01F4               	clrf	??_Tetris_ScoreForRowsCleared+1
  1907                           
  1908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1909                           ; Switch size 1, requested type "simple"
  1910                           ; Number of cases is 1, Range of values is 0 to 0
  1911                           ; switch strategies available:
  1912                           ; Name         Instructions Cycles
  1913                           ; simple_byte            4     3 (average)
  1914                           ; direct_byte            9     7 (fixed)
  1915                           ; jumptable            260     6 (fixed)
  1916                           ;	Chosen strategy is simple_byte
  1917  00B6  0874               	movf	??_Tetris_ScoreForRowsCleared+1,w
  1918  00B7  3A00               	xorlw	0	; case 0
  1919  00B8  1903               	skipnz
  1920  00B9  28BB               	goto	l2999
  1921  00BA  28B1               	goto	l2195
  1922  00BB                     l2999:	
  1923                           
  1924                           ; Switch size 1, requested type "simple"
  1925                           ; Number of cases is 4, Range of values is 0 to 3
  1926                           ; switch strategies available:
  1927                           ; Name         Instructions Cycles
  1928                           ; simple_byte           13     7 (average)
  1929                           ; direct_byte           15     7 (fixed)
  1930                           ; jumptable            260     6 (fixed)
  1931                           ;	Chosen strategy is simple_byte
  1932  00BB  0873               	movf	??_Tetris_ScoreForRowsCleared,w
  1933  00BC  3A00               	xorlw	0	; case 0
  1934  00BD  1903               	skipnz
  1935  00BE  28A9               	goto	l2179
  1936  00BF  3A01               	xorlw	1	; case 1
  1937  00C0  1903               	skipnz
  1938  00C1  28AB               	goto	l2183
  1939  00C2  3A03               	xorlw	3	; case 2
  1940  00C3  1903               	skipnz
  1941  00C4  28AD               	goto	l2187
  1942  00C5  3A01               	xorlw	1	; case 3
  1943  00C6  1903               	skipnz
  1944  00C7  28AF               	goto	l2191
  1945  00C8  28B1               	goto	l2195
  1946  00C9  0008               	return
  1947  00CA                     __end_of_Tetris_ScoreForRowsCleared:	
  1948                           
  1949                           	psect	text3
  1950  07BB                     __ptext3:	
  1951 ;; *************** function _Tetris_MovePlayerDown *****************
  1952 ;; Defined at:
  1953 ;;		line 386 in file "../Tetris/Tetris.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  game            1    wreg     PTR struct .
  1956 ;;		 -> main@tetrisGame(63), 
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;  game            1   13[BANK0 ] PTR struct .
  1959 ;;		 -> main@tetrisGame(63), 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      unsigned char 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1969 ;;      Params:         0       0       0       0
  1970 ;;      Locals:         0       1       0       0
  1971 ;;      Temps:          0       1       0       0
  1972 ;;      Totals:         0       2       0       0
  1973 ;;Total ram usage:        2 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    4
  1976 ;; This function calls:
  1977 ;;		_Tetris_ApplyPlayerToTable
  1978 ;;		_Tetris_PlayerOverlapsEnvironment
  1979 ;;		_Tetris_RemovePlayerFromTable
  1980 ;; This function is called by:
  1981 ;;		_Tetris_UpdateGame
  1982 ;; This function uses a non-reentrant model
  1983 ;;
  1984                           
  1985                           
  1986                           ;psect for function _Tetris_MovePlayerDown
  1987  07BB                     _Tetris_MovePlayerDown:	
  1988                           
  1989                           ;incstack = 0
  1990                           ; Regs used in _Tetris_MovePlayerDown: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1991                           ;Tetris_MovePlayerDown@game stored from wreg
  1992  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  1993  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  1994  07BD  00AD               	movwf	Tetris_MovePlayerDown@game
  1995                           
  1996                           ;../Tetris/Tetris.c: 386: uint8_t Tetris_MovePlayerDown(Tetris_Game *game);../Tetris/Tet
      +                          ris.c: 387: {;../Tetris/Tetris.c: 388:  Tetris_RemovePlayerFromTable(game);
  1997  07BE  082D               	movf	Tetris_MovePlayerDown@game,w
  1998  07BF  118A  2754  118A   	fcall	_Tetris_RemovePlayerFromTable
  1999                           
  2000                           ;../Tetris/Tetris.c: 389:  ++game->player.position.y;
  2001  07C2  3001               	movlw	1
  2002  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  2003  07C4  1303               	bcf	3,6	;RP1=0, select bank0
  2004  07C5  00AC               	movwf	??_Tetris_MovePlayerDown
  2005  07C6  082D               	movf	Tetris_MovePlayerDown@game,w
  2006  07C7  3E31               	addlw	49
  2007  07C8  0084               	movwf	4
  2008  07C9  082C               	movf	??_Tetris_MovePlayerDown,w
  2009  07CA  1383               	bcf	3,7	;select IRP bank0
  2010  07CB  0780               	addwf	0,f
  2011                           
  2012                           ;../Tetris/Tetris.c: 391:  if (Tetris_PlayerOverlapsEnvironment(game) || !Tetris_ApplyPl
      +                          ayerToTable(game))
  2013  07CC  082D               	movf	Tetris_MovePlayerDown@game,w
  2014  07CD  118A  26DC  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  2015  07D0  3A00               	xorlw	0
  2016  07D1  1D03               	skipz
  2017  07D2  2FDC               	goto	l2783
  2018  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  2019  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  2020  07D5  082D               	movf	Tetris_MovePlayerDown@game,w
  2021  07D6  118A  2425  118A   	fcall	_Tetris_ApplyPlayerToTable
  2022  07D9  3A00               	xorlw	0
  2023  07DA  1D03               	skipz
  2024  07DB  2FE9               	goto	l2791
  2025  07DC                     l2783:	
  2026                           
  2027                           ;../Tetris/Tetris.c: 392:  {;../Tetris/Tetris.c: 393:   --game->player.position.y;
  2028  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  2029  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  2030  07DE  082D               	movf	Tetris_MovePlayerDown@game,w
  2031  07DF  3E31               	addlw	49
  2032  07E0  0084               	movwf	4
  2033  07E1  3001               	movlw	1
  2034  07E2  1383               	bcf	3,7	;select IRP bank0
  2035  07E3  0280               	subwf	0,f
  2036                           
  2037                           ;../Tetris/Tetris.c: 394:   Tetris_ApplyPlayerToTable(game);
  2038  07E4  082D               	movf	Tetris_MovePlayerDown@game,w
  2039  07E5  118A  2425         	fcall	_Tetris_ApplyPlayerToTable
  2040                           
  2041                           ;../Tetris/Tetris.c: 395:   return 0;
  2042  07E7  3000               	movlw	0
  2043  07E8  0008               	return
  2044  07E9                     l2791:	
  2045                           
  2046                           ;../Tetris/Tetris.c: 398:  return 1;
  2047  07E9  3001               	movlw	1
  2048  07EA  0008               	return
  2049  07EB                     __end_of_Tetris_MovePlayerDown:	
  2050                           
  2051                           	psect	text4
  2052  0057                     __ptext4:	
  2053 ;; *************** function _Tetris_GetRandomUnit *****************
  2054 ;; Defined at:
  2055 ;;		line 327 in file "../Tetris/Tetris.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  2   12[BANK0 ] PTR const struct .
  2062 ;; Registers used:
  2063 ;;		wreg, status,2, status,0, pclath, cstack
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2069 ;;      Params:         0       0       0       0
  2070 ;;      Locals:         0       0       0       0
  2071 ;;      Temps:          0       2       0       0
  2072 ;;      Totals:         0       2       0       0
  2073 ;;Total ram usage:        2 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    3
  2076 ;; This function calls:
  2077 ;;		___awmod
  2078 ;;		___wmul
  2079 ;;		_rand
  2080 ;; This function is called by:
  2081 ;;		_main
  2082 ;;		_Tetris_UpdateGame
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           
  2087                           ;psect for function _Tetris_GetRandomUnit
  2088  0057                     _Tetris_GetRandomUnit:	
  2089                           
  2090                           ;../Tetris/Tetris.c: 329:  return Tetris_units + (rand() % TETRIS_NUM_UNITS);
  2091                           
  2092                           ;incstack = 0
  2093                           ; Regs used in _Tetris_GetRandomUnit: [wreg+status,2+status,0+pclath+cstack]
  2094  0057  118A  25D2  118A   	fcall	_rand
  2095  005A  1283               	bcf	3,5	;RP0=0, select bank0
  2096  005B  1303               	bcf	3,6	;RP1=0, select bank0
  2097  005C  0829               	movf	?_rand+1,w
  2098  005D  00B2               	movwf	___awmod@dividend+1
  2099  005E  0828               	movf	?_rand,w
  2100  005F  00B1               	movwf	___awmod@dividend
  2101  0060  3007               	movlw	7
  2102  0061  00AF               	movwf	___awmod@divisor
  2103  0062  3000               	movlw	0
  2104  0063  00B0               	movwf	___awmod@divisor+1
  2105  0064  118A  2539  118A   	fcall	___awmod
  2106  0067  1283               	bcf	3,5	;RP0=0, select bank0
  2107  0068  1303               	bcf	3,6	;RP1=0, select bank0
  2108  0069  0830               	movf	?___awmod+1,w
  2109  006A  00B6               	movwf	___wmul@multiplier+1
  2110  006B  082F               	movf	?___awmod,w
  2111  006C  00B5               	movwf	___wmul@multiplier
  2112  006D  3022               	movlw	34
  2113  006E  00B7               	movwf	___wmul@multiplicand
  2114  006F  3000               	movlw	0
  2115  0070  00B8               	movwf	___wmul@multiplicand+1
  2116  0071  118A  20CA         	fcall	___wmul
  2117  0073  3016               	movlw	low (_Tetris_units| (0+32768))
  2118  0074  1283               	bcf	3,5	;RP0=0, select bank0
  2119  0075  1303               	bcf	3,6	;RP1=0, select bank0
  2120  0076  00BB               	movwf	??_Tetris_GetRandomUnit
  2121  0077  3081               	movlw	high (_Tetris_units| (0+32768))
  2122  0078  00BC               	movwf	??_Tetris_GetRandomUnit+1
  2123  0079  0835               	movf	?___wmul,w
  2124  007A  073B               	addwf	??_Tetris_GetRandomUnit,w
  2125  007B  00AC               	movwf	?_Tetris_GetRandomUnit
  2126  007C  0836               	movf	?___wmul+1,w
  2127  007D  1803               	skipnc
  2128  007E  0A36               	incf	?___wmul+1,w
  2129  007F  073C               	addwf	??_Tetris_GetRandomUnit+1,w
  2130  0080  00AD               	movwf	?_Tetris_GetRandomUnit+1
  2131  0081  0008               	return
  2132  0082                     __end_of_Tetris_GetRandomUnit:	
  2133                           
  2134                           	psect	text5
  2135  05D2                     __ptext5:	
  2136 ;; *************** function _rand *****************
  2137 ;; Defined at:
  2138 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  2    8[BANK0 ] int 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2152 ;;      Params:         0       2       0       0
  2153 ;;      Locals:         0       0       0       0
  2154 ;;      Temps:          0       5       0       0
  2155 ;;      Totals:         0       7       0       0
  2156 ;;Total ram usage:        7 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    2
  2159 ;; This function calls:
  2160 ;;		___lmul
  2161 ;; This function is called by:
  2162 ;;		_Tetris_GetRandomUnit
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function _rand
  2168  05D2                     _rand:	
  2169                           
  2170                           ;incstack = 0
  2171                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2172  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2173  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  2174  05D4  084A               	movf	_randx+3,w
  2175  05D5  00A3               	movwf	___lmul@multiplier+3
  2176  05D6  0849               	movf	_randx+2,w
  2177  05D7  00A2               	movwf	___lmul@multiplier+2
  2178  05D8  0848               	movf	_randx+1,w
  2179  05D9  00A1               	movwf	___lmul@multiplier+1
  2180  05DA  0847               	movf	_randx,w
  2181  05DB  00A0               	movwf	___lmul@multiplier
  2182  05DC  3041               	movlw	65
  2183  05DD  00A7               	movwf	___lmul@multiplicand+3
  2184  05DE  30C6               	movlw	198
  2185  05DF  00A6               	movwf	___lmul@multiplicand+2
  2186  05E0  304E               	movlw	78
  2187  05E1  00A5               	movwf	___lmul@multiplicand+1
  2188  05E2  306D               	movlw	109
  2189  05E3  00A4               	movwf	___lmul@multiplicand
  2190  05E4  118A  265A  118A   	fcall	___lmul
  2191  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  2192  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  2193  05E9  0823               	movf	?___lmul+3,w
  2194  05EA  00CA               	movwf	_randx+3
  2195  05EB  0822               	movf	?___lmul+2,w
  2196  05EC  00C9               	movwf	_randx+2
  2197  05ED  0821               	movf	?___lmul+1,w
  2198  05EE  00C8               	movwf	_randx+1
  2199  05EF  0820               	movf	?___lmul,w
  2200  05F0  00C7               	movwf	_randx
  2201  05F1  3039               	movlw	57
  2202  05F2  07C7               	addwf	_randx,f
  2203  05F3  3030               	movlw	48
  2204  05F4  1803               	skipnc
  2205  05F5  3031               	movlw	49
  2206  05F6  07C8               	addwf	_randx+1,f
  2207  05F7  3000               	movlw	0
  2208  05F8  1803               	skipnc
  2209  05F9  3001               	movlw	1
  2210  05FA  07C9               	addwf	_randx+2,f
  2211  05FB  3000               	movlw	0
  2212  05FC  1803               	skipnc
  2213  05FD  3001               	movlw	1
  2214  05FE  07CA               	addwf	_randx+3,f
  2215  05FF  0847               	movf	_randx,w
  2216  0600  00AA               	movwf	??_rand
  2217  0601  0848               	movf	_randx+1,w
  2218  0602  00AB               	movwf	??_rand+1
  2219  0603  0849               	movf	_randx+2,w
  2220  0604  00AC               	movwf	??_rand+2
  2221  0605  084A               	movf	_randx+3,w
  2222  0606  00AD               	movwf	??_rand+3
  2223  0607  3010               	movlw	16
  2224  0608  00AE               	movwf	??_rand+4
  2225  0609                     u2105:	
  2226  0609  0D2D               	rlf	??_rand+3,w
  2227  060A  0CAD               	rrf	??_rand+3,f
  2228  060B  0CAC               	rrf	??_rand+2,f
  2229  060C  0CAB               	rrf	??_rand+1,f
  2230  060D  0CAA               	rrf	??_rand,f
  2231  060E  0BAE               	decfsz	??_rand+4,f
  2232  060F  2E09               	goto	u2105
  2233  0610  30FF               	movlw	255
  2234  0611  052A               	andwf	??_rand,w
  2235  0612  00A8               	movwf	?_rand
  2236  0613  307F               	movlw	127
  2237  0614  052B               	andwf	??_rand+1,w
  2238  0615  00A9               	movwf	?_rand+1
  2239  0616  0008               	return
  2240  0617                     __end_of_rand:	
  2241                           
  2242                           	psect	text6
  2243  065A                     __ptext6:	
  2244 ;; *************** function ___lmul *****************
  2245 ;; Defined at:
  2246 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2249 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  product         4    4[COMMON] unsigned long 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  4    0[BANK0 ] unsigned long 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2, status,0
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2261 ;;      Params:         0       8       0       0
  2262 ;;      Locals:         4       0       0       0
  2263 ;;      Temps:          1       0       0       0
  2264 ;;      Totals:         5       8       0       0
  2265 ;;Total ram usage:       13 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; Hardware stack levels required when called:    1
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_rand
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           
  2276                           ;psect for function ___lmul
  2277  065A                     ___lmul:	
  2278                           
  2279                           ;incstack = 0
  2280                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2281  065A  3000               	movlw	0
  2282  065B  00F7               	movwf	___lmul@product+3
  2283  065C  3000               	movlw	0
  2284  065D  00F6               	movwf	___lmul@product+2
  2285  065E  3000               	movlw	0
  2286  065F  00F5               	movwf	___lmul@product+1
  2287  0660  3000               	movlw	0
  2288  0661  00F4               	movwf	___lmul@product
  2289  0662                     l2661:	
  2290  0662  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0663  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0664  1C20               	btfss	___lmul@multiplier,0
  2293  0665  2E7A               	goto	l2665
  2294  0666  0824               	movf	___lmul@multiplicand,w
  2295  0667  07F4               	addwf	___lmul@product,f
  2296  0668  0825               	movf	___lmul@multiplicand+1,w
  2297  0669  1103               	clrz
  2298  066A  1803               	skipnc
  2299  066B  3E01               	addlw	1
  2300  066C  1D03               	btfss	3,2
  2301  066D  07F5               	addwf	___lmul@product+1,f
  2302  066E  0826               	movf	___lmul@multiplicand+2,w
  2303  066F  1103               	clrz
  2304  0670  1803               	skipnc
  2305  0671  3E01               	addlw	1
  2306  0672  1D03               	btfss	3,2
  2307  0673  07F6               	addwf	___lmul@product+2,f
  2308  0674  0827               	movf	___lmul@multiplicand+3,w
  2309  0675  1103               	clrz
  2310  0676  1803               	skipnc
  2311  0677  3E01               	addlw	1
  2312  0678  1D03               	btfss	3,2
  2313  0679  07F7               	addwf	___lmul@product+3,f
  2314  067A                     l2665:	
  2315  067A  3001               	movlw	1
  2316  067B  00F3               	movwf	??___lmul
  2317  067C                     u2035:	
  2318  067C  1003               	clrc
  2319  067D  0DA4               	rlf	___lmul@multiplicand,f
  2320  067E  0DA5               	rlf	___lmul@multiplicand+1,f
  2321  067F  0DA6               	rlf	___lmul@multiplicand+2,f
  2322  0680  0DA7               	rlf	___lmul@multiplicand+3,f
  2323  0681  0BF3               	decfsz	??___lmul,f
  2324  0682  2E7C               	goto	u2035
  2325  0683  3001               	movlw	1
  2326  0684                     u2045:	
  2327  0684  1003               	clrc
  2328  0685  0CA3               	rrf	___lmul@multiplier+3,f
  2329  0686  0CA2               	rrf	___lmul@multiplier+2,f
  2330  0687  0CA1               	rrf	___lmul@multiplier+1,f
  2331  0688  0CA0               	rrf	___lmul@multiplier,f
  2332  0689  3EFF               	addlw	-1
  2333  068A  1D03               	skipz
  2334  068B  2E84               	goto	u2045
  2335  068C  0823               	movf	___lmul@multiplier+3,w
  2336  068D  0422               	iorwf	___lmul@multiplier+2,w
  2337  068E  0421               	iorwf	___lmul@multiplier+1,w
  2338  068F  0420               	iorwf	___lmul@multiplier,w
  2339  0690  1D03               	skipz
  2340  0691  2E62               	goto	l2661
  2341  0692  0877               	movf	___lmul@product+3,w
  2342  0693  00A3               	movwf	?___lmul+3
  2343  0694  0876               	movf	___lmul@product+2,w
  2344  0695  00A2               	movwf	?___lmul+2
  2345  0696  0875               	movf	___lmul@product+1,w
  2346  0697  00A1               	movwf	?___lmul+1
  2347  0698  0874               	movf	___lmul@product,w
  2348  0699  00A0               	movwf	?___lmul
  2349  069A  0008               	return
  2350  069B                     __end_of___lmul:	
  2351                           
  2352                           	psect	text7
  2353  00CA                     __ptext7:	
  2354 ;; *************** function ___wmul *****************
  2355 ;; Defined at:
  2356 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  multiplier      2   21[BANK0 ] unsigned int 
  2359 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  product         2   25[BANK0 ] unsigned int 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  2   21[BANK0 ] unsigned int 
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2371 ;;      Params:         0       4       0       0
  2372 ;;      Locals:         0       2       0       0
  2373 ;;      Temps:          0       0       0       0
  2374 ;;      Totals:         0       6       0       0
  2375 ;;Total ram usage:        6 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    1
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_Tetris_GetRandomUnit
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           
  2386                           ;psect for function ___wmul
  2387  00CA                     ___wmul:	
  2388                           
  2389                           ;incstack = 0
  2390                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2391  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  2392  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  2393  00CC  01B9               	clrf	___wmul@product
  2394  00CD  01BA               	clrf	___wmul@product+1
  2395  00CE                     l2067:	
  2396  00CE  1C35               	btfss	___wmul@multiplier,0
  2397  00CF  28D6               	goto	l503
  2398  00D0  0837               	movf	___wmul@multiplicand,w
  2399  00D1  07B9               	addwf	___wmul@product,f
  2400  00D2  1803               	skipnc
  2401  00D3  0ABA               	incf	___wmul@product+1,f
  2402  00D4  0838               	movf	___wmul@multiplicand+1,w
  2403  00D5  07BA               	addwf	___wmul@product+1,f
  2404  00D6                     l503:	
  2405  00D6  3001               	movlw	1
  2406  00D7                     u1315:	
  2407  00D7  1003               	clrc
  2408  00D8  0DB7               	rlf	___wmul@multiplicand,f
  2409  00D9  0DB8               	rlf	___wmul@multiplicand+1,f
  2410  00DA  3EFF               	addlw	-1
  2411  00DB  1D03               	skipz
  2412  00DC  28D7               	goto	u1315
  2413  00DD  3001               	movlw	1
  2414  00DE                     u1325:	
  2415  00DE  1003               	clrc
  2416  00DF  0CB6               	rrf	___wmul@multiplier+1,f
  2417  00E0  0CB5               	rrf	___wmul@multiplier,f
  2418  00E1  3EFF               	addlw	-1
  2419  00E2  1D03               	skipz
  2420  00E3  28DE               	goto	u1325
  2421  00E4  0835               	movf	___wmul@multiplier,w
  2422  00E5  0436               	iorwf	___wmul@multiplier+1,w
  2423  00E6  1D03               	btfss	3,2
  2424  00E7  28CE               	goto	l2067
  2425  00E8  083A               	movf	___wmul@product+1,w
  2426  00E9  00B6               	movwf	?___wmul+1
  2427  00EA  0839               	movf	___wmul@product,w
  2428  00EB  00B5               	movwf	?___wmul
  2429  00EC  0008               	return
  2430  00ED                     __end_of___wmul:	
  2431                           
  2432                           	psect	text8
  2433  0539                     __ptext8:	
  2434 ;; *************** function ___awmod *****************
  2435 ;; Defined at:
  2436 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  divisor         2   15[BANK0 ] int 
  2439 ;;  dividend        2   17[BANK0 ] int 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  sign            1   20[BANK0 ] unsigned char 
  2442 ;;  counter         1   19[BANK0 ] unsigned char 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  2   15[BANK0 ] int 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2452 ;;      Params:         0       4       0       0
  2453 ;;      Locals:         0       2       0       0
  2454 ;;      Temps:          1       0       0       0
  2455 ;;      Totals:         1       6       0       0
  2456 ;;Total ram usage:        7 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    1
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_Tetris_GetRandomUnit
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           
  2467                           ;psect for function ___awmod
  2468  0539                     ___awmod:	
  2469                           
  2470                           ;incstack = 0
  2471                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2472  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2473  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2474  053B  01B4               	clrf	___awmod@sign
  2475  053C  1FB2               	btfss	___awmod@dividend+1,7
  2476  053D  2D45               	goto	l2723
  2477  053E  09B1               	comf	___awmod@dividend,f
  2478  053F  09B2               	comf	___awmod@dividend+1,f
  2479  0540  0AB1               	incf	___awmod@dividend,f
  2480  0541  1903               	skipnz
  2481  0542  0AB2               	incf	___awmod@dividend+1,f
  2482  0543  01B4               	clrf	___awmod@sign
  2483  0544  0AB4               	incf	___awmod@sign,f
  2484  0545                     l2723:	
  2485  0545  1FB0               	btfss	___awmod@divisor+1,7
  2486  0546  2D4C               	goto	l2727
  2487  0547  09AF               	comf	___awmod@divisor,f
  2488  0548  09B0               	comf	___awmod@divisor+1,f
  2489  0549  0AAF               	incf	___awmod@divisor,f
  2490  054A  1903               	skipnz
  2491  054B  0AB0               	incf	___awmod@divisor+1,f
  2492  054C                     l2727:	
  2493  054C  082F               	movf	___awmod@divisor,w
  2494  054D  0430               	iorwf	___awmod@divisor+1,w
  2495  054E  1903               	btfsc	3,2
  2496  054F  2D79               	goto	l2745
  2497  0550  01B3               	clrf	___awmod@counter
  2498  0551  0AB3               	incf	___awmod@counter,f
  2499  0552                     l2735:	
  2500  0552  1BB0               	btfsc	___awmod@divisor+1,7
  2501  0553  2D60               	goto	l2737
  2502  0554  3001               	movlw	1
  2503  0555                     u2145:	
  2504  0555  1003               	clrc
  2505  0556  0DAF               	rlf	___awmod@divisor,f
  2506  0557  0DB0               	rlf	___awmod@divisor+1,f
  2507  0558  3EFF               	addlw	-1
  2508  0559  1D03               	skipz
  2509  055A  2D55               	goto	u2145
  2510  055B  3001               	movlw	1
  2511  055C  00F8               	movwf	??___awmod
  2512  055D  0878               	movf	??___awmod,w
  2513  055E  07B3               	addwf	___awmod@counter,f
  2514  055F  2D52               	goto	l2735
  2515  0560                     l2737:	
  2516  0560  0830               	movf	___awmod@divisor+1,w
  2517  0561  0232               	subwf	___awmod@dividend+1,w
  2518  0562  1D03               	skipz
  2519  0563  2D66               	goto	u2165
  2520  0564  082F               	movf	___awmod@divisor,w
  2521  0565  0231               	subwf	___awmod@dividend,w
  2522  0566                     u2165:	
  2523  0566  1C03               	skipc
  2524  0567  2D6E               	goto	l2741
  2525  0568  082F               	movf	___awmod@divisor,w
  2526  0569  02B1               	subwf	___awmod@dividend,f
  2527  056A  0830               	movf	___awmod@divisor+1,w
  2528  056B  1C03               	skipc
  2529  056C  03B2               	decf	___awmod@dividend+1,f
  2530  056D  02B2               	subwf	___awmod@dividend+1,f
  2531  056E                     l2741:	
  2532  056E  3001               	movlw	1
  2533  056F                     u2175:	
  2534  056F  1003               	clrc
  2535  0570  0CB0               	rrf	___awmod@divisor+1,f
  2536  0571  0CAF               	rrf	___awmod@divisor,f
  2537  0572  3EFF               	addlw	-1
  2538  0573  1D03               	skipz
  2539  0574  2D6F               	goto	u2175
  2540  0575  3001               	movlw	1
  2541  0576  02B3               	subwf	___awmod@counter,f
  2542  0577  1D03               	btfss	3,2
  2543  0578  2D60               	goto	l2737
  2544  0579                     l2745:	
  2545  0579  0834               	movf	___awmod@sign,w
  2546  057A  1903               	btfsc	3,2
  2547  057B  2D81               	goto	l2749
  2548  057C  09B1               	comf	___awmod@dividend,f
  2549  057D  09B2               	comf	___awmod@dividend+1,f
  2550  057E  0AB1               	incf	___awmod@dividend,f
  2551  057F  1903               	skipnz
  2552  0580  0AB2               	incf	___awmod@dividend+1,f
  2553  0581                     l2749:	
  2554  0581  0832               	movf	___awmod@dividend+1,w
  2555  0582  00B0               	movwf	?___awmod+1
  2556  0583  0831               	movf	___awmod@dividend,w
  2557  0584  00AF               	movwf	?___awmod
  2558  0585  0008               	return
  2559  0586                     __end_of___awmod:	
  2560                           
  2561                           	psect	text9
  2562  078A                     __ptext9:	
  2563 ;; *************** function _Tetris_ClearFilledRows *****************
  2564 ;; Defined at:
  2565 ;;		line 366 in file "../Tetris/Tetris.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  gameTable       1    wreg     PTR unsigned int 
  2568 ;;		 -> main@tetrisGame(63), 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;  gameTable       1    7[BANK0 ] PTR unsigned int 
  2571 ;;		 -> main@tetrisGame(63), 
  2572 ;;  i               1    8[BANK0 ] unsigned char 
  2573 ;;  rowsCleared     1    6[BANK0 ] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      unsigned char 
  2576 ;; Registers used:
  2577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2583 ;;      Params:         0       0       0       0
  2584 ;;      Locals:         0       3       0       0
  2585 ;;      Temps:          0       4       0       0
  2586 ;;      Totals:         0       7       0       0
  2587 ;;Total ram usage:        7 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    2
  2590 ;; This function calls:
  2591 ;;		_Tetris_ShiftTableDown
  2592 ;; This function is called by:
  2593 ;;		_Tetris_UpdateGame
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           
  2598                           ;psect for function _Tetris_ClearFilledRows
  2599  078A                     _Tetris_ClearFilledRows:	
  2600                           
  2601                           ;incstack = 0
  2602                           ; Regs used in _Tetris_ClearFilledRows: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2603                           ;Tetris_ClearFilledRows@gameTable stored from wreg
  2604  078A  1283               	bcf	3,5	;RP0=0, select bank0
  2605  078B  1303               	bcf	3,6	;RP1=0, select bank0
  2606  078C  00A7               	movwf	Tetris_ClearFilledRows@gameTable
  2607                           
  2608                           ;../Tetris/Tetris.c: 366: uint8_t Tetris_ClearFilledRows(uint16_t *gameTable);../Tetris/
      +                          Tetris.c: 367: {;../Tetris/Tetris.c: 368:  uint8_t rowsCleared = 0;
  2609  078D  01A6               	clrf	Tetris_ClearFilledRows@rowsCleared
  2610                           
  2611                           ;../Tetris/Tetris.c: 370:  for (uint8_t i = 0; i < TETRIS_TABLE_HEIGHT;)
  2612  078E  01A8               	clrf	Tetris_ClearFilledRows@i
  2613  078F                     l2241:	
  2614                           
  2615                           ;../Tetris/Tetris.c: 371:  {;../Tetris/Tetris.c: 372:   if (gameTable[i] == 0xFFFF)
  2616  078F  0828               	movf	Tetris_ClearFilledRows@i,w
  2617  0790  00A2               	movwf	??_Tetris_ClearFilledRows
  2618  0791  0722               	addwf	??_Tetris_ClearFilledRows,w
  2619  0792  0727               	addwf	Tetris_ClearFilledRows@gameTable,w
  2620  0793  00A3               	movwf	??_Tetris_ClearFilledRows+1
  2621  0794  0823               	movf	??_Tetris_ClearFilledRows+1,w
  2622  0795  0084               	movwf	4
  2623  0796  1383               	bcf	3,7	;select IRP bank0
  2624  0797  0800               	movf	0,w
  2625  0798  00A4               	movwf	??_Tetris_ClearFilledRows+2
  2626  0799  0A84               	incf	4,f
  2627  079A  0800               	movf	0,w
  2628  079B  00A5               	movwf	??_Tetris_ClearFilledRows+3
  2629  079C  0A24               	incf	??_Tetris_ClearFilledRows+2,w
  2630  079D  1D03               	skipz
  2631  079E  2FB1               	goto	l2247
  2632  079F  0A25               	incf	??_Tetris_ClearFilledRows+3,w
  2633  07A0  1D03               	btfss	3,2
  2634  07A1  2FB1               	goto	l2247
  2635                           
  2636                           ;../Tetris/Tetris.c: 373:   {;../Tetris/Tetris.c: 374:    Tetris_ShiftTableDown(gameTabl
      +                          e, i);
  2637  07A2  0828               	movf	Tetris_ClearFilledRows@i,w
  2638  07A3  00A2               	movwf	??_Tetris_ClearFilledRows
  2639  07A4  0822               	movf	??_Tetris_ClearFilledRows,w
  2640  07A5  00F3               	movwf	Tetris_ShiftTableDown@upto
  2641  07A6  0827               	movf	Tetris_ClearFilledRows@gameTable,w
  2642  07A7  118A  2617  118A   	fcall	_Tetris_ShiftTableDown
  2643                           
  2644                           ;../Tetris/Tetris.c: 375:    ++rowsCleared;
  2645  07AA  3001               	movlw	1
  2646  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  2647  07AC  1303               	bcf	3,6	;RP1=0, select bank0
  2648  07AD  00A2               	movwf	??_Tetris_ClearFilledRows
  2649  07AE  0822               	movf	??_Tetris_ClearFilledRows,w
  2650  07AF  07A6               	addwf	Tetris_ClearFilledRows@rowsCleared,f
  2651                           
  2652                           ;../Tetris/Tetris.c: 376:   }
  2653  07B0  2FB5               	goto	l2249
  2654  07B1                     l2247:	
  2655                           
  2656                           ;../Tetris/Tetris.c: 378:   {;../Tetris/Tetris.c: 379:    ++i;
  2657  07B1  3001               	movlw	1
  2658  07B2  00A2               	movwf	??_Tetris_ClearFilledRows
  2659  07B3  0822               	movf	??_Tetris_ClearFilledRows,w
  2660  07B4  07A8               	addwf	Tetris_ClearFilledRows@i,f
  2661  07B5                     l2249:	
  2662                           
  2663                           ;../Tetris/Tetris.c: 381:  }
  2664  07B5  3018               	movlw	24
  2665  07B6  0228               	subwf	Tetris_ClearFilledRows@i,w
  2666  07B7  1C03               	skipc
  2667  07B8  2F8F               	goto	l2241
  2668                           
  2669                           ;../Tetris/Tetris.c: 383:  return rowsCleared;
  2670  07B9  0826               	movf	Tetris_ClearFilledRows@rowsCleared,w
  2671  07BA  0008               	return
  2672  07BB                     __end_of_Tetris_ClearFilledRows:	
  2673                           
  2674                           	psect	text10
  2675  0617                     __ptext10:	
  2676 ;; *************** function _Tetris_ShiftTableDown *****************
  2677 ;; Defined at:
  2678 ;;		line 301 in file "../Tetris/Tetris.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  gameTable       1    wreg     PTR unsigned int 
  2681 ;;		 -> main@tetrisGame(63), 
  2682 ;;  upto            1    3[COMMON] unsigned char 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  gameTable       1    0[BANK0 ] PTR unsigned int 
  2685 ;;		 -> main@tetrisGame(63), 
  2686 ;;  i               1    1[BANK0 ] unsigned char 
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2696 ;;      Params:         1       0       0       0
  2697 ;;      Locals:         0       2       0       0
  2698 ;;      Temps:          6       0       0       0
  2699 ;;      Totals:         7       2       0       0
  2700 ;;Total ram usage:        9 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    1
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_Tetris_ClearFilledRows
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           
  2711                           ;psect for function _Tetris_ShiftTableDown
  2712  0617                     _Tetris_ShiftTableDown:	
  2713                           
  2714                           ;incstack = 0
  2715                           ; Regs used in _Tetris_ShiftTableDown: [wreg-fsr0h+status,2+status,0]
  2716                           ;Tetris_ShiftTableDown@gameTable stored from wreg
  2717  0617  1283               	bcf	3,5	;RP0=0, select bank0
  2718  0618  1303               	bcf	3,6	;RP1=0, select bank0
  2719  0619  00A0               	movwf	Tetris_ShiftTableDown@gameTable
  2720                           
  2721                           ;../Tetris/Tetris.c: 301: static void Tetris_ShiftTableDown(uint16_t *gameTable, uint8_t
      +                           upto);../Tetris/Tetris.c: 302: {;../Tetris/Tetris.c: 303:  uint8_t i;;../Tetris/Tetris.
      +                          c: 305:  for (i = upto; i != 0; --i)
  2722  061A  0873               	movf	Tetris_ShiftTableDown@upto,w
  2723  061B  00F4               	movwf	??_Tetris_ShiftTableDown
  2724  061C  0874               	movf	??_Tetris_ShiftTableDown,w
  2725  061D  00A1               	movwf	Tetris_ShiftTableDown@i
  2726  061E                     l2025:	
  2727  061E  0821               	movf	Tetris_ShiftTableDown@i,w
  2728  061F  1903               	btfsc	3,2
  2729  0620  2E4E               	goto	l2039
  2730                           
  2731                           ;../Tetris/Tetris.c: 306:  {;../Tetris/Tetris.c: 307:   if (gameTable[i] == 0)
  2732  0621  0821               	movf	Tetris_ShiftTableDown@i,w
  2733  0622  00F4               	movwf	??_Tetris_ShiftTableDown
  2734  0623  0774               	addwf	??_Tetris_ShiftTableDown,w
  2735  0624  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  2736  0625  00F5               	movwf	??_Tetris_ShiftTableDown+1
  2737  0626  0875               	movf	??_Tetris_ShiftTableDown+1,w
  2738  0627  0084               	movwf	4
  2739  0628  1383               	bcf	3,7	;select IRP bank0
  2740  0629  0800               	movf	0,w
  2741  062A  00F6               	movwf	??_Tetris_ShiftTableDown+2
  2742  062B  0A84               	incf	4,f
  2743  062C  0800               	movf	0,w
  2744  062D  00F7               	movwf	??_Tetris_ShiftTableDown+3
  2745  062E  0876               	movf	??_Tetris_ShiftTableDown+2,w
  2746  062F  0477               	iorwf	??_Tetris_ShiftTableDown+3,w
  2747  0630  1903               	btfsc	3,2
  2748  0631  2E4E               	goto	l2039
  2749                           
  2750                           ;../Tetris/Tetris.c: 309:   gameTable[i] = gameTable[i - 1];
  2751  0632  0821               	movf	Tetris_ShiftTableDown@i,w
  2752  0633  00F4               	movwf	??_Tetris_ShiftTableDown
  2753  0634  0774               	addwf	??_Tetris_ShiftTableDown,w
  2754  0635  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  2755  0636  00F5               	movwf	??_Tetris_ShiftTableDown+1
  2756  0637  0875               	movf	??_Tetris_ShiftTableDown+1,w
  2757  0638  3EFE               	addlw	-2
  2758  0639  0084               	movwf	4
  2759  063A  0800               	movf	0,w
  2760  063B  00F6               	movwf	??_Tetris_ShiftTableDown+2
  2761  063C  0A84               	incf	4,f
  2762  063D  0800               	movf	0,w
  2763  063E  00F7               	movwf	??_Tetris_ShiftTableDown+3
  2764  063F  0821               	movf	Tetris_ShiftTableDown@i,w
  2765  0640  00F8               	movwf	??_Tetris_ShiftTableDown+4
  2766  0641  0778               	addwf	??_Tetris_ShiftTableDown+4,w
  2767  0642  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  2768  0643  00F9               	movwf	??_Tetris_ShiftTableDown+5
  2769  0644  0879               	movf	??_Tetris_ShiftTableDown+5,w
  2770  0645  0084               	movwf	4
  2771  0646  0876               	movf	??_Tetris_ShiftTableDown+2,w
  2772  0647  0080               	movwf	0
  2773  0648  0A84               	incf	4,f
  2774  0649  0877               	movf	??_Tetris_ShiftTableDown+3,w
  2775  064A  0080               	movwf	0
  2776                           
  2777                           ;../Tetris/Tetris.c: 310:  }
  2778  064B  3001               	movlw	1
  2779  064C  02A1               	subwf	Tetris_ShiftTableDown@i,f
  2780  064D  2E1E               	goto	l2025
  2781  064E                     l2039:	
  2782                           
  2783                           ;../Tetris/Tetris.c: 312:  gameTable[i] = 0;
  2784  064E  0821               	movf	Tetris_ShiftTableDown@i,w
  2785  064F  00F4               	movwf	??_Tetris_ShiftTableDown
  2786  0650  0774               	addwf	??_Tetris_ShiftTableDown,w
  2787  0651  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  2788  0652  00F5               	movwf	??_Tetris_ShiftTableDown+1
  2789  0653  0875               	movf	??_Tetris_ShiftTableDown+1,w
  2790  0654  0084               	movwf	4
  2791  0655  1383               	bcf	3,7	;select IRP bank0
  2792  0656  0180               	clrf	0
  2793  0657  0A84               	incf	4,f
  2794  0658  0180               	clrf	0
  2795  0659  0008               	return
  2796  065A                     __end_of_Tetris_ShiftTableDown:	
  2797                           
  2798                           	psect	text11
  2799  034D                     __ptext11:	
  2800 ;; *************** function _Tetris_RotatePlayer *****************
  2801 ;; Defined at:
  2802 ;;		line 447 in file "../Tetris/Tetris.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  game            1    wreg     PTR struct .
  2805 ;;		 -> main@tetrisGame(63), 
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;  game            1   19[BANK0 ] PTR struct .
  2808 ;;		 -> main@tetrisGame(63), 
  2809 ;;  oldRotation     1   18[BANK0 ] unsigned char 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2819 ;;      Params:         0       0       0       0
  2820 ;;      Locals:         0       2       0       0
  2821 ;;      Temps:          0       6       0       0
  2822 ;;      Totals:         0       8       0       0
  2823 ;;Total ram usage:        8 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    4
  2826 ;; This function calls:
  2827 ;;		_Tetris_ApplyPlayerToTable
  2828 ;;		_Tetris_PlayerOverlapsEnvironment
  2829 ;;		_Tetris_PlayerUnitBitsAreValid
  2830 ;;		_Tetris_RemovePlayerFromTable
  2831 ;;		_Tetris_UpdatePlayerUnitBits
  2832 ;;		___lbmod
  2833 ;; This function is called by:
  2834 ;;		_main
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           
  2839                           ;psect for function _Tetris_RotatePlayer
  2840  034D                     _Tetris_RotatePlayer:	
  2841                           
  2842                           ;incstack = 0
  2843                           ; Regs used in _Tetris_RotatePlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  2844                           ;Tetris_RotatePlayer@game stored from wreg
  2845  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2846  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2847  034F  00B3               	movwf	Tetris_RotatePlayer@game
  2848                           
  2849                           ;../Tetris/Tetris.c: 447: void Tetris_RotatePlayer(Tetris_Game *game);../Tetris/Tetris.c
      +                          : 448: {;../Tetris/Tetris.c: 449:  Tetris_RemovePlayerFromTable(game);
  2850  0350  0833               	movf	Tetris_RotatePlayer@game,w
  2851  0351  118A  2754  118A   	fcall	_Tetris_RemovePlayerFromTable
  2852                           
  2853                           ;../Tetris/Tetris.c: 451:  uint8_t oldRotation = game->player.rotation;
  2854  0354  1283               	bcf	3,5	;RP0=0, select bank0
  2855  0355  1303               	bcf	3,6	;RP1=0, select bank0
  2856  0356  0833               	movf	Tetris_RotatePlayer@game,w
  2857  0357  3E3C               	addlw	60
  2858  0358  0084               	movwf	4
  2859  0359  1383               	bcf	3,7	;select IRP bank0
  2860  035A  0800               	movf	0,w
  2861  035B  00AC               	movwf	??_Tetris_RotatePlayer
  2862  035C  082C               	movf	??_Tetris_RotatePlayer,w
  2863  035D  00B2               	movwf	Tetris_RotatePlayer@oldRotation
  2864                           
  2865                           ;../Tetris/Tetris.c: 452:  ++game->player.rotation;
  2866  035E  3001               	movlw	1
  2867  035F  00AC               	movwf	??_Tetris_RotatePlayer
  2868  0360  0833               	movf	Tetris_RotatePlayer@game,w
  2869  0361  3E3C               	addlw	60
  2870  0362  0084               	movwf	4
  2871  0363  082C               	movf	??_Tetris_RotatePlayer,w
  2872  0364  0780               	addwf	0,f
  2873                           
  2874                           ;../Tetris/Tetris.c: 453:  game->player.rotation %= game->player.unit->numRotations;
  2875  0365  3001               	movlw	1
  2876  0366  00AC               	movwf	??_Tetris_RotatePlayer
  2877  0367  3000               	movlw	0
  2878  0368  00AD               	movwf	??_Tetris_RotatePlayer+1
  2879  0369  0833               	movf	Tetris_RotatePlayer@game,w
  2880  036A  3E32               	addlw	50
  2881  036B  0084               	movwf	4
  2882  036C  0800               	movf	0,w
  2883  036D  00AE               	movwf	??_Tetris_RotatePlayer+2
  2884  036E  0A84               	incf	4,f
  2885  036F  0800               	movf	0,w
  2886  0370  00AF               	movwf	??_Tetris_RotatePlayer+3
  2887  0371  082C               	movf	??_Tetris_RotatePlayer,w
  2888  0372  072E               	addwf	??_Tetris_RotatePlayer+2,w
  2889  0373  0084               	movwf	4
  2890  0374  082D               	movf	??_Tetris_RotatePlayer+1,w
  2891  0375  1803               	skipnc
  2892  0376  0A2D               	incf	??_Tetris_RotatePlayer+1,w
  2893  0377  072F               	addwf	??_Tetris_RotatePlayer+3,w
  2894  0378  00FF               	movwf	127
  2895  0379  118A  2100  118A   	fcall	stringtab
  2896  037C  00B0               	movwf	??_Tetris_RotatePlayer+4
  2897  037D  0830               	movf	??_Tetris_RotatePlayer+4,w
  2898  037E  00F3               	movwf	___lbmod@divisor
  2899  037F  0833               	movf	Tetris_RotatePlayer@game,w
  2900  0380  3E3C               	addlw	60
  2901  0381  0084               	movwf	4
  2902  0382  1383               	bcf	3,7	;select IRP bank0
  2903  0383  0800               	movf	0,w
  2904  0384  158A  27DD  118A   	fcall	___lbmod
  2905  0387  1283               	bcf	3,5	;RP0=0, select bank0
  2906  0388  1303               	bcf	3,6	;RP1=0, select bank0
  2907  0389  00B1               	movwf	??_Tetris_RotatePlayer+5
  2908  038A  0833               	movf	Tetris_RotatePlayer@game,w
  2909  038B  3E3C               	addlw	60
  2910  038C  0084               	movwf	4
  2911  038D  0831               	movf	??_Tetris_RotatePlayer+5,w
  2912  038E  1383               	bcf	3,7	;select IRP bank0
  2913  038F  0080               	movwf	0
  2914                           
  2915                           ;../Tetris/Tetris.c: 454:  Tetris_UpdatePlayerUnitBits(&game->player);
  2916  0390  0833               	movf	Tetris_RotatePlayer@game,w
  2917  0391  3E30               	addlw	48
  2918  0392  118A  22B2  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  2919                           
  2920                           ;../Tetris/Tetris.c: 455:  if (!Tetris_PlayerUnitBitsAreValid(&game->player) || Tetris_P
      +                          layerOverlapsEnvironment(game))
  2921  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2923  0397  0833               	movf	Tetris_RotatePlayer@game,w
  2924  0398  3E30               	addlw	48
  2925  0399  118A  271D  118A   	fcall	_Tetris_PlayerUnitBitsAreValid
  2926  039C  3A00               	xorlw	0
  2927  039D  1903               	skipnz
  2928  039E  2BA8               	goto	l2849
  2929  039F  1283               	bcf	3,5	;RP0=0, select bank0
  2930  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  2931  03A1  0833               	movf	Tetris_RotatePlayer@game,w
  2932  03A2  118A  26DC  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  2933  03A5  3A00               	xorlw	0
  2934  03A6  1903               	skipnz
  2935  03A7  2BB7               	goto	l2853
  2936  03A8                     l2849:	
  2937                           
  2938                           ;../Tetris/Tetris.c: 456:  {;../Tetris/Tetris.c: 457:   game->player.rotation = oldRotat
      +                          ion;
  2939  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2940  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2941  03AA  0832               	movf	Tetris_RotatePlayer@oldRotation,w
  2942  03AB  00AC               	movwf	??_Tetris_RotatePlayer
  2943  03AC  0833               	movf	Tetris_RotatePlayer@game,w
  2944  03AD  3E3C               	addlw	60
  2945  03AE  0084               	movwf	4
  2946  03AF  082C               	movf	??_Tetris_RotatePlayer,w
  2947  03B0  1383               	bcf	3,7	;select IRP bank0
  2948  03B1  0080               	movwf	0
  2949                           
  2950                           ;../Tetris/Tetris.c: 458:   Tetris_UpdatePlayerUnitBits(&game->player);
  2951  03B2  0833               	movf	Tetris_RotatePlayer@game,w
  2952  03B3  3E30               	addlw	48
  2953  03B4  118A  22B2  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  2954  03B7                     l2853:	
  2955                           
  2956                           ;../Tetris/Tetris.c: 461:  Tetris_ApplyPlayerToTable(game);
  2957  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2958  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2959  03B9  0833               	movf	Tetris_RotatePlayer@game,w
  2960  03BA  118A  2425         	fcall	_Tetris_ApplyPlayerToTable
  2961  03BC  0008               	return
  2962  03BD                     __end_of_Tetris_RotatePlayer:	
  2963                           
  2964                           	psect	text12
  2965  0FDD                     __ptext12:	
  2966 ;; *************** function ___lbmod *****************
  2967 ;; Defined at:
  2968 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lbmod.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  dividend        1    wreg     unsigned char 
  2971 ;;  divisor         1    3[COMMON] unsigned char 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  dividend        1    7[COMMON] unsigned char 
  2974 ;;  rem             1    9[COMMON] unsigned char 
  2975 ;;  counter         1    8[COMMON] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      unsigned char 
  2978 ;; Registers used:
  2979 ;;		wreg, status,2, status,0
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2985 ;;      Params:         1       0       0       0
  2986 ;;      Locals:         3       0       0       0
  2987 ;;      Temps:          3       0       0       0
  2988 ;;      Totals:         7       0       0       0
  2989 ;;Total ram usage:        7 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    1
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_Tetris_RotatePlayer
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function ___lbmod
  3001  0FDD                     ___lbmod:	
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3005                           ;___lbmod@dividend stored from wreg
  3006  0FDD  00F7               	movwf	___lbmod@dividend
  3007  0FDE  3008               	movlw	8
  3008  0FDF  00F4               	movwf	??___lbmod
  3009  0FE0  0874               	movf	??___lbmod,w
  3010  0FE1  00F8               	movwf	___lbmod@counter
  3011  0FE2  01F9               	clrf	___lbmod@rem
  3012  0FE3                     l2285:	
  3013  0FE3  0877               	movf	___lbmod@dividend,w
  3014  0FE4  00F4               	movwf	??___lbmod
  3015  0FE5  3007               	movlw	7
  3016  0FE6                     u1585:	
  3017  0FE6  1003               	clrc
  3018  0FE7  0CF4               	rrf	??___lbmod,f
  3019  0FE8  3EFF               	addlw	-1
  3020  0FE9  1D03               	skipz
  3021  0FEA  2FE6               	goto	u1585
  3022  0FEB  0879               	movf	___lbmod@rem,w
  3023  0FEC  00F5               	movwf	??___lbmod+1
  3024  0FED  0775               	addwf	??___lbmod+1,w
  3025  0FEE  0474               	iorwf	??___lbmod,w
  3026  0FEF  00F6               	movwf	??___lbmod+2
  3027  0FF0  0876               	movf	??___lbmod+2,w
  3028  0FF1  00F9               	movwf	___lbmod@rem
  3029  0FF2  1003               	clrc
  3030  0FF3  0DF7               	rlf	___lbmod@dividend,f
  3031  0FF4  0873               	movf	___lbmod@divisor,w
  3032  0FF5  0279               	subwf	___lbmod@rem,w
  3033  0FF6  1C03               	skipc
  3034  0FF7  2FFA               	goto	l713
  3035  0FF8  0873               	movf	___lbmod@divisor,w
  3036  0FF9  02F9               	subwf	___lbmod@rem,f
  3037  0FFA                     l713:	
  3038  0FFA  3001               	movlw	1
  3039  0FFB  02F8               	subwf	___lbmod@counter,f
  3040  0FFC  1D03               	btfss	3,2
  3041  0FFD  2FE3               	goto	l2285
  3042  0FFE  0879               	movf	___lbmod@rem,w
  3043  0FFF  0008               	return
  3044  1000                     __end_of___lbmod:	
  3045                           
  3046                           	psect	text13
  3047  071D                     __ptext13:	
  3048 ;; *************** function _Tetris_PlayerUnitBitsAreValid *****************
  3049 ;; Defined at:
  3050 ;;		line 283 in file "../Tetris/Tetris.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  player          1    wreg     PTR const struct .
  3053 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  player          1    9[BANK0 ] PTR const struct .
  3056 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      unsigned char 
  3059 ;; Registers used:
  3060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3066 ;;      Params:         0       0       0       0
  3067 ;;      Locals:         0       1       0       0
  3068 ;;      Temps:          0       4       0       0
  3069 ;;      Totals:         0       5       0       0
  3070 ;;Total ram usage:        5 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    3
  3073 ;; This function calls:
  3074 ;;		_Tetris_CountUnitBits
  3075 ;; This function is called by:
  3076 ;;		_Tetris_RotatePlayer
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           
  3081                           ;psect for function _Tetris_PlayerUnitBitsAreValid
  3082  071D                     _Tetris_PlayerUnitBitsAreValid:	
  3083                           
  3084                           ;incstack = 0
  3085                           ; Regs used in _Tetris_PlayerUnitBitsAreValid: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath+cstack]
  3086                           ;Tetris_PlayerUnitBitsAreValid@player stored from wreg
  3087  071D  1283               	bcf	3,5	;RP0=0, select bank0
  3088  071E  1303               	bcf	3,6	;RP1=0, select bank0
  3089  071F  00A9               	movwf	Tetris_PlayerUnitBitsAreValid@player
  3090                           
  3091                           ;../Tetris/Tetris.c: 283: static uint8_t Tetris_PlayerUnitBitsAreValid(const Tetris_Play
      +                          er *player);../Tetris/Tetris.c: 284: {;../Tetris/Tetris.c: 285:  return Tetris_CountUnit
      +                          Bits(player->unit->bits[player->rotation]) == Tetris_CountUnitBits(player->unitBits);
  3092  0720  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3093  0721  3E04               	addlw	4
  3094  0722  00F3               	movwf	Tetris_CountUnitBits@unitBits
  3095  0723  3000               	movlw	0
  3096  0724  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  3097  0725  118A  269B  118A   	fcall	_Tetris_CountUnitBits
  3098  0728  1283               	bcf	3,5	;RP0=0, select bank0
  3099  0729  1303               	bcf	3,6	;RP1=0, select bank0
  3100  072A  00A5               	movwf	??_Tetris_PlayerUnitBitsAreValid
  3101  072B  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3102  072C  3E02               	addlw	2
  3103  072D  0084               	movwf	4
  3104  072E  1383               	bcf	3,7	;select IRP bank0
  3105  072F  0800               	movf	0,w
  3106  0730  00A6               	movwf	??_Tetris_PlayerUnitBitsAreValid+1
  3107  0731  0A84               	incf	4,f
  3108  0732  0800               	movf	0,w
  3109  0733  00A7               	movwf	??_Tetris_PlayerUnitBitsAreValid+2
  3110  0734  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3111  0735  3E0C               	addlw	12
  3112  0736  0084               	movwf	4
  3113  0737  0800               	movf	0,w
  3114  0738  00A8               	movwf	??_Tetris_PlayerUnitBitsAreValid+3
  3115  0739  3002               	movlw	2
  3116  073A                     u2205:	
  3117  073A  1003               	clrc
  3118  073B  0DA8               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,f
  3119  073C  3EFF               	addlw	-1
  3120  073D  1D03               	skipz
  3121  073E  2F3A               	goto	u2205
  3122  073F  1003               	clrc
  3123  0740  0D28               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,w
  3124  0741  3E02               	addlw	2
  3125  0742  0726               	addwf	??_Tetris_PlayerUnitBitsAreValid+1,w
  3126  0743  00F3               	movwf	Tetris_CountUnitBits@unitBits
  3127  0744  0827               	movf	??_Tetris_PlayerUnitBitsAreValid+2,w
  3128  0745  1803               	skipnc
  3129  0746  3E01               	addlw	1
  3130  0747  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  3131  0748  118A  269B  118A   	fcall	_Tetris_CountUnitBits
  3132  074B  1283               	bcf	3,5	;RP0=0, select bank0
  3133  074C  1303               	bcf	3,6	;RP1=0, select bank0
  3134  074D  0625               	xorwf	??_Tetris_PlayerUnitBitsAreValid,w
  3135  074E  1D03               	btfss	3,2
  3136  074F  2F52               	goto	u2210
  3137  0750  3001               	movlw	1
  3138  0751  0008               	return
  3139  0752                     u2210:	
  3140  0752  3000               	movlw	0
  3141  0753  0008               	return
  3142  0754                     __end_of_Tetris_PlayerUnitBitsAreValid:	
  3143                           
  3144                           	psect	text14
  3145  069B                     __ptext14:	
  3146 ;; *************** function _Tetris_CountUnitBits *****************
  3147 ;; Defined at:
  3148 ;;		line 247 in file "../Tetris/Tetris.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;  unitBits        2    3[COMMON] PTR const unsigned int 
  3151 ;;		 -> tetrisGame.player(13), Tetris_units.bits(32), Tetris_units(238), main@tetrisGame(63), 
  3152 ;; Auto vars:     Size  Location     Type
  3153 ;;  j               1    3[BANK0 ] unsigned char 
  3154 ;;  mask            2    0[BANK0 ] unsigned int 
  3155 ;;  i               1    4[BANK0 ] unsigned char 
  3156 ;;  result          1    2[BANK0 ] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      unsigned char 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3166 ;;      Params:         2       0       0       0
  3167 ;;      Locals:         0       5       0       0
  3168 ;;      Temps:          5       0       0       0
  3169 ;;      Totals:         7       5       0       0
  3170 ;;Total ram usage:       12 bytes
  3171 ;; Hardware stack levels used:    2
  3172 ;; Hardware stack levels required when called:    1
  3173 ;; This function calls:
  3174 ;;		Nothing
  3175 ;; This function is called by:
  3176 ;;		_Tetris_PlayerUnitBitsAreValid
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           
  3181                           ;psect for function _Tetris_CountUnitBits
  3182  069B                     _Tetris_CountUnitBits:	
  3183                           
  3184                           ;../Tetris/Tetris.c: 247: static uint8_t Tetris_CountUnitBits(const uint16_t *unitBits);
      +                          ../Tetris/Tetris.c: 248: {;../Tetris/Tetris.c: 249:  uint8_t result = 0;
  3185                           
  3186                           ;incstack = 0
  3187                           ; Regs used in _Tetris_CountUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3188  069B  1283               	bcf	3,5	;RP0=0, select bank0
  3189  069C  1303               	bcf	3,6	;RP1=0, select bank0
  3190  069D  01A2               	clrf	Tetris_CountUnitBits@result
  3191                           
  3192                           ;../Tetris/Tetris.c: 250:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  3193  069E  01A4               	clrf	Tetris_CountUnitBits@i
  3194  069F                     l2679:	
  3195                           
  3196                           ;../Tetris/Tetris.c: 251:  {;../Tetris/Tetris.c: 252:   uint16_t mask = 1;
  3197  069F  3001               	movlw	1
  3198  06A0  00A0               	movwf	Tetris_CountUnitBits@mask
  3199  06A1  3000               	movlw	0
  3200  06A2  00A1               	movwf	Tetris_CountUnitBits@mask+1
  3201                           
  3202                           ;../Tetris/Tetris.c: 253:   for (uint8_t j = 0; j < TETRIS_TABLE_WIDTH; ++j)
  3203  06A3  01A3               	clrf	Tetris_CountUnitBits@j
  3204  06A4                     l2687:	
  3205                           
  3206                           ;../Tetris/Tetris.c: 254:   {;../Tetris/Tetris.c: 255:    if (unitBits[i] & mask)
  3207  06A4  0824               	movf	Tetris_CountUnitBits@i,w
  3208  06A5  00F5               	movwf	??_Tetris_CountUnitBits
  3209  06A6  0775               	addwf	??_Tetris_CountUnitBits,w
  3210  06A7  0773               	addwf	Tetris_CountUnitBits@unitBits,w
  3211  06A8  0084               	movwf	4
  3212  06A9  0874               	movf	Tetris_CountUnitBits@unitBits+1,w
  3213  06AA  1803               	skipnc
  3214  06AB  0A74               	incf	Tetris_CountUnitBits@unitBits+1,w
  3215  06AC  00FF               	movwf	127
  3216  06AD  118A  2100  118A   	fcall	stringtab
  3217  06B0  00F6               	movwf	??_Tetris_CountUnitBits+1
  3218  06B1  118A  2100  118A   	fcall	stringtab
  3219  06B4  00F7               	movwf	??_Tetris_CountUnitBits+2
  3220  06B5  0820               	movf	Tetris_CountUnitBits@mask,w
  3221  06B6  0576               	andwf	??_Tetris_CountUnitBits+1,w
  3222  06B7  00F8               	movwf	??_Tetris_CountUnitBits+3
  3223  06B8  0821               	movf	Tetris_CountUnitBits@mask+1,w
  3224  06B9  0577               	andwf	??_Tetris_CountUnitBits+2,w
  3225  06BA  00F9               	movwf	??_Tetris_CountUnitBits+4
  3226  06BB  0878               	movf	??_Tetris_CountUnitBits+3,w
  3227  06BC  0479               	iorwf	??_Tetris_CountUnitBits+4,w
  3228  06BD  1903               	btfsc	3,2
  3229  06BE  2EC3               	goto	l2691
  3230                           
  3231                           ;../Tetris/Tetris.c: 256:     ++result;
  3232  06BF  3001               	movlw	1
  3233  06C0  00F5               	movwf	??_Tetris_CountUnitBits
  3234  06C1  0875               	movf	??_Tetris_CountUnitBits,w
  3235  06C2  07A2               	addwf	Tetris_CountUnitBits@result,f
  3236  06C3                     l2691:	
  3237                           
  3238                           ;../Tetris/Tetris.c: 257:    mask <<= 1;
  3239  06C3  3001               	movlw	1
  3240  06C4                     u2075:	
  3241  06C4  1003               	clrc
  3242  06C5  0DA0               	rlf	Tetris_CountUnitBits@mask,f
  3243  06C6  0DA1               	rlf	Tetris_CountUnitBits@mask+1,f
  3244  06C7  3EFF               	addlw	-1
  3245  06C8  1D03               	skipz
  3246  06C9  2EC4               	goto	u2075
  3247                           
  3248                           ;../Tetris/Tetris.c: 258:   }
  3249  06CA  3001               	movlw	1
  3250  06CB  00F5               	movwf	??_Tetris_CountUnitBits
  3251  06CC  0875               	movf	??_Tetris_CountUnitBits,w
  3252  06CD  07A3               	addwf	Tetris_CountUnitBits@j,f
  3253  06CE  3010               	movlw	16
  3254  06CF  0223               	subwf	Tetris_CountUnitBits@j,w
  3255  06D0  1C03               	skipc
  3256  06D1  2EA4               	goto	l2687
  3257                           
  3258                           ;../Tetris/Tetris.c: 259:  }
  3259  06D2  3001               	movlw	1
  3260  06D3  00F5               	movwf	??_Tetris_CountUnitBits
  3261  06D4  0875               	movf	??_Tetris_CountUnitBits,w
  3262  06D5  07A4               	addwf	Tetris_CountUnitBits@i,f
  3263  06D6  3004               	movlw	4
  3264  06D7  0224               	subwf	Tetris_CountUnitBits@i,w
  3265  06D8  1C03               	skipc
  3266  06D9  2E9F               	goto	l2679
  3267                           
  3268                           ;../Tetris/Tetris.c: 260:  return result;
  3269  06DA  0822               	movf	Tetris_CountUnitBits@result,w
  3270  06DB  0008               	return
  3271  06DC                     __end_of_Tetris_CountUnitBits:	
  3272                           
  3273                           	psect	text15
  3274  0F36                     __ptext15:	
  3275 ;; *************** function _Tetris_ResetGame *****************
  3276 ;; Defined at:
  3277 ;;		line 343 in file "../Tetris/Tetris.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  game            1    wreg     PTR struct .
  3280 ;;		 -> main@tetrisGame(63), 
  3281 ;;  playerUnit      2   34[BANK0 ] PTR const struct .
  3282 ;;		 -> Tetris_units(238), 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  game            1   36[BANK0 ] PTR struct .
  3285 ;;		 -> main@tetrisGame(63), 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3295 ;;      Params:         0       2       0       0
  3296 ;;      Locals:         0       1       0       0
  3297 ;;      Temps:          0       0       0       0
  3298 ;;      Totals:         0       3       0       0
  3299 ;;Total ram usage:        3 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; Hardware stack levels required when called:    5
  3302 ;; This function calls:
  3303 ;;		_Tetris_ApplyPlayerToTable
  3304 ;;		_Tetris_ResetPlayer
  3305 ;;		_memset
  3306 ;; This function is called by:
  3307 ;;		_main
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _Tetris_ResetGame
  3313  0F36                     _Tetris_ResetGame:	
  3314                           
  3315                           ;incstack = 0
  3316                           ; Regs used in _Tetris_ResetGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3317                           ;Tetris_ResetGame@game stored from wreg
  3318  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  3319  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  3320  0F38  00C4               	movwf	Tetris_ResetGame@game
  3321                           
  3322                           ;../Tetris/Tetris.c: 343: void Tetris_ResetGame(Tetris_Game *game, const Tetris_Unit *pl
      +                          ayerUnit);../Tetris/Tetris.c: 344: {;../Tetris/Tetris.c: 345:  memset(game, 0, sizeof *g
      +                          ame);
  3323  0F39  3000               	movlw	0
  3324  0F3A  00F3               	movwf	memset@c
  3325  0F3B  00F4               	movwf	memset@c+1
  3326  0F3C  303F               	movlw	63
  3327  0F3D  00F5               	movwf	memset@n
  3328  0F3E  3000               	movlw	0
  3329  0F3F  00F6               	movwf	memset@n+1
  3330  0F40  0844               	movf	Tetris_ResetGame@game,w
  3331  0F41  158A  26DE  158A   	fcall	_memset
  3332                           
  3333                           ;../Tetris/Tetris.c: 346:  Tetris_ResetPlayer(&game->player, playerUnit);
  3334  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  3335  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  3336  0F46  0842               	movf	Tetris_ResetGame@playerUnit,w
  3337  0F47  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  3338  0F48  0843               	movf	Tetris_ResetGame@playerUnit+1,w
  3339  0F49  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  3340  0F4A  0844               	movf	Tetris_ResetGame@game,w
  3341  0F4B  3E30               	addlw	48
  3342  0F4C  158A  27BA  158A   	fcall	_Tetris_ResetPlayer
  3343                           
  3344                           ;../Tetris/Tetris.c: 347:  Tetris_ApplyPlayerToTable(game);
  3345  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  3346  0F50  1303               	bcf	3,6	;RP1=0, select bank0
  3347  0F51  0844               	movf	Tetris_ResetGame@game,w
  3348  0F52  118A  2425         	fcall	_Tetris_ApplyPlayerToTable
  3349  0F54  0008               	return
  3350  0F55                     __end_of_Tetris_ResetGame:	
  3351                           
  3352                           	psect	text16
  3353  0FBA                     __ptext16:	
  3354 ;; *************** function _Tetris_ResetPlayer *****************
  3355 ;; Defined at:
  3356 ;;		line 294 in file "../Tetris/Tetris.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  player          1    wreg     PTR struct .
  3359 ;;		 -> main@tetrisGame(63), 
  3360 ;;  playerUnit      2   29[BANK0 ] PTR const struct .
  3361 ;;		 -> Tetris_units(238), 
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;  player          1   33[BANK0 ] PTR struct .
  3364 ;;		 -> main@tetrisGame(63), 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3374 ;;      Params:         0       2       0       0
  3375 ;;      Locals:         0       1       0       0
  3376 ;;      Temps:          0       2       0       0
  3377 ;;      Totals:         0       5       0       0
  3378 ;;Total ram usage:        5 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    4
  3381 ;; This function calls:
  3382 ;;		_Tetris_SetPlayerUnit
  3383 ;; This function is called by:
  3384 ;;		_Tetris_ResetGame
  3385 ;;		_Tetris_UpdateGame
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _Tetris_ResetPlayer
  3391  0FBA                     _Tetris_ResetPlayer:	
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _Tetris_ResetPlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3395                           ;Tetris_ResetPlayer@player stored from wreg
  3396  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0FBC  00C1               	movwf	Tetris_ResetPlayer@player
  3399                           
  3400                           ;../Tetris/Tetris.c: 294: static void Tetris_ResetPlayer(Tetris_Player *player, const Te
      +                          tris_Unit *playerUnit);../Tetris/Tetris.c: 295: {;../Tetris/Tetris.c: 296:  player->posi
      +                          tion = Tetris_playerStartingPosition;
  3401  0FBD  3012               	movlw	low (_Tetris_playerStartingPosition| (0+32768))
  3402  0FBE  0084               	movwf	4
  3403  0FBF  3081               	movlw	high (_Tetris_playerStartingPosition| (0+32768))
  3404  0FC0  00FF               	movwf	127
  3405  0FC1  118A  2100  158A   	fcall	stringtab
  3406  0FC4  00BF               	movwf	??_Tetris_ResetPlayer
  3407  0FC5  118A  2100  158A   	fcall	stringtab
  3408  0FC8  00C0               	movwf	??_Tetris_ResetPlayer+1
  3409  0FC9  0841               	movf	Tetris_ResetPlayer@player,w
  3410  0FCA  0084               	movwf	4
  3411  0FCB  083F               	movf	??_Tetris_ResetPlayer,w
  3412  0FCC  1383               	bcf	3,7	;select IRP bank0
  3413  0FCD  0080               	movwf	0
  3414  0FCE  0A84               	incf	4,f
  3415  0FCF  0840               	movf	??_Tetris_ResetPlayer+1,w
  3416  0FD0  0080               	movwf	0
  3417                           
  3418                           ;../Tetris/Tetris.c: 297:  player->rotation = 0;
  3419  0FD1  0841               	movf	Tetris_ResetPlayer@player,w
  3420  0FD2  3E0C               	addlw	12
  3421  0FD3  0084               	movwf	4
  3422  0FD4  0180               	clrf	0
  3423                           
  3424                           ;../Tetris/Tetris.c: 298:  Tetris_SetPlayerUnit(player, playerUnit);
  3425  0FD5  083D               	movf	Tetris_ResetPlayer@playerUnit,w
  3426  0FD6  00F8               	movwf	Tetris_SetPlayerUnit@unit
  3427  0FD7  083E               	movf	Tetris_ResetPlayer@playerUnit+1,w
  3428  0FD8  00F9               	movwf	Tetris_SetPlayerUnit@unit+1
  3429  0FD9  0841               	movf	Tetris_ResetPlayer@player,w
  3430  0FDA  118A  20ED         	fcall	_Tetris_SetPlayerUnit
  3431  0FDC  0008               	return
  3432  0FDD                     __end_of_Tetris_ResetPlayer:	
  3433                           
  3434                           	psect	text17
  3435  00ED                     __ptext17:	
  3436 ;; *************** function _Tetris_SetPlayerUnit *****************
  3437 ;; Defined at:
  3438 ;;		line 288 in file "../Tetris/Tetris.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  player          1    wreg     PTR struct .
  3441 ;;		 -> main@tetrisGame(63), 
  3442 ;;  unit            2    8[COMMON] PTR const struct .
  3443 ;;		 -> Tetris_units(238), 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  player          1   10[BANK0 ] PTR struct .
  3446 ;;		 -> main@tetrisGame(63), 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3456 ;;      Params:         2       0       0       0
  3457 ;;      Locals:         0       1       0       0
  3458 ;;      Temps:          0       0       0       0
  3459 ;;      Totals:         2       1       0       0
  3460 ;;Total ram usage:        3 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    3
  3463 ;; This function calls:
  3464 ;;		_Tetris_UpdatePlayerUnitBits
  3465 ;; This function is called by:
  3466 ;;		_Tetris_ResetPlayer
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _Tetris_SetPlayerUnit
  3472  00ED                     _Tetris_SetPlayerUnit:	
  3473                           
  3474                           ;incstack = 0
  3475                           ; Regs used in _Tetris_SetPlayerUnit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  3476                           ;Tetris_SetPlayerUnit@player stored from wreg
  3477  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  3478  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  3479  00EF  00AA               	movwf	Tetris_SetPlayerUnit@player
  3480                           
  3481                           ;../Tetris/Tetris.c: 288: static void Tetris_SetPlayerUnit(Tetris_Player *player, const 
      +                          Tetris_Unit *unit);../Tetris/Tetris.c: 289: {;../Tetris/Tetris.c: 290:  player->unit = u
      +                          nit;
  3482  00F0  082A               	movf	Tetris_SetPlayerUnit@player,w
  3483  00F1  3E02               	addlw	2
  3484  00F2  0084               	movwf	4
  3485  00F3  0878               	movf	Tetris_SetPlayerUnit@unit,w
  3486  00F4  1383               	bcf	3,7	;select IRP bank0
  3487  00F5  0080               	movwf	0
  3488  00F6  0A84               	incf	4,f
  3489  00F7  0879               	movf	Tetris_SetPlayerUnit@unit+1,w
  3490  00F8  0080               	movwf	0
  3491                           
  3492                           ;../Tetris/Tetris.c: 291:  Tetris_UpdatePlayerUnitBits(player);
  3493  00F9  082A               	movf	Tetris_SetPlayerUnit@player,w
  3494  00FA  118A  22B2         	fcall	_Tetris_UpdatePlayerUnitBits
  3495  00FC  0008               	return
  3496  00FD                     __end_of_Tetris_SetPlayerUnit:	
  3497                           
  3498                           	psect	text18
  3499  02B2                     __ptext18:	
  3500 ;; *************** function _Tetris_UpdatePlayerUnitBits *****************
  3501 ;; Defined at:
  3502 ;;		line 263 in file "../Tetris/Tetris.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;  player          1    wreg     PTR struct .
  3505 ;;		 -> main@tetrisGame(63), 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  player          1    7[COMMON] PTR struct .
  3508 ;;		 -> main@tetrisGame(63), 
  3509 ;;  i               1    4[COMMON] unsigned char 
  3510 ;;  i               1    3[COMMON] unsigned char 
  3511 ;;  i               1    5[COMMON] unsigned char 
  3512 ;;  shift           1    6[COMMON] char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3522 ;;      Params:         0       0       0       0
  3523 ;;      Locals:         5       0       0       0
  3524 ;;      Temps:          0      10       0       0
  3525 ;;      Totals:         5      10       0       0
  3526 ;;Total ram usage:       15 bytes
  3527 ;; Hardware stack levels used:    2
  3528 ;; Hardware stack levels required when called:    1
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_Tetris_SetPlayerUnit
  3533 ;;		_Tetris_RotatePlayer
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           
  3538                           ;psect for function _Tetris_UpdatePlayerUnitBits
  3539  02B2                     _Tetris_UpdatePlayerUnitBits:	
  3540                           
  3541                           ;incstack = 0
  3542                           ; Regs used in _Tetris_UpdatePlayerUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h]
  3543                           ;Tetris_UpdatePlayerUnitBits@player stored from wreg
  3544  02B2  00F7               	movwf	Tetris_UpdatePlayerUnitBits@player
  3545                           
  3546                           ;../Tetris/Tetris.c: 263: static void Tetris_UpdatePlayerUnitBits(Tetris_Player *player)
      +                          ;../Tetris/Tetris.c: 264: {;../Tetris/Tetris.c: 265:  for (uint8_t i = 0; i < TETRIS_UNI
      +                          T_HEIGHT; ++i)
  3547  02B3  01F5               	clrf	Tetris_UpdatePlayerUnitBits@i
  3548  02B4                     l2623:	
  3549                           
  3550                           ;../Tetris/Tetris.c: 266:   player->unitBits[i] = player->unit->bits[player->rotation][i
      +                          ];
  3551  02B4  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  3552  02B5  3E02               	addlw	2
  3553  02B6  0084               	movwf	4
  3554  02B7  1383               	bcf	3,7	;select IRP bank0
  3555  02B8  0800               	movf	0,w
  3556  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  3557  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  3558  02BB  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  3559  02BC  0A84               	incf	4,f
  3560  02BD  0800               	movf	0,w
  3561  02BE  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  3562  02BF  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  3563  02C0  3E0C               	addlw	12
  3564  02C1  0084               	movwf	4
  3565  02C2  0800               	movf	0,w
  3566  02C3  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  3567  02C4  3002               	movlw	2
  3568  02C5                     u1945:	
  3569  02C5  1003               	clrc
  3570  02C6  0DA2               	rlf	??_Tetris_UpdatePlayerUnitBits+2,f
  3571  02C7  3EFF               	addlw	-1
  3572  02C8  1D03               	skipz
  3573  02C9  2AC5               	goto	u1945
  3574  02CA  1003               	clrc
  3575  02CB  0D22               	rlf	??_Tetris_UpdatePlayerUnitBits+2,w
  3576  02CC  3E02               	addlw	2
  3577  02CD  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  3578  02CE  00A3               	movwf	??_Tetris_UpdatePlayerUnitBits+3
  3579  02CF  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  3580  02D0  1803               	skipnc
  3581  02D1  3E01               	addlw	1
  3582  02D2  00A4               	movwf	??_Tetris_UpdatePlayerUnitBits+4
  3583  02D3  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  3584  02D4  00A5               	movwf	??_Tetris_UpdatePlayerUnitBits+5
  3585  02D5  0725               	addwf	??_Tetris_UpdatePlayerUnitBits+5,w
  3586  02D6  0723               	addwf	??_Tetris_UpdatePlayerUnitBits+3,w
  3587  02D7  0084               	movwf	4
  3588  02D8  0824               	movf	??_Tetris_UpdatePlayerUnitBits+4,w
  3589  02D9  1803               	skipnc
  3590  02DA  0A24               	incf	??_Tetris_UpdatePlayerUnitBits+4,w
  3591  02DB  00FF               	movwf	127
  3592  02DC  118A  2100  118A   	fcall	stringtab
  3593  02DF  00A6               	movwf	??_Tetris_UpdatePlayerUnitBits+6
  3594  02E0  118A  2100  118A   	fcall	stringtab
  3595  02E3  00A7               	movwf	??_Tetris_UpdatePlayerUnitBits+7
  3596  02E4  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  3597  02E5  00A8               	movwf	??_Tetris_UpdatePlayerUnitBits+8
  3598  02E6  0728               	addwf	??_Tetris_UpdatePlayerUnitBits+8,w
  3599  02E7  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  3600  02E8  00A9               	movwf	??_Tetris_UpdatePlayerUnitBits+9
  3601  02E9  0829               	movf	??_Tetris_UpdatePlayerUnitBits+9,w
  3602  02EA  3E04               	addlw	4
  3603  02EB  0084               	movwf	4
  3604  02EC  0826               	movf	??_Tetris_UpdatePlayerUnitBits+6,w
  3605  02ED  1383               	bcf	3,7	;select IRP bank0
  3606  02EE  0080               	movwf	0
  3607  02EF  0A84               	incf	4,f
  3608  02F0  0827               	movf	??_Tetris_UpdatePlayerUnitBits+7,w
  3609  02F1  0080               	movwf	0
  3610  02F2  3001               	movlw	1
  3611  02F3  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  3612  02F4  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  3613  02F5  07F5               	addwf	Tetris_UpdatePlayerUnitBits@i,f
  3614  02F6  3004               	movlw	4
  3615  02F7  0275               	subwf	Tetris_UpdatePlayerUnitBits@i,w
  3616  02F8  1C03               	skipc
  3617  02F9  2AB4               	goto	l2623
  3618                           
  3619                           ;../Tetris/Tetris.c: 268:  int8_t shift = 8 - player->position.x + Tetris_unitPivot.x;
  3620  02FA  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  3621  02FB  0084               	movwf	4
  3622  02FC  0800               	movf	0,w
  3623  02FD  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  3624  02FE  3014               	movlw	low (_Tetris_unitPivot| (0+32768))
  3625  02FF  0084               	movwf	4
  3626  0300  3081               	movlw	high (_Tetris_unitPivot| (0+32768))
  3627  0301  00FF               	movwf	127
  3628  0302  118A  2100  118A   	fcall	stringtab
  3629  0305  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  3630  0306  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  3631  0307  0221               	subwf	??_Tetris_UpdatePlayerUnitBits+1,w
  3632  0308  3E08               	addlw	8
  3633  0309  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  3634  030A  0822               	movf	??_Tetris_UpdatePlayerUnitBits+2,w
  3635  030B  00F6               	movwf	Tetris_UpdatePlayerUnitBits@shift
  3636                           
  3637                           ;../Tetris/Tetris.c: 270:  if (shift > 0)
  3638  030C  0876               	movf	Tetris_UpdatePlayerUnitBits@shift,w
  3639  030D  3A80               	xorlw	128
  3640  030E  3E7F               	addlw	-129
  3641  030F  1C03               	skipc
  3642  0310  2B2E               	goto	l2645
  3643                           
  3644                           ;../Tetris/Tetris.c: 271:  {;../Tetris/Tetris.c: 272:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  3645  0311  01F3               	clrf	Tetris_UpdatePlayerUnitBits@i_323
  3646  0312                     l2639:	
  3647                           
  3648                           ;../Tetris/Tetris.c: 273:    player->unitBits[i] <<= shift;
  3649  0312  0873               	movf	Tetris_UpdatePlayerUnitBits@i_323,w
  3650  0313  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  3651  0314  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  3652  0315  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  3653  0316  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  3654  0317  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  3655  0318  3E04               	addlw	4
  3656  0319  0084               	movwf	4
  3657  031A  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  3658  031B  1383               	bcf	3,7	;select IRP bank0
  3659  031C  2B22               	goto	u1970
  3660  031D                     u1975:	
  3661  031D  1003               	clrc
  3662  031E  0D80               	rlf	0,f
  3663  031F  0A84               	incf	4,f
  3664  0320  0D80               	rlf	0,f
  3665  0321  0384               	decf	4,f
  3666  0322                     u1970:	
  3667  0322  3EFF               	addlw	-1
  3668  0323  1D03               	skipz
  3669  0324  2B1D               	goto	u1975
  3670  0325  3001               	movlw	1
  3671  0326  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  3672  0327  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  3673  0328  07F3               	addwf	Tetris_UpdatePlayerUnitBits@i_323,f
  3674  0329  3004               	movlw	4
  3675  032A  0273               	subwf	Tetris_UpdatePlayerUnitBits@i_323,w
  3676  032B  1803               	btfsc	3,0
  3677  032C  0008               	return
  3678  032D  2B12               	goto	l2639
  3679  032E                     l2645:	
  3680                           
  3681                           ;../Tetris/Tetris.c: 276:  {;../Tetris/Tetris.c: 277:   shift = -shift;
  3682  032E  09F6               	comf	Tetris_UpdatePlayerUnitBits@shift,f
  3683  032F  0AF6               	incf	Tetris_UpdatePlayerUnitBits@shift,f
  3684                           
  3685                           ;../Tetris/Tetris.c: 278:   for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  3686  0330  01F4               	clrf	Tetris_UpdatePlayerUnitBits@i_324
  3687  0331                     l2653:	
  3688                           
  3689                           ;../Tetris/Tetris.c: 279:    player->unitBits[i] >>= shift;
  3690  0331  0874               	movf	Tetris_UpdatePlayerUnitBits@i_324,w
  3691  0332  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  3692  0333  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  3693  0334  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  3694  0335  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  3695  0336  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  3696  0337  3E04               	addlw	4
  3697  0338  0084               	movwf	4
  3698  0339  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  3699  033A  1383               	bcf	3,7	;select IRP bank0
  3700  033B  2B41               	goto	u1990
  3701  033C                     u1995:	
  3702  033C  0A84               	incf	4,f
  3703  033D  1003               	clrc
  3704  033E  0C80               	rrf	0,f
  3705  033F  0384               	decf	4,f
  3706  0340  0C80               	rrf	0,f
  3707  0341                     u1990:	
  3708  0341  3EFF               	addlw	-1
  3709  0342  1D03               	skipz
  3710  0343  2B3C               	goto	u1995
  3711  0344  3001               	movlw	1
  3712  0345  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  3713  0346  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  3714  0347  07F4               	addwf	Tetris_UpdatePlayerUnitBits@i_324,f
  3715  0348  3004               	movlw	4
  3716  0349  0274               	subwf	Tetris_UpdatePlayerUnitBits@i_324,w
  3717  034A  1803               	btfsc	3,0
  3718  034B  0008               	return
  3719  034C  2B31               	goto	l2653
  3720  034D                     __end_of_Tetris_UpdatePlayerUnitBits:	
  3721                           
  3722                           	psect	text19
  3723  0489                     __ptext19:	
  3724 ;; *************** function _Tetris_MovePlayerRight *****************
  3725 ;; Defined at:
  3726 ;;		line 424 in file "../Tetris/Tetris.c"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  game            1    wreg     PTR struct .
  3729 ;;		 -> main@tetrisGame(63), 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;  game            1   16[BANK0 ] PTR struct .
  3732 ;;		 -> main@tetrisGame(63), 
  3733 ;;  i               1   15[BANK0 ] unsigned char 
  3734 ;;  i               1   14[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3744 ;;      Params:         0       0       0       0
  3745 ;;      Locals:         0       3       0       0
  3746 ;;      Temps:          0       2       0       0
  3747 ;;      Totals:         0       5       0       0
  3748 ;;Total ram usage:        5 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    4
  3751 ;; This function calls:
  3752 ;;		_Tetris_ApplyPlayerToTable
  3753 ;;		_Tetris_PlayerOverlapsEnvironment
  3754 ;;		_Tetris_PlayerTouchingRightBound
  3755 ;;		_Tetris_RemovePlayerFromTable
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _Tetris_MovePlayerRight
  3763  0489                     _Tetris_MovePlayerRight:	
  3764                           
  3765                           ;incstack = 0
  3766                           ; Regs used in _Tetris_MovePlayerRight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  3767                           ;Tetris_MovePlayerRight@game stored from wreg
  3768  0489  1283               	bcf	3,5	;RP0=0, select bank0
  3769  048A  1303               	bcf	3,6	;RP1=0, select bank0
  3770  048B  00B0               	movwf	Tetris_MovePlayerRight@game
  3771                           
  3772                           ;../Tetris/Tetris.c: 424: void Tetris_MovePlayerRight(Tetris_Game *game);../Tetris/Tetri
      +                          s.c: 425: {;../Tetris/Tetris.c: 426:  if (Tetris_PlayerTouchingRightBound(&game->player)
      +                          )
  3773  048C  0830               	movf	Tetris_MovePlayerRight@game,w
  3774  048D  3E30               	addlw	48
  3775  048E  158A  2718  118A   	fcall	_Tetris_PlayerTouchingRightBound
  3776  0491  3A00               	xorlw	0
  3777  0492  1D03               	btfss	3,2
  3778  0493  0008               	return
  3779                           
  3780                           ;../Tetris/Tetris.c: 429:  Tetris_RemovePlayerFromTable(game);
  3781  0494  1283               	bcf	3,5	;RP0=0, select bank0
  3782  0495  1303               	bcf	3,6	;RP1=0, select bank0
  3783  0496  0830               	movf	Tetris_MovePlayerRight@game,w
  3784  0497  118A  2754  118A   	fcall	_Tetris_RemovePlayerFromTable
  3785                           
  3786                           ;../Tetris/Tetris.c: 431:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  3787  049A  1283               	bcf	3,5	;RP0=0, select bank0
  3788  049B  1303               	bcf	3,6	;RP1=0, select bank0
  3789  049C  01AE               	clrf	Tetris_MovePlayerRight@i
  3790  049D                     l2403:	
  3791                           
  3792                           ;../Tetris/Tetris.c: 432:   game->player.unitBits[i] >>= 1;
  3793  049D  082E               	movf	Tetris_MovePlayerRight@i,w
  3794  049E  00AC               	movwf	??_Tetris_MovePlayerRight
  3795  049F  072C               	addwf	??_Tetris_MovePlayerRight,w
  3796  04A0  0730               	addwf	Tetris_MovePlayerRight@game,w
  3797  04A1  00AD               	movwf	??_Tetris_MovePlayerRight+1
  3798  04A2  082D               	movf	??_Tetris_MovePlayerRight+1,w
  3799  04A3  3E34               	addlw	52
  3800  04A4  0084               	movwf	4
  3801  04A5  0A84               	incf	4,f
  3802  04A6  1003               	clrc
  3803  04A7  1383               	bcf	3,7	;select IRP bank0
  3804  04A8  0C80               	rrf	0,f
  3805  04A9  0384               	decf	4,f
  3806  04AA  0C80               	rrf	0,f
  3807  04AB  3001               	movlw	1
  3808  04AC  00AC               	movwf	??_Tetris_MovePlayerRight
  3809  04AD  082C               	movf	??_Tetris_MovePlayerRight,w
  3810  04AE  07AE               	addwf	Tetris_MovePlayerRight@i,f
  3811  04AF  3004               	movlw	4
  3812  04B0  022E               	subwf	Tetris_MovePlayerRight@i,w
  3813  04B1  1C03               	skipc
  3814  04B2  2C9D               	goto	l2403
  3815                           
  3816                           ;../Tetris/Tetris.c: 434:  if (Tetris_PlayerOverlapsEnvironment(game))
  3817  04B3  0830               	movf	Tetris_MovePlayerRight@game,w
  3818  04B4  118A  26DC  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  3819  04B7  3A00               	xorlw	0
  3820  04B8  1903               	skipnz
  3821  04B9  2CD4               	goto	l2423
  3822                           
  3823                           ;../Tetris/Tetris.c: 435:  {;../Tetris/Tetris.c: 436:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  3824  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  3825  04BB  1303               	bcf	3,6	;RP1=0, select bank0
  3826  04BC  01AF               	clrf	Tetris_MovePlayerRight@i_452
  3827  04BD                     l2417:	
  3828                           
  3829                           ;../Tetris/Tetris.c: 437:    game->player.unitBits[i] <<= 1;
  3830  04BD  082F               	movf	Tetris_MovePlayerRight@i_452,w
  3831  04BE  00AC               	movwf	??_Tetris_MovePlayerRight
  3832  04BF  072C               	addwf	??_Tetris_MovePlayerRight,w
  3833  04C0  0730               	addwf	Tetris_MovePlayerRight@game,w
  3834  04C1  00AD               	movwf	??_Tetris_MovePlayerRight+1
  3835  04C2  082D               	movf	??_Tetris_MovePlayerRight+1,w
  3836  04C3  3E34               	addlw	52
  3837  04C4  0084               	movwf	4
  3838  04C5  1003               	clrc
  3839  04C6  1383               	bcf	3,7	;select IRP bank0
  3840  04C7  0D80               	rlf	0,f
  3841  04C8  0A84               	incf	4,f
  3842  04C9  0D80               	rlf	0,f
  3843  04CA  0384               	decf	4,f
  3844  04CB  3001               	movlw	1
  3845  04CC  00AC               	movwf	??_Tetris_MovePlayerRight
  3846  04CD  082C               	movf	??_Tetris_MovePlayerRight,w
  3847  04CE  07AF               	addwf	Tetris_MovePlayerRight@i_452,f
  3848  04CF  3004               	movlw	4
  3849  04D0  022F               	subwf	Tetris_MovePlayerRight@i_452,w
  3850  04D1  1803               	btfsc	3,0
  3851  04D2  2CDE               	goto	l2425
  3852  04D3  2CBD               	goto	l2417
  3853  04D4                     l2423:	
  3854                           
  3855                           ;../Tetris/Tetris.c: 440:  {;../Tetris/Tetris.c: 441:   ++game->player.position.x;
  3856  04D4  3001               	movlw	1
  3857  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  3858  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  3859  04D7  00AC               	movwf	??_Tetris_MovePlayerRight
  3860  04D8  0830               	movf	Tetris_MovePlayerRight@game,w
  3861  04D9  3E30               	addlw	48
  3862  04DA  0084               	movwf	4
  3863  04DB  082C               	movf	??_Tetris_MovePlayerRight,w
  3864  04DC  1383               	bcf	3,7	;select IRP bank0
  3865  04DD  0780               	addwf	0,f
  3866  04DE                     l2425:	
  3867                           
  3868                           ;../Tetris/Tetris.c: 444:  Tetris_ApplyPlayerToTable(game);
  3869  04DE  0830               	movf	Tetris_MovePlayerRight@game,w
  3870  04DF  118A  2425         	fcall	_Tetris_ApplyPlayerToTable
  3871  04E1  0008               	return
  3872  04E2                     __end_of_Tetris_MovePlayerRight:	
  3873                           
  3874                           	psect	text20
  3875  0F18                     __ptext20:	
  3876 ;; *************** function _Tetris_PlayerTouchingRightBound *****************
  3877 ;; Defined at:
  3878 ;;		line 208 in file "../Tetris/Tetris.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  player          1    wreg     PTR struct .
  3881 ;;		 -> main@tetrisGame(63), 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  player          1    7[COMMON] PTR struct .
  3884 ;;		 -> main@tetrisGame(63), 
  3885 ;;  i               1    8[COMMON] unsigned char 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  1    wreg      unsigned char 
  3888 ;; Registers used:
  3889 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3895 ;;      Params:         0       0       0       0
  3896 ;;      Locals:         2       0       0       0
  3897 ;;      Temps:          4       0       0       0
  3898 ;;      Totals:         6       0       0       0
  3899 ;;Total ram usage:        6 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    1
  3902 ;; This function calls:
  3903 ;;		Nothing
  3904 ;; This function is called by:
  3905 ;;		_Tetris_MovePlayerRight
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           
  3910                           ;psect for function _Tetris_PlayerTouchingRightBound
  3911  0F18                     _Tetris_PlayerTouchingRightBound:	
  3912                           
  3913                           ;incstack = 0
  3914                           ; Regs used in _Tetris_PlayerTouchingRightBound: [wreg-fsr0h+status,2+status,0]
  3915                           ;Tetris_PlayerTouchingRightBound@player stored from wreg
  3916  0F18  00F7               	movwf	Tetris_PlayerTouchingRightBound@player
  3917                           
  3918                           ;../Tetris/Tetris.c: 208: static uint8_t Tetris_PlayerTouchingRightBound(Tetris_Player *
      +                          player);../Tetris/Tetris.c: 209: {;../Tetris/Tetris.c: 210:  for (uint8_t i = 0; i < TET
      +                          RIS_UNIT_HEIGHT; ++i)
  3919  0F19  01F8               	clrf	Tetris_PlayerTouchingRightBound@i
  3920  0F1A                     l2153:	
  3921                           
  3922                           ;../Tetris/Tetris.c: 211:  {;../Tetris/Tetris.c: 212:   if (player->unitBits[i] & 0x0001
      +                          )
  3923  0F1A  0878               	movf	Tetris_PlayerTouchingRightBound@i,w
  3924  0F1B  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  3925  0F1C  0773               	addwf	??_Tetris_PlayerTouchingRightBound,w
  3926  0F1D  0777               	addwf	Tetris_PlayerTouchingRightBound@player,w
  3927  0F1E  00F4               	movwf	??_Tetris_PlayerTouchingRightBound+1
  3928  0F1F  0874               	movf	??_Tetris_PlayerTouchingRightBound+1,w
  3929  0F20  3E04               	addlw	4
  3930  0F21  0084               	movwf	4
  3931  0F22  1383               	bcf	3,7	;select IRP bank0
  3932  0F23  0800               	movf	0,w
  3933  0F24  00F5               	movwf	??_Tetris_PlayerTouchingRightBound+2
  3934  0F25  0A84               	incf	4,f
  3935  0F26  0800               	movf	0,w
  3936  0F27  00F6               	movwf	??_Tetris_PlayerTouchingRightBound+3
  3937  0F28  1C75               	btfss	??_Tetris_PlayerTouchingRightBound+2,0
  3938  0F29  2F2C               	goto	l2159
  3939                           
  3940                           ;../Tetris/Tetris.c: 213:    return 1;
  3941  0F2A  3001               	movlw	1
  3942  0F2B  0008               	return
  3943  0F2C                     l2159:	
  3944                           
  3945                           ;../Tetris/Tetris.c: 214:  }
  3946  0F2C  3001               	movlw	1
  3947  0F2D  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  3948  0F2E  0873               	movf	??_Tetris_PlayerTouchingRightBound,w
  3949  0F2F  07F8               	addwf	Tetris_PlayerTouchingRightBound@i,f
  3950  0F30  3004               	movlw	4
  3951  0F31  0278               	subwf	Tetris_PlayerTouchingRightBound@i,w
  3952  0F32  1C03               	skipc
  3953  0F33  2F1A               	goto	l2153
  3954                           
  3955                           ;../Tetris/Tetris.c: 216:  return 0;
  3956  0F34  3000               	movlw	0
  3957  0F35  0008               	return
  3958  0F36                     __end_of_Tetris_PlayerTouchingRightBound:	
  3959                           
  3960                           	psect	text21
  3961  04E2                     __ptext21:	
  3962 ;; *************** function _Tetris_MovePlayerLeft *****************
  3963 ;; Defined at:
  3964 ;;		line 401 in file "../Tetris/Tetris.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  game            1    wreg     PTR struct .
  3967 ;;		 -> main@tetrisGame(63), 
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  game            1   16[BANK0 ] PTR struct .
  3970 ;;		 -> main@tetrisGame(63), 
  3971 ;;  i               1   15[BANK0 ] unsigned char 
  3972 ;;  i               1   14[BANK0 ] unsigned char 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  1    wreg      void 
  3975 ;; Registers used:
  3976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3982 ;;      Params:         0       0       0       0
  3983 ;;      Locals:         0       3       0       0
  3984 ;;      Temps:          0       2       0       0
  3985 ;;      Totals:         0       5       0       0
  3986 ;;Total ram usage:        5 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    4
  3989 ;; This function calls:
  3990 ;;		_Tetris_ApplyPlayerToTable
  3991 ;;		_Tetris_PlayerOverlapsEnvironment
  3992 ;;		_Tetris_PlayerTouchingLeftBound
  3993 ;;		_Tetris_RemovePlayerFromTable
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _Tetris_MovePlayerLeft
  4001  04E2                     _Tetris_MovePlayerLeft:	
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _Tetris_MovePlayerLeft: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  4005                           ;Tetris_MovePlayerLeft@game stored from wreg
  4006  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  4007  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  4008  04E4  00B0               	movwf	Tetris_MovePlayerLeft@game
  4009                           
  4010                           ;../Tetris/Tetris.c: 401: void Tetris_MovePlayerLeft(Tetris_Game *game);../Tetris/Tetris
      +                          .c: 402: {;../Tetris/Tetris.c: 403:  if (Tetris_PlayerTouchingLeftBound(&game->player))
  4011  04E5  0830               	movf	Tetris_MovePlayerLeft@game,w
  4012  04E6  3E30               	addlw	48
  4013  04E7  158A  26FA  118A   	fcall	_Tetris_PlayerTouchingLeftBound
  4014  04EA  3A00               	xorlw	0
  4015  04EB  1D03               	btfss	3,2
  4016  04EC  0008               	return
  4017                           
  4018                           ;../Tetris/Tetris.c: 406:  Tetris_RemovePlayerFromTable(game);
  4019  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  4020  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  4021  04EF  0830               	movf	Tetris_MovePlayerLeft@game,w
  4022  04F0  118A  2754  118A   	fcall	_Tetris_RemovePlayerFromTable
  4023                           
  4024                           ;../Tetris/Tetris.c: 408:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4025  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  4026  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  4027  04F5  01AE               	clrf	Tetris_MovePlayerLeft@i
  4028  04F6                     l2367:	
  4029                           
  4030                           ;../Tetris/Tetris.c: 409:   game->player.unitBits[i] <<= 1;
  4031  04F6  082E               	movf	Tetris_MovePlayerLeft@i,w
  4032  04F7  00AC               	movwf	??_Tetris_MovePlayerLeft
  4033  04F8  072C               	addwf	??_Tetris_MovePlayerLeft,w
  4034  04F9  0730               	addwf	Tetris_MovePlayerLeft@game,w
  4035  04FA  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  4036  04FB  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  4037  04FC  3E34               	addlw	52
  4038  04FD  0084               	movwf	4
  4039  04FE  1003               	clrc
  4040  04FF  1383               	bcf	3,7	;select IRP bank0
  4041  0500  0D80               	rlf	0,f
  4042  0501  0A84               	incf	4,f
  4043  0502  0D80               	rlf	0,f
  4044  0503  0384               	decf	4,f
  4045  0504  3001               	movlw	1
  4046  0505  00AC               	movwf	??_Tetris_MovePlayerLeft
  4047  0506  082C               	movf	??_Tetris_MovePlayerLeft,w
  4048  0507  07AE               	addwf	Tetris_MovePlayerLeft@i,f
  4049  0508  3004               	movlw	4
  4050  0509  022E               	subwf	Tetris_MovePlayerLeft@i,w
  4051  050A  1C03               	skipc
  4052  050B  2CF6               	goto	l2367
  4053                           
  4054                           ;../Tetris/Tetris.c: 411:  if (Tetris_PlayerOverlapsEnvironment(game))
  4055  050C  0830               	movf	Tetris_MovePlayerLeft@game,w
  4056  050D  118A  26DC  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  4057  0510  3A00               	xorlw	0
  4058  0511  1903               	skipnz
  4059  0512  2D2D               	goto	l2387
  4060                           
  4061                           ;../Tetris/Tetris.c: 412:  {;../Tetris/Tetris.c: 413:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  4062  0513  1283               	bcf	3,5	;RP0=0, select bank0
  4063  0514  1303               	bcf	3,6	;RP1=0, select bank0
  4064  0515  01AF               	clrf	Tetris_MovePlayerLeft@i_438
  4065  0516                     l2381:	
  4066                           
  4067                           ;../Tetris/Tetris.c: 414:    game->player.unitBits[i] >>= 1;
  4068  0516  082F               	movf	Tetris_MovePlayerLeft@i_438,w
  4069  0517  00AC               	movwf	??_Tetris_MovePlayerLeft
  4070  0518  072C               	addwf	??_Tetris_MovePlayerLeft,w
  4071  0519  0730               	addwf	Tetris_MovePlayerLeft@game,w
  4072  051A  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  4073  051B  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  4074  051C  3E34               	addlw	52
  4075  051D  0084               	movwf	4
  4076  051E  0A84               	incf	4,f
  4077  051F  1003               	clrc
  4078  0520  1383               	bcf	3,7	;select IRP bank0
  4079  0521  0C80               	rrf	0,f
  4080  0522  0384               	decf	4,f
  4081  0523  0C80               	rrf	0,f
  4082  0524  3001               	movlw	1
  4083  0525  00AC               	movwf	??_Tetris_MovePlayerLeft
  4084  0526  082C               	movf	??_Tetris_MovePlayerLeft,w
  4085  0527  07AF               	addwf	Tetris_MovePlayerLeft@i_438,f
  4086  0528  3004               	movlw	4
  4087  0529  022F               	subwf	Tetris_MovePlayerLeft@i_438,w
  4088  052A  1803               	btfsc	3,0
  4089  052B  2D35               	goto	l2389
  4090  052C  2D16               	goto	l2381
  4091  052D                     l2387:	
  4092                           
  4093                           ;../Tetris/Tetris.c: 417:  {;../Tetris/Tetris.c: 418:   --game->player.position.x;
  4094  052D  1283               	bcf	3,5	;RP0=0, select bank0
  4095  052E  1303               	bcf	3,6	;RP1=0, select bank0
  4096  052F  0830               	movf	Tetris_MovePlayerLeft@game,w
  4097  0530  3E30               	addlw	48
  4098  0531  0084               	movwf	4
  4099  0532  3001               	movlw	1
  4100  0533  1383               	bcf	3,7	;select IRP bank0
  4101  0534  0280               	subwf	0,f
  4102  0535                     l2389:	
  4103                           
  4104                           ;../Tetris/Tetris.c: 421:  Tetris_ApplyPlayerToTable(game);
  4105  0535  0830               	movf	Tetris_MovePlayerLeft@game,w
  4106  0536  118A  2425         	fcall	_Tetris_ApplyPlayerToTable
  4107  0538  0008               	return
  4108  0539                     __end_of_Tetris_MovePlayerLeft:	
  4109                           
  4110                           	psect	text22
  4111  0754                     __ptext22:	
  4112 ;; *************** function _Tetris_RemovePlayerFromTable *****************
  4113 ;; Defined at:
  4114 ;;		line 219 in file "../Tetris/Tetris.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  game            1    wreg     PTR struct .
  4117 ;;		 -> main@tetrisGame(63), 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;  game            1    7[COMMON] PTR struct .
  4120 ;;		 -> main@tetrisGame(63), 
  4121 ;;  i               1    8[COMMON] unsigned char 
  4122 ;;  start           1    6[COMMON] unsigned char 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4132 ;;      Params:         0       0       0       0
  4133 ;;      Locals:         3       0       0       0
  4134 ;;      Temps:          0       8       0       0
  4135 ;;      Totals:         3       8       0       0
  4136 ;;Total ram usage:       11 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    3
  4139 ;; This function calls:
  4140 ;;		_Tetris_PlayerTopmostY
  4141 ;; This function is called by:
  4142 ;;		_Tetris_MovePlayerDown
  4143 ;;		_Tetris_MovePlayerLeft
  4144 ;;		_Tetris_MovePlayerRight
  4145 ;;		_Tetris_RotatePlayer
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           
  4150                           ;psect for function _Tetris_RemovePlayerFromTable
  4151  0754                     _Tetris_RemovePlayerFromTable:	
  4152                           
  4153                           ;incstack = 0
  4154                           ; Regs used in _Tetris_RemovePlayerFromTable: [wreg-fsr0h+status,2+status,0+btemp+1+pcla
      +                          th+cstack]
  4155                           ;Tetris_RemovePlayerFromTable@game stored from wreg
  4156  0754  00F7               	movwf	Tetris_RemovePlayerFromTable@game
  4157                           
  4158                           ;../Tetris/Tetris.c: 219: static void Tetris_RemovePlayerFromTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 220: {;../Tetris/Tetris.c: 221:  uint8_t start = Tetris_PlayerTopmostY
      +                          (&game->player);
  4159  0755  0877               	movf	Tetris_RemovePlayerFromTable@game,w
  4160  0756  3E30               	addlw	48
  4161  0757  118A  27EB  118A   	fcall	_Tetris_PlayerTopmostY
  4162  075A  1283               	bcf	3,5	;RP0=0, select bank0
  4163  075B  1303               	bcf	3,6	;RP1=0, select bank0
  4164  075C  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4165  075D  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  4166  075E  00F6               	movwf	Tetris_RemovePlayerFromTable@start
  4167                           
  4168                           ;../Tetris/Tetris.c: 222:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4169  075F  01F8               	clrf	Tetris_RemovePlayerFromTable@i
  4170  0760                     l1945:	
  4171                           
  4172                           ;../Tetris/Tetris.c: 223:  {;../Tetris/Tetris.c: 224:   game->table[start + i] &= ~game-
      +                          >player.unitBits[i];
  4173  0760  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  4174  0761  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4175  0762  0720               	addwf	??_Tetris_RemovePlayerFromTable,w
  4176  0763  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  4177  0764  00A1               	movwf	??_Tetris_RemovePlayerFromTable+1
  4178  0765  0821               	movf	??_Tetris_RemovePlayerFromTable+1,w
  4179  0766  3E34               	addlw	52
  4180  0767  0084               	movwf	4
  4181  0768  1383               	bcf	3,7	;select IRP bank0
  4182  0769  0800               	movf	0,w
  4183  076A  00A2               	movwf	??_Tetris_RemovePlayerFromTable+2
  4184  076B  0A84               	incf	4,f
  4185  076C  0800               	movf	0,w
  4186  076D  00A3               	movwf	??_Tetris_RemovePlayerFromTable+3
  4187  076E  09A2               	comf	??_Tetris_RemovePlayerFromTable+2,f
  4188  076F  09A3               	comf	??_Tetris_RemovePlayerFromTable+3,f
  4189  0770  0876               	movf	Tetris_RemovePlayerFromTable@start,w
  4190  0771  00A4               	movwf	??_Tetris_RemovePlayerFromTable+4
  4191  0772  0724               	addwf	??_Tetris_RemovePlayerFromTable+4,w
  4192  0773  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  4193  0774  00A5               	movwf	??_Tetris_RemovePlayerFromTable+5
  4194  0775  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  4195  0776  00A6               	movwf	??_Tetris_RemovePlayerFromTable+6
  4196  0777  0726               	addwf	??_Tetris_RemovePlayerFromTable+6,w
  4197  0778  0725               	addwf	??_Tetris_RemovePlayerFromTable+5,w
  4198  0779  00A7               	movwf	??_Tetris_RemovePlayerFromTable+7
  4199  077A  0827               	movf	??_Tetris_RemovePlayerFromTable+7,w
  4200  077B  0084               	movwf	4
  4201  077C  0822               	movf	??_Tetris_RemovePlayerFromTable+2,w
  4202  077D  0580               	andwf	0,f
  4203  077E  0A84               	incf	4,f
  4204  077F  0823               	movf	??_Tetris_RemovePlayerFromTable+3,w
  4205  0780  0580               	andwf	0,f
  4206                           
  4207                           ;../Tetris/Tetris.c: 225:  }
  4208  0781  3001               	movlw	1
  4209  0782  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4210  0783  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  4211  0784  07F8               	addwf	Tetris_RemovePlayerFromTable@i,f
  4212  0785  3004               	movlw	4
  4213  0786  0278               	subwf	Tetris_RemovePlayerFromTable@i,w
  4214  0787  1803               	btfsc	3,0
  4215  0788  0008               	return
  4216  0789  2F60               	goto	l1945
  4217  078A                     __end_of_Tetris_RemovePlayerFromTable:	
  4218                           
  4219                           	psect	text23
  4220  0EFA                     __ptext23:	
  4221 ;; *************** function _Tetris_PlayerTouchingLeftBound *****************
  4222 ;; Defined at:
  4223 ;;		line 197 in file "../Tetris/Tetris.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  player          1    wreg     PTR struct .
  4226 ;;		 -> main@tetrisGame(63), 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  player          1    7[COMMON] PTR struct .
  4229 ;;		 -> main@tetrisGame(63), 
  4230 ;;  i               1    8[COMMON] unsigned char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      unsigned char 
  4233 ;; Registers used:
  4234 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4240 ;;      Params:         0       0       0       0
  4241 ;;      Locals:         2       0       0       0
  4242 ;;      Temps:          4       0       0       0
  4243 ;;      Totals:         6       0       0       0
  4244 ;;Total ram usage:        6 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    1
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_Tetris_MovePlayerLeft
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _Tetris_PlayerTouchingLeftBound
  4256  0EFA                     _Tetris_PlayerTouchingLeftBound:	
  4257                           
  4258                           ;incstack = 0
  4259                           ; Regs used in _Tetris_PlayerTouchingLeftBound: [wreg-fsr0h+status,2+status,0]
  4260                           ;Tetris_PlayerTouchingLeftBound@player stored from wreg
  4261  0EFA  00F7               	movwf	Tetris_PlayerTouchingLeftBound@player
  4262                           
  4263                           ;../Tetris/Tetris.c: 197: static uint8_t Tetris_PlayerTouchingLeftBound(Tetris_Player *p
      +                          layer);../Tetris/Tetris.c: 198: {;../Tetris/Tetris.c: 199:  for (uint8_t i = 0; i < TETR
      +                          IS_UNIT_HEIGHT; ++i)
  4264  0EFB  01F8               	clrf	Tetris_PlayerTouchingLeftBound@i
  4265  0EFC                     l2133:	
  4266                           
  4267                           ;../Tetris/Tetris.c: 200:  {;../Tetris/Tetris.c: 201:   if (player->unitBits[i] & 0x8000
      +                          )
  4268  0EFC  0878               	movf	Tetris_PlayerTouchingLeftBound@i,w
  4269  0EFD  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  4270  0EFE  0773               	addwf	??_Tetris_PlayerTouchingLeftBound,w
  4271  0EFF  0777               	addwf	Tetris_PlayerTouchingLeftBound@player,w
  4272  0F00  00F4               	movwf	??_Tetris_PlayerTouchingLeftBound+1
  4273  0F01  0874               	movf	??_Tetris_PlayerTouchingLeftBound+1,w
  4274  0F02  3E04               	addlw	4
  4275  0F03  0084               	movwf	4
  4276  0F04  1383               	bcf	3,7	;select IRP bank0
  4277  0F05  0800               	movf	0,w
  4278  0F06  00F5               	movwf	??_Tetris_PlayerTouchingLeftBound+2
  4279  0F07  0A84               	incf	4,f
  4280  0F08  0800               	movf	0,w
  4281  0F09  00F6               	movwf	??_Tetris_PlayerTouchingLeftBound+3
  4282  0F0A  1FF6               	btfss	??_Tetris_PlayerTouchingLeftBound+3,7
  4283  0F0B  2F0E               	goto	l2139
  4284                           
  4285                           ;../Tetris/Tetris.c: 202:    return 1;
  4286  0F0C  3001               	movlw	1
  4287  0F0D  0008               	return
  4288  0F0E                     l2139:	
  4289                           
  4290                           ;../Tetris/Tetris.c: 203:  }
  4291  0F0E  3001               	movlw	1
  4292  0F0F  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  4293  0F10  0873               	movf	??_Tetris_PlayerTouchingLeftBound,w
  4294  0F11  07F8               	addwf	Tetris_PlayerTouchingLeftBound@i,f
  4295  0F12  3004               	movlw	4
  4296  0F13  0278               	subwf	Tetris_PlayerTouchingLeftBound@i,w
  4297  0F14  1C03               	skipc
  4298  0F15  2EFC               	goto	l2133
  4299                           
  4300                           ;../Tetris/Tetris.c: 205:  return 0;
  4301  0F16  3000               	movlw	0
  4302  0F17  0008               	return
  4303  0F18                     __end_of_Tetris_PlayerTouchingLeftBound:	
  4304                           
  4305                           	psect	text24
  4306  06DC                     __ptext24:	
  4307 ;; *************** function _Tetris_PlayerOverlapsEnvironment *****************
  4308 ;; Defined at:
  4309 ;;		line 185 in file "../Tetris/Tetris.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  game            1    wreg     PTR struct .
  4312 ;;		 -> main@tetrisGame(63), 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  game            1    8[COMMON] PTR struct .
  4315 ;;		 -> main@tetrisGame(63), 
  4316 ;;  i               1    7[COMMON] unsigned char 
  4317 ;;  start           1    6[COMMON] unsigned char 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      unsigned char 
  4320 ;; Registers used:
  4321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4327 ;;      Params:         0       0       0       0
  4328 ;;      Locals:         3       0       0       0
  4329 ;;      Temps:          0      12       0       0
  4330 ;;      Totals:         3      12       0       0
  4331 ;;Total ram usage:       15 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    3
  4334 ;; This function calls:
  4335 ;;		_Tetris_PlayerTopmostY
  4336 ;; This function is called by:
  4337 ;;		_Tetris_UpdateGame
  4338 ;;		_Tetris_MovePlayerDown
  4339 ;;		_Tetris_MovePlayerLeft
  4340 ;;		_Tetris_MovePlayerRight
  4341 ;;		_Tetris_RotatePlayer
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           
  4346                           ;psect for function _Tetris_PlayerOverlapsEnvironment
  4347  06DC                     _Tetris_PlayerOverlapsEnvironment:	
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in _Tetris_PlayerOverlapsEnvironment: [wreg-fsr0h+status,2+status,0+btemp+1+
      +                          pclath+cstack]
  4351                           ;Tetris_PlayerOverlapsEnvironment@game stored from wreg
  4352  06DC  00F8               	movwf	Tetris_PlayerOverlapsEnvironment@game
  4353                           
  4354                           ;../Tetris/Tetris.c: 185: static uint8_t Tetris_PlayerOverlapsEnvironment(Tetris_Game *g
      +                          ame);../Tetris/Tetris.c: 186: {;../Tetris/Tetris.c: 187:  uint8_t start = Tetris_PlayerT
      +                          opmostY(&game->player);
  4355  06DD  0878               	movf	Tetris_PlayerOverlapsEnvironment@game,w
  4356  06DE  3E30               	addlw	48
  4357  06DF  118A  27EB  118A   	fcall	_Tetris_PlayerTopmostY
  4358  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  4359  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  4360  06E4  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  4361  06E5  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  4362  06E6  00F6               	movwf	Tetris_PlayerOverlapsEnvironment@start
  4363                           
  4364                           ;../Tetris/Tetris.c: 188:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4365  06E7  01F7               	clrf	Tetris_PlayerOverlapsEnvironment@i
  4366  06E8                     l1923:	
  4367                           
  4368                           ;../Tetris/Tetris.c: 189:  {;../Tetris/Tetris.c: 190:   if (game->player.unitBits[i] & g
      +                          ame->table[i + start])
  4369  06E8  0877               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  4370  06E9  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  4371  06EA  0720               	addwf	??_Tetris_PlayerOverlapsEnvironment,w
  4372  06EB  0778               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  4373  06EC  00A1               	movwf	??_Tetris_PlayerOverlapsEnvironment+1
  4374  06ED  0876               	movf	Tetris_PlayerOverlapsEnvironment@start,w
  4375  06EE  00A2               	movwf	??_Tetris_PlayerOverlapsEnvironment+2
  4376  06EF  0722               	addwf	??_Tetris_PlayerOverlapsEnvironment+2,w
  4377  06F0  0721               	addwf	??_Tetris_PlayerOverlapsEnvironment+1,w
  4378  06F1  00A3               	movwf	??_Tetris_PlayerOverlapsEnvironment+3
  4379  06F2  0823               	movf	??_Tetris_PlayerOverlapsEnvironment+3,w
  4380  06F3  0084               	movwf	4
  4381  06F4  1383               	bcf	3,7	;select IRP bank0
  4382  06F5  0800               	movf	0,w
  4383  06F6  00A4               	movwf	??_Tetris_PlayerOverlapsEnvironment+4
  4384  06F7  0A84               	incf	4,f
  4385  06F8  0800               	movf	0,w
  4386  06F9  00A5               	movwf	??_Tetris_PlayerOverlapsEnvironment+5
  4387  06FA  0877               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  4388  06FB  00A6               	movwf	??_Tetris_PlayerOverlapsEnvironment+6
  4389  06FC  0726               	addwf	??_Tetris_PlayerOverlapsEnvironment+6,w
  4390  06FD  0778               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  4391  06FE  00A7               	movwf	??_Tetris_PlayerOverlapsEnvironment+7
  4392  06FF  0827               	movf	??_Tetris_PlayerOverlapsEnvironment+7,w
  4393  0700  3E34               	addlw	52
  4394  0701  0084               	movwf	4
  4395  0702  0800               	movf	0,w
  4396  0703  00A8               	movwf	??_Tetris_PlayerOverlapsEnvironment+8
  4397  0704  0A84               	incf	4,f
  4398  0705  0800               	movf	0,w
  4399  0706  00A9               	movwf	??_Tetris_PlayerOverlapsEnvironment+9
  4400  0707  0824               	movf	??_Tetris_PlayerOverlapsEnvironment+4,w
  4401  0708  0528               	andwf	??_Tetris_PlayerOverlapsEnvironment+8,w
  4402  0709  00AA               	movwf	??_Tetris_PlayerOverlapsEnvironment+10
  4403  070A  0825               	movf	??_Tetris_PlayerOverlapsEnvironment+5,w
  4404  070B  0529               	andwf	??_Tetris_PlayerOverlapsEnvironment+9,w
  4405  070C  00AB               	movwf	??_Tetris_PlayerOverlapsEnvironment+11
  4406  070D  082A               	movf	??_Tetris_PlayerOverlapsEnvironment+10,w
  4407  070E  042B               	iorwf	??_Tetris_PlayerOverlapsEnvironment+11,w
  4408  070F  1903               	btfsc	3,2
  4409  0710  2F13               	goto	l1929
  4410                           
  4411                           ;../Tetris/Tetris.c: 191:    return 1;
  4412  0711  3001               	movlw	1
  4413  0712  0008               	return
  4414  0713                     l1929:	
  4415                           
  4416                           ;../Tetris/Tetris.c: 192:  }
  4417  0713  3001               	movlw	1
  4418  0714  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  4419  0715  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  4420  0716  07F7               	addwf	Tetris_PlayerOverlapsEnvironment@i,f
  4421  0717  3004               	movlw	4
  4422  0718  0277               	subwf	Tetris_PlayerOverlapsEnvironment@i,w
  4423  0719  1C03               	skipc
  4424  071A  2EE8               	goto	l1923
  4425                           
  4426                           ;../Tetris/Tetris.c: 194:  return 0;
  4427  071B  3000               	movlw	0
  4428  071C  0008               	return
  4429  071D                     __end_of_Tetris_PlayerOverlapsEnvironment:	
  4430                           
  4431                           	psect	text25
  4432  0425                     __ptext25:	
  4433 ;; *************** function _Tetris_ApplyPlayerToTable *****************
  4434 ;; Defined at:
  4435 ;;		line 228 in file "../Tetris/Tetris.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;  game            1    wreg     PTR struct .
  4438 ;;		 -> main@tetrisGame(63), 
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  game            1    9[COMMON] PTR struct .
  4441 ;;		 -> main@tetrisGame(63), 
  4442 ;;  i               1    8[COMMON] unsigned char 
  4443 ;;  i               1    7[COMMON] unsigned char 
  4444 ;;  start           1    6[COMMON] unsigned char 
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      unsigned char 
  4447 ;; Registers used:
  4448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4454 ;;      Params:         0       0       0       0
  4455 ;;      Locals:         4       0       0       0
  4456 ;;      Temps:          0       8       0       0
  4457 ;;      Totals:         4       8       0       0
  4458 ;;Total ram usage:       12 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    3
  4461 ;; This function calls:
  4462 ;;		_Tetris_PlayerTopmostY
  4463 ;; This function is called by:
  4464 ;;		_Tetris_ResetGame
  4465 ;;		_Tetris_UpdateGame
  4466 ;;		_Tetris_MovePlayerDown
  4467 ;;		_Tetris_MovePlayerLeft
  4468 ;;		_Tetris_MovePlayerRight
  4469 ;;		_Tetris_RotatePlayer
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           
  4474                           ;psect for function _Tetris_ApplyPlayerToTable
  4475  0425                     _Tetris_ApplyPlayerToTable:	
  4476                           
  4477                           ;incstack = 0
  4478                           ; Regs used in _Tetris_ApplyPlayerToTable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  4479                           ;Tetris_ApplyPlayerToTable@game stored from wreg
  4480  0425  00F9               	movwf	Tetris_ApplyPlayerToTable@game
  4481                           
  4482                           ;../Tetris/Tetris.c: 228: static uint8_t Tetris_ApplyPlayerToTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 229: {;../Tetris/Tetris.c: 230:  uint8_t start = Tetris_PlayerTopmostY
      +                          (&game->player);
  4483  0426  0879               	movf	Tetris_ApplyPlayerToTable@game,w
  4484  0427  3E30               	addlw	48
  4485  0428  118A  27EB  118A   	fcall	_Tetris_PlayerTopmostY
  4486  042B  1283               	bcf	3,5	;RP0=0, select bank0
  4487  042C  1303               	bcf	3,6	;RP1=0, select bank0
  4488  042D  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  4489  042E  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  4490  042F  00F6               	movwf	Tetris_ApplyPlayerToTable@start
  4491                           
  4492                           ;../Tetris/Tetris.c: 232:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4493  0430  01F7               	clrf	Tetris_ApplyPlayerToTable@i
  4494  0431                     l1959:	
  4495                           
  4496                           ;../Tetris/Tetris.c: 233:  {;../Tetris/Tetris.c: 234:   if (game->player.unitBits[i] == 
      +                          0)
  4497  0431  0877               	movf	Tetris_ApplyPlayerToTable@i,w
  4498  0432  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  4499  0433  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  4500  0434  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  4501  0435  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  4502  0436  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  4503  0437  3E34               	addlw	52
  4504  0438  0084               	movwf	4
  4505  0439  1383               	bcf	3,7	;select IRP bank0
  4506  043A  0800               	movf	0,w
  4507  043B  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  4508  043C  0A84               	incf	4,f
  4509  043D  0800               	movf	0,w
  4510  043E  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  4511  043F  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  4512  0440  0423               	iorwf	??_Tetris_ApplyPlayerToTable+3,w
  4513  0441  1903               	btfsc	3,2
  4514  0442  2C55               	goto	l1969
  4515                           
  4516                           ;../Tetris/Tetris.c: 237:   if (start + i >= TETRIS_TABLE_HEIGHT)
  4517  0443  0876               	movf	Tetris_ApplyPlayerToTable@start,w
  4518  0444  0777               	addwf	Tetris_ApplyPlayerToTable@i,w
  4519  0445  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  4520  0446  01A1               	clrf	??_Tetris_ApplyPlayerToTable+1
  4521  0447  0DA1               	rlf	??_Tetris_ApplyPlayerToTable+1,f
  4522  0448  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  4523  0449  3A80               	xorlw	128
  4524  044A  00FF               	movwf	127
  4525  044B  3080               	movlw	128
  4526  044C  027F               	subwf	127,w
  4527  044D  1D03               	skipz
  4528  044E  2C51               	goto	u1185
  4529  044F  3018               	movlw	24
  4530  0450  0220               	subwf	??_Tetris_ApplyPlayerToTable,w
  4531  0451                     u1185:	
  4532  0451  1C03               	skipc
  4533  0452  2C55               	goto	l1969
  4534                           
  4535                           ;../Tetris/Tetris.c: 238:    return 0;
  4536  0453  3000               	movlw	0
  4537  0454  0008               	return
  4538  0455                     l1969:	
  4539  0455  3001               	movlw	1
  4540  0456  1283               	bcf	3,5	;RP0=0, select bank0
  4541  0457  1303               	bcf	3,6	;RP1=0, select bank0
  4542  0458  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  4543  0459  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  4544  045A  07F7               	addwf	Tetris_ApplyPlayerToTable@i,f
  4545  045B  3004               	movlw	4
  4546  045C  0277               	subwf	Tetris_ApplyPlayerToTable@i,w
  4547  045D  1C03               	skipc
  4548  045E  2C31               	goto	l1959
  4549                           
  4550                           ;../Tetris/Tetris.c: 241:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4551  045F  01F8               	clrf	Tetris_ApplyPlayerToTable@i_303
  4552  0460                     l1979:	
  4553                           
  4554                           ;../Tetris/Tetris.c: 242:   game->table[start + i] |= game->player.unitBits[i];
  4555  0460  0878               	movf	Tetris_ApplyPlayerToTable@i_303,w
  4556  0461  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  4557  0462  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  4558  0463  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  4559  0464  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  4560  0465  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  4561  0466  3E34               	addlw	52
  4562  0467  0084               	movwf	4
  4563  0468  1383               	bcf	3,7	;select IRP bank0
  4564  0469  0800               	movf	0,w
  4565  046A  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  4566  046B  0A84               	incf	4,f
  4567  046C  0800               	movf	0,w
  4568  046D  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  4569  046E  0876               	movf	Tetris_ApplyPlayerToTable@start,w
  4570  046F  00A4               	movwf	??_Tetris_ApplyPlayerToTable+4
  4571  0470  0724               	addwf	??_Tetris_ApplyPlayerToTable+4,w
  4572  0471  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  4573  0472  00A5               	movwf	??_Tetris_ApplyPlayerToTable+5
  4574  0473  0878               	movf	Tetris_ApplyPlayerToTable@i_303,w
  4575  0474  00A6               	movwf	??_Tetris_ApplyPlayerToTable+6
  4576  0475  0726               	addwf	??_Tetris_ApplyPlayerToTable+6,w
  4577  0476  0725               	addwf	??_Tetris_ApplyPlayerToTable+5,w
  4578  0477  00A7               	movwf	??_Tetris_ApplyPlayerToTable+7
  4579  0478  0827               	movf	??_Tetris_ApplyPlayerToTable+7,w
  4580  0479  0084               	movwf	4
  4581  047A  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  4582  047B  0480               	iorwf	0,f
  4583  047C  0A84               	incf	4,f
  4584  047D  0823               	movf	??_Tetris_ApplyPlayerToTable+3,w
  4585  047E  0480               	iorwf	0,f
  4586  047F  3001               	movlw	1
  4587  0480  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  4588  0481  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  4589  0482  07F8               	addwf	Tetris_ApplyPlayerToTable@i_303,f
  4590  0483  3004               	movlw	4
  4591  0484  0278               	subwf	Tetris_ApplyPlayerToTable@i_303,w
  4592  0485  1C03               	skipc
  4593  0486  2C60               	goto	l1979
  4594                           
  4595                           ;../Tetris/Tetris.c: 244:  return 1;
  4596  0487  3001               	movlw	1
  4597  0488  0008               	return
  4598  0489                     __end_of_Tetris_ApplyPlayerToTable:	
  4599                           
  4600                           	psect	text26
  4601  07EB                     __ptext26:	
  4602 ;; *************** function _Tetris_PlayerTopmostY *****************
  4603 ;; Defined at:
  4604 ;;		line 180 in file "../Tetris/Tetris.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  player          1    wreg     PTR struct .
  4607 ;;		 -> main@tetrisGame(63), 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;  player          1    5[COMMON] PTR struct .
  4610 ;;		 -> main@tetrisGame(63), 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      unsigned char 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4620 ;;      Params:         0       0       0       0
  4621 ;;      Locals:         1       0       0       0
  4622 ;;      Temps:          2       0       0       0
  4623 ;;      Totals:         3       0       0       0
  4624 ;;Total ram usage:        3 bytes
  4625 ;; Hardware stack levels used:    2
  4626 ;; Hardware stack levels required when called:    1
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_Tetris_PlayerOverlapsEnvironment
  4631 ;;		_Tetris_RemovePlayerFromTable
  4632 ;;		_Tetris_ApplyPlayerToTable
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           
  4637                           ;psect for function _Tetris_PlayerTopmostY
  4638  07EB                     _Tetris_PlayerTopmostY:	
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _Tetris_PlayerTopmostY: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4642                           ;Tetris_PlayerTopmostY@player stored from wreg
  4643  07EB  00F5               	movwf	Tetris_PlayerTopmostY@player
  4644                           
  4645                           ;../Tetris/Tetris.c: 180: static uint8_t Tetris_PlayerTopmostY(Tetris_Player *player);..
      +                          /Tetris/Tetris.c: 181: {;../Tetris/Tetris.c: 182:  return player->position.y - Tetris_un
      +                          itPivot.y;
  4646  07EC  3015               	movlw	low ((_Tetris_unitPivot+1)| (0+32768))
  4647  07ED  0084               	movwf	4
  4648  07EE  3081               	movlw	high ((_Tetris_unitPivot+1)| (0+32768))
  4649  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  4650  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  4651  07F1  00FF               	movwf	127
  4652  07F2  118A  2100         	fcall	stringtab
  4653  07F4  00F3               	movwf	??_Tetris_PlayerTopmostY
  4654  07F5  0A75               	incf	Tetris_PlayerTopmostY@player,w
  4655  07F6  0084               	movwf	4
  4656  07F7  1383               	bcf	3,7	;select IRP bank0
  4657  07F8  0800               	movf	0,w
  4658  07F9  00F4               	movwf	??_Tetris_PlayerTopmostY+1
  4659  07FA  0873               	movf	??_Tetris_PlayerTopmostY,w
  4660  07FB  0274               	subwf	??_Tetris_PlayerTopmostY+1,w
  4661  07FC  0008               	return
  4662  07FD                     __end_of_Tetris_PlayerTopmostY:	
  4663                           
  4664                           	psect	text27
  4665  0E34                     __ptext27:	
  4666 ;; *************** function _SetupTimer *****************
  4667 ;; Defined at:
  4668 ;;		line 49 in file "main.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  1    wreg      void 
  4675 ;; Registers used:
  4676 ;;		None
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 0/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4682 ;;      Params:         0       0       0       0
  4683 ;;      Locals:         0       0       0       0
  4684 ;;      Temps:          0       0       0       0
  4685 ;;      Totals:         0       0       0       0
  4686 ;;Total ram usage:        0 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    1
  4689 ;; This function calls:
  4690 ;;		Nothing
  4691 ;; This function is called by:
  4692 ;;		_main
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           
  4697                           ;psect for function _SetupTimer
  4698  0E34                     _SetupTimer:	
  4699                           
  4700                           ;main.c: 51:     TMR1IE = 1;
  4701                           
  4702                           ;incstack = 0
  4703                           ; Regs used in _SetupTimer: []
  4704  0E34  1683               	bsf	3,5	;RP0=1, select bank1
  4705  0E35  1303               	bcf	3,6	;RP1=0, select bank1
  4706  0E36  140C               	bsf	12,0	;volatile
  4707                           
  4708                           ;main.c: 52:     TMR1CS = 0;
  4709  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  4710  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  4711  0E39  1090               	bcf	16,1	;volatile
  4712                           
  4713                           ;main.c: 53:     PEIE = 1;
  4714  0E3A  170B               	bsf	11,6	;volatile
  4715                           
  4716                           ;main.c: 54:     TMR1ON = 1;
  4717  0E3B  1410               	bsf	16,0	;volatile
  4718                           
  4719                           ;main.c: 55:     T1CKPS0 = 1;
  4720  0E3C  1610               	bsf	16,4	;volatile
  4721                           
  4722                           ;main.c: 56:     T1CKPS1 = 0;
  4723  0E3D  1290               	bcf	16,5	;volatile
  4724  0E3E  0008               	return
  4725  0E3F                     __end_of_SetupTimer:	
  4726                           
  4727                           	psect	text28
  4728  0E12                     __ptext28:	
  4729 ;; *************** function _SetupOscillator *****************
  4730 ;; Defined at:
  4731 ;;		line 40 in file "main.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;		None
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		None
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4745 ;;      Params:         0       0       0       0
  4746 ;;      Locals:         0       0       0       0
  4747 ;;      Temps:          0       0       0       0
  4748 ;;      Totals:         0       0       0       0
  4749 ;;Total ram usage:        0 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    1
  4752 ;; This function calls:
  4753 ;;		Nothing
  4754 ;; This function is called by:
  4755 ;;		_main
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           
  4760                           ;psect for function _SetupOscillator
  4761  0E12                     _SetupOscillator:	
  4762                           
  4763                           ;main.c: 44:     IRCF0 = 1;
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in _SetupOscillator: []
  4767  0E12  1683               	bsf	3,5	;RP0=1, select bank1
  4768  0E13  1303               	bcf	3,6	;RP1=0, select bank1
  4769  0E14  160F               	bsf	15,4	;volatile
  4770                           
  4771                           ;main.c: 45:     IRCF1 = 1;
  4772  0E15  168F               	bsf	15,5	;volatile
  4773                           
  4774                           ;main.c: 46:     IRCF2 = 1;
  4775  0E16  170F               	bsf	15,6	;volatile
  4776  0E17  0008               	return
  4777  0E18                     __end_of_SetupOscillator:	
  4778                           
  4779                           	psect	text29
  4780  0E01                     __ptext29:	
  4781 ;; *************** function _ResetTimer *****************
  4782 ;; Defined at:
  4783 ;;		line 59 in file "main.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;		None
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;		None
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1    wreg      void 
  4790 ;; Registers used:
  4791 ;;		status,2
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4797 ;;      Params:         0       0       0       0
  4798 ;;      Locals:         0       0       0       0
  4799 ;;      Temps:          0       0       0       0
  4800 ;;      Totals:         0       0       0       0
  4801 ;;Total ram usage:        0 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    1
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_main
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           
  4812                           ;psect for function _ResetTimer
  4813  0E01                     _ResetTimer:	
  4814                           
  4815                           ;main.c: 61:     TMR1 = 0;
  4816                           
  4817                           ;incstack = 0
  4818                           ; Regs used in _ResetTimer: [status,2]
  4819  0E01  1283               	bcf	3,5	;RP0=0, select bank0
  4820  0E02  1303               	bcf	3,6	;RP1=0, select bank0
  4821  0E03  018E               	clrf	14	;volatile
  4822  0E04  018F               	clrf	15	;volatile
  4823  0E05  0008               	return
  4824  0E06                     __end_of_ResetTimer:	
  4825                           
  4826                           	psect	text30
  4827  0204                     __ptext30:	
  4828 ;; *************** function _RedrawTetrisOnLCD *****************
  4829 ;; Defined at:
  4830 ;;		line 18 in file "Drawing.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  tetrisGame      1    wreg     PTR struct .
  4833 ;;		 -> main@tetrisGame(63), 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  tetrisGame      1    4[BANK0 ] PTR struct .
  4836 ;;		 -> main@tetrisGame(63), 
  4837 ;;  i               1   12[BANK0 ] unsigned char 
  4838 ;;  gameRow         2   10[BANK0 ] unsigned int 
  4839 ;;  lcdRow          1   15[BANK0 ] unsigned char 
  4840 ;;  y               1   13[BANK0 ] unsigned char 
  4841 ;;  tableY          1    9[BANK0 ] unsigned char 
  4842 ;;  x               1   14[BANK0 ] unsigned char 
  4843 ;;  rightMask       2    7[BANK0 ] unsigned int 
  4844 ;;  leftMask        2    5[BANK0 ] unsigned int 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      void 
  4847 ;; Registers used:
  4848 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4854 ;;      Params:         0       0       0       0
  4855 ;;      Locals:         0      12       0       0
  4856 ;;      Temps:          0       2       0       0
  4857 ;;      Totals:         0      14       0       0
  4858 ;;Total ram usage:       14 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    6
  4861 ;; This function calls:
  4862 ;;		_LCD_SegmentSelection
  4863 ;;		_LCD_SetX
  4864 ;;		_LCD_SetY
  4865 ;;		_LCD_WriteData
  4866 ;; This function is called by:
  4867 ;;		_main
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           
  4872                           ;psect for function _RedrawTetrisOnLCD
  4873  0204                     _RedrawTetrisOnLCD:	
  4874                           
  4875                           ;incstack = 0
  4876                           ; Regs used in _RedrawTetrisOnLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4877                           ;RedrawTetrisOnLCD@tetrisGame stored from wreg
  4878  0204  1283               	bcf	3,5	;RP0=0, select bank0
  4879  0205  1303               	bcf	3,6	;RP1=0, select bank0
  4880  0206  00A4               	movwf	RedrawTetrisOnLCD@tetrisGame
  4881                           
  4882                           ;Drawing.c: 18: void RedrawTetrisOnLCD(Tetris_Game *tetrisGame);Drawing.c: 19: {;Drawing
      +                          .c: 22:     uint16_t leftMask = 0b0000000000000010;
  4883  0207  3002               	movlw	2
  4884  0208  00A5               	movwf	RedrawTetrisOnLCD@leftMask
  4885  0209  3000               	movlw	0
  4886  020A  00A6               	movwf	RedrawTetrisOnLCD@leftMask+1
  4887                           
  4888                           ;Drawing.c: 23:     uint16_t rightMask = 0b0000000000000001;
  4889  020B  3001               	movlw	1
  4890  020C  00A7               	movwf	RedrawTetrisOnLCD@rightMask
  4891  020D  3000               	movlw	0
  4892  020E  00A8               	movwf	RedrawTetrisOnLCD@rightMask+1
  4893                           
  4894                           ;Drawing.c: 25:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  4895  020F  01AE               	clrf	RedrawTetrisOnLCD@x
  4896  0210                     l2883:	
  4897                           
  4898                           ;Drawing.c: 26:     {;Drawing.c: 27:         LCD_SegmentSelection(LCD_TOP_SEGMENT);
  4899  0210  3002               	movlw	2
  4900  0211  158A  269C  118A   	fcall	_LCD_SegmentSelection
  4901                           
  4902                           ;Drawing.c: 28:         LCD_SetX(x);
  4903  0214  1283               	bcf	3,5	;RP0=0, select bank0
  4904  0215  1303               	bcf	3,6	;RP1=0, select bank0
  4905  0216  082E               	movf	RedrawTetrisOnLCD@x,w
  4906  0217  158A  263F  118A   	fcall	_LCD_SetX
  4907                           
  4908                           ;Drawing.c: 29:         LCD_SetY(SCORE_SPACE);
  4909  021A  3008               	movlw	8
  4910  021B  158A  264B  118A   	fcall	_LCD_SetY
  4911                           
  4912                           ;Drawing.c: 31:         for (uint8_t y = SCORE_SPACE, tableY = 0; y < LCD_HEIGHT; y += P
      +                          IXEL_HEIGHT)
  4913  021E  3008               	movlw	8
  4914  021F  1283               	bcf	3,5	;RP0=0, select bank0
  4915  0220  1303               	bcf	3,6	;RP1=0, select bank0
  4916  0221  00A2               	movwf	??_RedrawTetrisOnLCD
  4917  0222  0822               	movf	??_RedrawTetrisOnLCD,w
  4918  0223  00AD               	movwf	RedrawTetrisOnLCD@y
  4919  0224  01A9               	clrf	RedrawTetrisOnLCD@tableY
  4920  0225                     l2893:	
  4921                           
  4922                           ;Drawing.c: 32:         {;Drawing.c: 33:             uint16_t gameRow = tetrisGame->tabl
      +                          e[tableY];
  4923  0225  0829               	movf	RedrawTetrisOnLCD@tableY,w
  4924  0226  00A2               	movwf	??_RedrawTetrisOnLCD
  4925  0227  0722               	addwf	??_RedrawTetrisOnLCD,w
  4926  0228  0724               	addwf	RedrawTetrisOnLCD@tetrisGame,w
  4927  0229  00A3               	movwf	??_RedrawTetrisOnLCD+1
  4928  022A  0823               	movf	??_RedrawTetrisOnLCD+1,w
  4929  022B  0084               	movwf	4
  4930  022C  1383               	bcf	3,7	;select IRP bank0
  4931  022D  0800               	movf	0,w
  4932  022E  00AA               	movwf	RedrawTetrisOnLCD@gameRow
  4933  022F  0A84               	incf	4,f
  4934  0230  0800               	movf	0,w
  4935  0231  00AB               	movwf	RedrawTetrisOnLCD@gameRow+1
  4936                           
  4937                           ;Drawing.c: 34:             uint8_t lcdRow = 0;
  4938  0232  01AF               	clrf	RedrawTetrisOnLCD@lcdRow
  4939                           
  4940                           ;Drawing.c: 35:             if (gameRow & rightMask)
  4941  0233  0827               	movf	RedrawTetrisOnLCD@rightMask,w
  4942  0234  052A               	andwf	RedrawTetrisOnLCD@gameRow,w
  4943  0235  00A2               	movwf	??_RedrawTetrisOnLCD
  4944  0236  0828               	movf	RedrawTetrisOnLCD@rightMask+1,w
  4945  0237  052B               	andwf	RedrawTetrisOnLCD@gameRow+1,w
  4946  0238  00A3               	movwf	??_RedrawTetrisOnLCD+1
  4947  0239  0822               	movf	??_RedrawTetrisOnLCD,w
  4948  023A  0423               	iorwf	??_RedrawTetrisOnLCD+1,w
  4949  023B  1903               	btfsc	3,2
  4950  023C  2A41               	goto	l2901
  4951                           
  4952                           ;Drawing.c: 36:                 lcdRow = 0x0F;
  4953  023D  300F               	movlw	15
  4954  023E  00A2               	movwf	??_RedrawTetrisOnLCD
  4955  023F  0822               	movf	??_RedrawTetrisOnLCD,w
  4956  0240  00AF               	movwf	RedrawTetrisOnLCD@lcdRow
  4957  0241                     l2901:	
  4958                           
  4959                           ;Drawing.c: 37:             if (gameRow & leftMask)
  4960  0241  0825               	movf	RedrawTetrisOnLCD@leftMask,w
  4961  0242  052A               	andwf	RedrawTetrisOnLCD@gameRow,w
  4962  0243  00A2               	movwf	??_RedrawTetrisOnLCD
  4963  0244  0826               	movf	RedrawTetrisOnLCD@leftMask+1,w
  4964  0245  052B               	andwf	RedrawTetrisOnLCD@gameRow+1,w
  4965  0246  00A3               	movwf	??_RedrawTetrisOnLCD+1
  4966  0247  0822               	movf	??_RedrawTetrisOnLCD,w
  4967  0248  0423               	iorwf	??_RedrawTetrisOnLCD+1,w
  4968  0249  1903               	btfsc	3,2
  4969  024A  2A4F               	goto	l412
  4970                           
  4971                           ;Drawing.c: 38:                 lcdRow |= 0xF0;
  4972  024B  30F0               	movlw	240
  4973  024C  00A2               	movwf	??_RedrawTetrisOnLCD
  4974  024D  0822               	movf	??_RedrawTetrisOnLCD,w
  4975  024E  04AF               	iorwf	RedrawTetrisOnLCD@lcdRow,f
  4976  024F                     l412:	
  4977                           
  4978                           ;Drawing.c: 40:             if (y == 63)
  4979  024F  303F               	movlw	63
  4980  0250  062D               	xorwf	RedrawTetrisOnLCD@y,w
  4981  0251  1D03               	btfss	3,2
  4982  0252  2A7E               	goto	l2907
  4983                           
  4984                           ;Drawing.c: 41:             {;Drawing.c: 42:                 LCD_WriteData(lcdRow);
  4985  0253  082F               	movf	RedrawTetrisOnLCD@lcdRow,w
  4986  0254  158A  2629  118A   	fcall	_LCD_WriteData
  4987                           
  4988                           ;Drawing.c: 43:                 LCD_SegmentSelection(LCD_BOTTOM_SEGMENT);
  4989  0257  3001               	movlw	1
  4990  0258  158A  269C  118A   	fcall	_LCD_SegmentSelection
  4991                           
  4992                           ;Drawing.c: 44:                 LCD_SetX(x);
  4993  025B  1283               	bcf	3,5	;RP0=0, select bank0
  4994  025C  1303               	bcf	3,6	;RP1=0, select bank0
  4995  025D  082E               	movf	RedrawTetrisOnLCD@x,w
  4996  025E  158A  263F  118A   	fcall	_LCD_SetX
  4997                           
  4998                           ;Drawing.c: 45:                 LCD_SetY(0);
  4999  0261  3000               	movlw	0
  5000  0262  158A  264B  118A   	fcall	_LCD_SetY
  5001                           
  5002                           ;Drawing.c: 46:                 LCD_WriteData(lcdRow);
  5003  0265  1283               	bcf	3,5	;RP0=0, select bank0
  5004  0266  1303               	bcf	3,6	;RP1=0, select bank0
  5005  0267  082F               	movf	RedrawTetrisOnLCD@lcdRow,w
  5006  0268  158A  2629  118A   	fcall	_LCD_WriteData
  5007                           
  5008                           ;Drawing.c: 47:                 LCD_WriteData(lcdRow);
  5009  026B  1283               	bcf	3,5	;RP0=0, select bank0
  5010  026C  1303               	bcf	3,6	;RP1=0, select bank0
  5011  026D  082F               	movf	RedrawTetrisOnLCD@lcdRow,w
  5012  026E  158A  2629  118A   	fcall	_LCD_WriteData
  5013                           
  5014                           ;Drawing.c: 48:                 LCD_WriteData(lcdRow);
  5015  0271  1283               	bcf	3,5	;RP0=0, select bank0
  5016  0272  1303               	bcf	3,6	;RP1=0, select bank0
  5017  0273  082F               	movf	RedrawTetrisOnLCD@lcdRow,w
  5018  0274  158A  2629  118A   	fcall	_LCD_WriteData
  5019                           
  5020                           ;Drawing.c: 49:                 LCD_WriteData(lcdRow);
  5021  0277  1283               	bcf	3,5	;RP0=0, select bank0
  5022  0278  1303               	bcf	3,6	;RP1=0, select bank0
  5023  0279  082F               	movf	RedrawTetrisOnLCD@lcdRow,w
  5024  027A  158A  2629  118A   	fcall	_LCD_WriteData
  5025                           
  5026                           ;Drawing.c: 50:             }
  5027  027D  2A8D               	goto	l2919
  5028  027E                     l2907:	
  5029                           
  5030                           ;Drawing.c: 52:             {;Drawing.c: 53:                 for (uint8_t i = 0; i < PIX
      +                          EL_HEIGHT; ++i)
  5031  027E  01AC               	clrf	RedrawTetrisOnLCD@i
  5032  027F                     l2913:	
  5033                           
  5034                           ;Drawing.c: 54:                     LCD_WriteData(lcdRow);
  5035  027F  082F               	movf	RedrawTetrisOnLCD@lcdRow,w
  5036  0280  158A  2629  118A   	fcall	_LCD_WriteData
  5037  0283  3001               	movlw	1
  5038  0284  1283               	bcf	3,5	;RP0=0, select bank0
  5039  0285  1303               	bcf	3,6	;RP1=0, select bank0
  5040  0286  00A2               	movwf	??_RedrawTetrisOnLCD
  5041  0287  0822               	movf	??_RedrawTetrisOnLCD,w
  5042  0288  07AC               	addwf	RedrawTetrisOnLCD@i,f
  5043  0289  3005               	movlw	5
  5044  028A  022C               	subwf	RedrawTetrisOnLCD@i,w
  5045  028B  1C03               	skipc
  5046  028C  2A7F               	goto	l2913
  5047  028D                     l2919:	
  5048                           
  5049                           ;Drawing.c: 57:             ++tableY;
  5050  028D  3001               	movlw	1
  5051  028E  1283               	bcf	3,5	;RP0=0, select bank0
  5052  028F  1303               	bcf	3,6	;RP1=0, select bank0
  5053  0290  00A2               	movwf	??_RedrawTetrisOnLCD
  5054  0291  0822               	movf	??_RedrawTetrisOnLCD,w
  5055  0292  07A9               	addwf	RedrawTetrisOnLCD@tableY,f
  5056                           
  5057                           ;Drawing.c: 58:         }
  5058  0293  3005               	movlw	5
  5059  0294  00A2               	movwf	??_RedrawTetrisOnLCD
  5060  0295  0822               	movf	??_RedrawTetrisOnLCD,w
  5061  0296  07AD               	addwf	RedrawTetrisOnLCD@y,f
  5062  0297  3080               	movlw	128
  5063  0298  022D               	subwf	RedrawTetrisOnLCD@y,w
  5064  0299  1C03               	skipc
  5065  029A  2A25               	goto	l2893
  5066                           
  5067                           ;Drawing.c: 60:         leftMask <<= 2;
  5068  029B  3002               	movlw	2
  5069  029C                     u2375:	
  5070  029C  1003               	clrc
  5071  029D  0DA5               	rlf	RedrawTetrisOnLCD@leftMask,f
  5072  029E  0DA6               	rlf	RedrawTetrisOnLCD@leftMask+1,f
  5073  029F  3EFF               	addlw	-1
  5074  02A0  1D03               	skipz
  5075  02A1  2A9C               	goto	u2375
  5076                           
  5077                           ;Drawing.c: 61:         rightMask <<= 2;
  5078  02A2  3002               	movlw	2
  5079  02A3                     u2385:	
  5080  02A3  1003               	clrc
  5081  02A4  0DA7               	rlf	RedrawTetrisOnLCD@rightMask,f
  5082  02A5  0DA8               	rlf	RedrawTetrisOnLCD@rightMask+1,f
  5083  02A6  3EFF               	addlw	-1
  5084  02A7  1D03               	skipz
  5085  02A8  2AA3               	goto	u2385
  5086                           
  5087                           ;Drawing.c: 62:     }
  5088  02A9  3001               	movlw	1
  5089  02AA  00A2               	movwf	??_RedrawTetrisOnLCD
  5090  02AB  0822               	movf	??_RedrawTetrisOnLCD,w
  5091  02AC  07AE               	addwf	RedrawTetrisOnLCD@x,f
  5092  02AD  3008               	movlw	8
  5093  02AE  022E               	subwf	RedrawTetrisOnLCD@x,w
  5094  02AF  1803               	btfsc	3,0
  5095  02B0  0008               	return
  5096  02B1  2A10               	goto	l2883
  5097  02B2                     __end_of_RedrawTetrisOnLCD:	
  5098                           
  5099                           	psect	text31
  5100  0E9C                     __ptext31:	
  5101 ;; *************** function _LCD_SegmentSelection *****************
  5102 ;; Defined at:
  5103 ;;		line 107 in file "LCD.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  segments        1    wreg     enum E1292
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  segments        1    3[COMMON] enum E1292
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5117 ;;      Params:         0       0       0       0
  5118 ;;      Locals:         1       0       0       0
  5119 ;;      Temps:          0       0       0       0
  5120 ;;      Totals:         1       0       0       0
  5121 ;;Total ram usage:        1 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    1
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_main
  5128 ;;		_RedrawTetrisOnLCD
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           
  5133                           ;psect for function _LCD_SegmentSelection
  5134  0E9C                     _LCD_SegmentSelection:	
  5135                           
  5136                           ;incstack = 0
  5137                           ; Regs used in _LCD_SegmentSelection: [wreg]
  5138                           ;LCD_SegmentSelection@segments stored from wreg
  5139  0E9C  00F3               	movwf	LCD_SegmentSelection@segments
  5140                           
  5141                           ;LCD.c: 107: void LCD_SegmentSelection(LCD_Segments segments);LCD.c: 108: {;LCD.c: 109: 
      +                              if (segments & LCD_TOP_SEGMENT)
  5142  0E9D  1CF3               	btfss	LCD_SegmentSelection@segments,1
  5143  0E9E  2EA3               	goto	l367
  5144                           
  5145                           ;LCD.c: 110:         RC0 = 0;
  5146  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  5147  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  5148  0EA1  1007               	bcf	7,0	;volatile
  5149  0EA2  2EA6               	goto	l368
  5150  0EA3                     l367:	
  5151                           ;LCD.c: 111:     else
  5152                           
  5153                           
  5154                           ;LCD.c: 112:         RC0 = 1;
  5155  0EA3  1283               	bcf	3,5	;RP0=0, select bank0
  5156  0EA4  1303               	bcf	3,6	;RP1=0, select bank0
  5157  0EA5  1407               	bsf	7,0	;volatile
  5158  0EA6                     l368:	
  5159                           
  5160                           ;LCD.c: 114:     if (segments & LCD_BOTTOM_SEGMENT)
  5161  0EA6  1C73               	btfss	LCD_SegmentSelection@segments,0
  5162  0EA7  2EAA               	goto	l369
  5163                           
  5164                           ;LCD.c: 115:         RC1 = 0;
  5165  0EA8  1087               	bcf	7,1	;volatile
  5166  0EA9  0008               	return
  5167  0EAA                     l369:	
  5168                           ;LCD.c: 116:     else
  5169                           
  5170                           
  5171                           ;LCD.c: 117:         RC1 = 1;
  5172  0EAA  1487               	bsf	7,1	;volatile
  5173  0EAB  0008               	return
  5174  0EAC                     __end_of_LCD_SegmentSelection:	
  5175                           
  5176                           	psect	text32
  5177  0E1F                     __ptext32:	
  5178 ;; *************** function _LCD_TurnOn *****************
  5179 ;; Defined at:
  5180 ;;		line 120 in file "LCD.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;		None
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2, status,0, pclath, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5194 ;;      Params:         0       0       0       0
  5195 ;;      Locals:         0       0       0       0
  5196 ;;      Temps:          0       1       0       0
  5197 ;;      Totals:         0       1       0       0
  5198 ;;Total ram usage:        1 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    5
  5201 ;; This function calls:
  5202 ;;		_LCD_Write
  5203 ;; This function is called by:
  5204 ;;		_main
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _LCD_TurnOn
  5210  0E1F                     _LCD_TurnOn:	
  5211                           
  5212                           ;LCD.c: 122:     LCD_Write(LCD_WRITE_INSTRUCTION, 0x3F);
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _LCD_TurnOn: [wreg+status,2+status,0+pclath+cstack]
  5216  0E1F  303F               	movlw	63
  5217  0E20  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0E21  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0E22  00A0               	movwf	??_LCD_TurnOn
  5220  0E23  0820               	movf	??_LCD_TurnOn,w
  5221  0E24  00F8               	movwf	LCD_Write@data
  5222  0E25  3000               	movlw	0
  5223  0E26  158A  26C3         	fcall	_LCD_Write
  5224  0E28  0008               	return
  5225  0E29                     __end_of_LCD_TurnOn:	
  5226                           
  5227                           	psect	text33
  5228  0F97                     __ptext33:	
  5229 ;; *************** function _LCD_SetupPorts *****************
  5230 ;; Defined at:
  5231 ;;		line 48 in file "LCD.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5245 ;;      Params:         0       0       0       0
  5246 ;;      Locals:         0       0       0       0
  5247 ;;      Temps:          0       0       0       0
  5248 ;;      Totals:         0       0       0       0
  5249 ;;Total ram usage:        0 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    1
  5252 ;; This function calls:
  5253 ;;		Nothing
  5254 ;; This function is called by:
  5255 ;;		_main
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           
  5260                           ;psect for function _LCD_SetupPorts
  5261  0F97                     _LCD_SetupPorts:	
  5262                           
  5263                           ;LCD.c: 50:     ANSELH = 0;
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _LCD_SetupPorts: [wreg+status,2]
  5267  0F97  1683               	bsf	3,5	;RP0=1, select bank3
  5268  0F98  1703               	bsf	3,6	;RP1=1, select bank3
  5269  0F99  0189               	clrf	9	;volatile
  5270                           
  5271                           ;LCD.c: 51:     TRISB = 0xFF;
  5272  0F9A  30FF               	movlw	255
  5273  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  5274  0F9C  1303               	bcf	3,6	;RP1=0, select bank1
  5275  0F9D  0086               	movwf	6	;volatile
  5276                           
  5277                           ;LCD.c: 52:     WPUB = 0xFF;
  5278  0F9E  30FF               	movlw	255
  5279  0F9F  0095               	movwf	21	;volatile
  5280                           
  5281                           ;LCD.c: 53:     nRBPU = 0;
  5282  0FA0  1381               	bcf	1,7	;volatile
  5283                           
  5284                           ;LCD.c: 54:     PORTB = 0;
  5285  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  5286  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  5287  0FA3  0186               	clrf	6	;volatile
  5288                           
  5289                           ;LCD.c: 56:     TRISD = 0;
  5290  0FA4  1683               	bsf	3,5	;RP0=1, select bank1
  5291  0FA5  1303               	bcf	3,6	;RP1=0, select bank1
  5292  0FA6  0188               	clrf	8	;volatile
  5293                           
  5294                           ;LCD.c: 57:     PORTD = 0;
  5295  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  5296  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  5297  0FA9  0188               	clrf	8	;volatile
  5298                           
  5299                           ;LCD.c: 58:     TRISC = 0;
  5300  0FAA  1683               	bsf	3,5	;RP0=1, select bank1
  5301  0FAB  1303               	bcf	3,6	;RP1=0, select bank1
  5302  0FAC  0187               	clrf	7	;volatile
  5303                           
  5304                           ;LCD.c: 59:     PORTC = 0;
  5305  0FAD  1283               	bcf	3,5	;RP0=0, select bank0
  5306  0FAE  1303               	bcf	3,6	;RP1=0, select bank0
  5307  0FAF  0187               	clrf	7	;volatile
  5308                           
  5309                           ;LCD.c: 61:     ANSEL = 0;
  5310  0FB0  1683               	bsf	3,5	;RP0=1, select bank3
  5311  0FB1  1703               	bsf	3,6	;RP1=1, select bank3
  5312  0FB2  0188               	clrf	8	;volatile
  5313                           
  5314                           ;LCD.c: 62:     TRISA = 0;
  5315  0FB3  1683               	bsf	3,5	;RP0=1, select bank1
  5316  0FB4  1303               	bcf	3,6	;RP1=0, select bank1
  5317  0FB5  0185               	clrf	5	;volatile
  5318                           
  5319                           ;LCD.c: 63:     PORTA = 0;
  5320  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  5321  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
  5322  0FB8  0185               	clrf	5	;volatile
  5323  0FB9  0008               	return
  5324  0FBA                     __end_of_LCD_SetupPorts:	
  5325                           
  5326                           	psect	text34
  5327  0EAC                     __ptext34:	
  5328 ;; *************** function _LCD_Reset *****************
  5329 ;; Defined at:
  5330 ;;		line 66 in file "LCD.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5344 ;;      Params:         0       0       0       0
  5345 ;;      Locals:         0       0       0       0
  5346 ;;      Temps:          0       0       0       0
  5347 ;;      Totals:         0       0       0       0
  5348 ;;Total ram usage:        0 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    6
  5351 ;; This function calls:
  5352 ;;		_LCD_SetX
  5353 ;;		_LCD_SetY
  5354 ;;		_LCD_SetZ
  5355 ;; This function is called by:
  5356 ;;		_main
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _LCD_Reset
  5362  0EAC                     _LCD_Reset:	
  5363                           
  5364                           ;LCD.c: 68:     RD1 = 0;
  5365                           
  5366                           ;incstack = 0
  5367                           ; Regs used in _LCD_Reset: [wreg+status,2+status,0+pclath+cstack]
  5368  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  5369  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  5370  0EAE  1088               	bcf	8,1	;volatile
  5371                           
  5372                           ;LCD.c: 69:     __nop();
  5373  0EAF  0000               	nop
  5374                           
  5375                           ;LCD.c: 70:     __nop();
  5376  0EB0  0000               	nop
  5377                           
  5378                           ;LCD.c: 71:     __nop();
  5379  0EB1  0000               	nop
  5380                           
  5381                           ;LCD.c: 72:     __nop();
  5382  0EB2  0000               	nop
  5383                           
  5384                           ;LCD.c: 73:     RD1 = 1;
  5385  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  5386  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  5387  0EB5  1488               	bsf	8,1	;volatile
  5388                           
  5389                           ;LCD.c: 74:     __nop();
  5390  0EB6  0000               	nop
  5391                           
  5392                           ;LCD.c: 75:     LCD_SetX(0);
  5393  0EB7  3000               	movlw	0
  5394  0EB8  158A  263F  158A   	fcall	_LCD_SetX
  5395                           
  5396                           ;LCD.c: 76:     LCD_SetY(0);
  5397  0EBB  3000               	movlw	0
  5398  0EBC  158A  264B  158A   	fcall	_LCD_SetY
  5399                           
  5400                           ;LCD.c: 77:     LCD_SetZ(0);
  5401  0EBF  3000               	movlw	0
  5402  0EC0  158A  2657         	fcall	_LCD_SetZ
  5403  0EC2  0008               	return
  5404  0EC3                     __end_of_LCD_Reset:	
  5405                           
  5406                           	psect	text35
  5407  0E57                     __ptext35:	
  5408 ;; *************** function _LCD_SetZ *****************
  5409 ;; Defined at:
  5410 ;;		line 140 in file "LCD.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  z               1    wreg     unsigned char 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;  z               1    1[BANK0 ] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg, status,2, status,0, pclath, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5424 ;;      Params:         0       0       0       0
  5425 ;;      Locals:         0       1       0       0
  5426 ;;      Temps:          0       1       0       0
  5427 ;;      Totals:         0       2       0       0
  5428 ;;Total ram usage:        2 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    5
  5431 ;; This function calls:
  5432 ;;		_LCD_Write
  5433 ;; This function is called by:
  5434 ;;		_LCD_Reset
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438                           
  5439                           ;psect for function _LCD_SetZ
  5440  0E57                     _LCD_SetZ:	
  5441                           
  5442                           ;incstack = 0
  5443                           ; Regs used in _LCD_SetZ: [wreg+status,2+status,0+pclath+cstack]
  5444                           ;LCD_SetZ@z stored from wreg
  5445  0E57  1283               	bcf	3,5	;RP0=0, select bank0
  5446  0E58  1303               	bcf	3,6	;RP1=0, select bank0
  5447  0E59  00A1               	movwf	LCD_SetZ@z
  5448                           
  5449                           ;LCD.c: 140: void LCD_SetZ(uint8_t z);LCD.c: 141: {;LCD.c: 142:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xC0 | z);
  5450  0E5A  0821               	movf	LCD_SetZ@z,w
  5451  0E5B  38C0               	iorlw	192
  5452  0E5C  00A0               	movwf	??_LCD_SetZ
  5453  0E5D  0820               	movf	??_LCD_SetZ,w
  5454  0E5E  00F8               	movwf	LCD_Write@data
  5455  0E5F  3000               	movlw	0
  5456  0E60  158A  26C3         	fcall	_LCD_Write
  5457  0E62  0008               	return
  5458  0E63                     __end_of_LCD_SetZ:	
  5459                           
  5460                           	psect	text36
  5461  0082                     __ptext36:	
  5462 ;; *************** function _LCD_Clear *****************
  5463 ;; Defined at:
  5464 ;;		line 145 in file "LCD.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  y               1    3[BANK0 ] unsigned char 
  5469 ;;  x               1    4[BANK0 ] unsigned char 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  1    wreg      void 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2, status,0, pclath, cstack
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5479 ;;      Params:         0       0       0       0
  5480 ;;      Locals:         0       2       0       0
  5481 ;;      Temps:          0       1       0       0
  5482 ;;      Totals:         0       3       0       0
  5483 ;;Total ram usage:        3 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    6
  5486 ;; This function calls:
  5487 ;;		_LCD_SetX
  5488 ;;		_LCD_SetY
  5489 ;;		_LCD_WriteData
  5490 ;; This function is called by:
  5491 ;;		_main
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _LCD_Clear
  5497  0082                     _LCD_Clear:	
  5498                           
  5499                           ;LCD.c: 147:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  5500                           
  5501                           ;incstack = 0
  5502                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  5503  0082  1283               	bcf	3,5	;RP0=0, select bank0
  5504  0083  1303               	bcf	3,6	;RP1=0, select bank0
  5505  0084  01A4               	clrf	LCD_Clear@x
  5506  0085                     l2813:	
  5507                           
  5508                           ;LCD.c: 148:     {;LCD.c: 149:         LCD_SetX(x);
  5509  0085  0824               	movf	LCD_Clear@x,w
  5510  0086  158A  263F  118A   	fcall	_LCD_SetX
  5511                           
  5512                           ;LCD.c: 150:         LCD_SetY(0);
  5513  0089  3000               	movlw	0
  5514  008A  158A  264B  118A   	fcall	_LCD_SetY
  5515                           
  5516                           ;LCD.c: 151:         for (uint8_t y = 0; y < LCD_SEGMENT_HEIGHT; ++y)
  5517  008D  1283               	bcf	3,5	;RP0=0, select bank0
  5518  008E  1303               	bcf	3,6	;RP1=0, select bank0
  5519  008F  01A3               	clrf	LCD_Clear@y
  5520  0090                     l2821:	
  5521                           
  5522                           ;LCD.c: 152:             LCD_WriteData(0);
  5523  0090  3000               	movlw	0
  5524  0091  158A  2629  118A   	fcall	_LCD_WriteData
  5525  0094  3001               	movlw	1
  5526  0095  1283               	bcf	3,5	;RP0=0, select bank0
  5527  0096  1303               	bcf	3,6	;RP1=0, select bank0
  5528  0097  00A2               	movwf	??_LCD_Clear
  5529  0098  0822               	movf	??_LCD_Clear,w
  5530  0099  07A3               	addwf	LCD_Clear@y,f
  5531  009A  3040               	movlw	64
  5532  009B  0223               	subwf	LCD_Clear@y,w
  5533  009C  1C03               	skipc
  5534  009D  2890               	goto	l2821
  5535                           
  5536                           ;LCD.c: 153:     }
  5537  009E  3001               	movlw	1
  5538  009F  00A2               	movwf	??_LCD_Clear
  5539  00A0  0822               	movf	??_LCD_Clear,w
  5540  00A1  07A4               	addwf	LCD_Clear@x,f
  5541  00A2  3008               	movlw	8
  5542  00A3  0224               	subwf	LCD_Clear@x,w
  5543  00A4  1803               	btfsc	3,0
  5544  00A5  0008               	return
  5545  00A6  2885               	goto	l2813
  5546  00A7                     __end_of_LCD_Clear:	
  5547                           
  5548                           	psect	text37
  5549  0E29                     __ptext37:	
  5550 ;; *************** function _LCD_WriteData *****************
  5551 ;; Defined at:
  5552 ;;		line 102 in file "LCD.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  data            1    wreg     unsigned char 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;  data            1    1[BANK0 ] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0, pclath, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5566 ;;      Params:         0       0       0       0
  5567 ;;      Locals:         0       1       0       0
  5568 ;;      Temps:          0       1       0       0
  5569 ;;      Totals:         0       2       0       0
  5570 ;;Total ram usage:        2 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    5
  5573 ;; This function calls:
  5574 ;;		_LCD_Write
  5575 ;; This function is called by:
  5576 ;;		_LCD_Clear
  5577 ;;		_RedrawTetrisOnLCD
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           
  5582                           ;psect for function _LCD_WriteData
  5583  0E29                     _LCD_WriteData:	
  5584                           
  5585                           ;incstack = 0
  5586                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0+pclath+cstack]
  5587                           ;LCD_WriteData@data stored from wreg
  5588  0E29  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0E2A  1303               	bcf	3,6	;RP1=0, select bank0
  5590  0E2B  00A1               	movwf	LCD_WriteData@data
  5591                           
  5592                           ;LCD.c: 102: void LCD_WriteData(uint8_t data);LCD.c: 103: {;LCD.c: 104:     LCD_Write(LC
      +                          D_WRITE_DATA, data);
  5593  0E2C  0821               	movf	LCD_WriteData@data,w
  5594  0E2D  00A0               	movwf	??_LCD_WriteData
  5595  0E2E  0820               	movf	??_LCD_WriteData,w
  5596  0E2F  00F8               	movwf	LCD_Write@data
  5597  0E30  3001               	movlw	1
  5598  0E31  158A  26C3         	fcall	_LCD_Write
  5599  0E33  0008               	return
  5600  0E34                     __end_of_LCD_WriteData:	
  5601                           
  5602                           	psect	text38
  5603  0E4B                     __ptext38:	
  5604 ;; *************** function _LCD_SetY *****************
  5605 ;; Defined at:
  5606 ;;		line 130 in file "LCD.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  y               1    wreg     unsigned char 
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  y               1    1[BANK0 ] unsigned char 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0, pclath, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5620 ;;      Params:         0       0       0       0
  5621 ;;      Locals:         0       1       0       0
  5622 ;;      Temps:          0       1       0       0
  5623 ;;      Totals:         0       2       0       0
  5624 ;;Total ram usage:        2 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    5
  5627 ;; This function calls:
  5628 ;;		_LCD_Write
  5629 ;; This function is called by:
  5630 ;;		_LCD_Reset
  5631 ;;		_LCD_Clear
  5632 ;;		_RedrawTetrisOnLCD
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           
  5637                           ;psect for function _LCD_SetY
  5638  0E4B                     _LCD_SetY:	
  5639                           
  5640                           ;incstack = 0
  5641                           ; Regs used in _LCD_SetY: [wreg+status,2+status,0+pclath+cstack]
  5642                           ;LCD_SetY@y stored from wreg
  5643  0E4B  1283               	bcf	3,5	;RP0=0, select bank0
  5644  0E4C  1303               	bcf	3,6	;RP1=0, select bank0
  5645  0E4D  00A1               	movwf	LCD_SetY@y
  5646                           
  5647                           ;LCD.c: 130: void LCD_SetY(uint8_t y);LCD.c: 131: {;LCD.c: 132:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0x40 | y);
  5648  0E4E  0821               	movf	LCD_SetY@y,w
  5649  0E4F  3840               	iorlw	64
  5650  0E50  00A0               	movwf	??_LCD_SetY
  5651  0E51  0820               	movf	??_LCD_SetY,w
  5652  0E52  00F8               	movwf	LCD_Write@data
  5653  0E53  3000               	movlw	0
  5654  0E54  158A  26C3         	fcall	_LCD_Write
  5655  0E56  0008               	return
  5656  0E57                     __end_of_LCD_SetY:	
  5657                           
  5658                           	psect	text39
  5659  0E3F                     __ptext39:	
  5660 ;; *************** function _LCD_SetX *****************
  5661 ;; Defined at:
  5662 ;;		line 135 in file "LCD.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  x               1    wreg     unsigned char 
  5665 ;; Auto vars:     Size  Location     Type
  5666 ;;  x               1    1[BANK0 ] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  1    wreg      void 
  5669 ;; Registers used:
  5670 ;;		wreg, status,2, status,0, pclath, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5676 ;;      Params:         0       0       0       0
  5677 ;;      Locals:         0       1       0       0
  5678 ;;      Temps:          0       1       0       0
  5679 ;;      Totals:         0       2       0       0
  5680 ;;Total ram usage:        2 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    5
  5683 ;; This function calls:
  5684 ;;		_LCD_Write
  5685 ;; This function is called by:
  5686 ;;		_LCD_Reset
  5687 ;;		_LCD_Clear
  5688 ;;		_RedrawTetrisOnLCD
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           
  5693                           ;psect for function _LCD_SetX
  5694  0E3F                     _LCD_SetX:	
  5695                           
  5696                           ;incstack = 0
  5697                           ; Regs used in _LCD_SetX: [wreg+status,2+status,0+pclath+cstack]
  5698                           ;LCD_SetX@x stored from wreg
  5699  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  5700  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  5701  0E41  00A1               	movwf	LCD_SetX@x
  5702                           
  5703                           ;LCD.c: 135: void LCD_SetX(uint8_t x);LCD.c: 136: {;LCD.c: 137:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xB8 | x);
  5704  0E42  0821               	movf	LCD_SetX@x,w
  5705  0E43  38B8               	iorlw	184
  5706  0E44  00A0               	movwf	??_LCD_SetX
  5707  0E45  0820               	movf	??_LCD_SetX,w
  5708  0E46  00F8               	movwf	LCD_Write@data
  5709  0E47  3000               	movlw	0
  5710  0E48  158A  26C3         	fcall	_LCD_Write
  5711  0E4A  0008               	return
  5712  0E4B                     __end_of_LCD_SetX:	
  5713                           
  5714                           	psect	text40
  5715  0EC3                     __ptext40:	
  5716 ;; *************** function _LCD_Write *****************
  5717 ;; Defined at:
  5718 ;;		line 35 in file "LCD.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  mode            1    wreg     enum E1321
  5721 ;;  data            1    8[COMMON] unsigned char 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  mode            1    9[COMMON] enum E1321
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0, pclath, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5733 ;;      Params:         1       0       0       0
  5734 ;;      Locals:         1       0       0       0
  5735 ;;      Temps:          0       0       0       0
  5736 ;;      Totals:         2       0       0       0
  5737 ;;Total ram usage:        2 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    4
  5740 ;; This function calls:
  5741 ;;		_LCD_BlockWhileBusy
  5742 ;; This function is called by:
  5743 ;;		_LCD_WriteData
  5744 ;;		_LCD_TurnOn
  5745 ;;		_LCD_SetY
  5746 ;;		_LCD_SetX
  5747 ;;		_LCD_SetZ
  5748 ;;		_LCD_TurnOff
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           
  5753                           ;psect for function _LCD_Write
  5754  0EC3                     _LCD_Write:	
  5755                           
  5756                           ;incstack = 0
  5757                           ; Regs used in _LCD_Write: [wreg+status,2+status,0+pclath+cstack]
  5758                           ;LCD_Write@mode stored from wreg
  5759  0EC3  00F9               	movwf	LCD_Write@mode
  5760                           
  5761                           ;LCD.c: 35: static void LCD_Write(LCD_WriteMode mode, uint8_t data);LCD.c: 36: {;LCD.c: 
      +                          37:     LCD_BlockWhileBusy();
  5762  0EC4  158A  2618  158A   	fcall	_LCD_BlockWhileBusy
  5763                           
  5764                           ;LCD.c: 39:     TRISA = 0;
  5765  0EC7  1683               	bsf	3,5	;RP0=1, select bank1
  5766  0EC8  1303               	bcf	3,6	;RP1=0, select bank1
  5767  0EC9  0185               	clrf	5	;volatile
  5768                           
  5769                           ;LCD.c: 40:     RC3 = 0;
  5770  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  5771  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  5772  0ECC  1187               	bcf	7,3	;volatile
  5773                           
  5774                           ;LCD.c: 41:     RC2 = mode;
  5775  0ECD  1C79               	btfss	LCD_Write@mode,0
  5776  0ECE  2ED3               	goto	u1280
  5777  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  5778  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  5779  0ED1  1507               	bsf	7,2	;volatile
  5780  0ED2  2ED6               	goto	l2057
  5781  0ED3                     u1280:	
  5782  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  5783  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  5784  0ED5  1107               	bcf	7,2	;volatile
  5785  0ED6                     l2057:	
  5786                           
  5787                           ;LCD.c: 42:     PORTA = data;
  5788  0ED6  0878               	movf	LCD_Write@data,w
  5789  0ED7  0085               	movwf	5	;volatile
  5790                           
  5791                           ;LCD.c: 43:     RD0 = 1;
  5792  0ED8  1408               	bsf	8,0	;volatile
  5793                           
  5794                           ;LCD.c: 44:     __nop();
  5795  0ED9  0000               	nop
  5796                           
  5797                           ;LCD.c: 45:     RD0 = 0;
  5798  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
  5799  0EDB  1303               	bcf	3,6	;RP1=0, select bank0
  5800  0EDC  1008               	bcf	8,0	;volatile
  5801  0EDD  0008               	return
  5802  0EDE                     __end_of_LCD_Write:	
  5803                           
  5804                           	psect	text41
  5805  0E18                     __ptext41:	
  5806 ;; *************** function _LCD_BlockWhileBusy *****************
  5807 ;; Defined at:
  5808 ;;		line 28 in file "LCD.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;		None
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;		None
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		wreg, status,2, pclath, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5822 ;;      Params:         0       0       0       0
  5823 ;;      Locals:         0       0       0       0
  5824 ;;      Temps:          0       0       0       0
  5825 ;;      Totals:         0       0       0       0
  5826 ;;Total ram usage:        0 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    3
  5829 ;; This function calls:
  5830 ;;		_LCD_IsBusy
  5831 ;; This function is called by:
  5832 ;;		_LCD_Write
  5833 ;;		_LCD_ReadData
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           
  5838                           ;psect for function _LCD_BlockWhileBusy
  5839  0E18                     _LCD_BlockWhileBusy:	
  5840  0E18                     l1899:	
  5841                           ;LCD.c: 30:     while (LCD_IsBusy())
  5842                           
  5843                           ;incstack = 0
  5844                           ; Regs used in _LCD_BlockWhileBusy: [wreg+status,2+pclath+cstack]
  5845                           
  5846                           
  5847                           ;LCD.c: 30:     while (LCD_IsBusy())
  5848  0E18  158A  267E  158A   	fcall	_LCD_IsBusy
  5849  0E1B  3A00               	xorlw	0
  5850  0E1C  1903               	btfsc	3,2
  5851  0E1D  0008               	return
  5852  0E1E  2E18               	goto	l1899
  5853  0E1F                     __end_of_LCD_BlockWhileBusy:	
  5854                           
  5855                           	psect	text42
  5856  0E7E                     __ptext42:	
  5857 ;; *************** function _LCD_IsBusy *****************
  5858 ;; Defined at:
  5859 ;;		line 22 in file "LCD.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  status          1    7[COMMON] unsigned char 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      unsigned char 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, pclath, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5873 ;;      Params:         0       0       0       0
  5874 ;;      Locals:         2       0       0       0
  5875 ;;      Temps:          1       0       0       0
  5876 ;;      Totals:         3       0       0       0
  5877 ;;Total ram usage:        3 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    2
  5880 ;; This function calls:
  5881 ;;		_LCD_ReadStatus
  5882 ;; This function is called by:
  5883 ;;		_LCD_BlockWhileBusy
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           
  5888                           ;psect for function _LCD_IsBusy
  5889  0E7E                     _LCD_IsBusy:	
  5890                           
  5891                           ;LCD.c: 24:     uint8_t status = LCD_ReadStatus();
  5892                           
  5893                           ;incstack = 0
  5894                           ; Regs used in _LCD_IsBusy: [wreg+status,2+pclath+cstack]
  5895  0E7E  158A  268C  158A   	fcall	_LCD_ReadStatus
  5896  0E81  00F5               	movwf	??_LCD_IsBusy
  5897  0E82  0875               	movf	??_LCD_IsBusy,w
  5898  0E83  00F7               	movwf	LCD_IsBusy@status
  5899                           
  5900                           ;LCD.c: 25:     return (status & LCD_BUSY_FLAG) || (status & LCD_RESET_FLAG);
  5901  0E84  01F6               	clrf	_LCD_IsBusy$575
  5902  0E85  0AF6               	incf	_LCD_IsBusy$575,f
  5903  0E86  1FF7               	btfss	LCD_IsBusy@status,7
  5904  0E87  1A77               	btfsc	LCD_IsBusy@status,4
  5905  0E88  2E8A               	goto	l1847
  5906  0E89  01F6               	clrf	_LCD_IsBusy$575
  5907  0E8A                     l1847:	
  5908  0E8A  0876               	movf	_LCD_IsBusy$575,w
  5909  0E8B  0008               	return
  5910  0E8C                     __end_of_LCD_IsBusy:	
  5911                           
  5912                           	psect	text43
  5913  0E8C                     __ptext43:	
  5914 ;; *************** function _LCD_ReadStatus *****************
  5915 ;; Defined at:
  5916 ;;		line 80 in file "LCD.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;		None
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;  status          1    4[COMMON] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      unsigned char 
  5923 ;; Registers used:
  5924 ;;		wreg
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5930 ;;      Params:         0       0       0       0
  5931 ;;      Locals:         1       0       0       0
  5932 ;;      Temps:          1       0       0       0
  5933 ;;      Totals:         2       0       0       0
  5934 ;;Total ram usage:        2 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    1
  5937 ;; This function calls:
  5938 ;;		Nothing
  5939 ;; This function is called by:
  5940 ;;		_LCD_IsBusy
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           
  5945                           ;psect for function _LCD_ReadStatus
  5946  0E8C                     _LCD_ReadStatus:	
  5947                           
  5948                           ;LCD.c: 82:     TRISA = 0xFF;
  5949                           
  5950                           ;incstack = 0
  5951                           ; Regs used in _LCD_ReadStatus: [wreg]
  5952  0E8C  30FF               	movlw	255
  5953  0E8D  1683               	bsf	3,5	;RP0=1, select bank1
  5954  0E8E  1303               	bcf	3,6	;RP1=0, select bank1
  5955  0E8F  0085               	movwf	5	;volatile
  5956                           
  5957                           ;LCD.c: 83:     RC3 = 1;
  5958  0E90  1283               	bcf	3,5	;RP0=0, select bank0
  5959  0E91  1303               	bcf	3,6	;RP1=0, select bank0
  5960  0E92  1587               	bsf	7,3	;volatile
  5961                           
  5962                           ;LCD.c: 84:     RC2 = 0;
  5963  0E93  1107               	bcf	7,2	;volatile
  5964                           
  5965                           ;LCD.c: 85:     RD0 = 1;
  5966  0E94  1408               	bsf	8,0	;volatile
  5967                           
  5968                           ;LCD.c: 86:     uint8_t status = PORTA;
  5969  0E95  0805               	movf	5,w	;volatile
  5970  0E96  00F3               	movwf	??_LCD_ReadStatus
  5971  0E97  0873               	movf	??_LCD_ReadStatus,w
  5972  0E98  00F4               	movwf	LCD_ReadStatus@status
  5973                           
  5974                           ;LCD.c: 87:     RD0 = 0;
  5975  0E99  1008               	bcf	8,0	;volatile
  5976                           
  5977                           ;LCD.c: 88:     return status;
  5978  0E9A  0874               	movf	LCD_ReadStatus@status,w
  5979  0E9B  0008               	return
  5980  0E9C                     __end_of_LCD_ReadStatus:	
  5981                           
  5982                           	psect	text44
  5983  002B                     __ptext44:	
  5984 ;; *************** function _Buttons_Update *****************
  5985 ;; Defined at:
  5986 ;;		line 51 in file "Buttons.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  buttons         1    wreg     PTR struct .
  5989 ;;		 -> main@buttons(4), 
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  buttons         1    6[COMMON] PTR struct .
  5992 ;;		 -> main@buttons(4), 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  1    wreg      void 
  5995 ;; Registers used:
  5996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6002 ;;      Params:         0       0       0       0
  6003 ;;      Locals:         1       0       0       0
  6004 ;;      Temps:          0       0       0       0
  6005 ;;      Totals:         1       0       0       0
  6006 ;;Total ram usage:        1 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    2
  6009 ;; This function calls:
  6010 ;;		_Buttons_UpdateButton
  6011 ;; This function is called by:
  6012 ;;		_main
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           
  6017                           ;psect for function _Buttons_Update
  6018  002B                     _Buttons_Update:	
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _Buttons_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6022                           ;Buttons_Update@buttons stored from wreg
  6023  002B  00F6               	movwf	Buttons_Update@buttons
  6024                           
  6025                           ;Buttons.c: 51: void Buttons_Update(Buttons *buttons);Buttons.c: 52: {;Buttons.c: 53:   
      +                            Buttons_UpdateButton(&buttons->left, RB2);
  6026  002C  3000               	movlw	0
  6027  002D  1283               	bcf	3,5	;RP0=0, select bank0
  6028  002E  1303               	bcf	3,6	;RP1=0, select bank0
  6029  002F  1906               	btfsc	6,2	;volatile
  6030  0030  3001               	movlw	1
  6031  0031  00F3               	movwf	Buttons_UpdateButton@nHeld
  6032  0032  0876               	movf	Buttons_Update@buttons,w
  6033  0033  158A  2776  118A   	fcall	_Buttons_UpdateButton
  6034                           
  6035                           ;Buttons.c: 54:     Buttons_UpdateButton(&buttons->right, RB3);
  6036  0036  3000               	movlw	0
  6037  0037  1283               	bcf	3,5	;RP0=0, select bank0
  6038  0038  1303               	bcf	3,6	;RP1=0, select bank0
  6039  0039  1986               	btfsc	6,3	;volatile
  6040  003A  3001               	movlw	1
  6041  003B  00F3               	movwf	Buttons_UpdateButton@nHeld
  6042  003C  0876               	movf	Buttons_Update@buttons,w
  6043  003D  3E01               	addlw	1
  6044  003E  158A  2776  118A   	fcall	_Buttons_UpdateButton
  6045                           
  6046                           ;Buttons.c: 55:     Buttons_UpdateButton(&buttons->down, RB4);
  6047  0041  3000               	movlw	0
  6048  0042  1283               	bcf	3,5	;RP0=0, select bank0
  6049  0043  1303               	bcf	3,6	;RP1=0, select bank0
  6050  0044  1A06               	btfsc	6,4	;volatile
  6051  0045  3001               	movlw	1
  6052  0046  00F3               	movwf	Buttons_UpdateButton@nHeld
  6053  0047  0876               	movf	Buttons_Update@buttons,w
  6054  0048  3E02               	addlw	2
  6055  0049  158A  2776  118A   	fcall	_Buttons_UpdateButton
  6056                           
  6057                           ;Buttons.c: 56:     Buttons_UpdateButton(&buttons->rotate, RB1);
  6058  004C  3000               	movlw	0
  6059  004D  1283               	bcf	3,5	;RP0=0, select bank0
  6060  004E  1303               	bcf	3,6	;RP1=0, select bank0
  6061  004F  1886               	btfsc	6,1	;volatile
  6062  0050  3001               	movlw	1
  6063  0051  00F3               	movwf	Buttons_UpdateButton@nHeld
  6064  0052  0876               	movf	Buttons_Update@buttons,w
  6065  0053  3E03               	addlw	3
  6066  0054  158A  2776         	fcall	_Buttons_UpdateButton
  6067  0056  0008               	return
  6068  0057                     __end_of_Buttons_Update:	
  6069                           
  6070                           	psect	text45
  6071  0F76                     __ptext45:	
  6072 ;; *************** function _Buttons_UpdateButton *****************
  6073 ;; Defined at:
  6074 ;;		line 26 in file "Buttons.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  button          1    wreg     PTR struct .
  6077 ;;		 -> main@buttons(4), 
  6078 ;;  nHeld           1    3[COMMON] unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  button          1    5[COMMON] PTR struct .
  6081 ;;		 -> main@buttons(4), 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6091 ;;      Params:         1       0       0       0
  6092 ;;      Locals:         1       0       0       0
  6093 ;;      Temps:          1       0       0       0
  6094 ;;      Totals:         3       0       0       0
  6095 ;;Total ram usage:        3 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    1
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_Buttons_Update
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           
  6106                           ;psect for function _Buttons_UpdateButton
  6107  0F76                     _Buttons_UpdateButton:	
  6108                           
  6109                           ;incstack = 0
  6110                           ; Regs used in _Buttons_UpdateButton: [wreg-fsr0h+status,2+status,0]
  6111                           ;Buttons_UpdateButton@button stored from wreg
  6112  0F76  00F5               	movwf	Buttons_UpdateButton@button
  6113                           
  6114                           ;Buttons.c: 26: static void Buttons_UpdateButton(Button *button, uint8_t nHeld);Buttons.
      +                          c: 27: {;Buttons.c: 28:     if (!nHeld)
  6115  0F77  0873               	movf	Buttons_UpdateButton@nHeld,w
  6116  0F78  1D03               	btfss	3,2
  6117  0F79  2F8F               	goto	l2271
  6118                           
  6119                           ;Buttons.c: 29:     {;Buttons.c: 30:         button->pressed = !button->held;
  6120  0F7A  0875               	movf	Buttons_UpdateButton@button,w
  6121  0F7B  0084               	movwf	4
  6122  0F7C  1003               	clrc
  6123  0F7D  1383               	bcf	3,7	;select IRP bank0
  6124  0F7E  1C80               	btfss	0,1
  6125  0F7F  1403               	setc
  6126  0F80  3000               	movlw	0
  6127  0F81  1803               	skipnc
  6128  0F82  3001               	movlw	1
  6129  0F83  00F4               	movwf	??_Buttons_UpdateButton
  6130  0F84  0875               	movf	Buttons_UpdateButton@button,w
  6131  0F85  0084               	movwf	4
  6132  0F86  0800               	movf	0,w
  6133  0F87  0674               	xorwf	??_Buttons_UpdateButton,w
  6134  0F88  39FE               	andlw	-2
  6135  0F89  0674               	xorwf	??_Buttons_UpdateButton,w
  6136  0F8A  0080               	movwf	0
  6137                           
  6138                           ;Buttons.c: 31:         button->held = 1;
  6139  0F8B  0875               	movf	Buttons_UpdateButton@button,w
  6140  0F8C  0084               	movwf	4
  6141  0F8D  1480               	bsf	0,1
  6142                           
  6143                           ;Buttons.c: 32:     }
  6144  0F8E  0008               	return
  6145  0F8F                     l2271:	
  6146                           
  6147                           ;Buttons.c: 34:     {;Buttons.c: 35:         button->pressed = 0;
  6148  0F8F  0875               	movf	Buttons_UpdateButton@button,w
  6149  0F90  0084               	movwf	4
  6150  0F91  1383               	bcf	3,7	;select IRP bank0
  6151  0F92  1000               	bcf	0,0
  6152                           
  6153                           ;Buttons.c: 36:         button->held = 0;
  6154  0F93  0875               	movf	Buttons_UpdateButton@button,w
  6155  0F94  0084               	movwf	4
  6156  0F95  1080               	bcf	0,1
  6157  0F96  0008               	return
  6158  0F97                     __end_of_Buttons_UpdateButton:	
  6159                           
  6160                           	psect	text46
  6161  0E0C                     __ptext46:	
  6162 ;; *************** function _Buttons_SetupPortsAndInterrups *****************
  6163 ;; Defined at:
  6164 ;;		line 40 in file "Buttons.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      void 
  6171 ;; Registers used:
  6172 ;;		wreg, status,2, status,0, pclath, cstack
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6178 ;;      Params:         0       0       0       0
  6179 ;;      Locals:         0       0       0       0
  6180 ;;      Temps:          0       0       0       0
  6181 ;;      Totals:         0       0       0       0
  6182 ;;Total ram usage:        0 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    2
  6185 ;; This function calls:
  6186 ;;		_Buttons_SetupInterrupts
  6187 ;;		_Buttons_SetupPortB
  6188 ;; This function is called by:
  6189 ;;		_main
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           
  6194                           ;psect for function _Buttons_SetupPortsAndInterrups
  6195  0E0C                     _Buttons_SetupPortsAndInterrups:	
  6196                           
  6197                           ;Buttons.c: 42:     Buttons_SetupPortB();
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in _Buttons_SetupPortsAndInterrups: [wreg+status,2+status,0+pclath+cstack]
  6201  0E0C  158A  2663  158A   	fcall	_Buttons_SetupPortB
  6202                           
  6203                           ;Buttons.c: 43:     Buttons_SetupInterrupts();
  6204  0E0F  158A  2606         	fcall	_Buttons_SetupInterrupts
  6205  0E11  0008               	return
  6206  0E12                     __end_of_Buttons_SetupPortsAndInterrups:	
  6207                           
  6208                           	psect	text47
  6209  0E63                     __ptext47:	
  6210 ;; *************** function _Buttons_SetupPortB *****************
  6211 ;; Defined at:
  6212 ;;		line 11 in file "Buttons.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;		None
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;		None
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  1    wreg      void 
  6219 ;; Registers used:
  6220 ;;		wreg, status,2
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6226 ;;      Params:         0       0       0       0
  6227 ;;      Locals:         0       0       0       0
  6228 ;;      Temps:          0       0       0       0
  6229 ;;      Totals:         0       0       0       0
  6230 ;;Total ram usage:        0 bytes
  6231 ;; Hardware stack levels used:    1
  6232 ;; Hardware stack levels required when called:    1
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_Buttons_SetupPortsAndInterrups
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           
  6241                           ;psect for function _Buttons_SetupPortB
  6242  0E63                     _Buttons_SetupPortB:	
  6243                           
  6244                           ;Buttons.c: 13:     TRISB = 0xFF;
  6245                           
  6246                           ;incstack = 0
  6247                           ; Regs used in _Buttons_SetupPortB: [wreg+status,2]
  6248  0E63  30FF               	movlw	255
  6249  0E64  1683               	bsf	3,5	;RP0=1, select bank1
  6250  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  6251  0E66  0086               	movwf	6	;volatile
  6252                           
  6253                           ;Buttons.c: 14:     ANSELH = 0;
  6254  0E67  1683               	bsf	3,5	;RP0=1, select bank3
  6255  0E68  1703               	bsf	3,6	;RP1=1, select bank3
  6256  0E69  0189               	clrf	9	;volatile
  6257                           
  6258                           ;Buttons.c: 15:     WPUB = 0b00011111;
  6259  0E6A  301F               	movlw	31
  6260  0E6B  1683               	bsf	3,5	;RP0=1, select bank1
  6261  0E6C  1303               	bcf	3,6	;RP1=0, select bank1
  6262  0E6D  0095               	movwf	21	;volatile
  6263                           
  6264                           ;Buttons.c: 16:     nRBPU = 0;
  6265  0E6E  1381               	bcf	1,7	;volatile
  6266  0E6F  0008               	return
  6267  0E70                     __end_of_Buttons_SetupPortB:	
  6268                           
  6269                           	psect	text48
  6270  0E06                     __ptext48:	
  6271 ;; *************** function _Buttons_SetupInterrupts *****************
  6272 ;; Defined at:
  6273 ;;		line 19 in file "Buttons.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      void 
  6280 ;; Registers used:
  6281 ;;		None
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6287 ;;      Params:         0       0       0       0
  6288 ;;      Locals:         0       0       0       0
  6289 ;;      Temps:          0       0       0       0
  6290 ;;      Totals:         0       0       0       0
  6291 ;;Total ram usage:        0 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    1
  6294 ;; This function calls:
  6295 ;;		Nothing
  6296 ;; This function is called by:
  6297 ;;		_Buttons_SetupPortsAndInterrups
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _Buttons_SetupInterrupts
  6303  0E06                     _Buttons_SetupInterrupts:	
  6304                           
  6305                           ;Buttons.c: 21:     GIE = 1;
  6306                           
  6307                           ;incstack = 0
  6308                           ; Regs used in _Buttons_SetupInterrupts: []
  6309  0E06  178B               	bsf	11,7	;volatile
  6310                           
  6311                           ;Buttons.c: 22:     INTE = 1;
  6312  0E07  160B               	bsf	11,4	;volatile
  6313                           
  6314                           ;Buttons.c: 23:     INTEDG = 0;
  6315  0E08  1683               	bsf	3,5	;RP0=1, select bank1
  6316  0E09  1303               	bcf	3,6	;RP1=0, select bank1
  6317  0E0A  1301               	bcf	1,6	;volatile
  6318  0E0B  0008               	return
  6319  0E0C                     __end_of_Buttons_SetupInterrupts:	
  6320                           
  6321                           	psect	text49
  6322  0E70                     __ptext49:	
  6323 ;; *************** function _Buttons_Clear *****************
  6324 ;; Defined at:
  6325 ;;		line 46 in file "Buttons.c"
  6326 ;; Parameters:    Size  Location     Type
  6327 ;;  buttons         1    wreg     PTR struct .
  6328 ;;		 -> main@buttons(4), 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  buttons         1    0[BANK0 ] PTR struct .
  6331 ;;		 -> main@buttons(4), 
  6332 ;; Return value:  Size  Location     Type
  6333 ;;                  1    wreg      void 
  6334 ;; Registers used:
  6335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6341 ;;      Params:         0       0       0       0
  6342 ;;      Locals:         0       1       0       0
  6343 ;;      Temps:          0       0       0       0
  6344 ;;      Totals:         0       1       0       0
  6345 ;;Total ram usage:        1 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:    2
  6348 ;; This function calls:
  6349 ;;		_memset
  6350 ;; This function is called by:
  6351 ;;		_main
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           
  6356                           ;psect for function _Buttons_Clear
  6357  0E70                     _Buttons_Clear:	
  6358                           
  6359                           ;incstack = 0
  6360                           ; Regs used in _Buttons_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6361                           ;Buttons_Clear@buttons stored from wreg
  6362  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  6363  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  6364  0E72  00A0               	movwf	Buttons_Clear@buttons
  6365                           
  6366                           ;Buttons.c: 46: void Buttons_Clear(Buttons *buttons);Buttons.c: 47: {;Buttons.c: 48:    
      +                           memset(buttons, 0, sizeof *buttons);
  6367  0E73  3000               	movlw	0
  6368  0E74  00F3               	movwf	memset@c
  6369  0E75  00F4               	movwf	memset@c+1
  6370  0E76  3004               	movlw	4
  6371  0E77  00F5               	movwf	memset@n
  6372  0E78  3000               	movlw	0
  6373  0E79  00F6               	movwf	memset@n+1
  6374  0E7A  0820               	movf	Buttons_Clear@buttons,w
  6375  0E7B  158A  26DE         	fcall	_memset
  6376  0E7D  0008               	return
  6377  0E7E                     __end_of_Buttons_Clear:	
  6378                           
  6379                           	psect	text50
  6380  0EDE                     __ptext50:	
  6381 ;; *************** function _memset *****************
  6382 ;; Defined at:
  6383 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\memset.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  p1              1    wreg     PTR void 
  6386 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  6387 ;;  c               2    3[COMMON] int 
  6388 ;;  n               2    5[COMMON] unsigned int 
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;  p1              1    9[COMMON] PTR void 
  6391 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  6392 ;;  p               1    8[COMMON] PTR unsigned char 
  6393 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      PTR void 
  6396 ;; Registers used:
  6397 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6403 ;;      Params:         4       0       0       0
  6404 ;;      Locals:         2       0       0       0
  6405 ;;      Temps:          1       0       0       0
  6406 ;;      Totals:         7       0       0       0
  6407 ;;Total ram usage:        7 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    1
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_Tetris_ResetGame
  6414 ;;		_Buttons_Clear
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _memset
  6420  0EDE                     _memset:	
  6421                           
  6422                           ;incstack = 0
  6423                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  6424                           ;memset@p1 stored from wreg
  6425  0EDE  00F9               	movwf	memset@p1
  6426  0EDF  0879               	movf	memset@p1,w
  6427  0EE0  00F7               	movwf	??_memset
  6428  0EE1  0877               	movf	??_memset,w
  6429  0EE2  00F8               	movwf	memset@p
  6430  0EE3                     l2773:	
  6431  0EE3  3001               	movlw	1
  6432  0EE4  02F5               	subwf	memset@n,f
  6433  0EE5  3000               	movlw	0
  6434  0EE6  1C03               	skipc
  6435  0EE7  03F6               	decf	memset@n+1,f
  6436  0EE8  02F6               	subwf	memset@n+1,f
  6437  0EE9  0A75               	incf	memset@n,w
  6438  0EEA  1903               	btfsc	3,2
  6439  0EEB  0A76               	incf	memset@n+1,w
  6440  0EEC  1903               	btfsc	3,2
  6441  0EED  0008               	return
  6442  0EEE  0873               	movf	memset@c,w
  6443  0EEF  00F7               	movwf	??_memset
  6444  0EF0  0878               	movf	memset@p,w
  6445  0EF1  0084               	movwf	4
  6446  0EF2  0877               	movf	??_memset,w
  6447  0EF3  1383               	bcf	3,7	;select IRP bank0
  6448  0EF4  0080               	movwf	0
  6449  0EF5  3001               	movlw	1
  6450  0EF6  00F7               	movwf	??_memset
  6451  0EF7  0877               	movf	??_memset,w
  6452  0EF8  07F8               	addwf	memset@p,f
  6453  0EF9  2EE3               	goto	l2773
  6454  0EFA                     __end_of_memset:	
  6455                           
  6456                           	psect	text51
  6457  0F55                     __ptext51:	
  6458 ;; *************** function _InterruptHandler *****************
  6459 ;; Defined at:
  6460 ;;		line 64 in file "main.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      void 
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6474 ;;      Params:         0       0       0       0
  6475 ;;      Locals:         0       0       0       0
  6476 ;;      Temps:          3       0       0       0
  6477 ;;      Totals:         3       0       0       0
  6478 ;;Total ram usage:        3 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		Interrupt level 1
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _InterruptHandler
  6489  0F55                     _InterruptHandler:	
  6490                           
  6491                           ;main.c: 66:     static uint8_t timerInterruptCounter = 0;;main.c: 68:     if (INTE && I
      +                          NTF)
  6492  0F55  1A0B               	btfsc	11,4	;volatile
  6493  0F56  1C8B               	btfss	11,1	;volatile
  6494  0F57  2F59               	goto	i1l74
  6495                           
  6496                           ;main.c: 69:     {;main.c: 70:         INTF = 0;
  6497  0F58  108B               	bcf	11,1	;volatile
  6498  0F59                     i1l74:	
  6499                           ;main.c: 72:     }
  6500                           
  6501                           
  6502                           ;main.c: 74:     if (TMR1IE && TMR1IF)
  6503  0F59  1683               	bsf	3,5	;RP0=1, select bank1
  6504  0F5A  1303               	bcf	3,6	;RP1=0, select bank1
  6505  0F5B  1C0C               	btfss	12,0	;volatile
  6506  0F5C  2F6F               	goto	i1l77
  6507  0F5D  1283               	bcf	3,5	;RP0=0, select bank0
  6508  0F5E  1303               	bcf	3,6	;RP1=0, select bank0
  6509  0F5F  1C0C               	btfss	12,0	;volatile
  6510  0F60  2F6F               	goto	i1l77
  6511                           
  6512                           ;main.c: 75:     {;main.c: 76:         TMR1IF = 0;
  6513  0F61  100C               	bcf	12,0	;volatile
  6514                           
  6515                           ;main.c: 77:         ++timerInterruptCounter;
  6516  0F62  3001               	movlw	1
  6517  0F63  00F0               	movwf	??_InterruptHandler
  6518  0F64  0870               	movf	??_InterruptHandler,w
  6519  0F65  07FA               	addwf	InterruptHandler@timerInterruptCounter,f
  6520                           
  6521                           ;main.c: 78:         if (timerInterruptCounter >= timerPrescaler)
  6522  0F66  1683               	bsf	3,5	;RP0=1, select bank1
  6523  0F67  1303               	bcf	3,6	;RP1=0, select bank1
  6524  0F68  0864               	movf	_timerPrescaler^(0+128),w
  6525  0F69  027A               	subwf	InterruptHandler@timerInterruptCounter,w
  6526  0F6A  1C03               	skipc
  6527  0F6B  2F6F               	goto	i1l77
  6528                           
  6529                           ;main.c: 79:         {;main.c: 80:             updateReady = 1;
  6530  0F6C  01E3               	clrf	_updateReady^(0+128)
  6531  0F6D  0AE3               	incf	_updateReady^(0+128),f
  6532                           
  6533                           ;main.c: 81:             timerInterruptCounter = 0;
  6534  0F6E  01FA               	clrf	InterruptHandler@timerInterruptCounter
  6535  0F6F                     i1l77:	
  6536  0F6F  0872               	movf	??_InterruptHandler+2,w
  6537  0F70  008A               	movwf	10
  6538  0F71  0E71               	swapf	(??_InterruptHandler+1)^(0+4294967168),w
  6539  0F72  0083               	movwf	3
  6540  0F73  0EFE               	swapf	126,f
  6541  0F74  0E7E               	swapf	126,w
  6542  0F75  0009               	retfie
  6543  0F76                     __end_of_InterruptHandler:	
  6544  007E                     btemp	set	126	;btemp
  6545  007E                     wtemp0	set	126
  6546                           
  6547                           	psect	intentry
  6548  0004                     __pintentry:	
  6549                           ;incstack = 0
  6550                           ; Regs used in _InterruptHandler: [wreg+status,2+status,0]
  6551                           
  6552  0004                     interrupt_function:	
  6553  007E                     saved_w	set	btemp
  6554  0004  00FE               	movwf	btemp
  6555  0005  0E03               	swapf	3,w
  6556  0006  00F1               	movwf	??_InterruptHandler+1
  6557  0007  080A               	movf	10,w
  6558  0008  00F2               	movwf	??_InterruptHandler+2
  6559  0009  158A  2F55         	ljmp	_InterruptHandler


Data Sizes:
    Strings     0
    Constant    242
    Data        5
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     39      43
    BANK1            80     67      69
    BANK2            80      0       0

Pointer List with Targets:

    RedrawTetrisOnLCD@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    main@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    memset@p1	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    memset@p	PTR unsigned char  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    RedrawTetrisOnLCD@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    RedrawTetrisOnLCD@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Buttons_Update@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_Clear@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_UpdateButton@button	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Tetris_RotatePlayer@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerRight@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerLeft@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerDown@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ClearFilledRows@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_UpdateGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    sp__memset	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetUnit	PTR const struct . size(2) Largest target is 238
		 -> NULL(NULL[0]), Tetris_units(CODE[238]), 

    Tetris_ShiftTableDown@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetPlayer@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_SetPlayerUnit@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerUnitBitsAreValid@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerUnitBitsAreValid@player	PTR const struct . size(1) Largest target is 63
		 -> tetrisGame.player(BANK0[13]), main@tetrisGame(BANK1[63]), 

    Tetris_UpdatePlayerUnitBits@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdatePlayerUnitBits@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_CountUnitBits@unitBits	PTR const unsigned int  size(2) Largest target is 238
		 -> tetrisGame.player(BANK0[13]), Tetris_units.bits(CODE[32]), Tetris_units(CODE[238]), main@tetrisGame(BANK1[63]), 

    Tetris_ApplyPlayerToTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_RemovePlayerFromTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingRightBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingRightBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingLeftBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingLeftBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerOverlapsEnvironment@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTopmostY@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTopmostY@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetRandomUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    S84$unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 


Critical Paths under _main in COMMON

    _Tetris_UpdateGame->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerDown->_Tetris_ApplyPlayerToTable
    _Tetris_GetRandomUnit->___awmod
    _rand->___lmul
    ___wmul->___awmod
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_ApplyPlayerToTable
    _Tetris_RotatePlayer->___lbmod
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ApplyPlayerToTable
    _Tetris_ResetGame->_memset
    _Tetris_ResetPlayer->_Tetris_SetPlayerUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerLeft->_Tetris_ApplyPlayerToTable
    _Tetris_RemovePlayerFromTable->_Tetris_PlayerTopmostY
    _Tetris_PlayerOverlapsEnvironment->_Tetris_PlayerTopmostY
    _Tetris_ApplyPlayerToTable->_Tetris_PlayerTopmostY
    _LCD_TurnOn->_LCD_Write
    _LCD_SetZ->_LCD_Write
    _LCD_WriteData->_LCD_Write
    _LCD_SetY->_LCD_Write
    _LCD_SetX->_LCD_Write
    _LCD_BlockWhileBusy->_LCD_IsBusy
    _LCD_IsBusy->_LCD_ReadStatus
    _Buttons_Update->_Buttons_UpdateButton
    _Buttons_Clear->_memset

Critical Paths under _InterruptHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Tetris_UpdateGame
    _Tetris_UpdateGame->_Tetris_ResetPlayer
    _Tetris_MovePlayerDown->_Tetris_PlayerOverlapsEnvironment
    _Tetris_GetRandomUnit->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ResetPlayer
    _Tetris_ResetPlayer->_Tetris_GetRandomUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerLeft->_Tetris_PlayerOverlapsEnvironment
    _RedrawTetrisOnLCD->_LCD_SetX
    _RedrawTetrisOnLCD->_LCD_SetY
    _RedrawTetrisOnLCD->_LCD_WriteData
    _LCD_Reset->_LCD_SetX
    _LCD_Reset->_LCD_SetY
    _LCD_Reset->_LCD_SetZ
    _LCD_Clear->_LCD_SetX
    _LCD_Clear->_LCD_SetY
    _LCD_Clear->_LCD_WriteData

Critical Paths under _InterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                68    68      0   26965
                                             38 BANK0      1     1      0
                                              0 BANK1     67    67      0
                      _Buttons_Clear
     _Buttons_SetupPortsAndInterrups
                     _Buttons_Update
                          _LCD_Clear
                          _LCD_Reset
               _LCD_SegmentSelection
                     _LCD_SetupPorts
                         _LCD_TurnOn
                  _RedrawTetrisOnLCD
                         _ResetTimer
                    _SetupOscillator
                         _SetupTimer
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerLeft
             _Tetris_MovePlayerRight
                   _Tetris_ResetGame
                _Tetris_RotatePlayer
                  _Tetris_UpdateGame
 ---------------------------------------------------------------------------------
 (1) _Tetris_UpdateGame                                    4     4      0    6256
                                             34 BANK0      4     4      0
          _Tetris_ApplyPlayerToTable
             _Tetris_ClearFilledRows
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerDown
   _Tetris_PlayerOverlapsEnvironment
                 _Tetris_ResetPlayer
         _Tetris_ScoreForRowsCleared
 ---------------------------------------------------------------------------------
 (2) _Tetris_ScoreForRowsCleared                           3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_MovePlayerDown                                2     2      0    1784
                                             12 BANK0      2     2      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_GetRandomUnit                                 2     2      0    1173
                                             27 BANK0      2     2      0
                            ___awmod
                             ___wmul
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                              8 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              3 COMMON     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                             21 BANK0      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              8 COMMON     1     1      0
                                             15 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _Tetris_ClearFilledRows                               7     7      0     544
                                              2 BANK0      7     7      0
              _Tetris_ShiftTableDown
 ---------------------------------------------------------------------------------
 (3) _Tetris_ShiftTableDown                                9     8      1     353
                                              3 COMMON     7     6      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_RotatePlayer                                  8     8      0    3572
                                             12 BANK0      8     8      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
      _Tetris_PlayerUnitBitsAreValid
       _Tetris_RemovePlayerFromTable
        _Tetris_UpdatePlayerUnitBits
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              3 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerUnitBitsAreValid                        5     5      0     581
                                              5 BANK0      5     5      0
               _Tetris_CountUnitBits
 ---------------------------------------------------------------------------------
 (4) _Tetris_CountUnitBits                                12    10      2     452
                                              3 COMMON     7     5      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_ResetGame                                     3     1      2    2831
                                             34 BANK0      3     1      2
          _Tetris_ApplyPlayerToTable
               _Tetris_GetRandomUnit (ARG)
                 _Tetris_ResetPlayer
                             _memset
 ---------------------------------------------------------------------------------
 (2) _Tetris_ResetPlayer                                   5     3      2    1347
                                             29 BANK0      5     3      2
               _Tetris_GetRandomUnit (ARG)
               _Tetris_SetPlayerUnit
 ---------------------------------------------------------------------------------
 (3) _Tetris_SetPlayerUnit                                 3     1      2     971
                                              8 COMMON     2     0      2
                                             10 BANK0      1     1      0
        _Tetris_UpdatePlayerUnitBits
 ---------------------------------------------------------------------------------
 (5) _Tetris_UpdatePlayerUnitBits                         15    15      0     752
                                              3 COMMON     5     5      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerRight                               5     5      0    2008
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerTouchingRightBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingRightBound                      6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerLeft                                5     5      0    2008
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
     _Tetris_PlayerTouchingLeftBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (3) _Tetris_RemovePlayerFromTable                        11    11      0     432
                                              6 COMMON     3     3      0
                                              0 BANK0      8     8      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingLeftBound                       6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerOverlapsEnvironment                    15    15      0     465
                                              6 COMMON     3     3      0
                                              0 BANK0     12    12      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (3) _Tetris_ApplyPlayerToTable                           12    12      0     665
                                              6 COMMON     4     4      0
                                              0 BANK0      8     8      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (4) _Tetris_PlayerTopmostY                                3     3      0     121
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SetupTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetupOscillator                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RedrawTetrisOnLCD                                   14    14      0    2648
                                              2 BANK0     14    14      0
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_SegmentSelection                                 1     1      0      44
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_TurnOn                                           1     1      0     592
                                              0 BANK0      1     1      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_SetupPorts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Reset                                            0     0      0    1869
                           _LCD_SetX
                           _LCD_SetY
                           _LCD_SetZ
 ---------------------------------------------------------------------------------
 (2) _LCD_SetZ                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            3     3      0    2036
                                              2 BANK0      3     3      0
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_SetY                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_SetX                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1     592
                                              8 COMMON     2     1      1
                 _LCD_BlockWhileBusy
 ---------------------------------------------------------------------------------
 (4) _LCD_BlockWhileBusy                                   0     0      0      92
                         _LCD_IsBusy
 ---------------------------------------------------------------------------------
 (5) _LCD_IsBusy                                           3     3      0      92
                                              5 COMMON     3     3      0
                     _LCD_ReadStatus
 ---------------------------------------------------------------------------------
 (6) _LCD_ReadStatus                                       2     2      0      23
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buttons_Update                                       1     1      0     689
                                              6 COMMON     1     1      0
               _Buttons_UpdateButton
 ---------------------------------------------------------------------------------
 (2) _Buttons_UpdateButton                                 3     2      1     568
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Buttons_SetupPortsAndInterrups                       0     0      0       0
            _Buttons_SetupInterrupts
                 _Buttons_SetupPortB
 ---------------------------------------------------------------------------------
 (2) _Buttons_SetupPortB                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Buttons_SetupInterrupts                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buttons_Clear                                        1     1      0     636
                                              0 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     569
                                              3 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptHandler                                     3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buttons_Clear
     _memset
   _Buttons_SetupPortsAndInterrups
     _Buttons_SetupInterrupts
     _Buttons_SetupPortB
   _Buttons_Update
     _Buttons_UpdateButton
   _LCD_Clear
     _LCD_SetX
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetY
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_WriteData
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
   _LCD_Reset
     _LCD_SetX
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetY
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetZ
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
   _LCD_SegmentSelection
   _LCD_SetupPorts
   _LCD_TurnOn
     _LCD_Write
       _LCD_BlockWhileBusy
         _LCD_IsBusy
           _LCD_ReadStatus
   _RedrawTetrisOnLCD
     _LCD_SegmentSelection
     _LCD_SetX
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_SetY
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _LCD_WriteData
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
   _ResetTimer
   _SetupOscillator
   _SetupTimer
   _Tetris_GetRandomUnit
     ___awmod
       _rand (ARG)
         ___lmul
     ___wmul
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _Tetris_MovePlayerLeft
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingLeftBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_MovePlayerRight
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingRightBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_ResetGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_GetRandomUnit (ARG)
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_ResetPlayer (ARG)
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _memset (ARG)
   _Tetris_RotatePlayer
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerUnitBitsAreValid
       _Tetris_CountUnitBits
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
     _Tetris_UpdatePlayerUnitBits
     ___lbmod
   _Tetris_UpdateGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_ClearFilledRows
       _Tetris_ShiftTableDown
     _Tetris_GetRandomUnit
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_MovePlayerDown
       _Tetris_ApplyPlayerToTable
         _Tetris_PlayerTopmostY
       _Tetris_PlayerOverlapsEnvironment
         _Tetris_PlayerTopmostY
       _Tetris_RemovePlayerFromTable
         _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_ResetPlayer
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _Tetris_ScoreForRowsCleared

 _InterruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     43      45       5       86.3%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     27      2B       3       53.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7B      10        0.0%
ABS                  0      0      7B       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 29 16:55:55 2019

                           _LCD_ReadStatus 0E8C                                ?_LCD_IsBusy 0070  
                                        pc 0002                  ??_Buttons_SetupInterrupts 0073  
                              __CFG_CP$OFF 0000                                         fsr 0004  
                      ___wmul@multiplicand 0037                                ?_LCD_TurnOn 0070  
              RedrawTetrisOnLCD@tetrisGame 0024                                        l412 024F  
                                      l503 00D6                                        l367 0EA3  
                                      l368 0EA6                                        l369 0EAA  
                                      l713 0FFA                                        _GIE 005F  
                                      _RB1 0031                                        _RB2 0032  
                                      _RC0 0038                                        _RB3 0033  
                                      _RC1 0039                                        _RB4 0034  
                                      _RC2 003A                                        _RD0 0040  
                                      _RC3 003B                                        _RD1 0041  
                             __CFG_CPD$OFF 0000                       LCD_ReadStatus@status 0074  
                                      fsr0 0004                                        indf 0000  
                             ___awmod@sign 0034                    __end_of_SetupOscillator 0E18  
                             __CFG_LVP$OFF 0000                     _Tetris_MovePlayerRight 0489  
                                     l2025 061E                                       l2201 00B3  
                                     l2133 0EFC                                       l2039 064E  
                                     l2057 0ED6                                       l2153 0F1A  
                                     l2241 078F                                       l2139 0F0E  
                                     l2403 049D                                       l2067 00CE  
                                     l2271 0F8F                                       l2159 0F2C  
                                     l2423 04D4                                       l2247 07B1  
                                     l2191 00AF                                       l2183 00AB  
                                     l2425 04DE                                       l2417 04BD  
                                     l2249 07B5                                       l2195 00B1  
                                     l2187 00AD                                       l2179 00A9  
                                     l2381 0516                                       l2285 0FE3  
                                     l2367 04F6                                       l2623 02B4  
                                     l1923 06E8                                       l2387 052D  
                                     l2723 0545                                       l2821 0090  
                                     l2813 0085                                       l2901 0241  
                                     l2389 0535                                       l2653 0331  
                                     l2645 032E                                       l2741 056E  
                                     l2661 0662                                       l1847 0E8A  
                                     l2639 0312                                       l2735 0552  
                                     l2727 054C                                       l2913 027F  
                                     l1929 0713                                       l1945 0760  
                                     l2737 0560                                       l2745 0579  
                                     l2665 067A                                       l2907 027E  
                                     l2691 06C3                                       l2773 0EE3  
                                     l2853 03B7                                       l2749 0581  
                                     l2919 028D                                       l1959 0431  
                                     l2687 06A4                                       l2679 069F  
                                     l2791 07E9                                       l2783 07DC  
                                     l2871 05D0                                       l2943 03D6  
                                     l1969 0455                                       l2849 03A8  
                                     l1899 0E18                                       l2883 0210  
                                     l1979 0460                                       l2963 0406  
                                     l2955 03F6                                       l2893 0225  
                                     l2869 05CB                                       l2949 03EA  
                                     l2967 040D                                       l2959 03FE  
                                     l2977 0420                                       l2969 0415  
                                     l2999 00BB                                       u2105 0609  
                                     u2210 0752                                       u1315 00D7  
                                     u2035 067C                                       u2205 073A  
                                     u1325 00DE                                       u2045 0684  
                                     u1280 0ED3                                       u1185 0451  
                                     u2145 0555                                       u2075 06C4  
                                     u2165 0566                                       u2175 056F  
                                     u2375 029C                                       u2385 02A3  
                                     u1585 0FE6                                       u1945 02C5  
            ?_Tetris_RemovePlayerFromTable 0070                                       u1970 0322  
                                     _PEIE 005E               Tetris_ResetPlayer@playerUnit 003D  
                                     _INTE 005C                                       u1990 0341  
                                     _INTF 0059                                       u1975 031D  
                                     u1995 033C                                       i1l74 0F59  
                                     i1l77 0F6F                                       _TMR1 000E  
                                     _WPUB 0095                                main@buttons 00A0  
                             __CFG_WRT$OFF 0000                 ?_Tetris_ApplyPlayerToTable 0070  
                                     _main 03BD                                       _rand 05D2  
                       __size_of_LCD_Clear 0025                                       btemp 007E  
                       __size_of_LCD_Reset 0017                                       start 000B  
            Tetris_ApplyPlayerToTable@game 0079                         __size_of_LCD_Write 001B  
                            __CFG_IESO$OFF 0000                     __size_of_Buttons_Clear 000E  
                   __end_of_LCD_ReadStatus 0E9C                              _LCD_WriteData 0E29  
                            __CFG_MCLRE$ON 0000                             _LCD_SetupPorts 0F97  
             __end_of_Tetris_CountUnitBits 06DC                           __end_of_LCD_SetX 0E4B  
                         __end_of_LCD_SetY 0E57                           __end_of_LCD_SetZ 0E63  
    __end_of_Tetris_PlayerUnitBitsAreValid 0754     __size_of_Tetris_PlayerUnitBitsAreValid 0037  
            _Tetris_PlayerUnitBitsAreValid 071D                                      ?_main 0070  
                   ??_Tetris_GetRandomUnit 003B                                      ?_rand 0028  
                            __CFG_WDTE$OFF 0000                            __end_of___awmod 0586  
                          __end_of___lbmod 1000                                      _ANSEL 0188  
                                    _IRCF0 047C                                      _IRCF1 047D  
                                    _IRCF2 047E                                      _PORTA 0005  
                                    _PORTB 0006                                      _PORTC 0007  
                                    _PORTD 0008                                      _TRISA 0085  
                                    _TRISB 0086                                      _TRISC 0087  
                                    _TRISD 0088                        ___lmul@multiplicand 0024  
                           __CFG_FCMEN$OFF 0000                  __size_of_Tetris_ResetGame 001F  
                                    _nRBPU 040F                Tetris_PlayerTopmostY@player 0075  
                                    _randx 0047                        __size_of_LCD_IsBusy 000E  
         Tetris_PlayerTouchingRightBound@i 0078                             __CFG_BOREN$OFF 0000  
                     Tetris_ResetGame@game 0044                                      pclath 000A  
                                    status 0003                                      wtemp0 007E  
                      __size_of_LCD_TurnOn 000A          __end_of_Tetris_ApplyPlayerToTable 0489  
             ??_Tetris_ScoreForRowsCleared 0073                             ?_LCD_WriteData 0070  
                          ?_LCD_ReadStatus 0070     __end_of_Buttons_SetupPortsAndInterrups 0E12  
  __size_of_Buttons_SetupPortsAndInterrups 0006             _Buttons_SetupPortsAndInterrups 0E0C  
                  __size_of_Buttons_Update 002C        __end_of_Tetris_UpdatePlayerUnitBits 034D  
              _Tetris_UpdatePlayerUnitBits 02B2                            __initialization 000D  
                   __end_of_LCD_SetupPorts 0FBA                               __end_of_main 0425  
                             __end_of_rand 0617                   Tetris_CountUnitBits@mask 0020  
                    Tetris_CountUnitBits@i 0024                      Tetris_CountUnitBits@j 0023  
                Buttons_UpdateButton@nHeld 0073                                     ??_main 0046  
                                   ??_rand 002A                          __end_of_LCD_Clear 00A7  
                  ?_Tetris_ClearFilledRows 0070                          __end_of_LCD_Reset 0EC3  
                            _Buttons_Clear 0E70                       _Buttons_UpdateButton 0F76  
                        __end_of_LCD_Write 0EDE       Tetris_PlayerOverlapsEnvironment@game 0078  
                         ?_SetupOscillator 0070                    Tetris_ClearFilledRows@i 0028  
           __size_of_Tetris_MovePlayerLeft 0057             __size_of_Tetris_MovePlayerDown 0030  
                                   _ANSELH 0189              __end_of_Tetris_MovePlayerLeft 0539  
            __end_of_Tetris_MovePlayerDown 07EB                                     _INTEDG 040E  
           __size_of_Tetris_PlayerTopmostY 0012              __end_of_Tetris_PlayerTopmostY 07FD  
                                   _TMR1IE 0460                                     _TMR1IF 0060  
                                   _TMR1CS 0081                                     _TMR1ON 0080  
                               _ResetTimer 0E01             ??_Tetris_RemovePlayerFromTable 0020  
                           __CFG_PWRTE$OFF 0000                 RedrawTetrisOnLCD@rightMask 0027  
                       _Tetris_ResetPlayer 0FBA                            ?_LCD_SetupPorts 0070  
                                   ___lmul 065A                                     ___wmul 00CA  
                                ??___awmod 0078                                  ??___lbmod 0074  
                                   _memset 0EDE                            ___awmod@divisor 002F  
                               _SetupTimer 0E34                        ?_Tetris_ResetPlayer 003D  
           __end_of_Tetris_ClearFilledRows 07BB                            ___awmod@counter 0033  
                           ?_Buttons_Clear 0070                      ?_Buttons_UpdateButton 0073  
            __size_of_LCD_SegmentSelection 0010             ?_Tetris_PlayerUnitBitsAreValid 0070  
             Tetris_UpdatePlayerUnitBits@i 0075                                     saved_w 007E  
                     ??_Tetris_ResetPlayer 003F                            ___lbmod@divisor 0073  
                     _Tetris_CountUnitBits 069B                    __end_of__initialization 0028  
                          ___lbmod@counter 0078                                  ?_LCD_SetX 0070  
                                ?_LCD_SetY 0070                                  ?_LCD_SetZ 0070  
                          ??_LCD_WriteData 0020              __size_of_Tetris_SetPlayerUnit 0010  
                                LCD_SetX@x 0021                                  LCD_SetY@y 0021  
                                LCD_SetZ@z 0021                             __pcstackCOMMON 0070  
           __size_of_Tetris_ShiftTableDown 0043                               ??_LCD_IsBusy 0075  
            __end_of_Tetris_ShiftTableDown 065A                               __pidataBANK0 0DFD  
                             __pidataBANK1 07FD                         _Buttons_SetupPortB 0E63  
              __size_of_LCD_BlockWhileBusy 0007                               ??_LCD_TurnOn 0020  
                __size_of_InterruptHandler 0021                        ?_Buttons_SetupPortB 0070  
                  ?_Tetris_MovePlayerRight 0070   __end_of_Tetris_PlayerOverlapsEnvironment 071D  
__size_of_Tetris_PlayerOverlapsEnvironment 0041         ??_Tetris_PlayerOverlapsEnvironment 0020  
        ?_Tetris_PlayerOverlapsEnvironment 0070           _Tetris_PlayerOverlapsEnvironment 06DC  
                         _Tetris_ResetGame 0F36                 Buttons_UpdateButton@button 0075  
                               __pbssBANK1 00E3                         __end_of_LCD_IsBusy 0E8C  
                    ?_Tetris_CountUnitBits 0073                                 ??_LCD_SetX 0020  
                               ??_LCD_SetY 0020                                 ??_LCD_SetZ 0020  
              ??_Tetris_ApplyPlayerToTable 0020         __end_of_Tetris_ScoreForRowsCleared 00CA  
               _Tetris_ScoreForRowsCleared 00A7                                ?_ResetTimer 0070  
                       __end_of_LCD_TurnOn 0E29                       ??_Buttons_SetupPortB 0073  
    InterruptHandler@timerInterruptCounter 007A                             _Buttons_Update 002B  
           Tetris_RotatePlayer@oldRotation 0032                                 __pmaintext 03BD  
                                  ?___lmul 0020               __size_of_Tetris_RotatePlayer 0070  
                                  ?___wmul 0035                                 __pintentry 0004  
                                  ?_memset 0073                             ___lmul@product 0074  
                          ??_Buttons_Clear 007A                                ?_SetupTimer 0070  
                   ??_Buttons_UpdateButton 0074                                    _T1CKPS0 0084  
                                  _T1CKPS1 0085             __end_of_Tetris_MovePlayerRight 04E2  
                   Tetris_MovePlayerLeft@i 002E                                 __stringtab 0100  
                         ??_LCD_ReadStatus 0073                     __end_of_Buttons_Update 0057  
                 ?_Buttons_SetupInterrupts 0070                              LCD_Write@data 0078  
                            LCD_Write@mode 0079      __end_of_Tetris_playerStartingPosition 0114  
            _Tetris_playerStartingPosition 0112                          LCD_WriteData@data 0021  
                 Tetris_SetPlayerUnit@unit 0078                            __size_of___lmul 0041  
                                  ___awmod 0539                                    ___lbmod 0FDD  
                          __size_of___wmul 0023            Tetris_PlayerTouchingLeftBound@i 0078  
                          __size_of_memset 001C                  _Tetris_ApplyPlayerToTable 0425  
                                  __ptext1 0586                                    __ptext2 00A7  
                                  __ptext3 07BB                                    __ptext4 0057  
                                  __ptext5 05D2                                    __ptext6 065A  
                                  __ptext7 00CA                                    __ptext8 0539  
                                  __ptext9 078A              __size_of_Tetris_GetRandomUnit 002B  
     __size_of_Tetris_UpdatePlayerUnitBits 009B                           ___awmod@dividend 0031  
                      __size_of_ResetTimer 0005                                  _LCD_Clear 0082  
                                _LCD_Reset 0EAC                  Tetris_MovePlayerLeft@game 0030  
    Tetris_ScoreForRowsCleared@rowsCleared 0075                                  _LCD_Write 0EC3  
                Tetris_MovePlayerDown@game 002D                     ??_Tetris_CountUnitBits 0075  
                     end_of_initialization 0028          Tetris_ClearFilledRows@rowsCleared 0026  
                                  memset@c 0073                                    memset@n 0075  
                                  memset@p 0078                        __size_of_SetupTimer 000B  
                         ??_LCD_SetupPorts 0073                            ?_Buttons_Update 0070  
                           main@tetrisGame 00A4                           _Tetris_unitPivot 0114  
                Tetris_ShiftTableDown@upto 0073                               __pstringtext 0100  
        Tetris_UpdatePlayerUnitBits@player 0077                           _InterruptHandler 0F55  
    Tetris_PlayerTouchingRightBound@player 0077                Tetris_MovePlayerRight@i_452 002F  
                         ___lbmod@dividend 0077                                 ?_LCD_Clear 0070  
                     Buttons_Clear@buttons 0020                                 ?_LCD_Reset 0070  
                               ?_LCD_Write 0078              Tetris_RemovePlayerFromTable@i 0078  
                    Tetris_UpdateGame@game 0045                                ___lbmod@rem 0079  
          __end_of_Buttons_SetupInterrupts 0E0C                      _Tetris_MovePlayerLeft 04E2  
                    _Tetris_MovePlayerDown 07BB                   __size_of_SetupOscillator 0006  
                               LCD_Clear@x 0024                                 LCD_Clear@y 0023  
             __end_of_LCD_SegmentSelection 0EAC            ??_Tetris_PlayerUnitBitsAreValid 0025  
                    _Tetris_PlayerTopmostY 07EB                          __size_of_LCD_SetX 000C  
                        __size_of_LCD_SetY 000C                          __size_of_LCD_SetZ 000C  
                 __end_of_Tetris_ResetGame 0F55                             __end_of___lmul 069B  
                           __end_of___wmul 00ED                 Tetris_ResetGame@playerUnit 0042  
                           __end_of_memset 0EFA               __end_of_Tetris_SetPlayerUnit 00FD  
   __end_of_Tetris_PlayerTouchingLeftBound 0F18    __size_of_Tetris_PlayerTouchingLeftBound 001E  
           _Tetris_PlayerTouchingLeftBound 0EFA                         RedrawTetrisOnLCD@i 002C  
                       RedrawTetrisOnLCD@x 002E                         RedrawTetrisOnLCD@y 002D  
                      start_initialization 000D        Tetris_PlayerUnitBitsAreValid@player 0029  
                      _Tetris_RotatePlayer 034D                  RedrawTetrisOnLCD@leftMask 0025  
              __size_of_Tetris_ResetPlayer 0023                               ??_ResetTimer 0073  
              ?_Tetris_ScoreForRowsCleared 0070                   __CFG_FOSC$INTRC_NOCLKOUT 0000  
                    __end_of_LCD_WriteData 0E34                 __end_of_LCD_BlockWhileBusy 0E1F  
                     ?_Tetris_RotatePlayer 0070                                   ??___lmul 0073  
                                 ??___wmul 0079           Tetris_RemovePlayerFromTable@game 0077  
                              __pdataBANK0 0047                                __pdataBANK1 00E4  
                    _Tetris_ShiftTableDown 0617                                   ??_memset 0077  
                             ??_SetupTimer 0073                                __pbssCOMMON 007A  
                                ___latbits 0001                              __pcstackBANK0 0020  
                            __pcstackBANK1 00A0                         __end_of_ResetTimer 0E06  
                              ??_LCD_Clear 0022                          _Tetris_UpdateGame 0586  
                              ??_LCD_Reset 007A         __size_of_Tetris_ApplyPlayerToTable 0064  
             Tetris_UpdateGame@rowsCleared 0044                                ??_LCD_Write 0079  
                       ?_Tetris_UpdateGame 0070                     ?_Tetris_MovePlayerLeft 0070  
                   ?_Tetris_MovePlayerDown 0070                     ?_Tetris_PlayerTopmostY 0070  
                       __end_of_SetupTimer 0E3F                        ??_Tetris_UpdateGame 0042  
              __size_of_Buttons_SetupPortB 000D                      ??_Tetris_RotatePlayer 002C  
                     __end_of_Tetris_units 0204                   ??_Tetris_ClearFilledRows 0022  
             ?_Tetris_UpdatePlayerUnitBits 0070                          ??_SetupOscillator 0073  
                                 ?___awmod 002F                                   ?___lbmod 0073  
           Tetris_ShiftTableDown@gameTable 0020                      __end_of_Buttons_Clear 0E7E  
         __size_of_Buttons_SetupInterrupts 0006                   __end_of_Tetris_unitPivot 0116  
            __size_of_Buttons_UpdateButton 0021                       _LCD_SegmentSelection 0E9C  
                __end_of_Tetris_UpdateGame 05D2             Tetris_ApplyPlayerToTable@i_303 0078  
                         ??_Buttons_Update 0076                             _timerPrescaler 00E4  
           Tetris_ApplyPlayerToTable@start 0076                          interrupt_function 0004  
                                 _LCD_SetX 0E3F                                   _LCD_SetY 0E4B  
                 __end_of_InterruptHandler 0F76                                   _LCD_SetZ 0E57  
                           ___wmul@product 0039                    Tetris_MovePlayerRight@i 002E  
             __end_of_Tetris_GetRandomUnit 0082                       _Tetris_SetPlayerUnit 00ED  
                        _RedrawTetrisOnLCD 0204                     Tetris_ShiftTableDown@i 0021  
                       ?_RedrawTetrisOnLCD 0070                     ?_Tetris_ShiftTableDown 0073  
            ??_Tetris_UpdatePlayerUnitBits 0020                 Tetris_CountUnitBits@result 0022  
                              __stringbase 0112                          ___wmul@multiplier 0035  
                      ??_RedrawTetrisOnLCD 0022                      ?_LCD_SegmentSelection 0070  
                    Buttons_Update@buttons 0076        __size_of_Tetris_ScoreForRowsCleared 0023  
             Tetris_CountUnitBits@unitBits 0073                          ___lmul@multiplier 0020  
        Tetris_PlayerOverlapsEnvironment@i 0077    __end_of_Tetris_PlayerTouchingRightBound 0F36  
 __size_of_Tetris_PlayerTouchingRightBound 001E          ??_Tetris_PlayerTouchingRightBound 0073  
         ?_Tetris_PlayerTouchingRightBound 0070            _Tetris_PlayerTouchingRightBound 0F18  
            __size_of_Tetris_CountUnitBits 0041                           LCD_IsBusy@status 0077  
                __end_of_RedrawTetrisOnLCD 02B2                      ?_Tetris_SetPlayerUnit 0078  
                        ?_Tetris_ResetGame 0042                 Tetris_SetPlayerUnit@player 002A  
          __size_of_Tetris_ClearFilledRows 0031                    __size_of_LCD_ReadStatus 0010  
                 ??_Tetris_MovePlayerRight 002C                         ??_Tetris_ResetGame 007A  
                         __size_of___awmod 004D                           __size_of___lbmod 0023  
        Tetris_RemovePlayerFromTable@start 0076                         __end_of__stringtab 0112  
               __size_of_Tetris_UpdateGame 004C           ??_Buttons_SetupPortsAndInterrups 0073  
          ?_Buttons_SetupPortsAndInterrups 0070                                   __ptext10 0617  
                                 __ptext11 034D                                   __ptext20 0F18  
                                 __ptext12 0FDD                                   __ptext21 04E2  
                                 __ptext13 071D                                   __ptext30 0204  
                                 __ptext22 0754                                   __ptext14 069B  
                                 __ptext31 0E9C                                   __ptext23 0EFA  
                                 __ptext15 0F36                                   __ptext40 0EC3  
                                 __ptext32 0E1F                                   __ptext24 06DC  
                                 __ptext16 0FBA                                   __ptext41 0E18  
                                 __ptext33 0F97                                   __ptext25 0425  
                                 __ptext17 00ED                                   __ptext50 0EDE  
                                 __ptext42 0E7E                                   __ptext34 0EAC  
                                 __ptext26 07EB                                   __ptext18 02B2  
                                 __ptext51 0F55                                   __ptext43 0E8C  
                                 __ptext35 0E57                                   __ptext27 0E34  
                                 __ptext19 0489                                   __ptext44 002B  
                                 __ptext36 0082                                   __ptext28 0E12  
                                 __ptext45 0F76                                   __ptext37 0E29  
                                 __ptext29 0E01                                   __ptext46 0E0C  
                                 __ptext38 0E4B                                   __ptext47 0E63  
                                 __ptext39 0E3F                                   __ptext48 0E06  
                                 __ptext49 0E70                          __CFG_BOR4V$BOR40V 0000  
     Tetris_PlayerTouchingLeftBound@player 0077           ??_Tetris_PlayerTouchingLeftBound 0073  
          ?_Tetris_PlayerTouchingLeftBound 0070                              __size_of_main 0068  
                            __size_of_rand 0045                    Tetris_RotatePlayer@game 0033  
                               _LCD_IsBusy 0E7E                 Tetris_MovePlayerLeft@i_438 002F  
          Tetris_ClearFilledRows@gameTable 0027                    __size_of_LCD_SetupPorts 0023  
                               _LCD_TurnOn 0E1F                    _Buttons_SetupInterrupts 0E06  
                   ??_LCD_SegmentSelection 0073                       _Tetris_GetRandomUnit 0057  
                       _LCD_BlockWhileBusy 0E18                    ??_Tetris_MovePlayerLeft 002C  
                  ??_Tetris_MovePlayerDown 002C                     _Tetris_ClearFilledRows 078A  
                                 memset@p1 0079                               _Tetris_units 0116  
             LCD_SegmentSelection@segments 0073                    ??_Tetris_PlayerTopmostY 0073  
               __end_of_Tetris_ResetPlayer 0FDD                   Tetris_ResetPlayer@player 0041  
                                 intlevel1 0000                        ?_LCD_BlockWhileBusy 0070  
                          _SetupOscillator 0E12                     ??_Tetris_SetPlayerUnit 007A  
               __size_of_RedrawTetrisOnLCD 00AE                                  stringcode 010A  
    Tetris_PlayerOverlapsEnvironment@start 0076           Tetris_UpdatePlayerUnitBits@i_323 0073  
         Tetris_UpdatePlayerUnitBits@i_324 0074                             _LCD_IsBusy$575 0076  
          __size_of_Tetris_MovePlayerRight 0059                       ??_LCD_BlockWhileBusy 0078  
         Tetris_UpdatePlayerUnitBits@shift 0076                 Tetris_MovePlayerRight@game 0030  
                    ?_Tetris_GetRandomUnit 002C                                   stringtab 0100  
                   __size_of_LCD_WriteData 000B       __end_of_Tetris_RemovePlayerFromTable 078A  
    __size_of_Tetris_RemovePlayerFromTable 0036               _Tetris_RemovePlayerFromTable 0754  
               __end_of_Buttons_SetupPortB 0E70                __end_of_Tetris_RotatePlayer 03BD  
                 RedrawTetrisOnLCD@gameRow 002A                          ?_InterruptHandler 0070  
             __end_of_Buttons_UpdateButton 0F97                 Tetris_ApplyPlayerToTable@i 0077  
                  RedrawTetrisOnLCD@lcdRow 002F                    ??_Tetris_ShiftTableDown 0074  
                       ??_InterruptHandler 0070                                _updateReady 00E3  
                  RedrawTetrisOnLCD@tableY 0029  
