

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 30 15:45:00 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F884
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text61,local,class=CODE,merge=1,delta=2
    78                           	psect	intentry,global,class=CODE,delta=2
    79                           	dabs	1,0x7E,2
    80  0000                     
    81                           ; Version 2.05
    82                           ; Generated 20/12/2018 GMT
    83                           ; 
    84                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC16F884 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  008F                     	;# 
   160  0090                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0093                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0095                     	;# 
   168  0096                     	;# 
   169  0097                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009A                     	;# 
   173  009B                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  0105                     	;# 
   179  0107                     	;# 
   180  0108                     	;# 
   181  0109                     	;# 
   182  010C                     	;# 
   183  010C                     	;# 
   184  010D                     	;# 
   185  010E                     	;# 
   186  010F                     	;# 
   187  0185                     	;# 
   188  0187                     	;# 
   189  0188                     	;# 
   190  0189                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  0000                     	;# 
   194  0001                     	;# 
   195  0002                     	;# 
   196  0003                     	;# 
   197  0004                     	;# 
   198  0005                     	;# 
   199  0006                     	;# 
   200  0007                     	;# 
   201  0008                     	;# 
   202  0009                     	;# 
   203  000A                     	;# 
   204  000B                     	;# 
   205  000C                     	;# 
   206  000D                     	;# 
   207  000E                     	;# 
   208  000E                     	;# 
   209  000F                     	;# 
   210  0010                     	;# 
   211  0011                     	;# 
   212  0012                     	;# 
   213  0013                     	;# 
   214  0014                     	;# 
   215  0015                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001B                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  001D                     	;# 
   226  001E                     	;# 
   227  001F                     	;# 
   228  0081                     	;# 
   229  0085                     	;# 
   230  0086                     	;# 
   231  0087                     	;# 
   232  0088                     	;# 
   233  0089                     	;# 
   234  008C                     	;# 
   235  008D                     	;# 
   236  008E                     	;# 
   237  008F                     	;# 
   238  0090                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0093                     	;# 
   242  0093                     	;# 
   243  0093                     	;# 
   244  0094                     	;# 
   245  0095                     	;# 
   246  0096                     	;# 
   247  0097                     	;# 
   248  0098                     	;# 
   249  0099                     	;# 
   250  009A                     	;# 
   251  009B                     	;# 
   252  009C                     	;# 
   253  009D                     	;# 
   254  009E                     	;# 
   255  009F                     	;# 
   256  0105                     	;# 
   257  0107                     	;# 
   258  0108                     	;# 
   259  0109                     	;# 
   260  010C                     	;# 
   261  010C                     	;# 
   262  010D                     	;# 
   263  010E                     	;# 
   264  010F                     	;# 
   265  0185                     	;# 
   266  0187                     	;# 
   267  0188                     	;# 
   268  0189                     	;# 
   269  018C                     	;# 
   270  018D                     	;# 
   271  0000                     	;# 
   272  0001                     	;# 
   273  0002                     	;# 
   274  0003                     	;# 
   275  0004                     	;# 
   276  0005                     	;# 
   277  0006                     	;# 
   278  0007                     	;# 
   279  0008                     	;# 
   280  0009                     	;# 
   281  000A                     	;# 
   282  000B                     	;# 
   283  000C                     	;# 
   284  000D                     	;# 
   285  000E                     	;# 
   286  000E                     	;# 
   287  000F                     	;# 
   288  0010                     	;# 
   289  0011                     	;# 
   290  0012                     	;# 
   291  0013                     	;# 
   292  0014                     	;# 
   293  0015                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  001D                     	;# 
   304  001E                     	;# 
   305  001F                     	;# 
   306  0081                     	;# 
   307  0085                     	;# 
   308  0086                     	;# 
   309  0087                     	;# 
   310  0088                     	;# 
   311  0089                     	;# 
   312  008C                     	;# 
   313  008D                     	;# 
   314  008E                     	;# 
   315  008F                     	;# 
   316  0090                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0093                     	;# 
   320  0093                     	;# 
   321  0093                     	;# 
   322  0094                     	;# 
   323  0095                     	;# 
   324  0096                     	;# 
   325  0097                     	;# 
   326  0098                     	;# 
   327  0099                     	;# 
   328  009A                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  0105                     	;# 
   335  0107                     	;# 
   336  0108                     	;# 
   337  0109                     	;# 
   338  010C                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  010F                     	;# 
   343  0185                     	;# 
   344  0187                     	;# 
   345  0188                     	;# 
   346  0189                     	;# 
   347  018C                     	;# 
   348  018D                     	;# 
   349  0000                     	;# 
   350  0001                     	;# 
   351  0002                     	;# 
   352  0003                     	;# 
   353  0004                     	;# 
   354  0005                     	;# 
   355  0006                     	;# 
   356  0007                     	;# 
   357  0008                     	;# 
   358  0009                     	;# 
   359  000A                     	;# 
   360  000B                     	;# 
   361  000C                     	;# 
   362  000D                     	;# 
   363  000E                     	;# 
   364  000E                     	;# 
   365  000F                     	;# 
   366  0010                     	;# 
   367  0011                     	;# 
   368  0012                     	;# 
   369  0013                     	;# 
   370  0014                     	;# 
   371  0015                     	;# 
   372  0015                     	;# 
   373  0016                     	;# 
   374  0017                     	;# 
   375  0018                     	;# 
   376  0019                     	;# 
   377  001A                     	;# 
   378  001B                     	;# 
   379  001B                     	;# 
   380  001C                     	;# 
   381  001D                     	;# 
   382  001E                     	;# 
   383  001F                     	;# 
   384  0081                     	;# 
   385  0085                     	;# 
   386  0086                     	;# 
   387  0087                     	;# 
   388  0088                     	;# 
   389  0089                     	;# 
   390  008C                     	;# 
   391  008D                     	;# 
   392  008E                     	;# 
   393  008F                     	;# 
   394  0090                     	;# 
   395  0091                     	;# 
   396  0092                     	;# 
   397  0093                     	;# 
   398  0093                     	;# 
   399  0093                     	;# 
   400  0094                     	;# 
   401  0095                     	;# 
   402  0096                     	;# 
   403  0097                     	;# 
   404  0098                     	;# 
   405  0099                     	;# 
   406  009A                     	;# 
   407  009B                     	;# 
   408  009C                     	;# 
   409  009D                     	;# 
   410  009E                     	;# 
   411  009F                     	;# 
   412  0105                     	;# 
   413  0107                     	;# 
   414  0108                     	;# 
   415  0109                     	;# 
   416  010C                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  010F                     	;# 
   421  0185                     	;# 
   422  0187                     	;# 
   423  0188                     	;# 
   424  0189                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  000E                     	;# 
   442  000E                     	;# 
   443  000F                     	;# 
   444  0010                     	;# 
   445  0011                     	;# 
   446  0012                     	;# 
   447  0013                     	;# 
   448  0014                     	;# 
   449  0015                     	;# 
   450  0015                     	;# 
   451  0016                     	;# 
   452  0017                     	;# 
   453  0018                     	;# 
   454  0019                     	;# 
   455  001A                     	;# 
   456  001B                     	;# 
   457  001B                     	;# 
   458  001C                     	;# 
   459  001D                     	;# 
   460  001E                     	;# 
   461  001F                     	;# 
   462  0081                     	;# 
   463  0085                     	;# 
   464  0086                     	;# 
   465  0087                     	;# 
   466  0088                     	;# 
   467  0089                     	;# 
   468  008C                     	;# 
   469  008D                     	;# 
   470  008E                     	;# 
   471  008F                     	;# 
   472  0090                     	;# 
   473  0091                     	;# 
   474  0092                     	;# 
   475  0093                     	;# 
   476  0093                     	;# 
   477  0093                     	;# 
   478  0094                     	;# 
   479  0095                     	;# 
   480  0096                     	;# 
   481  0097                     	;# 
   482  0098                     	;# 
   483  0099                     	;# 
   484  009A                     	;# 
   485  009B                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  009F                     	;# 
   490  0105                     	;# 
   491  0107                     	;# 
   492  0108                     	;# 
   493  0109                     	;# 
   494  010C                     	;# 
   495  010C                     	;# 
   496  010D                     	;# 
   497  010E                     	;# 
   498  010F                     	;# 
   499  0185                     	;# 
   500  0187                     	;# 
   501  0188                     	;# 
   502  0189                     	;# 
   503  018C                     	;# 
   504  018D                     	;# 
   505                           
   506                           	psect	idataBANK0
   507  0A2B                     __pidataBANK0:	
   508                           
   509                           ;initializer for _randx
   510  0A2B  3401               	retlw	1
   511  0A2C  3400               	retlw	0
   512  0A2D  3400               	retlw	0
   513  0A2E  3400               	retlw	0
   514                           
   515                           	psect	idataBANK1
   516  0003                     __pidataBANK1:	
   517                           
   518                           ;initializer for _timerPrescaler
   519  0003  340C               	retlw	12
   520                           
   521                           	psect	stringtext
   522  0100                     __pstringtext:	
   523  0100                     stringtab:	
   524  0100                     __stringtab:	
   525                           
   526                           ;	String table - string pointers are 2 bytes each
   527  0100  1BFF               	btfsc	btemp+1,7
   528  0101  290A               	ljmp	stringcode
   529  0102  1383               	bcf	3,7
   530  0103  187F               	btfsc	btemp+1,0
   531  0104  1783               	bsf	3,7
   532  0105  0800               	movf	0,w
   533  0106  0A84               	incf	4,f
   534  0107  1903               	skipnz
   535  0108  0AFF               	incf	btemp+1,f
   536  0109  0008               	return
   537  010A                     stringcode:	
   538  010A  087F               	movf	btemp+1,w
   539  010B  397F               	andlw	127
   540  010C  008A               	movwf	10
   541  010D  0804               	movf	4,w
   542  010E  0A84               	incf	4,f
   543  010F  1903               	skipnz
   544  0110  0AFF               	incf	btemp+1,f
   545  0111  0082               	movwf	2
   546  0112                     __stringbase:	
   547  0112                     __end_of__stringtab:	
   548  0112                     _logoImage:	
   549  0112  3400               	retlw	0
   550  0113  3400               	retlw	0
   551  0114  3400               	retlw	0
   552  0115  3400               	retlw	0
   553  0116  3400               	retlw	0
   554  0117  3400               	retlw	0
   555  0118  3400               	retlw	0
   556  0119  3400               	retlw	0
   557  011A  3400               	retlw	0
   558  011B  3400               	retlw	0
   559  011C  3400               	retlw	0
   560  011D  3400               	retlw	0
   561  011E  3400               	retlw	0
   562  011F  3400               	retlw	0
   563  0120  3400               	retlw	0
   564  0121  3400               	retlw	0
   565  0122  3400               	retlw	0
   566  0123  3400               	retlw	0
   567  0124  3400               	retlw	0
   568  0125  3400               	retlw	0
   569  0126  3400               	retlw	0
   570  0127  3400               	retlw	0
   571  0128  3400               	retlw	0
   572  0129  3400               	retlw	0
   573  012A  3400               	retlw	0
   574  012B  3400               	retlw	0
   575  012C  3400               	retlw	0
   576  012D  3400               	retlw	0
   577  012E  3400               	retlw	0
   578  012F  3400               	retlw	0
   579  0130  3400               	retlw	0
   580  0131  3400               	retlw	0
   581  0132  3400               	retlw	0
   582  0133  3400               	retlw	0
   583  0134  3400               	retlw	0
   584  0135  3400               	retlw	0
   585  0136  3400               	retlw	0
   586  0137  3400               	retlw	0
   587  0138  3400               	retlw	0
   588  0139  3400               	retlw	0
   589  013A  3400               	retlw	0
   590  013B  3400               	retlw	0
   591  013C  3400               	retlw	0
   592  013D  3400               	retlw	0
   593  013E  3400               	retlw	0
   594  013F  3400               	retlw	0
   595  0140  3400               	retlw	0
   596  0141  3400               	retlw	0
   597  0142  3400               	retlw	0
   598  0143  3400               	retlw	0
   599  0144  3400               	retlw	0
   600  0145  3400               	retlw	0
   601  0146  3400               	retlw	0
   602  0147  3400               	retlw	0
   603  0148  3400               	retlw	0
   604  0149  3400               	retlw	0
   605  014A  3400               	retlw	0
   606  014B  3400               	retlw	0
   607  014C  3400               	retlw	0
   608  014D  3400               	retlw	0
   609  014E  3400               	retlw	0
   610  014F  3400               	retlw	0
   611  0150  3400               	retlw	0
   612  0151  3400               	retlw	0
   613  0152  3400               	retlw	0
   614  0153  3400               	retlw	0
   615  0154  3400               	retlw	0
   616  0155  3400               	retlw	0
   617  0156  3400               	retlw	0
   618  0157  3400               	retlw	0
   619  0158  3400               	retlw	0
   620  0159  3400               	retlw	0
   621  015A  3400               	retlw	0
   622  015B  3400               	retlw	0
   623  015C  3400               	retlw	0
   624  015D  3400               	retlw	0
   625  015E  3400               	retlw	0
   626  015F  3400               	retlw	0
   627  0160  3400               	retlw	0
   628  0161  3400               	retlw	0
   629  0162  3400               	retlw	0
   630  0163  3400               	retlw	0
   631  0164  3400               	retlw	0
   632  0165  3400               	retlw	0
   633  0166  3400               	retlw	0
   634  0167  3400               	retlw	0
   635  0168  3400               	retlw	0
   636  0169  3400               	retlw	0
   637  016A  3400               	retlw	0
   638  016B  3400               	retlw	0
   639  016C  3400               	retlw	0
   640  016D  3400               	retlw	0
   641  016E  3400               	retlw	0
   642  016F  3400               	retlw	0
   643  0170  3400               	retlw	0
   644  0171  3400               	retlw	0
   645  0172  3400               	retlw	0
   646  0173  3400               	retlw	0
   647  0174  3400               	retlw	0
   648  0175  3400               	retlw	0
   649  0176  3400               	retlw	0
   650  0177  3400               	retlw	0
   651  0178  3400               	retlw	0
   652  0179  3400               	retlw	0
   653  017A  3400               	retlw	0
   654  017B  3400               	retlw	0
   655  017C  3400               	retlw	0
   656  017D  3400               	retlw	0
   657  017E  3400               	retlw	0
   658  017F  3400               	retlw	0
   659  0180  3400               	retlw	0
   660  0181  3400               	retlw	0
   661  0182  3400               	retlw	0
   662  0183  3400               	retlw	0
   663  0184  3400               	retlw	0
   664  0185  3400               	retlw	0
   665  0186  3400               	retlw	0
   666  0187  3400               	retlw	0
   667  0188  3400               	retlw	0
   668  0189  3400               	retlw	0
   669  018A  3400               	retlw	0
   670  018B  3400               	retlw	0
   671  018C  3400               	retlw	0
   672  018D  3400               	retlw	0
   673  018E  3400               	retlw	0
   674  018F  3400               	retlw	0
   675  0190  3400               	retlw	0
   676  0191  3400               	retlw	0
   677  0192  3400               	retlw	0
   678  0193  3400               	retlw	0
   679  0194  3400               	retlw	0
   680  0195  3400               	retlw	0
   681  0196  3400               	retlw	0
   682  0197  3400               	retlw	0
   683  0198  3400               	retlw	0
   684  0199  3400               	retlw	0
   685  019A  3400               	retlw	0
   686  019B  3400               	retlw	0
   687  019C  3400               	retlw	0
   688  019D  3400               	retlw	0
   689  019E  3400               	retlw	0
   690  019F  3400               	retlw	0
   691  01A0  3400               	retlw	0
   692  01A1  3400               	retlw	0
   693  01A2  3400               	retlw	0
   694  01A3  3400               	retlw	0
   695  01A4  3400               	retlw	0
   696  01A5  3400               	retlw	0
   697  01A6  3404               	retlw	4
   698  01A7  3418               	retlw	24
   699  01A8  34E0               	retlw	224
   700  01A9  3400               	retlw	0
   701  01AA  3400               	retlw	0
   702  01AB  3438               	retlw	56
   703  01AC  34F8               	retlw	248
   704  01AD  34F0               	retlw	240
   705  01AE  34C0               	retlw	192
   706  01AF  3400               	retlw	0
   707  01B0  34E0               	retlw	224
   708  01B1  34E0               	retlw	224
   709  01B2  3400               	retlw	0
   710  01B3  3400               	retlw	0
   711  01B4  3400               	retlw	0
   712  01B5  3400               	retlw	0
   713  01B6  3400               	retlw	0
   714  01B7  34FE               	retlw	254
   715  01B8  34FE               	retlw	254
   716  01B9  3400               	retlw	0
   717  01BA  3400               	retlw	0
   718  01BB  3400               	retlw	0
   719  01BC  34FF               	retlw	255
   720  01BD  3400               	retlw	0
   721  01BE  3400               	retlw	0
   722  01BF  3400               	retlw	0
   723  01C0  3400               	retlw	0
   724  01C1  3400               	retlw	0
   725  01C2  3400               	retlw	0
   726  01C3  3400               	retlw	0
   727  01C4  3400               	retlw	0
   728  01C5  3400               	retlw	0
   729  01C6  3400               	retlw	0
   730  01C7  3400               	retlw	0
   731  01C8  3400               	retlw	0
   732  01C9  3400               	retlw	0
   733  01CA  3400               	retlw	0
   734  01CB  3400               	retlw	0
   735  01CC  3400               	retlw	0
   736  01CD  3400               	retlw	0
   737  01CE  3400               	retlw	0
   738  01CF  3400               	retlw	0
   739  01D0  3400               	retlw	0
   740  01D1  3400               	retlw	0
   741  01D2  3400               	retlw	0
   742  01D3  3400               	retlw	0
   743  01D4  3400               	retlw	0
   744  01D5  3400               	retlw	0
   745  01D6  3400               	retlw	0
   746  01D7  3400               	retlw	0
   747  01D8  3400               	retlw	0
   748  01D9  3400               	retlw	0
   749  01DA  3400               	retlw	0
   750  01DB  3400               	retlw	0
   751  01DC  3400               	retlw	0
   752  01DD  3400               	retlw	0
   753  01DE  3400               	retlw	0
   754  01DF  3400               	retlw	0
   755  01E0  3400               	retlw	0
   756  01E1  3400               	retlw	0
   757  01E2  3400               	retlw	0
   758  01E3  3400               	retlw	0
   759  01E4  3400               	retlw	0
   760  01E5  3400               	retlw	0
   761  01E6  3400               	retlw	0
   762  01E7  3400               	retlw	0
   763  01E8  3401               	retlw	1
   764  01E9  341E               	retlw	30
   765  01EA  34E0               	retlw	224
   766  01EB  3400               	retlw	0
   767  01EC  3400               	retlw	0
   768  01ED  3401               	retlw	1
   769  01EE  34F3               	retlw	243
   770  01EF  34F3               	retlw	243
   771  01F0  3483               	retlw	131
   772  01F1  3483               	retlw	131
   773  01F2  3483               	retlw	131
   774  01F3  34C3               	retlw	195
   775  01F4  34FB               	retlw	251
   776  01F5  347B               	retlw	123
   777  01F6  3403               	retlw	3
   778  01F7  3403               	retlw	3
   779  01F8  3403               	retlw	3
   780  01F9  34E0               	retlw	224
   781  01FA  34F8               	retlw	248
   782  01FB  3400               	retlw	0
   783  01FC  3403               	retlw	3
   784  01FD  34FC               	retlw	252
   785  01FE  3400               	retlw	0
   786  01FF  3400               	retlw	0
   787  0200  3400               	retlw	0
   788  0201  3400               	retlw	0
   789  0202  3400               	retlw	0
   790  0203  3400               	retlw	0
   791  0204  3400               	retlw	0
   792  0205  3400               	retlw	0
   793  0206  3400               	retlw	0
   794  0207  3400               	retlw	0
   795  0208  3400               	retlw	0
   796  0209  3400               	retlw	0
   797  020A  3400               	retlw	0
   798  020B  3400               	retlw	0
   799  020C  3400               	retlw	0
   800  020D  3400               	retlw	0
   801  020E  3400               	retlw	0
   802  020F  3400               	retlw	0
   803  0210  3400               	retlw	0
   804  0211  3400               	retlw	0
   805  0212  3400               	retlw	0
   806  0213  3400               	retlw	0
   807  0214  3400               	retlw	0
   808  0215  3400               	retlw	0
   809  0216  3400               	retlw	0
   810  0217  3400               	retlw	0
   811  0218  3400               	retlw	0
   812  0219  3400               	retlw	0
   813  021A  3400               	retlw	0
   814  021B  3400               	retlw	0
   815  021C  3400               	retlw	0
   816  021D  3400               	retlw	0
   817  021E  3400               	retlw	0
   818  021F  3400               	retlw	0
   819  0220  3400               	retlw	0
   820  0221  3400               	retlw	0
   821  0222  3400               	retlw	0
   822  0223  3400               	retlw	0
   823  0224  3400               	retlw	0
   824  0225  3400               	retlw	0
   825  0226  3400               	retlw	0
   826  0227  3400               	retlw	0
   827  0228  3400               	retlw	0
   828  0229  3400               	retlw	0
   829  022A  3407               	retlw	7
   830  022B  34F8               	retlw	248
   831  022C  347C               	retlw	124
   832  022D  343C               	retlw	60
   833  022E  3439               	retlw	57
   834  022F  3439               	retlw	57
   835  0230  3439               	retlw	57
   836  0231  3439               	retlw	57
   837  0232  3439               	retlw	57
   838  0233  3439               	retlw	57
   839  0234  3438               	retlw	56
   840  0235  3438               	retlw	56
   841  0236  347C               	retlw	124
   842  0237  3400               	retlw	0
   843  0238  3400               	retlw	0
   844  0239  3407               	retlw	7
   845  023A  341F               	retlw	31
   846  023B  3400               	retlw	0
   847  023C  34C0               	retlw	192
   848  023D  343F               	retlw	63
   849  023E  3400               	retlw	0
   850  023F  3400               	retlw	0
   851  0240  3400               	retlw	0
   852  0241  3400               	retlw	0
   853  0242  3400               	retlw	0
   854  0243  3400               	retlw	0
   855  0244  3400               	retlw	0
   856  0245  3400               	retlw	0
   857  0246  3400               	retlw	0
   858  0247  3400               	retlw	0
   859  0248  3400               	retlw	0
   860  0249  3400               	retlw	0
   861  024A  3400               	retlw	0
   862  024B  3400               	retlw	0
   863  024C  3400               	retlw	0
   864  024D  3400               	retlw	0
   865  024E  3400               	retlw	0
   866  024F  3400               	retlw	0
   867  0250  3400               	retlw	0
   868  0251  3400               	retlw	0
   869  0252  3400               	retlw	0
   870  0253  3400               	retlw	0
   871  0254  3400               	retlw	0
   872  0255  3400               	retlw	0
   873  0256  3400               	retlw	0
   874  0257  3400               	retlw	0
   875  0258  3400               	retlw	0
   876  0259  3400               	retlw	0
   877  025A  3400               	retlw	0
   878  025B  3400               	retlw	0
   879  025C  3400               	retlw	0
   880  025D  3400               	retlw	0
   881  025E  3400               	retlw	0
   882  025F  3400               	retlw	0
   883  0260  3400               	retlw	0
   884  0261  3400               	retlw	0
   885  0262  3400               	retlw	0
   886  0263  3400               	retlw	0
   887  0264  3400               	retlw	0
   888  0265  3400               	retlw	0
   889  0266  3400               	retlw	0
   890  0267  3400               	retlw	0
   891  0268  3400               	retlw	0
   892  0269  3400               	retlw	0
   893  026A  3400               	retlw	0
   894  026B  3407               	retlw	7
   895  026C  3400               	retlw	0
   896  026D  3400               	retlw	0
   897  026E  3471               	retlw	113
   898  026F  3471               	retlw	113
   899  0270  3469               	retlw	105
   900  0271  346D               	retlw	109
   901  0272  3465               	retlw	101
   902  0273  3467               	retlw	103
   903  0274  3463               	retlw	99
   904  0275  3463               	retlw	99
   905  0276  3460               	retlw	96
   906  0277  3400               	retlw	0
   907  0278  3400               	retlw	0
   908  0279  3400               	retlw	0
   909  027A  3400               	retlw	0
   910  027B  3400               	retlw	0
   911  027C  340F               	retlw	15
   912  027D  3400               	retlw	0
   913  027E  3400               	retlw	0
   914  027F  3400               	retlw	0
   915  0280  3400               	retlw	0
   916  0281  3400               	retlw	0
   917  0282  3400               	retlw	0
   918  0283  3400               	retlw	0
   919  0284  3400               	retlw	0
   920  0285  3400               	retlw	0
   921  0286  3400               	retlw	0
   922  0287  3400               	retlw	0
   923  0288  3400               	retlw	0
   924  0289  3400               	retlw	0
   925  028A  3400               	retlw	0
   926  028B  3400               	retlw	0
   927  028C  3400               	retlw	0
   928  028D  3400               	retlw	0
   929  028E  3400               	retlw	0
   930  028F  3400               	retlw	0
   931  0290  3400               	retlw	0
   932  0291  3400               	retlw	0
   933  0292  3400               	retlw	0
   934  0293  3400               	retlw	0
   935  0294  3400               	retlw	0
   936  0295  3400               	retlw	0
   937  0296  3400               	retlw	0
   938  0297  3400               	retlw	0
   939  0298  3400               	retlw	0
   940  0299  3400               	retlw	0
   941  029A  3400               	retlw	0
   942  029B  3400               	retlw	0
   943  029C  3400               	retlw	0
   944  029D  3400               	retlw	0
   945  029E  3400               	retlw	0
   946  029F  3400               	retlw	0
   947  02A0  3400               	retlw	0
   948  02A1  3400               	retlw	0
   949  02A2  3400               	retlw	0
   950  02A3  3400               	retlw	0
   951  02A4  3400               	retlw	0
   952  02A5  3400               	retlw	0
   953  02A6  3400               	retlw	0
   954  02A7  3400               	retlw	0
   955  02A8  3400               	retlw	0
   956  02A9  3400               	retlw	0
   957  02AA  3400               	retlw	0
   958  02AB  3400               	retlw	0
   959  02AC  3400               	retlw	0
   960  02AD  3400               	retlw	0
   961  02AE  3400               	retlw	0
   962  02AF  3400               	retlw	0
   963  02B0  3400               	retlw	0
   964  02B1  3400               	retlw	0
   965  02B2  3400               	retlw	0
   966  02B3  3400               	retlw	0
   967  02B4  3400               	retlw	0
   968  02B5  3400               	retlw	0
   969  02B6  3400               	retlw	0
   970  02B7  3400               	retlw	0
   971  02B8  3400               	retlw	0
   972  02B9  3400               	retlw	0
   973  02BA  3400               	retlw	0
   974  02BB  3400               	retlw	0
   975  02BC  3400               	retlw	0
   976  02BD  3400               	retlw	0
   977  02BE  3400               	retlw	0
   978  02BF  3400               	retlw	0
   979  02C0  3400               	retlw	0
   980  02C1  3400               	retlw	0
   981  02C2  3400               	retlw	0
   982  02C3  3400               	retlw	0
   983  02C4  3400               	retlw	0
   984  02C5  3400               	retlw	0
   985  02C6  3400               	retlw	0
   986  02C7  3400               	retlw	0
   987  02C8  3400               	retlw	0
   988  02C9  3400               	retlw	0
   989  02CA  3400               	retlw	0
   990  02CB  3400               	retlw	0
   991  02CC  3400               	retlw	0
   992  02CD  3400               	retlw	0
   993  02CE  3400               	retlw	0
   994  02CF  3400               	retlw	0
   995  02D0  3400               	retlw	0
   996  02D1  3400               	retlw	0
   997  02D2  3400               	retlw	0
   998  02D3  3400               	retlw	0
   999  02D4  3400               	retlw	0
  1000  02D5  3400               	retlw	0
  1001  02D6  3400               	retlw	0
  1002  02D7  3400               	retlw	0
  1003  02D8  3400               	retlw	0
  1004  02D9  3400               	retlw	0
  1005  02DA  3400               	retlw	0
  1006  02DB  3400               	retlw	0
  1007  02DC  3400               	retlw	0
  1008  02DD  3400               	retlw	0
  1009  02DE  3400               	retlw	0
  1010  02DF  3400               	retlw	0
  1011  02E0  3400               	retlw	0
  1012  02E1  3400               	retlw	0
  1013  02E2  3400               	retlw	0
  1014  02E3  3400               	retlw	0
  1015  02E4  3400               	retlw	0
  1016  02E5  3400               	retlw	0
  1017  02E6  3400               	retlw	0
  1018  02E7  3400               	retlw	0
  1019  02E8  3400               	retlw	0
  1020  02E9  3400               	retlw	0
  1021  02EA  3400               	retlw	0
  1022  02EB  3400               	retlw	0
  1023  02EC  3400               	retlw	0
  1024  02ED  3400               	retlw	0
  1025  02EE  3400               	retlw	0
  1026  02EF  3400               	retlw	0
  1027  02F0  3400               	retlw	0
  1028  02F1  3400               	retlw	0
  1029  02F2  3400               	retlw	0
  1030  02F3  3400               	retlw	0
  1031  02F4  3400               	retlw	0
  1032  02F5  3400               	retlw	0
  1033  02F6  3400               	retlw	0
  1034  02F7  3400               	retlw	0
  1035  02F8  3400               	retlw	0
  1036  02F9  3400               	retlw	0
  1037  02FA  3400               	retlw	0
  1038  02FB  3400               	retlw	0
  1039  02FC  3400               	retlw	0
  1040  02FD  3400               	retlw	0
  1041  02FE  3400               	retlw	0
  1042  02FF  3400               	retlw	0
  1043  0300  3400               	retlw	0
  1044  0301  3400               	retlw	0
  1045  0302  3400               	retlw	0
  1046  0303  3400               	retlw	0
  1047  0304  3400               	retlw	0
  1048  0305  3400               	retlw	0
  1049  0306  3400               	retlw	0
  1050  0307  3400               	retlw	0
  1051  0308  3400               	retlw	0
  1052  0309  3400               	retlw	0
  1053  030A  3400               	retlw	0
  1054  030B  3400               	retlw	0
  1055  030C  3400               	retlw	0
  1056  030D  3400               	retlw	0
  1057  030E  3400               	retlw	0
  1058  030F  3400               	retlw	0
  1059  0310  3400               	retlw	0
  1060  0311  3400               	retlw	0
  1061  0312                     __end_of_logoImage:	
  1062  0312                     _Tetris_playerStartingPosition:	
  1063  0312  3408               	retlw	8
  1064  0313  3402               	retlw	2
  1065  0314                     __end_of_Tetris_playerStartingPosition:	
  1066  0314                     _Tetris_unitPivot:	
  1067  0314  3403               	retlw	3
  1068  0315  3402               	retlw	2
  1069  0316                     __end_of_Tetris_unitPivot:	
  1070  0316                     _Tetris_units:	
  1071  0316  3449               	retlw	73
  1072  0317  3402               	retlw	2
  1073  0318  3410               	retlw	16
  1074  0319  3400               	retlw	0
  1075  031A  3410               	retlw	16
  1076  031B  3400               	retlw	0
  1077  031C  3410               	retlw	16
  1078  031D  3400               	retlw	0
  1079  031E  3410               	retlw	16
  1080  031F  3400               	retlw	0
  1081  0320  3400               	retlw	0
  1082  0321  3400               	retlw	0
  1083  0322  3400               	retlw	0
  1084  0323  3400               	retlw	0
  1085  0324  343C               	retlw	60
  1086  0325  3400               	retlw	0
  1087  0326  3400               	retlw	0
  1088  0327  3400               	retlw	0
  1089  0328  3400               	retlw	0
  1090  0329  3400               	retlw	0
  1091  032A  3400               	retlw	0
  1092  032B  3400               	retlw	0
  1093  032C  3400               	retlw	0
  1094  032D  3400               	retlw	0
  1095  032E  3400               	retlw	0
  1096  032F  3400               	retlw	0
  1097  0330  3400               	retlw	0
  1098  0331  3400               	retlw	0
  1099  0332  3400               	retlw	0
  1100  0333  3400               	retlw	0
  1101  0334  3400               	retlw	0
  1102  0335  3400               	retlw	0
  1103  0336  3400               	retlw	0
  1104  0337  3400               	retlw	0
  1105  0338  344F               	retlw	79
  1106  0339  3401               	retlw	1
  1107  033A  3400               	retlw	0
  1108  033B  3400               	retlw	0
  1109  033C  3418               	retlw	24
  1110  033D  3400               	retlw	0
  1111  033E  3418               	retlw	24
  1112  033F  3400               	retlw	0
  1113  0340  3400               	retlw	0
  1114  0341  3400               	retlw	0
  1115  0342  3400               	retlw	0
  1116  0343  3400               	retlw	0
  1117  0344  3400               	retlw	0
  1118  0345  3400               	retlw	0
  1119  0346  3400               	retlw	0
  1120  0347  3400               	retlw	0
  1121  0348  3400               	retlw	0
  1122  0349  3400               	retlw	0
  1123  034A  3400               	retlw	0
  1124  034B  3400               	retlw	0
  1125  034C  3400               	retlw	0
  1126  034D  3400               	retlw	0
  1127  034E  3400               	retlw	0
  1128  034F  3400               	retlw	0
  1129  0350  3400               	retlw	0
  1130  0351  3400               	retlw	0
  1131  0352  3400               	retlw	0
  1132  0353  3400               	retlw	0
  1133  0354  3400               	retlw	0
  1134  0355  3400               	retlw	0
  1135  0356  3400               	retlw	0
  1136  0357  3400               	retlw	0
  1137  0358  3400               	retlw	0
  1138  0359  3400               	retlw	0
  1139  035A  3454               	retlw	84
  1140  035B  3404               	retlw	4
  1141  035C  3400               	retlw	0
  1142  035D  3400               	retlw	0
  1143  035E  3410               	retlw	16
  1144  035F  3400               	retlw	0
  1145  0360  3438               	retlw	56
  1146  0361  3400               	retlw	0
  1147  0362  3400               	retlw	0
  1148  0363  3400               	retlw	0
  1149  0364  3400               	retlw	0
  1150  0365  3400               	retlw	0
  1151  0366  3410               	retlw	16
  1152  0367  3400               	retlw	0
  1153  0368  3418               	retlw	24
  1154  0369  3400               	retlw	0
  1155  036A  3410               	retlw	16
  1156  036B  3400               	retlw	0
  1157  036C  3400               	retlw	0
  1158  036D  3400               	retlw	0
  1159  036E  3400               	retlw	0
  1160  036F  3400               	retlw	0
  1161  0370  3438               	retlw	56
  1162  0371  3400               	retlw	0
  1163  0372  3410               	retlw	16
  1164  0373  3400               	retlw	0
  1165  0374  3400               	retlw	0
  1166  0375  3400               	retlw	0
  1167  0376  3410               	retlw	16
  1168  0377  3400               	retlw	0
  1169  0378  3430               	retlw	48
  1170  0379  3400               	retlw	0
  1171  037A  3410               	retlw	16
  1172  037B  3400               	retlw	0
  1173  037C  344C               	retlw	76
  1174  037D  3404               	retlw	4
  1175  037E  3400               	retlw	0
  1176  037F  3400               	retlw	0
  1177  0380  3410               	retlw	16
  1178  0381  3400               	retlw	0
  1179  0382  3410               	retlw	16
  1180  0383  3400               	retlw	0
  1181  0384  3418               	retlw	24
  1182  0385  3400               	retlw	0
  1183  0386  3400               	retlw	0
  1184  0387  3400               	retlw	0
  1185  0388  3408               	retlw	8
  1186  0389  3400               	retlw	0
  1187  038A  3438               	retlw	56
  1188  038B  3400               	retlw	0
  1189  038C  3400               	retlw	0
  1190  038D  3400               	retlw	0
  1191  038E  3400               	retlw	0
  1192  038F  3400               	retlw	0
  1193  0390  3430               	retlw	48
  1194  0391  3400               	retlw	0
  1195  0392  3410               	retlw	16
  1196  0393  3400               	retlw	0
  1197  0394  3410               	retlw	16
  1198  0395  3400               	retlw	0
  1199  0396  3400               	retlw	0
  1200  0397  3400               	retlw	0
  1201  0398  3400               	retlw	0
  1202  0399  3400               	retlw	0
  1203  039A  3438               	retlw	56
  1204  039B  3400               	retlw	0
  1205  039C  3420               	retlw	32
  1206  039D  3400               	retlw	0
  1207  039E  344A               	retlw	74
  1208  039F  3404               	retlw	4
  1209  03A0  3400               	retlw	0
  1210  03A1  3400               	retlw	0
  1211  03A2  3410               	retlw	16
  1212  03A3  3400               	retlw	0
  1213  03A4  3410               	retlw	16
  1214  03A5  3400               	retlw	0
  1215  03A6  3430               	retlw	48
  1216  03A7  3400               	retlw	0
  1217  03A8  3400               	retlw	0
  1218  03A9  3400               	retlw	0
  1219  03AA  3420               	retlw	32
  1220  03AB  3400               	retlw	0
  1221  03AC  3438               	retlw	56
  1222  03AD  3400               	retlw	0
  1223  03AE  3400               	retlw	0
  1224  03AF  3400               	retlw	0
  1225  03B0  3400               	retlw	0
  1226  03B1  3400               	retlw	0
  1227  03B2  3418               	retlw	24
  1228  03B3  3400               	retlw	0
  1229  03B4  3410               	retlw	16
  1230  03B5  3400               	retlw	0
  1231  03B6  3410               	retlw	16
  1232  03B7  3400               	retlw	0
  1233  03B8  3400               	retlw	0
  1234  03B9  3400               	retlw	0
  1235  03BA  3420               	retlw	32
  1236  03BB  3400               	retlw	0
  1237  03BC  3438               	retlw	56
  1238  03BD  3400               	retlw	0
  1239  03BE  3400               	retlw	0
  1240  03BF  3400               	retlw	0
  1241  03C0  3453               	retlw	83
  1242  03C1  3402               	retlw	2
  1243  03C2  3400               	retlw	0
  1244  03C3  3400               	retlw	0
  1245  03C4  3418               	retlw	24
  1246  03C5  3400               	retlw	0
  1247  03C6  3430               	retlw	48
  1248  03C7  3400               	retlw	0
  1249  03C8  3400               	retlw	0
  1250  03C9  3400               	retlw	0
  1251  03CA  3400               	retlw	0
  1252  03CB  3400               	retlw	0
  1253  03CC  3410               	retlw	16
  1254  03CD  3400               	retlw	0
  1255  03CE  3418               	retlw	24
  1256  03CF  3400               	retlw	0
  1257  03D0  3408               	retlw	8
  1258  03D1  3400               	retlw	0
  1259  03D2  3400               	retlw	0
  1260  03D3  3400               	retlw	0
  1261  03D4  3400               	retlw	0
  1262  03D5  3400               	retlw	0
  1263  03D6  3400               	retlw	0
  1264  03D7  3400               	retlw	0
  1265  03D8  3400               	retlw	0
  1266  03D9  3400               	retlw	0
  1267  03DA  3400               	retlw	0
  1268  03DB  3400               	retlw	0
  1269  03DC  3400               	retlw	0
  1270  03DD  3400               	retlw	0
  1271  03DE  3400               	retlw	0
  1272  03DF  3400               	retlw	0
  1273  03E0  3400               	retlw	0
  1274  03E1  3400               	retlw	0
  1275  03E2  345A               	retlw	90
  1276  03E3  3402               	retlw	2
  1277  03E4  3400               	retlw	0
  1278  03E5  3400               	retlw	0
  1279  03E6  3430               	retlw	48
  1280  03E7  3400               	retlw	0
  1281  03E8  3418               	retlw	24
  1282  03E9  3400               	retlw	0
  1283  03EA  3400               	retlw	0
  1284  03EB  3400               	retlw	0
  1285  03EC  3400               	retlw	0
  1286  03ED  3400               	retlw	0
  1287  03EE  3408               	retlw	8
  1288  03EF  3400               	retlw	0
  1289  03F0  3418               	retlw	24
  1290  03F1  3400               	retlw	0
  1291  03F2  3410               	retlw	16
  1292  03F3  3400               	retlw	0
  1293  03F4  3400               	retlw	0
  1294  03F5  3400               	retlw	0
  1295  03F6  3400               	retlw	0
  1296  03F7  3400               	retlw	0
  1297  03F8  3400               	retlw	0
  1298  03F9  3400               	retlw	0
  1299  03FA  3400               	retlw	0
  1300  03FB  3400               	retlw	0
  1301  03FC  3400               	retlw	0
  1302  03FD  3400               	retlw	0
  1303  03FE  3400               	retlw	0
  1304  03FF  3400               	retlw	0
  1305  0400  3400               	retlw	0
  1306  0401  3400               	retlw	0
  1307  0402  3400               	retlw	0
  1308  0403  3400               	retlw	0
  1309  0404                     __end_of_Tetris_units:	
  1310  000E                     _TMR1	set	14
  1311  000B                     _INTCONbits	set	11
  1312  0003                     _STATUSbits	set	3
  1313  0007                     _PORTC	set	7
  1314  0008                     _PORTD	set	8
  1315  0006                     _PORTB	set	6
  1316  0005                     _PORTA	set	5
  1317  0039                     _RC1	set	57
  1318  0038                     _RC0	set	56
  1319  0041                     _RD1	set	65
  1320  0040                     _RD0	set	64
  1321  003A                     _RC2	set	58
  1322  003B                     _RC3	set	59
  1323  0031                     _RB1	set	49
  1324  0034                     _RB4	set	52
  1325  0033                     _RB3	set	51
  1326  0032                     _RB2	set	50
  1327  005F                     _GIE	set	95
  1328  0060                     _TMR1IF	set	96
  1329  0059                     _INTF	set	89
  1330  005C                     _INTE	set	92
  1331  0085                     _T1CKPS1	set	133
  1332  0084                     _T1CKPS0	set	132
  1333  0080                     _TMR1ON	set	128
  1334  005E                     _PEIE	set	94
  1335  0081                     _TMR1CS	set	129
  1336  0087                     _TRISC	set	135
  1337  0088                     _TRISD	set	136
  1338  0085                     _TRISA	set	133
  1339  0095                     _WPUB	set	149
  1340  0086                     _TRISB	set	134
  1341  040E                     _INTEDG	set	1038
  1342  040F                     _nRBPU	set	1039
  1343  0460                     _TMR1IE	set	1120
  1344  047E                     _IRCF2	set	1150
  1345  047D                     _IRCF1	set	1149
  1346  047C                     _IRCF0	set	1148
  1347  010C                     _EEDATA	set	268
  1348  010D                     _EEADR	set	269
  1349  018D                     _EECON2	set	397
  1350  018C                     _EECON1	set	396
  1351  018C                     _EECON1bits	set	396
  1352  0188                     _ANSEL	set	392
  1353  0189                     _ANSELH	set	393
  1354                           
  1355                           ; #config settings
  1356  0000                     
  1357                           	psect	cinit
  1358  000D                     start_initialization:	
  1359  000D                     __initialization:	
  1360                           
  1361                           ; Initialize objects allocated to BANK1
  1362  000D  1683               	bsf	3,5	;RP0=1, select bank1
  1363  000E  1303               	bcf	3,6	;RP1=0, select bank1
  1364  000F  118A  2003  118A   	fcall	__pidataBANK1	;fetch initializer
  1365  0012  00E4               	movwf	__pdataBANK1& (0+127)
  1366                           
  1367                           ; Initialize objects allocated to BANK0
  1368  0013  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0014  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0015  158A  222B  118A   	fcall	__pidataBANK0	;fetch initializer
  1371  0018  00C7               	movwf	__pdataBANK0& (0+127)
  1372  0019  158A  222C  118A   	fcall	__pidataBANK0+1	;fetch initializer
  1373  001C  00C8               	movwf	(__pdataBANK0+1)& (0+127)
  1374  001D  158A  222D  118A   	fcall	__pidataBANK0+2	;fetch initializer
  1375  0020  00C9               	movwf	(__pdataBANK0+2)& (0+127)
  1376  0021  158A  222E         	fcall	__pidataBANK0+3	;fetch initializer
  1377  0023  00CA               	movwf	(__pdataBANK0+3)& (0+127)
  1378                           
  1379                           ; Clear objects allocated to BANK1
  1380  0024  1683               	bsf	3,5	;RP0=1, select bank1
  1381  0025  1303               	bcf	3,6	;RP1=0, select bank1
  1382  0026  01E3               	clrf	__pbssBANK1& (0+127)
  1383                           
  1384                           ; Clear objects allocated to COMMON
  1385  0027  01FA               	clrf	__pbssCOMMON& (0+127)
  1386  0028                     end_of_initialization:	
  1387                           ;End of C runtime variable initialization code
  1388                           
  1389  0028                     __end_of__initialization:	
  1390  0028  0183               	clrf	3
  1391  0029  118A  2F9E         	ljmp	_main	;jump to C main() function
  1392                           
  1393                           	psect	bssEEDATA
  1394  0000                     __pbssEEDATA:	
  1395  0000                     _highscore:	
  1396  0000  0000               	db	0
  1397  0001                     _uniqueSeed:	
  1398  0001  0000               	db	0
  1399  0002  0000               	db	0
  1400                           
  1401                           	psect	bssCOMMON
  1402  007A                     __pbssCOMMON:	
  1403  007A                     InterruptHandler@timerInterruptCounter:	
  1404  007A                     	ds	1
  1405                           
  1406                           	psect	dataBANK0
  1407  0047                     __pdataBANK0:	
  1408  0047                     _randx:	
  1409  0047                     	ds	4
  1410                           
  1411                           	psect	bssBANK1
  1412  00E3                     __pbssBANK1:	
  1413  00E3                     _updateReady:	
  1414  00E3                     	ds	1
  1415                           
  1416                           	psect	dataBANK1
  1417  00E4                     __pdataBANK1:	
  1418  00E4                     _timerPrescaler:	
  1419  00E4                     	ds	1
  1420                           
  1421                           	psect	cstackBANK1
  1422  00A0                     __pcstackBANK1:	
  1423  00A0                     main@buttons:	
  1424                           
  1425                           ; 4 bytes @ 0x0
  1426  00A0                     	ds	4
  1427  00A4                     main@tetrisGame:	
  1428                           
  1429                           ; 63 bytes @ 0x4
  1430  00A4                     	ds	63
  1431                           
  1432                           	psect	cstackCOMMON
  1433  0070                     __pcstackCOMMON:	
  1434  0070                     ?_Buttons_SetupPortsAndInterrups:	
  1435  0070                     ?_LCD_SetupPorts:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0070                     ?_LCD_Reset:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0070                     ?_LCD_SegmentSelection:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0070                     ?_LCD_Clear:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0070                     ?_LCD_TurnOn:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0070                     ?_DrawLogo:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0070                     ?_Buttons_Clear:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0070                     ?_Buttons_Update:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0070                     ?_Tetris_MovePlayerLeft:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0070                     ?_Tetris_MovePlayerRight:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0070                     ?_Tetris_RotatePlayer:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0070                     ?_Tetris_UpdateGame:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0070                     ?_DrawTetris:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0070                     ?_Tetris_MovePlayerDown:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0070                     ?_Tetris_ClearFilledRows:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0070                     ?_LCD_ReadStatus:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0070                     ?_LCD_SetX:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0070                     ?_LCD_SetY:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0070                     ?_LCD_SetZ:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0070                     ?_SetupOscillator:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0070                     ?_SetupTimer:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  0070                     ?_ResetTimer:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  0070                     ?_InterruptHandler:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  0070                     ??_InterruptHandler:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  0070                     ?_SetupRandomness:	
  1508                           ; 1 bytes @ 0x0
  1509                           
  1510  0070                     ?_Setup:	
  1511                           ; 1 bytes @ 0x0
  1512                           
  1513  0070                     ?_ShowLogo:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  0070                     ?_main:	
  1517                           ; 1 bytes @ 0x0
  1518                           
  1519  0070                     ?_Tetris_PlayerTopmostY:	
  1520                           ; 1 bytes @ 0x0
  1521                           
  1522  0070                     ?_Tetris_PlayerOverlapsEnvironment:	
  1523                           ; 1 bytes @ 0x0
  1524                           
  1525  0070                     ?_Tetris_PlayerTouchingLeftBound:	
  1526                           ; 1 bytes @ 0x0
  1527                           
  1528  0070                     ?_Tetris_PlayerTouchingRightBound:	
  1529                           ; 1 bytes @ 0x0
  1530                           
  1531  0070                     ?_Tetris_RemovePlayerFromTable:	
  1532                           ; 1 bytes @ 0x0
  1533                           
  1534  0070                     ?_Tetris_ApplyPlayerToTable:	
  1535                           ; 1 bytes @ 0x0
  1536                           
  1537  0070                     ?_Tetris_UpdatePlayerUnitBits:	
  1538                           ; 1 bytes @ 0x0
  1539                           
  1540  0070                     ?_Tetris_PlayerUnitBitsAreValid:	
  1541                           ; 1 bytes @ 0x0
  1542                           
  1543  0070                     ?_Tetris_ScoreForRowsCleared:	
  1544                           ; 1 bytes @ 0x0
  1545                           
  1546  0070                     ?_Buttons_SetupPortB:	
  1547                           ; 1 bytes @ 0x0
  1548                           
  1549  0070                     ?_Buttons_SetupInterrupts:	
  1550                           ; 1 bytes @ 0x0
  1551                           
  1552  0070                     ?_LCD_IsBusy:	
  1553                           ; 1 bytes @ 0x0
  1554                           
  1555  0070                     ?_LCD_BlockWhileBusy:	
  1556                           ; 1 bytes @ 0x0
  1557                           
  1558  0070                     ?_LCD_WriteData:	
  1559                           ; 1 bytes @ 0x0
  1560                           
  1561                           
  1562                           ; 1 bytes @ 0x0
  1563  0070                     	ds	3
  1564  0073                     ??_Buttons_SetupPortsAndInterrups:	
  1565  0073                     ??_LCD_SetupPorts:	
  1566                           ; 1 bytes @ 0x3
  1567                           
  1568  0073                     ??_LCD_SegmentSelection:	
  1569                           ; 1 bytes @ 0x3
  1570                           
  1571  0073                     ?_memset:	
  1572                           ; 1 bytes @ 0x3
  1573                           
  1574  0073                     ??_LCD_ReadStatus:	
  1575                           ; 1 bytes @ 0x3
  1576                           
  1577  0073                     ??_SetupOscillator:	
  1578                           ; 1 bytes @ 0x3
  1579                           
  1580  0073                     ??_SetupTimer:	
  1581                           ; 1 bytes @ 0x3
  1582                           
  1583  0073                     ??_ResetTimer:	
  1584                           ; 1 bytes @ 0x3
  1585                           
  1586  0073                     ??_Tetris_PlayerTopmostY:	
  1587                           ; 1 bytes @ 0x3
  1588                           
  1589  0073                     ??_Tetris_PlayerTouchingLeftBound:	
  1590                           ; 1 bytes @ 0x3
  1591                           
  1592  0073                     ??_Tetris_PlayerTouchingRightBound:	
  1593                           ; 1 bytes @ 0x3
  1594                           
  1595  0073                     ?_Tetris_CountUnitBits:	
  1596                           ; 1 bytes @ 0x3
  1597                           
  1598  0073                     ?_Tetris_ShiftTableDown:	
  1599                           ; 1 bytes @ 0x3
  1600                           
  1601  0073                     ??_Tetris_ScoreForRowsCleared:	
  1602                           ; 1 bytes @ 0x3
  1603                           
  1604  0073                     ??_Buttons_SetupPortB:	
  1605                           ; 1 bytes @ 0x3
  1606                           
  1607  0073                     ??_Buttons_SetupInterrupts:	
  1608                           ; 1 bytes @ 0x3
  1609                           
  1610  0073                     ?_Buttons_UpdateButton:	
  1611                           ; 1 bytes @ 0x3
  1612                           
  1613  0073                     ?___eecpymem:	
  1614                           ; 1 bytes @ 0x3
  1615                           
  1616  0073                     ?___memcpyee:	
  1617                           ; 1 bytes @ 0x3
  1618                           
  1619  0073                     ??___lmul:	
  1620                           ; 1 bytes @ 0x3
  1621                           
  1622  0073                     ?___lbmod:	
  1623                           ; 1 bytes @ 0x3
  1624                           
  1625  0073                     Tetris_UpdatePlayerUnitBits@i_346:	
  1626                           ; 1 bytes @ 0x3
  1627                           
  1628  0073                     Tetris_ShiftTableDown@upto:	
  1629                           ; 1 bytes @ 0x3
  1630                           
  1631  0073                     Buttons_UpdateButton@nHeld:	
  1632                           ; 1 bytes @ 0x3
  1633                           
  1634  0073                     LCD_SegmentSelection@segments:	
  1635                           ; 1 bytes @ 0x3
  1636                           
  1637  0073                     ___eecpymem@from:	
  1638                           ; 1 bytes @ 0x3
  1639                           
  1640  0073                     ___memcpyee@from:	
  1641                           ; 1 bytes @ 0x3
  1642                           
  1643  0073                     ___lbmod@divisor:	
  1644                           ; 1 bytes @ 0x3
  1645                           
  1646  0073                     Tetris_CountUnitBits@unitBits:	
  1647                           ; 1 bytes @ 0x3
  1648                           
  1649  0073                     memset@c:	
  1650                           ; 2 bytes @ 0x3
  1651                           
  1652                           
  1653                           ; 2 bytes @ 0x3
  1654  0073                     	ds	1
  1655  0074                     ??_Tetris_ShiftTableDown:	
  1656  0074                     ??_Buttons_UpdateButton:	
  1657                           ; 1 bytes @ 0x4
  1658                           
  1659  0074                     ??___lbmod:	
  1660                           ; 1 bytes @ 0x4
  1661                           
  1662  0074                     Tetris_UpdatePlayerUnitBits@i_347:	
  1663                           ; 1 bytes @ 0x4
  1664                           
  1665  0074                     LCD_ReadStatus@status:	
  1666                           ; 1 bytes @ 0x4
  1667                           
  1668  0074                     ___eecpymem@size:	
  1669                           ; 1 bytes @ 0x4
  1670                           
  1671  0074                     ___memcpyee@size:	
  1672                           ; 1 bytes @ 0x4
  1673                           
  1674  0074                     ___lmul@product:	
  1675                           ; 1 bytes @ 0x4
  1676                           
  1677                           
  1678                           ; 4 bytes @ 0x4
  1679  0074                     	ds	1
  1680  0075                     ??_Tetris_CountUnitBits:	
  1681  0075                     ??_LCD_IsBusy:	
  1682                           ; 1 bytes @ 0x5
  1683                           
  1684  0075                     ??___eecpymem:	
  1685                           ; 1 bytes @ 0x5
  1686                           
  1687  0075                     ??___memcpyee:	
  1688                           ; 1 bytes @ 0x5
  1689                           
  1690  0075                     Tetris_PlayerTopmostY@player:	
  1691                           ; 1 bytes @ 0x5
  1692                           
  1693  0075                     Tetris_UpdatePlayerUnitBits@i:	
  1694                           ; 1 bytes @ 0x5
  1695                           
  1696  0075                     Tetris_ScoreForRowsCleared@rowsCleared:	
  1697                           ; 1 bytes @ 0x5
  1698                           
  1699  0075                     Buttons_UpdateButton@button:	
  1700                           ; 1 bytes @ 0x5
  1701                           
  1702  0075                     memset@n:	
  1703                           ; 1 bytes @ 0x5
  1704                           
  1705                           
  1706                           ; 2 bytes @ 0x5
  1707  0075                     	ds	1
  1708  0076                     ??_Buttons_Update:	
  1709  0076                     Tetris_PlayerOverlapsEnvironment@start:	
  1710                           ; 1 bytes @ 0x6
  1711                           
  1712  0076                     Tetris_RemovePlayerFromTable@start:	
  1713                           ; 1 bytes @ 0x6
  1714                           
  1715  0076                     Tetris_ApplyPlayerToTable@start:	
  1716                           ; 1 bytes @ 0x6
  1717                           
  1718  0076                     Tetris_UpdatePlayerUnitBits@shift:	
  1719                           ; 1 bytes @ 0x6
  1720                           
  1721  0076                     Buttons_Update@buttons:	
  1722                           ; 1 bytes @ 0x6
  1723                           
  1724  0076                     _LCD_IsBusy$598:	
  1725                           ; 1 bytes @ 0x6
  1726                           
  1727  0076                     ___eecpymem@cp:	
  1728                           ; 1 bytes @ 0x6
  1729                           
  1730  0076                     ___memcpyee@ptr:	
  1731                           ; 1 bytes @ 0x6
  1732                           
  1733                           
  1734                           ; 1 bytes @ 0x6
  1735  0076                     	ds	1
  1736  0077                     ??_memset:	
  1737  0077                     Tetris_PlayerOverlapsEnvironment@i:	
  1738                           ; 1 bytes @ 0x7
  1739                           
  1740  0077                     Tetris_PlayerTouchingLeftBound@player:	
  1741                           ; 1 bytes @ 0x7
  1742                           
  1743  0077                     Tetris_PlayerTouchingRightBound@player:	
  1744                           ; 1 bytes @ 0x7
  1745                           
  1746  0077                     Tetris_RemovePlayerFromTable@game:	
  1747                           ; 1 bytes @ 0x7
  1748                           
  1749  0077                     Tetris_ApplyPlayerToTable@i:	
  1750                           ; 1 bytes @ 0x7
  1751                           
  1752  0077                     Tetris_UpdatePlayerUnitBits@player:	
  1753                           ; 1 bytes @ 0x7
  1754                           
  1755  0077                     LCD_IsBusy@status:	
  1756                           ; 1 bytes @ 0x7
  1757                           
  1758  0077                     ___eecpymem@to:	
  1759                           ; 1 bytes @ 0x7
  1760                           
  1761  0077                     ___memcpyee@to:	
  1762                           ; 1 bytes @ 0x7
  1763                           
  1764  0077                     ___lbmod@dividend:	
  1765                           ; 1 bytes @ 0x7
  1766                           
  1767                           
  1768                           ; 1 bytes @ 0x7
  1769  0077                     	ds	1
  1770  0078                     ?_Tetris_SetPlayerUnit:	
  1771  0078                     ??_LCD_BlockWhileBusy:	
  1772                           ; 1 bytes @ 0x8
  1773                           
  1774  0078                     ?_LCD_Write:	
  1775                           ; 1 bytes @ 0x8
  1776                           
  1777  0078                     ??___awmod:	
  1778                           ; 1 bytes @ 0x8
  1779                           
  1780  0078                     ?___eetoi:	
  1781                           ; 1 bytes @ 0x8
  1782                           
  1783  0078                     Tetris_PlayerOverlapsEnvironment@game:	
  1784                           ; 2 bytes @ 0x8
  1785                           
  1786  0078                     Tetris_PlayerTouchingLeftBound@i:	
  1787                           ; 1 bytes @ 0x8
  1788                           
  1789  0078                     Tetris_PlayerTouchingRightBound@i:	
  1790                           ; 1 bytes @ 0x8
  1791                           
  1792  0078                     Tetris_RemovePlayerFromTable@i:	
  1793                           ; 1 bytes @ 0x8
  1794                           
  1795  0078                     Tetris_ApplyPlayerToTable@i_326:	
  1796                           ; 1 bytes @ 0x8
  1797                           
  1798  0078                     LCD_Write@data:	
  1799                           ; 1 bytes @ 0x8
  1800                           
  1801  0078                     ___lbmod@counter:	
  1802                           ; 1 bytes @ 0x8
  1803                           
  1804  0078                     memset@p:	
  1805                           ; 1 bytes @ 0x8
  1806                           
  1807  0078                     Tetris_SetPlayerUnit@unit:	
  1808                           ; 1 bytes @ 0x8
  1809                           
  1810                           
  1811                           ; 2 bytes @ 0x8
  1812  0078                     	ds	1
  1813  0079                     ??_LCD_Write:	
  1814  0079                     ??___wmul:	
  1815                           ; 1 bytes @ 0x9
  1816                           
  1817  0079                     Tetris_ApplyPlayerToTable@game:	
  1818                           ; 1 bytes @ 0x9
  1819                           
  1820  0079                     LCD_Write@mode:	
  1821                           ; 1 bytes @ 0x9
  1822                           
  1823  0079                     ___lbmod@rem:	
  1824                           ; 1 bytes @ 0x9
  1825                           
  1826  0079                     memset@p1:	
  1827                           ; 1 bytes @ 0x9
  1828                           
  1829                           
  1830                           ; 1 bytes @ 0x9
  1831  0079                     	ds	1
  1832  007A                     ??_srand:	
  1833  007A                     ??_LCD_Reset:	
  1834                           ; 1 bytes @ 0xA
  1835                           
  1836  007A                     ??_Tetris_ResetGame:	
  1837                           ; 1 bytes @ 0xA
  1838                           
  1839  007A                     ??_Buttons_Clear:	
  1840                           ; 1 bytes @ 0xA
  1841                           
  1842  007A                     ??_SetupRandomness:	
  1843                           ; 1 bytes @ 0xA
  1844                           
  1845  007A                     ??_Setup:	
  1846                           ; 1 bytes @ 0xA
  1847                           
  1848  007A                     ??_Tetris_SetPlayerUnit:	
  1849                           ; 1 bytes @ 0xA
  1850                           
  1851                           
  1852                           	psect	cstackBANK0
  1853  0020                     __pcstackBANK0:	
  1854                           ; 1 bytes @ 0xA
  1855                           
  1856  0020                     ??_LCD_TurnOn:	
  1857  0020                     ??_LCD_SetX:	
  1858                           ; 1 bytes @ 0x0
  1859                           
  1860  0020                     ??_LCD_SetY:	
  1861                           ; 1 bytes @ 0x0
  1862                           
  1863  0020                     ??_LCD_SetZ:	
  1864                           ; 1 bytes @ 0x0
  1865                           
  1866  0020                     ??_Tetris_PlayerOverlapsEnvironment:	
  1867                           ; 1 bytes @ 0x0
  1868                           
  1869  0020                     ??_Tetris_RemovePlayerFromTable:	
  1870                           ; 1 bytes @ 0x0
  1871                           
  1872  0020                     ??_Tetris_ApplyPlayerToTable:	
  1873                           ; 1 bytes @ 0x0
  1874                           
  1875  0020                     ??_Tetris_UpdatePlayerUnitBits:	
  1876                           ; 1 bytes @ 0x0
  1877                           
  1878  0020                     ??_LCD_WriteData:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0020                     ??___eetoi:	
  1882                           ; 1 bytes @ 0x0
  1883                           
  1884  0020                     ?___lmul:	
  1885                           ; 1 bytes @ 0x0
  1886                           
  1887  0020                     Tetris_ShiftTableDown@gameTable:	
  1888                           ; 4 bytes @ 0x0
  1889                           
  1890  0020                     Buttons_Clear@buttons:	
  1891                           ; 1 bytes @ 0x0
  1892                           
  1893  0020                     Tetris_CountUnitBits@mask:	
  1894                           ; 1 bytes @ 0x0
  1895                           
  1896  0020                     ___lmul@multiplier:	
  1897                           ; 2 bytes @ 0x0
  1898                           
  1899                           
  1900                           ; 4 bytes @ 0x0
  1901  0020                     	ds	1
  1902  0021                     Tetris_ShiftTableDown@i:	
  1903  0021                     LCD_WriteData@data:	
  1904                           ; 1 bytes @ 0x1
  1905                           
  1906  0021                     LCD_SetY@y:	
  1907                           ; 1 bytes @ 0x1
  1908                           
  1909  0021                     LCD_SetX@x:	
  1910                           ; 1 bytes @ 0x1
  1911                           
  1912  0021                     LCD_SetZ@z:	
  1913                           ; 1 bytes @ 0x1
  1914                           
  1915                           
  1916                           ; 1 bytes @ 0x1
  1917  0021                     	ds	1
  1918  0022                     ??_LCD_Clear:	
  1919  0022                     ??_DrawLogo:	
  1920                           ; 1 bytes @ 0x2
  1921                           
  1922  0022                     ??_Tetris_ClearFilledRows:	
  1923                           ; 1 bytes @ 0x2
  1924                           
  1925  0022                     ?_DrawTetrisGameColumn:	
  1926                           ; 1 bytes @ 0x2
  1927                           
  1928  0022                     Tetris_CountUnitBits@result:	
  1929                           ; 1 bytes @ 0x2
  1930                           
  1931  0022                     DrawTetrisGameColumn@x:	
  1932                           ; 1 bytes @ 0x2
  1933                           
  1934  0022                     ___eetoi@addr:	
  1935                           ; 1 bytes @ 0x2
  1936                           
  1937                           
  1938                           ; 1 bytes @ 0x2
  1939  0022                     	ds	1
  1940  0023                     Tetris_CountUnitBits@j:	
  1941  0023                     LCD_Clear@y:	
  1942                           ; 1 bytes @ 0x3
  1943                           
  1944  0023                     DrawTetrisGameColumn@rightMask:	
  1945                           ; 1 bytes @ 0x3
  1946                           
  1947  0023                     ___eetoi@data:	
  1948                           ; 2 bytes @ 0x3
  1949                           
  1950                           
  1951                           ; 2 bytes @ 0x3
  1952  0023                     	ds	1
  1953  0024                     Tetris_CountUnitBits@i:	
  1954  0024                     LCD_Clear@x:	
  1955                           ; 1 bytes @ 0x4
  1956                           
  1957  0024                     ___lmul@multiplicand:	
  1958                           ; 1 bytes @ 0x4
  1959                           
  1960                           
  1961                           ; 4 bytes @ 0x4
  1962  0024                     	ds	1
  1963  0025                     ?_srand:	
  1964  0025                     ??_Tetris_PlayerUnitBitsAreValid:	
  1965                           ; 1 bytes @ 0x5
  1966                           
  1967  0025                     ?___itoee:	
  1968                           ; 1 bytes @ 0x5
  1969                           
  1970  0025                     DrawTetrisGameColumn@leftMask:	
  1971                           ; 2 bytes @ 0x5
  1972                           
  1973  0025                     ___itoee@data:	
  1974                           ; 2 bytes @ 0x5
  1975                           
  1976  0025                     srand@x:	
  1977                           ; 2 bytes @ 0x5
  1978                           
  1979                           
  1980                           ; 2 bytes @ 0x5
  1981  0025                     	ds	1
  1982  0026                     Tetris_ClearFilledRows@rowsCleared:	
  1983                           
  1984                           ; 1 bytes @ 0x6
  1985  0026                     	ds	1
  1986  0027                     ??_DrawTetrisGameColumn:	
  1987  0027                     ??___itoee:	
  1988                           ; 1 bytes @ 0x7
  1989                           
  1990  0027                     Tetris_ClearFilledRows@gameTable:	
  1991                           ; 1 bytes @ 0x7
  1992                           
  1993                           
  1994                           ; 1 bytes @ 0x7
  1995  0027                     	ds	1
  1996  0028                     ?_rand:	
  1997  0028                     Tetris_ClearFilledRows@i:	
  1998                           ; 2 bytes @ 0x8
  1999                           
  2000                           
  2001                           ; 1 bytes @ 0x8
  2002  0028                     	ds	1
  2003  0029                     Tetris_PlayerUnitBitsAreValid@player:	
  2004  0029                     DrawTetrisGameColumn@tetrisGame:	
  2005                           ; 1 bytes @ 0x9
  2006                           
  2007  0029                     ___itoee@addr:	
  2008                           ; 1 bytes @ 0x9
  2009                           
  2010                           
  2011                           ; 1 bytes @ 0x9
  2012  0029                     	ds	1
  2013  002A                     ??_rand:	
  2014  002A                     Tetris_SetPlayerUnit@player:	
  2015                           ; 1 bytes @ 0xA
  2016                           
  2017  002A                     DrawTetrisGameColumn@tableY:	
  2018                           ; 1 bytes @ 0xA
  2019                           
  2020  002A                     DrawLogo@y:	
  2021                           ; 1 bytes @ 0xA
  2022                           
  2023                           
  2024                           ; 1 bytes @ 0xA
  2025  002A                     	ds	1
  2026  002B                     DrawLogo@y_708:	
  2027  002B                     DrawTetrisGameColumn@gameRow:	
  2028                           ; 1 bytes @ 0xB
  2029                           
  2030                           
  2031                           ; 2 bytes @ 0xB
  2032  002B                     	ds	1
  2033  002C                     ??_Tetris_MovePlayerLeft:	
  2034  002C                     ??_Tetris_MovePlayerRight:	
  2035                           ; 1 bytes @ 0xC
  2036                           
  2037  002C                     ??_Tetris_RotatePlayer:	
  2038                           ; 1 bytes @ 0xC
  2039                           
  2040  002C                     ??_Tetris_MovePlayerDown:	
  2041                           ; 1 bytes @ 0xC
  2042                           
  2043  002C                     ?_Tetris_GetRandomUnit:	
  2044                           ; 1 bytes @ 0xC
  2045                           
  2046  002C                     DrawLogo@x:	
  2047                           ; 2 bytes @ 0xC
  2048                           
  2049                           
  2050                           ; 1 bytes @ 0xC
  2051  002C                     	ds	1
  2052  002D                     Tetris_MovePlayerDown@game:	
  2053  002D                     DrawTetrisGameColumn@i:	
  2054                           ; 1 bytes @ 0xD
  2055                           
  2056  002D                     DrawLogo@x_707:	
  2057                           ; 1 bytes @ 0xD
  2058                           
  2059                           
  2060                           ; 1 bytes @ 0xD
  2061  002D                     	ds	1
  2062  002E                     ??_ShowLogo:	
  2063  002E                     Tetris_MovePlayerLeft@i:	
  2064                           ; 1 bytes @ 0xE
  2065                           
  2066  002E                     Tetris_MovePlayerRight@i:	
  2067                           ; 1 bytes @ 0xE
  2068                           
  2069  002E                     DrawTetrisGameColumn@y:	
  2070                           ; 1 bytes @ 0xE
  2071                           
  2072                           
  2073                           ; 1 bytes @ 0xE
  2074  002E                     	ds	1
  2075  002F                     ?___awmod:	
  2076  002F                     Tetris_MovePlayerLeft@i_461:	
  2077                           ; 2 bytes @ 0xF
  2078                           
  2079  002F                     Tetris_MovePlayerRight@i_475:	
  2080                           ; 1 bytes @ 0xF
  2081                           
  2082  002F                     DrawTetrisGameColumn@lcdRow:	
  2083                           ; 1 bytes @ 0xF
  2084                           
  2085  002F                     ___awmod@divisor:	
  2086                           ; 1 bytes @ 0xF
  2087                           
  2088                           
  2089                           ; 2 bytes @ 0xF
  2090  002F                     	ds	1
  2091  0030                     ??_DrawTetris:	
  2092  0030                     Tetris_MovePlayerLeft@game:	
  2093                           ; 1 bytes @ 0x10
  2094                           
  2095  0030                     Tetris_MovePlayerRight@game:	
  2096                           ; 1 bytes @ 0x10
  2097                           
  2098                           
  2099                           ; 1 bytes @ 0x10
  2100  0030                     	ds	1
  2101  0031                     DrawTetris@tetrisGame:	
  2102  0031                     ___awmod@dividend:	
  2103                           ; 1 bytes @ 0x11
  2104                           
  2105                           
  2106                           ; 2 bytes @ 0x11
  2107  0031                     	ds	1
  2108  0032                     Tetris_RotatePlayer@oldRotation:	
  2109  0032                     DrawTetris@leftMask:	
  2110                           ; 1 bytes @ 0x12
  2111                           
  2112                           
  2113                           ; 2 bytes @ 0x12
  2114  0032                     	ds	1
  2115  0033                     Tetris_RotatePlayer@game:	
  2116  0033                     ___awmod@counter:	
  2117                           ; 1 bytes @ 0x13
  2118                           
  2119                           
  2120                           ; 1 bytes @ 0x13
  2121  0033                     	ds	1
  2122  0034                     ___awmod@sign:	
  2123  0034                     DrawTetris@rightMask:	
  2124                           ; 1 bytes @ 0x14
  2125                           
  2126                           
  2127                           ; 2 bytes @ 0x14
  2128  0034                     	ds	1
  2129  0035                     ?___wmul:	
  2130  0035                     ___wmul@multiplier:	
  2131                           ; 2 bytes @ 0x15
  2132                           
  2133                           
  2134                           ; 2 bytes @ 0x15
  2135  0035                     	ds	1
  2136  0036                     DrawTetris@x:	
  2137                           
  2138                           ; 1 bytes @ 0x16
  2139  0036                     	ds	1
  2140  0037                     ___wmul@multiplicand:	
  2141                           
  2142                           ; 2 bytes @ 0x17
  2143  0037                     	ds	2
  2144  0039                     ___wmul@product:	
  2145                           
  2146                           ; 2 bytes @ 0x19
  2147  0039                     	ds	2
  2148  003B                     ??_Tetris_GetRandomUnit:	
  2149                           
  2150                           ; 1 bytes @ 0x1B
  2151  003B                     	ds	2
  2152  003D                     ?_Tetris_ResetPlayer:	
  2153  003D                     Tetris_ResetPlayer@playerUnit:	
  2154                           ; 1 bytes @ 0x1D
  2155                           
  2156                           
  2157                           ; 2 bytes @ 0x1D
  2158  003D                     	ds	2
  2159  003F                     ??_Tetris_ResetPlayer:	
  2160                           
  2161                           ; 1 bytes @ 0x1F
  2162  003F                     	ds	2
  2163  0041                     Tetris_ResetPlayer@player:	
  2164                           
  2165                           ; 1 bytes @ 0x21
  2166  0041                     	ds	1
  2167  0042                     ?_Tetris_ResetGame:	
  2168  0042                     ??_Tetris_UpdateGame:	
  2169                           ; 1 bytes @ 0x22
  2170                           
  2171  0042                     Tetris_ResetGame@playerUnit:	
  2172                           ; 1 bytes @ 0x22
  2173                           
  2174                           
  2175                           ; 2 bytes @ 0x22
  2176  0042                     	ds	2
  2177  0044                     Tetris_ResetGame@game:	
  2178  0044                     Tetris_UpdateGame@rowsCleared:	
  2179                           ; 1 bytes @ 0x24
  2180                           
  2181                           
  2182                           ; 1 bytes @ 0x24
  2183  0044                     	ds	1
  2184  0045                     Tetris_UpdateGame@game:	
  2185                           
  2186                           ; 1 bytes @ 0x25
  2187  0045                     	ds	1
  2188  0046                     ??_main:	
  2189                           
  2190                           ; 1 bytes @ 0x26
  2191  0046                     	ds	1
  2192                           
  2193                           	psect	maintext
  2194  079E                     __pmaintext:	
  2195 ;;
  2196 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2197 ;;
  2198 ;; *************** function _main *****************
  2199 ;; Defined at:
  2200 ;;		line 120 in file "main.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  tetrisGame     63    4[BANK1 ] struct .
  2205 ;;  buttons         4    0[BANK1 ] struct .
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : B00/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2215 ;;      Params:         0       0       0       0
  2216 ;;      Locals:         0       0      67       0
  2217 ;;      Temps:          0       1       0       0
  2218 ;;      Totals:         0       1      67       0
  2219 ;;Total ram usage:       68 bytes
  2220 ;; Hardware stack levels required when called:    8
  2221 ;; This function calls:
  2222 ;;		_Buttons_Clear
  2223 ;;		_Buttons_Update
  2224 ;;		_DrawTetris
  2225 ;;		_ResetTimer
  2226 ;;		_Setup
  2227 ;;		_ShowLogo
  2228 ;;		_Tetris_GetRandomUnit
  2229 ;;		_Tetris_MovePlayerLeft
  2230 ;;		_Tetris_MovePlayerRight
  2231 ;;		_Tetris_ResetGame
  2232 ;;		_Tetris_RotatePlayer
  2233 ;;		_Tetris_UpdateGame
  2234 ;; This function is called by:
  2235 ;;		Startup code after reset
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           
  2240                           ;psect for function _main
  2241  079E                     _main:	
  2242                           
  2243                           ;main.c: 123:     Setup();
  2244                           
  2245                           ;incstack = 0
  2246                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2247  079E  158A  2378  118A   	fcall	_Setup
  2248                           
  2249                           ;main.c: 125:     Buttons buttons;;main.c: 126:     Tetris_Game tetrisGame;;main.c: 128:
      +                               ShowLogo();
  2250  07A1  158A  2302  118A   	fcall	_ShowLogo
  2251  07A4                     l3369:	
  2252                           
  2253                           ;main.c: 131:     {;main.c: 132:         Tetris_ResetGame(&tetrisGame, Tetris_GetRandomU
      +                          nit());
  2254  07A4  158A  2524  118A   	fcall	_Tetris_GetRandomUnit
  2255  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  2256  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  2257  07A9  082C               	movf	?_Tetris_GetRandomUnit,w
  2258  07AA  00C2               	movwf	Tetris_ResetGame@playerUnit
  2259  07AB  082D               	movf	?_Tetris_GetRandomUnit+1,w
  2260  07AC  00C3               	movwf	Tetris_ResetGame@playerUnit+1
  2261  07AD  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2262  07AE  158A  23EF  118A   	fcall	_Tetris_ResetGame
  2263                           
  2264                           ;main.c: 133:         Buttons_Clear(&buttons);
  2265  07B1  30A0               	movlw	(low (main@buttons| 0))& (0+255)
  2266  07B2  158A  2295  118A   	fcall	_Buttons_Clear
  2267                           
  2268                           ;main.c: 134:         ResetTimer();
  2269  07B5  118A  20FB  118A   	fcall	_ResetTimer
  2270  07B8                     l3373:	
  2271                           
  2272                           ;main.c: 137:         {;main.c: 138:             Buttons_Update(&buttons);
  2273  07B8  30A0               	movlw	(low (main@buttons| 0))& (0+255)
  2274  07B9  158A  254F  118A   	fcall	_Buttons_Update
  2275                           
  2276                           ;main.c: 140:             if (buttons.left.pressed)
  2277  07BC  1683               	bsf	3,5	;RP0=1, select bank1
  2278  07BD  1303               	bcf	3,6	;RP1=0, select bank1
  2279  07BE  1C20               	btfss	main@buttons^(0+128),0
  2280  07BF  2FC4               	goto	l3379
  2281                           
  2282                           ;main.c: 141:                 Tetris_MovePlayerLeft(&tetrisGame);
  2283  07C0  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2284  07C1  118A  2747  118A   	fcall	_Tetris_MovePlayerLeft
  2285  07C4                     l3379:	
  2286                           
  2287                           ;main.c: 142:             if (buttons.right.pressed)
  2288  07C4  1683               	bsf	3,5	;RP0=1, select bank1
  2289  07C5  1303               	bcf	3,6	;RP1=0, select bank1
  2290  07C6  1C21               	btfss	(main@buttons^(0+128)+1),0
  2291  07C7  2FCC               	goto	l3383
  2292                           
  2293                           ;main.c: 143:                 Tetris_MovePlayerRight(&tetrisGame);
  2294  07C8  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2295  07C9  118A  26EE  118A   	fcall	_Tetris_MovePlayerRight
  2296  07CC                     l3383:	
  2297                           
  2298                           ;main.c: 144:             if (buttons.rotate.pressed)
  2299  07CC  1683               	bsf	3,5	;RP0=1, select bank1
  2300  07CD  1303               	bcf	3,6	;RP1=0, select bank1
  2301  07CE  1C23               	btfss	(main@buttons^(0+128)+3),0
  2302  07CF  2FD4               	goto	l3387
  2303                           
  2304                           ;main.c: 145:                 Tetris_RotatePlayer(&tetrisGame);
  2305  07D0  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2306  07D1  118A  261A  118A   	fcall	_Tetris_RotatePlayer
  2307  07D4                     l3387:	
  2308                           
  2309                           ;main.c: 147:             if (buttons.down.held)
  2310  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  2311  07D5  1303               	bcf	3,6	;RP1=0, select bank1
  2312  07D6  1CA2               	btfss	(main@buttons^(0+128)+2),1
  2313  07D7  2FDB               	goto	l3391
  2314                           
  2315                           ;main.c: 148:                 timerPrescaler = FAST_TIMER_PRESCALER;
  2316  07D8  01E4               	clrf	_timerPrescaler^(0+128)
  2317  07D9  0AE4               	incf	_timerPrescaler^(0+128),f
  2318  07DA  2FE3               	goto	l3393
  2319  07DB                     l3391:	
  2320                           
  2321                           ;main.c: 150:                 timerPrescaler = DEFAULT_TIMER_PRESCALER;
  2322  07DB  300C               	movlw	12
  2323  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  2324  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  2325  07DE  00C6               	movwf	??_main
  2326  07DF  0846               	movf	??_main,w
  2327  07E0  1683               	bsf	3,5	;RP0=1, select bank1
  2328  07E1  1303               	bcf	3,6	;RP1=0, select bank1
  2329  07E2  00E4               	movwf	_timerPrescaler^(0+128)
  2330  07E3                     l3393:	
  2331                           
  2332                           ;main.c: 152:             if (updateReady)
  2333  07E3  0863               	movf	_updateReady^(0+128),w
  2334  07E4  1903               	btfsc	3,2
  2335  07E5  2FEE               	goto	l3401
  2336                           
  2337                           ;main.c: 153:             {;main.c: 154:                 updateReady = 0;
  2338  07E6  01E3               	clrf	_updateReady^(0+128)
  2339                           
  2340                           ;main.c: 155:                 if (Tetris_UpdateGame(&tetrisGame) == TETRIS_GAME_OVER)
  2341  07E7  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2342  07E8  118A  2078  118A   	fcall	_Tetris_UpdateGame
  2343  07EB  3A00               	xorlw	0
  2344  07EC  1903               	btfsc	3,2
  2345  07ED  2FA4               	goto	l3369
  2346  07EE                     l3401:	
  2347                           
  2348                           ;main.c: 159:             DrawTetris(&tetrisGame);
  2349  07EE  30A4               	movlw	(low (main@tetrisGame| 0))& (0+255)
  2350  07EF  158A  2609  118A   	fcall	_DrawTetris
  2351  07F2  2FB8               	goto	l3373
  2352  07F3                     __end_of_main:	
  2353                           
  2354                           	psect	text1
  2355  0078                     __ptext1:	
  2356 ;; *************** function _Tetris_UpdateGame *****************
  2357 ;; Defined at:
  2358 ;;		line 351 in file "../Tetris/Tetris.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  game            1    wreg     PTR struct .
  2361 ;;		 -> main@tetrisGame(63), 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  game            1   37[BANK0 ] PTR struct .
  2364 ;;		 -> main@tetrisGame(63), 
  2365 ;;  rowsCleared     1   36[BANK0 ] unsigned char 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      enum E60
  2368 ;; Registers used:
  2369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2375 ;;      Params:         0       0       0       0
  2376 ;;      Locals:         0       2       0       0
  2377 ;;      Temps:          0       2       0       0
  2378 ;;      Totals:         0       4       0       0
  2379 ;;Total ram usage:        4 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    5
  2382 ;; This function calls:
  2383 ;;		_Tetris_ApplyPlayerToTable
  2384 ;;		_Tetris_ClearFilledRows
  2385 ;;		_Tetris_GetRandomUnit
  2386 ;;		_Tetris_MovePlayerDown
  2387 ;;		_Tetris_PlayerOverlapsEnvironment
  2388 ;;		_Tetris_ResetPlayer
  2389 ;;		_Tetris_ScoreForRowsCleared
  2390 ;; This function is called by:
  2391 ;;		_main
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function _Tetris_UpdateGame
  2397  0078                     _Tetris_UpdateGame:	
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in _Tetris_UpdateGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2401                           ;Tetris_UpdateGame@game stored from wreg
  2402  0078  1283               	bcf	3,5	;RP0=0, select bank0
  2403  0079  1303               	bcf	3,6	;RP1=0, select bank0
  2404  007A  00C5               	movwf	Tetris_UpdateGame@game
  2405                           
  2406                           ;../Tetris/Tetris.c: 351: Tetris_GameState Tetris_UpdateGame(Tetris_Game *game);../Tetri
      +                          s/Tetris.c: 352: {;../Tetris/Tetris.c: 353:  if (!Tetris_MovePlayerDown(game))
  2407  007B  0845               	movf	Tetris_UpdateGame@game,w
  2408  007C  158A  25A8  118A   	fcall	_Tetris_MovePlayerDown
  2409  007F  3A00               	xorlw	0
  2410  0080  1D03               	skipz
  2411  0081  28C2               	goto	l3343
  2412                           
  2413                           ;../Tetris/Tetris.c: 354:  {;../Tetris/Tetris.c: 355:   uint8_t rowsCleared = Tetris_Cle
      +                          arFilledRows(game->table);
  2414  0082  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0083  1303               	bcf	3,6	;RP1=0, select bank0
  2416  0084  0845               	movf	Tetris_UpdateGame@game,w
  2417  0085  158A  25D8  118A   	fcall	_Tetris_ClearFilledRows
  2418  0088  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0089  1303               	bcf	3,6	;RP1=0, select bank0
  2420  008A  00C2               	movwf	??_Tetris_UpdateGame
  2421  008B  0842               	movf	??_Tetris_UpdateGame,w
  2422  008C  00C4               	movwf	Tetris_UpdateGame@rowsCleared
  2423                           
  2424                           ;../Tetris/Tetris.c: 356:   game->currentScore += Tetris_ScoreForRowsCleared(rowsCleared
      +                          );
  2425  008D  0844               	movf	Tetris_UpdateGame@rowsCleared,w
  2426  008E  158A  24DC  118A   	fcall	_Tetris_ScoreForRowsCleared
  2427  0091  1283               	bcf	3,5	;RP0=0, select bank0
  2428  0092  1303               	bcf	3,6	;RP1=0, select bank0
  2429  0093  00C2               	movwf	??_Tetris_UpdateGame
  2430  0094  01C3               	clrf	??_Tetris_UpdateGame+1
  2431  0095  0845               	movf	Tetris_UpdateGame@game,w
  2432  0096  3E3D               	addlw	61
  2433  0097  0084               	movwf	4
  2434  0098  0842               	movf	??_Tetris_UpdateGame,w
  2435  0099  1383               	bcf	3,7	;select IRP bank0
  2436  009A  0780               	addwf	0,f
  2437  009B  0F84               	incfsz	4,f
  2438  009C  0800               	movf	0,w
  2439  009D  1803               	skipnc
  2440  009E  0A00               	incf	0,w
  2441  009F  00FF               	movwf	127
  2442  00A0  0843               	movf	??_Tetris_UpdateGame+1,w
  2443  00A1  077F               	addwf	127,w
  2444  00A2  0080               	movwf	0
  2445  00A3  0384               	decf	4,f
  2446                           
  2447                           ;../Tetris/Tetris.c: 358:   Tetris_ResetPlayer(&game->player, Tetris_GetRandomUnit());
  2448  00A4  158A  2524  118A   	fcall	_Tetris_GetRandomUnit
  2449  00A7  1283               	bcf	3,5	;RP0=0, select bank0
  2450  00A8  1303               	bcf	3,6	;RP1=0, select bank0
  2451  00A9  082C               	movf	?_Tetris_GetRandomUnit,w
  2452  00AA  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  2453  00AB  082D               	movf	?_Tetris_GetRandomUnit+1,w
  2454  00AC  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  2455  00AD  0845               	movf	Tetris_UpdateGame@game,w
  2456  00AE  3E30               	addlw	48
  2457  00AF  158A  2473  118A   	fcall	_Tetris_ResetPlayer
  2458                           
  2459                           ;../Tetris/Tetris.c: 359:   if (Tetris_PlayerOverlapsEnvironment(game))
  2460  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  2461  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  2462  00B4  0845               	movf	Tetris_UpdateGame@game,w
  2463  00B5  158A  26B5  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  2464  00B8  3A00               	xorlw	0
  2465  00B9  1903               	skipnz
  2466  00BA  28BD               	goto	l3341
  2467                           
  2468                           ;../Tetris/Tetris.c: 360:    return TETRIS_GAME_OVER;
  2469  00BB  3000               	movlw	0
  2470  00BC  0008               	return
  2471  00BD                     l3341:	
  2472                           
  2473                           ;../Tetris/Tetris.c: 361:   Tetris_ApplyPlayerToTable(game);
  2474  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  2475  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  2476  00BF  0845               	movf	Tetris_UpdateGame@game,w
  2477  00C0  118A  268A         	fcall	_Tetris_ApplyPlayerToTable
  2478  00C2                     l3343:	
  2479                           
  2480                           ;../Tetris/Tetris.c: 364:  return TETRIS_GAME_CONTINUES;
  2481  00C2  3001               	movlw	1
  2482  00C3  0008               	return
  2483  00C4                     __end_of_Tetris_UpdateGame:	
  2484                           
  2485                           	psect	text2
  2486  0CDC                     __ptext2:	
  2487 ;; *************** function _Tetris_ScoreForRowsCleared *****************
  2488 ;; Defined at:
  2489 ;;		line 316 in file "../Tetris/Tetris.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;  rowsCleared     1    wreg     unsigned char 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  rowsCleared     1    5[COMMON] unsigned char 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      unsigned char 
  2496 ;; Registers used:
  2497 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2503 ;;      Params:         0       0       0       0
  2504 ;;      Locals:         1       0       0       0
  2505 ;;      Temps:          2       0       0       0
  2506 ;;      Totals:         3       0       0       0
  2507 ;;Total ram usage:        3 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    1
  2510 ;; This function calls:
  2511 ;;		Nothing
  2512 ;; This function is called by:
  2513 ;;		_Tetris_UpdateGame
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           
  2518                           ;psect for function _Tetris_ScoreForRowsCleared
  2519  0CDC                     _Tetris_ScoreForRowsCleared:	
  2520                           
  2521                           ;incstack = 0
  2522                           ; Regs used in _Tetris_ScoreForRowsCleared: [wreg-fsr0h+status,2+status,0]
  2523                           ;Tetris_ScoreForRowsCleared@rowsCleared stored from wreg
  2524  0CDC  00F5               	movwf	Tetris_ScoreForRowsCleared@rowsCleared
  2525                           
  2526                           ;../Tetris/Tetris.c: 316: static uint8_t Tetris_ScoreForRowsCleared(uint8_t rowsCleared)
      +                          ;../Tetris/Tetris.c: 317: {;../Tetris/Tetris.c: 318:  switch (rowsCleared)
  2527  0CDD  2CE8               	goto	l2565
  2528  0CDE                     l2543:	
  2529  0CDE  3000               	movlw	0
  2530  0CDF  0008               	return
  2531  0CE0                     l2547:	
  2532  0CE0  3001               	movlw	1
  2533  0CE1  0008               	return
  2534  0CE2                     l2551:	
  2535  0CE2  3003               	movlw	3
  2536  0CE3  0008               	return
  2537  0CE4                     l2555:	
  2538  0CE4  3005               	movlw	5
  2539  0CE5  0008               	return
  2540  0CE6                     l2559:	
  2541  0CE6  3007               	movlw	7
  2542  0CE7  0008               	return
  2543  0CE8                     l2565:	
  2544  0CE8  0875               	movf	Tetris_ScoreForRowsCleared@rowsCleared,w
  2545  0CE9  00F3               	movwf	??_Tetris_ScoreForRowsCleared
  2546  0CEA  01F4               	clrf	??_Tetris_ScoreForRowsCleared+1
  2547                           
  2548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2549                           ; Switch size 1, requested type "simple"
  2550                           ; Number of cases is 1, Range of values is 0 to 0
  2551                           ; switch strategies available:
  2552                           ; Name         Instructions Cycles
  2553                           ; simple_byte            4     3 (average)
  2554                           ; direct_byte            9     7 (fixed)
  2555                           ; jumptable            260     6 (fixed)
  2556                           ;	Chosen strategy is simple_byte
  2557  0CEB  0874               	movf	??_Tetris_ScoreForRowsCleared+1,w
  2558  0CEC  3A00               	xorlw	0	; case 0
  2559  0CED  1903               	skipnz
  2560  0CEE  2CF0               	goto	l3425
  2561  0CEF  2CE6               	goto	l2559
  2562  0CF0                     l3425:	
  2563                           
  2564                           ; Switch size 1, requested type "simple"
  2565                           ; Number of cases is 4, Range of values is 0 to 3
  2566                           ; switch strategies available:
  2567                           ; Name         Instructions Cycles
  2568                           ; simple_byte           13     7 (average)
  2569                           ; direct_byte           15     7 (fixed)
  2570                           ; jumptable            260     6 (fixed)
  2571                           ;	Chosen strategy is simple_byte
  2572  0CF0  0873               	movf	??_Tetris_ScoreForRowsCleared,w
  2573  0CF1  3A00               	xorlw	0	; case 0
  2574  0CF2  1903               	skipnz
  2575  0CF3  2CDE               	goto	l2543
  2576  0CF4  3A01               	xorlw	1	; case 1
  2577  0CF5  1903               	skipnz
  2578  0CF6  2CE0               	goto	l2547
  2579  0CF7  3A03               	xorlw	3	; case 2
  2580  0CF8  1903               	skipnz
  2581  0CF9  2CE2               	goto	l2551
  2582  0CFA  3A01               	xorlw	1	; case 3
  2583  0CFB  1903               	skipnz
  2584  0CFC  2CE4               	goto	l2555
  2585  0CFD  2CE6               	goto	l2559
  2586  0CFE  0008               	return
  2587  0CFF                     __end_of_Tetris_ScoreForRowsCleared:	
  2588                           
  2589                           	psect	text3
  2590  0DA8                     __ptext3:	
  2591 ;; *************** function _Tetris_MovePlayerDown *****************
  2592 ;; Defined at:
  2593 ;;		line 387 in file "../Tetris/Tetris.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  game            1    wreg     PTR struct .
  2596 ;;		 -> main@tetrisGame(63), 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  game            1   13[BANK0 ] PTR struct .
  2599 ;;		 -> main@tetrisGame(63), 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      unsigned char 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2609 ;;      Params:         0       0       0       0
  2610 ;;      Locals:         0       1       0       0
  2611 ;;      Temps:          0       1       0       0
  2612 ;;      Totals:         0       2       0       0
  2613 ;;Total ram usage:        2 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    4
  2616 ;; This function calls:
  2617 ;;		_Tetris_ApplyPlayerToTable
  2618 ;;		_Tetris_PlayerOverlapsEnvironment
  2619 ;;		_Tetris_RemovePlayerFromTable
  2620 ;; This function is called by:
  2621 ;;		_Tetris_UpdateGame
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           
  2626                           ;psect for function _Tetris_MovePlayerDown
  2627  0DA8                     _Tetris_MovePlayerDown:	
  2628                           
  2629                           ;incstack = 0
  2630                           ; Regs used in _Tetris_MovePlayerDown: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  2631                           ;Tetris_MovePlayerDown@game stored from wreg
  2632  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0DAA  00AD               	movwf	Tetris_MovePlayerDown@game
  2635                           
  2636                           ;../Tetris/Tetris.c: 387: uint8_t Tetris_MovePlayerDown(Tetris_Game *game);../Tetris/Tet
      +                          ris.c: 388: {;../Tetris/Tetris.c: 389:  Tetris_RemovePlayerFromTable(game);
  2637  0DAB  082D               	movf	Tetris_MovePlayerDown@game,w
  2638  0DAC  158A  263E  158A   	fcall	_Tetris_RemovePlayerFromTable
  2639                           
  2640                           ;../Tetris/Tetris.c: 390:  ++game->player.position.y;
  2641  0DAF  3001               	movlw	1
  2642  0DB0  1283               	bcf	3,5	;RP0=0, select bank0
  2643  0DB1  1303               	bcf	3,6	;RP1=0, select bank0
  2644  0DB2  00AC               	movwf	??_Tetris_MovePlayerDown
  2645  0DB3  082D               	movf	Tetris_MovePlayerDown@game,w
  2646  0DB4  3E31               	addlw	49
  2647  0DB5  0084               	movwf	4
  2648  0DB6  082C               	movf	??_Tetris_MovePlayerDown,w
  2649  0DB7  1383               	bcf	3,7	;select IRP bank0
  2650  0DB8  0780               	addwf	0,f
  2651                           
  2652                           ;../Tetris/Tetris.c: 392:  if (Tetris_PlayerOverlapsEnvironment(game) || !Tetris_ApplyPl
      +                          ayerToTable(game))
  2653  0DB9  082D               	movf	Tetris_MovePlayerDown@game,w
  2654  0DBA  158A  26B5  158A   	fcall	_Tetris_PlayerOverlapsEnvironment
  2655  0DBD  3A00               	xorlw	0
  2656  0DBE  1D03               	skipz
  2657  0DBF  2DC9               	goto	l3227
  2658  0DC0  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0DC1  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0DC2  082D               	movf	Tetris_MovePlayerDown@game,w
  2661  0DC3  118A  268A  158A   	fcall	_Tetris_ApplyPlayerToTable
  2662  0DC6  3A00               	xorlw	0
  2663  0DC7  1D03               	skipz
  2664  0DC8  2DD6               	goto	l3235
  2665  0DC9                     l3227:	
  2666                           
  2667                           ;../Tetris/Tetris.c: 393:  {;../Tetris/Tetris.c: 394:   --game->player.position.y;
  2668  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  2669  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  2670  0DCB  082D               	movf	Tetris_MovePlayerDown@game,w
  2671  0DCC  3E31               	addlw	49
  2672  0DCD  0084               	movwf	4
  2673  0DCE  3001               	movlw	1
  2674  0DCF  1383               	bcf	3,7	;select IRP bank0
  2675  0DD0  0280               	subwf	0,f
  2676                           
  2677                           ;../Tetris/Tetris.c: 395:   Tetris_ApplyPlayerToTable(game);
  2678  0DD1  082D               	movf	Tetris_MovePlayerDown@game,w
  2679  0DD2  118A  268A         	fcall	_Tetris_ApplyPlayerToTable
  2680                           
  2681                           ;../Tetris/Tetris.c: 396:   return 0;
  2682  0DD4  3000               	movlw	0
  2683  0DD5  0008               	return
  2684  0DD6                     l3235:	
  2685                           
  2686                           ;../Tetris/Tetris.c: 399:  return 1;
  2687  0DD6  3001               	movlw	1
  2688  0DD7  0008               	return
  2689  0DD8                     __end_of_Tetris_MovePlayerDown:	
  2690                           
  2691                           	psect	text4
  2692  0D24                     __ptext4:	
  2693 ;; *************** function _Tetris_GetRandomUnit *****************
  2694 ;; Defined at:
  2695 ;;		line 328 in file "../Tetris/Tetris.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;		None
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  2   12[BANK0 ] PTR const struct .
  2702 ;; Registers used:
  2703 ;;		wreg, status,2, status,0, pclath, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2709 ;;      Params:         0       0       0       0
  2710 ;;      Locals:         0       0       0       0
  2711 ;;      Temps:          0       2       0       0
  2712 ;;      Totals:         0       2       0       0
  2713 ;;Total ram usage:        2 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    3
  2716 ;; This function calls:
  2717 ;;		___awmod
  2718 ;;		___wmul
  2719 ;;		_rand
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;;		_Tetris_UpdateGame
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           
  2727                           ;psect for function _Tetris_GetRandomUnit
  2728  0D24                     _Tetris_GetRandomUnit:	
  2729                           
  2730                           ;../Tetris/Tetris.c: 330:  return Tetris_units + (rand() % TETRIS_NUM_UNITS);
  2731                           
  2732                           ;incstack = 0
  2733                           ; Regs used in _Tetris_GetRandomUnit: [wreg+status,2+status,0+pclath+cstack]
  2734  0D24  158A  27BB  158A   	fcall	_rand
  2735  0D27  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0D28  1303               	bcf	3,6	;RP1=0, select bank0
  2737  0D29  0829               	movf	?_rand+1,w
  2738  0D2A  00B2               	movwf	___awmod@dividend+1
  2739  0D2B  0828               	movf	?_rand,w
  2740  0D2C  00B1               	movwf	___awmod@dividend
  2741  0D2D  3007               	movlw	7
  2742  0D2E  00AF               	movwf	___awmod@divisor
  2743  0D2F  3000               	movlw	0
  2744  0D30  00B0               	movwf	___awmod@divisor+1
  2745  0D31  118A  202B  158A   	fcall	___awmod
  2746  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  2747  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  2748  0D36  0830               	movf	?___awmod+1,w
  2749  0D37  00B6               	movwf	___wmul@multiplier+1
  2750  0D38  082F               	movf	?___awmod,w
  2751  0D39  00B5               	movwf	___wmul@multiplier
  2752  0D3A  3022               	movlw	34
  2753  0D3B  00B7               	movwf	___wmul@multiplicand
  2754  0D3C  3000               	movlw	0
  2755  0D3D  00B8               	movwf	___wmul@multiplicand+1
  2756  0D3E  158A  24B9         	fcall	___wmul
  2757  0D40  3016               	movlw	low (_Tetris_units| (0+32768))
  2758  0D41  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0D42  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0D43  00BB               	movwf	??_Tetris_GetRandomUnit
  2761  0D44  3083               	movlw	high (_Tetris_units| (0+32768))
  2762  0D45  00BC               	movwf	??_Tetris_GetRandomUnit+1
  2763  0D46  0835               	movf	?___wmul,w
  2764  0D47  073B               	addwf	??_Tetris_GetRandomUnit,w
  2765  0D48  00AC               	movwf	?_Tetris_GetRandomUnit
  2766  0D49  0836               	movf	?___wmul+1,w
  2767  0D4A  1803               	skipnc
  2768  0D4B  0A36               	incf	?___wmul+1,w
  2769  0D4C  073C               	addwf	??_Tetris_GetRandomUnit+1,w
  2770  0D4D  00AD               	movwf	?_Tetris_GetRandomUnit+1
  2771  0D4E  0008               	return
  2772  0D4F                     __end_of_Tetris_GetRandomUnit:	
  2773                           
  2774                           	psect	text5
  2775  0FBB                     __ptext5:	
  2776 ;; *************** function _rand *****************
  2777 ;; Defined at:
  2778 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  2    8[BANK0 ] int 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0, pclath, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2792 ;;      Params:         0       2       0       0
  2793 ;;      Locals:         0       0       0       0
  2794 ;;      Temps:          0       5       0       0
  2795 ;;      Totals:         0       7       0       0
  2796 ;;Total ram usage:        7 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    2
  2799 ;; This function calls:
  2800 ;;		___lmul
  2801 ;; This function is called by:
  2802 ;;		_Tetris_GetRandomUnit
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function _rand
  2808  0FBB                     _rand:	
  2809                           
  2810                           ;incstack = 0
  2811                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2812  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  2813  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  2814  0FBD  084A               	movf	_randx+3,w
  2815  0FBE  00A3               	movwf	___lmul@multiplier+3
  2816  0FBF  0849               	movf	_randx+2,w
  2817  0FC0  00A2               	movwf	___lmul@multiplier+2
  2818  0FC1  0848               	movf	_randx+1,w
  2819  0FC2  00A1               	movwf	___lmul@multiplier+1
  2820  0FC3  0847               	movf	_randx,w
  2821  0FC4  00A0               	movwf	___lmul@multiplier
  2822  0FC5  3041               	movlw	65
  2823  0FC6  00A7               	movwf	___lmul@multiplicand+3
  2824  0FC7  30C6               	movlw	198
  2825  0FC8  00A6               	movwf	___lmul@multiplicand+2
  2826  0FC9  304E               	movlw	78
  2827  0FCA  00A5               	movwf	___lmul@multiplicand+1
  2828  0FCB  306D               	movlw	109
  2829  0FCC  00A4               	movwf	___lmul@multiplicand
  2830  0FCD  158A  2737  158A   	fcall	___lmul
  2831  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  2832  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  2833  0FD2  0823               	movf	?___lmul+3,w
  2834  0FD3  00CA               	movwf	_randx+3
  2835  0FD4  0822               	movf	?___lmul+2,w
  2836  0FD5  00C9               	movwf	_randx+2
  2837  0FD6  0821               	movf	?___lmul+1,w
  2838  0FD7  00C8               	movwf	_randx+1
  2839  0FD8  0820               	movf	?___lmul,w
  2840  0FD9  00C7               	movwf	_randx
  2841  0FDA  3039               	movlw	57
  2842  0FDB  07C7               	addwf	_randx,f
  2843  0FDC  3030               	movlw	48
  2844  0FDD  1803               	skipnc
  2845  0FDE  3031               	movlw	49
  2846  0FDF  07C8               	addwf	_randx+1,f
  2847  0FE0  3000               	movlw	0
  2848  0FE1  1803               	skipnc
  2849  0FE2  3001               	movlw	1
  2850  0FE3  07C9               	addwf	_randx+2,f
  2851  0FE4  3000               	movlw	0
  2852  0FE5  1803               	skipnc
  2853  0FE6  3001               	movlw	1
  2854  0FE7  07CA               	addwf	_randx+3,f
  2855  0FE8  0847               	movf	_randx,w
  2856  0FE9  00AA               	movwf	??_rand
  2857  0FEA  0848               	movf	_randx+1,w
  2858  0FEB  00AB               	movwf	??_rand+1
  2859  0FEC  0849               	movf	_randx+2,w
  2860  0FED  00AC               	movwf	??_rand+2
  2861  0FEE  084A               	movf	_randx+3,w
  2862  0FEF  00AD               	movwf	??_rand+3
  2863  0FF0  3010               	movlw	16
  2864  0FF1  00AE               	movwf	??_rand+4
  2865  0FF2                     u2485:	
  2866  0FF2  0D2D               	rlf	??_rand+3,w
  2867  0FF3  0CAD               	rrf	??_rand+3,f
  2868  0FF4  0CAC               	rrf	??_rand+2,f
  2869  0FF5  0CAB               	rrf	??_rand+1,f
  2870  0FF6  0CAA               	rrf	??_rand,f
  2871  0FF7  0BAE               	decfsz	??_rand+4,f
  2872  0FF8  2FF2               	goto	u2485
  2873  0FF9  30FF               	movlw	255
  2874  0FFA  052A               	andwf	??_rand,w
  2875  0FFB  00A8               	movwf	?_rand
  2876  0FFC  307F               	movlw	127
  2877  0FFD  052B               	andwf	??_rand+1,w
  2878  0FFE  00A9               	movwf	?_rand+1
  2879  0FFF  0008               	return
  2880  1000                     __end_of_rand:	
  2881                           
  2882                           	psect	text6
  2883  0F37                     __ptext6:	
  2884 ;; *************** function ___lmul *****************
  2885 ;; Defined at:
  2886 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2889 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  product         4    4[COMMON] unsigned long 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  4    0[BANK0 ] unsigned long 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2901 ;;      Params:         0       8       0       0
  2902 ;;      Locals:         4       0       0       0
  2903 ;;      Temps:          1       0       0       0
  2904 ;;      Totals:         5       8       0       0
  2905 ;;Total ram usage:       13 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    1
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_rand
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           
  2916                           ;psect for function ___lmul
  2917  0F37                     ___lmul:	
  2918                           
  2919                           ;incstack = 0
  2920                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2921  0F37  3000               	movlw	0
  2922  0F38  00F7               	movwf	___lmul@product+3
  2923  0F39  3000               	movlw	0
  2924  0F3A  00F6               	movwf	___lmul@product+2
  2925  0F3B  3000               	movlw	0
  2926  0F3C  00F5               	movwf	___lmul@product+1
  2927  0F3D  3000               	movlw	0
  2928  0F3E  00F4               	movwf	___lmul@product
  2929  0F3F                     l3009:	
  2930  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  2931  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  2932  0F41  1C20               	btfss	___lmul@multiplier,0
  2933  0F42  2F57               	goto	l3013
  2934  0F43  0824               	movf	___lmul@multiplicand,w
  2935  0F44  07F4               	addwf	___lmul@product,f
  2936  0F45  0825               	movf	___lmul@multiplicand+1,w
  2937  0F46  1103               	clrz
  2938  0F47  1803               	skipnc
  2939  0F48  3E01               	addlw	1
  2940  0F49  1D03               	btfss	3,2
  2941  0F4A  07F5               	addwf	___lmul@product+1,f
  2942  0F4B  0826               	movf	___lmul@multiplicand+2,w
  2943  0F4C  1103               	clrz
  2944  0F4D  1803               	skipnc
  2945  0F4E  3E01               	addlw	1
  2946  0F4F  1D03               	btfss	3,2
  2947  0F50  07F6               	addwf	___lmul@product+2,f
  2948  0F51  0827               	movf	___lmul@multiplicand+3,w
  2949  0F52  1103               	clrz
  2950  0F53  1803               	skipnc
  2951  0F54  3E01               	addlw	1
  2952  0F55  1D03               	btfss	3,2
  2953  0F56  07F7               	addwf	___lmul@product+3,f
  2954  0F57                     l3013:	
  2955  0F57  3001               	movlw	1
  2956  0F58  00F3               	movwf	??___lmul
  2957  0F59                     u2415:	
  2958  0F59  1003               	clrc
  2959  0F5A  0DA4               	rlf	___lmul@multiplicand,f
  2960  0F5B  0DA5               	rlf	___lmul@multiplicand+1,f
  2961  0F5C  0DA6               	rlf	___lmul@multiplicand+2,f
  2962  0F5D  0DA7               	rlf	___lmul@multiplicand+3,f
  2963  0F5E  0BF3               	decfsz	??___lmul,f
  2964  0F5F  2F59               	goto	u2415
  2965  0F60  3001               	movlw	1
  2966  0F61                     u2425:	
  2967  0F61  1003               	clrc
  2968  0F62  0CA3               	rrf	___lmul@multiplier+3,f
  2969  0F63  0CA2               	rrf	___lmul@multiplier+2,f
  2970  0F64  0CA1               	rrf	___lmul@multiplier+1,f
  2971  0F65  0CA0               	rrf	___lmul@multiplier,f
  2972  0F66  3EFF               	addlw	-1
  2973  0F67  1D03               	skipz
  2974  0F68  2F61               	goto	u2425
  2975  0F69  0823               	movf	___lmul@multiplier+3,w
  2976  0F6A  0422               	iorwf	___lmul@multiplier+2,w
  2977  0F6B  0421               	iorwf	___lmul@multiplier+1,w
  2978  0F6C  0420               	iorwf	___lmul@multiplier,w
  2979  0F6D  1D03               	skipz
  2980  0F6E  2F3F               	goto	l3009
  2981  0F6F  0877               	movf	___lmul@product+3,w
  2982  0F70  00A3               	movwf	?___lmul+3
  2983  0F71  0876               	movf	___lmul@product+2,w
  2984  0F72  00A2               	movwf	?___lmul+2
  2985  0F73  0875               	movf	___lmul@product+1,w
  2986  0F74  00A1               	movwf	?___lmul+1
  2987  0F75  0874               	movf	___lmul@product,w
  2988  0F76  00A0               	movwf	?___lmul
  2989  0F77  0008               	return
  2990  0F78                     __end_of___lmul:	
  2991                           
  2992                           	psect	text7
  2993  0CB9                     __ptext7:	
  2994 ;; *************** function ___wmul *****************
  2995 ;; Defined at:
  2996 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  multiplier      2   21[BANK0 ] unsigned int 
  2999 ;;  multiplicand    2   23[BANK0 ] unsigned int 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  product         2   25[BANK0 ] unsigned int 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2   21[BANK0 ] unsigned int 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3011 ;;      Params:         0       4       0       0
  3012 ;;      Locals:         0       2       0       0
  3013 ;;      Temps:          0       0       0       0
  3014 ;;      Totals:         0       6       0       0
  3015 ;;Total ram usage:        6 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    1
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_Tetris_GetRandomUnit
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           
  3026                           ;psect for function ___wmul
  3027  0CB9                     ___wmul:	
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3031  0CB9  1283               	bcf	3,5	;RP0=0, select bank0
  3032  0CBA  1303               	bcf	3,6	;RP1=0, select bank0
  3033  0CBB  01B9               	clrf	___wmul@product
  3034  0CBC  01BA               	clrf	___wmul@product+1
  3035  0CBD                     l2337:	
  3036  0CBD  1C35               	btfss	___wmul@multiplier,0
  3037  0CBE  2CC5               	goto	l551
  3038  0CBF  0837               	movf	___wmul@multiplicand,w
  3039  0CC0  07B9               	addwf	___wmul@product,f
  3040  0CC1  1803               	skipnc
  3041  0CC2  0ABA               	incf	___wmul@product+1,f
  3042  0CC3  0838               	movf	___wmul@multiplicand+1,w
  3043  0CC4  07BA               	addwf	___wmul@product+1,f
  3044  0CC5                     l551:	
  3045  0CC5  3001               	movlw	1
  3046  0CC6                     u1585:	
  3047  0CC6  1003               	clrc
  3048  0CC7  0DB7               	rlf	___wmul@multiplicand,f
  3049  0CC8  0DB8               	rlf	___wmul@multiplicand+1,f
  3050  0CC9  3EFF               	addlw	-1
  3051  0CCA  1D03               	skipz
  3052  0CCB  2CC6               	goto	u1585
  3053  0CCC  3001               	movlw	1
  3054  0CCD                     u1595:	
  3055  0CCD  1003               	clrc
  3056  0CCE  0CB6               	rrf	___wmul@multiplier+1,f
  3057  0CCF  0CB5               	rrf	___wmul@multiplier,f
  3058  0CD0  3EFF               	addlw	-1
  3059  0CD1  1D03               	skipz
  3060  0CD2  2CCD               	goto	u1595
  3061  0CD3  0835               	movf	___wmul@multiplier,w
  3062  0CD4  0436               	iorwf	___wmul@multiplier+1,w
  3063  0CD5  1D03               	btfss	3,2
  3064  0CD6  2CBD               	goto	l2337
  3065  0CD7  083A               	movf	___wmul@product+1,w
  3066  0CD8  00B6               	movwf	?___wmul+1
  3067  0CD9  0839               	movf	___wmul@product,w
  3068  0CDA  00B5               	movwf	?___wmul
  3069  0CDB  0008               	return
  3070  0CDC                     __end_of___wmul:	
  3071                           
  3072                           	psect	text8
  3073  002B                     __ptext8:	
  3074 ;; *************** function ___awmod *****************
  3075 ;; Defined at:
  3076 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  divisor         2   15[BANK0 ] int 
  3079 ;;  dividend        2   17[BANK0 ] int 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  sign            1   20[BANK0 ] unsigned char 
  3082 ;;  counter         1   19[BANK0 ] unsigned char 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  2   15[BANK0 ] int 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3092 ;;      Params:         0       4       0       0
  3093 ;;      Locals:         0       2       0       0
  3094 ;;      Temps:          1       0       0       0
  3095 ;;      Totals:         1       6       0       0
  3096 ;;Total ram usage:        7 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    1
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		_Tetris_GetRandomUnit
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function ___awmod
  3108  002B                     ___awmod:	
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3112  002B  1283               	bcf	3,5	;RP0=0, select bank0
  3113  002C  1303               	bcf	3,6	;RP1=0, select bank0
  3114  002D  01B4               	clrf	___awmod@sign
  3115  002E  1FB2               	btfss	___awmod@dividend+1,7
  3116  002F  2837               	goto	l3083
  3117  0030  09B1               	comf	___awmod@dividend,f
  3118  0031  09B2               	comf	___awmod@dividend+1,f
  3119  0032  0AB1               	incf	___awmod@dividend,f
  3120  0033  1903               	skipnz
  3121  0034  0AB2               	incf	___awmod@dividend+1,f
  3122  0035  01B4               	clrf	___awmod@sign
  3123  0036  0AB4               	incf	___awmod@sign,f
  3124  0037                     l3083:	
  3125  0037  1FB0               	btfss	___awmod@divisor+1,7
  3126  0038  283E               	goto	l3087
  3127  0039  09AF               	comf	___awmod@divisor,f
  3128  003A  09B0               	comf	___awmod@divisor+1,f
  3129  003B  0AAF               	incf	___awmod@divisor,f
  3130  003C  1903               	skipnz
  3131  003D  0AB0               	incf	___awmod@divisor+1,f
  3132  003E                     l3087:	
  3133  003E  082F               	movf	___awmod@divisor,w
  3134  003F  0430               	iorwf	___awmod@divisor+1,w
  3135  0040  1903               	btfsc	3,2
  3136  0041  286B               	goto	l3105
  3137  0042  01B3               	clrf	___awmod@counter
  3138  0043  0AB3               	incf	___awmod@counter,f
  3139  0044                     l3095:	
  3140  0044  1BB0               	btfsc	___awmod@divisor+1,7
  3141  0045  2852               	goto	l3097
  3142  0046  3001               	movlw	1
  3143  0047                     u2525:	
  3144  0047  1003               	clrc
  3145  0048  0DAF               	rlf	___awmod@divisor,f
  3146  0049  0DB0               	rlf	___awmod@divisor+1,f
  3147  004A  3EFF               	addlw	-1
  3148  004B  1D03               	skipz
  3149  004C  2847               	goto	u2525
  3150  004D  3001               	movlw	1
  3151  004E  00F8               	movwf	??___awmod
  3152  004F  0878               	movf	??___awmod,w
  3153  0050  07B3               	addwf	___awmod@counter,f
  3154  0051  2844               	goto	l3095
  3155  0052                     l3097:	
  3156  0052  0830               	movf	___awmod@divisor+1,w
  3157  0053  0232               	subwf	___awmod@dividend+1,w
  3158  0054  1D03               	skipz
  3159  0055  2858               	goto	u2545
  3160  0056  082F               	movf	___awmod@divisor,w
  3161  0057  0231               	subwf	___awmod@dividend,w
  3162  0058                     u2545:	
  3163  0058  1C03               	skipc
  3164  0059  2860               	goto	l3101
  3165  005A  082F               	movf	___awmod@divisor,w
  3166  005B  02B1               	subwf	___awmod@dividend,f
  3167  005C  0830               	movf	___awmod@divisor+1,w
  3168  005D  1C03               	skipc
  3169  005E  03B2               	decf	___awmod@dividend+1,f
  3170  005F  02B2               	subwf	___awmod@dividend+1,f
  3171  0060                     l3101:	
  3172  0060  3001               	movlw	1
  3173  0061                     u2555:	
  3174  0061  1003               	clrc
  3175  0062  0CB0               	rrf	___awmod@divisor+1,f
  3176  0063  0CAF               	rrf	___awmod@divisor,f
  3177  0064  3EFF               	addlw	-1
  3178  0065  1D03               	skipz
  3179  0066  2861               	goto	u2555
  3180  0067  3001               	movlw	1
  3181  0068  02B3               	subwf	___awmod@counter,f
  3182  0069  1D03               	btfss	3,2
  3183  006A  2852               	goto	l3097
  3184  006B                     l3105:	
  3185  006B  0834               	movf	___awmod@sign,w
  3186  006C  1903               	btfsc	3,2
  3187  006D  2873               	goto	l3109
  3188  006E  09B1               	comf	___awmod@dividend,f
  3189  006F  09B2               	comf	___awmod@dividend+1,f
  3190  0070  0AB1               	incf	___awmod@dividend,f
  3191  0071  1903               	skipnz
  3192  0072  0AB2               	incf	___awmod@dividend+1,f
  3193  0073                     l3109:	
  3194  0073  0832               	movf	___awmod@dividend+1,w
  3195  0074  00B0               	movwf	?___awmod+1
  3196  0075  0831               	movf	___awmod@dividend,w
  3197  0076  00AF               	movwf	?___awmod
  3198  0077  0008               	return
  3199  0078                     __end_of___awmod:	
  3200                           
  3201                           	psect	text9
  3202  0DD8                     __ptext9:	
  3203 ;; *************** function _Tetris_ClearFilledRows *****************
  3204 ;; Defined at:
  3205 ;;		line 367 in file "../Tetris/Tetris.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  gameTable       1    wreg     PTR unsigned int 
  3208 ;;		 -> main@tetrisGame(63), 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  gameTable       1    7[BANK0 ] PTR unsigned int 
  3211 ;;		 -> main@tetrisGame(63), 
  3212 ;;  i               1    8[BANK0 ] unsigned char 
  3213 ;;  rowsCleared     1    6[BANK0 ] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      unsigned char 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3223 ;;      Params:         0       0       0       0
  3224 ;;      Locals:         0       3       0       0
  3225 ;;      Temps:          0       4       0       0
  3226 ;;      Totals:         0       7       0       0
  3227 ;;Total ram usage:        7 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    2
  3230 ;; This function calls:
  3231 ;;		_Tetris_ShiftTableDown
  3232 ;; This function is called by:
  3233 ;;		_Tetris_UpdateGame
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           
  3238                           ;psect for function _Tetris_ClearFilledRows
  3239  0DD8                     _Tetris_ClearFilledRows:	
  3240                           
  3241                           ;incstack = 0
  3242                           ; Regs used in _Tetris_ClearFilledRows: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3243                           ;Tetris_ClearFilledRows@gameTable stored from wreg
  3244  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  3245  0DD9  1303               	bcf	3,6	;RP1=0, select bank0
  3246  0DDA  00A7               	movwf	Tetris_ClearFilledRows@gameTable
  3247                           
  3248                           ;../Tetris/Tetris.c: 367: uint8_t Tetris_ClearFilledRows(uint16_t *gameTable);../Tetris/
      +                          Tetris.c: 368: {;../Tetris/Tetris.c: 369:  uint8_t rowsCleared = 0;
  3249  0DDB  01A6               	clrf	Tetris_ClearFilledRows@rowsCleared
  3250                           
  3251                           ;../Tetris/Tetris.c: 371:  for (uint8_t i = 0; i < TETRIS_TABLE_HEIGHT;)
  3252  0DDC  01A8               	clrf	Tetris_ClearFilledRows@i
  3253  0DDD                     l2605:	
  3254                           
  3255                           ;../Tetris/Tetris.c: 372:  {;../Tetris/Tetris.c: 373:   if (gameTable[i] == 0xFFFF)
  3256  0DDD  0828               	movf	Tetris_ClearFilledRows@i,w
  3257  0DDE  00A2               	movwf	??_Tetris_ClearFilledRows
  3258  0DDF  0722               	addwf	??_Tetris_ClearFilledRows,w
  3259  0DE0  0727               	addwf	Tetris_ClearFilledRows@gameTable,w
  3260  0DE1  00A3               	movwf	??_Tetris_ClearFilledRows+1
  3261  0DE2  0823               	movf	??_Tetris_ClearFilledRows+1,w
  3262  0DE3  0084               	movwf	4
  3263  0DE4  1383               	bcf	3,7	;select IRP bank0
  3264  0DE5  0800               	movf	0,w
  3265  0DE6  00A4               	movwf	??_Tetris_ClearFilledRows+2
  3266  0DE7  0A84               	incf	4,f
  3267  0DE8  0800               	movf	0,w
  3268  0DE9  00A5               	movwf	??_Tetris_ClearFilledRows+3
  3269  0DEA  0A24               	incf	??_Tetris_ClearFilledRows+2,w
  3270  0DEB  1D03               	skipz
  3271  0DEC  2DFF               	goto	l2611
  3272  0DED  0A25               	incf	??_Tetris_ClearFilledRows+3,w
  3273  0DEE  1D03               	btfss	3,2
  3274  0DEF  2DFF               	goto	l2611
  3275                           
  3276                           ;../Tetris/Tetris.c: 374:   {;../Tetris/Tetris.c: 375:    Tetris_ShiftTableDown(gameTabl
      +                          e, i);
  3277  0DF0  0828               	movf	Tetris_ClearFilledRows@i,w
  3278  0DF1  00A2               	movwf	??_Tetris_ClearFilledRows
  3279  0DF2  0822               	movf	??_Tetris_ClearFilledRows,w
  3280  0DF3  00F3               	movwf	Tetris_ShiftTableDown@upto
  3281  0DF4  0827               	movf	Tetris_ClearFilledRows@gameTable,w
  3282  0DF5  158A  2778  158A   	fcall	_Tetris_ShiftTableDown
  3283                           
  3284                           ;../Tetris/Tetris.c: 376:    ++rowsCleared;
  3285  0DF8  3001               	movlw	1
  3286  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  3287  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  3288  0DFB  00A2               	movwf	??_Tetris_ClearFilledRows
  3289  0DFC  0822               	movf	??_Tetris_ClearFilledRows,w
  3290  0DFD  07A6               	addwf	Tetris_ClearFilledRows@rowsCleared,f
  3291                           
  3292                           ;../Tetris/Tetris.c: 377:   }
  3293  0DFE  2E03               	goto	l2613
  3294  0DFF                     l2611:	
  3295                           
  3296                           ;../Tetris/Tetris.c: 379:   {;../Tetris/Tetris.c: 380:    ++i;
  3297  0DFF  3001               	movlw	1
  3298  0E00  00A2               	movwf	??_Tetris_ClearFilledRows
  3299  0E01  0822               	movf	??_Tetris_ClearFilledRows,w
  3300  0E02  07A8               	addwf	Tetris_ClearFilledRows@i,f
  3301  0E03                     l2613:	
  3302                           
  3303                           ;../Tetris/Tetris.c: 382:  }
  3304  0E03  3018               	movlw	24
  3305  0E04  0228               	subwf	Tetris_ClearFilledRows@i,w
  3306  0E05  1C03               	skipc
  3307  0E06  2DDD               	goto	l2605
  3308                           
  3309                           ;../Tetris/Tetris.c: 384:  return rowsCleared;
  3310  0E07  0826               	movf	Tetris_ClearFilledRows@rowsCleared,w
  3311  0E08  0008               	return
  3312  0E09                     __end_of_Tetris_ClearFilledRows:	
  3313                           
  3314                           	psect	text10
  3315  0F78                     __ptext10:	
  3316 ;; *************** function _Tetris_ShiftTableDown *****************
  3317 ;; Defined at:
  3318 ;;		line 302 in file "../Tetris/Tetris.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  gameTable       1    wreg     PTR unsigned int 
  3321 ;;		 -> main@tetrisGame(63), 
  3322 ;;  upto            1    3[COMMON] unsigned char 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  gameTable       1    0[BANK0 ] PTR unsigned int 
  3325 ;;		 -> main@tetrisGame(63), 
  3326 ;;  i               1    1[BANK0 ] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3336 ;;      Params:         1       0       0       0
  3337 ;;      Locals:         0       2       0       0
  3338 ;;      Temps:          6       0       0       0
  3339 ;;      Totals:         7       2       0       0
  3340 ;;Total ram usage:        9 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_Tetris_ClearFilledRows
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           
  3351                           ;psect for function _Tetris_ShiftTableDown
  3352  0F78                     _Tetris_ShiftTableDown:	
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in _Tetris_ShiftTableDown: [wreg-fsr0h+status,2+status,0]
  3356                           ;Tetris_ShiftTableDown@gameTable stored from wreg
  3357  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  3358  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  3359  0F7A  00A0               	movwf	Tetris_ShiftTableDown@gameTable
  3360                           
  3361                           ;../Tetris/Tetris.c: 302: static void Tetris_ShiftTableDown(uint16_t *gameTable, uint8_t
      +                           upto);../Tetris/Tetris.c: 303: {;../Tetris/Tetris.c: 304:  uint8_t i;;../Tetris/Tetris.
      +                          c: 306:  for (i = upto; i != 0; --i)
  3362  0F7B  0873               	movf	Tetris_ShiftTableDown@upto,w
  3363  0F7C  00F4               	movwf	??_Tetris_ShiftTableDown
  3364  0F7D  0874               	movf	??_Tetris_ShiftTableDown,w
  3365  0F7E  00A1               	movwf	Tetris_ShiftTableDown@i
  3366  0F7F                     l2283:	
  3367  0F7F  0821               	movf	Tetris_ShiftTableDown@i,w
  3368  0F80  1903               	btfsc	3,2
  3369  0F81  2FAF               	goto	l2297
  3370                           
  3371                           ;../Tetris/Tetris.c: 307:  {;../Tetris/Tetris.c: 308:   if (gameTable[i] == 0)
  3372  0F82  0821               	movf	Tetris_ShiftTableDown@i,w
  3373  0F83  00F4               	movwf	??_Tetris_ShiftTableDown
  3374  0F84  0774               	addwf	??_Tetris_ShiftTableDown,w
  3375  0F85  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3376  0F86  00F5               	movwf	??_Tetris_ShiftTableDown+1
  3377  0F87  0875               	movf	??_Tetris_ShiftTableDown+1,w
  3378  0F88  0084               	movwf	4
  3379  0F89  1383               	bcf	3,7	;select IRP bank0
  3380  0F8A  0800               	movf	0,w
  3381  0F8B  00F6               	movwf	??_Tetris_ShiftTableDown+2
  3382  0F8C  0A84               	incf	4,f
  3383  0F8D  0800               	movf	0,w
  3384  0F8E  00F7               	movwf	??_Tetris_ShiftTableDown+3
  3385  0F8F  0876               	movf	??_Tetris_ShiftTableDown+2,w
  3386  0F90  0477               	iorwf	??_Tetris_ShiftTableDown+3,w
  3387  0F91  1903               	btfsc	3,2
  3388  0F92  2FAF               	goto	l2297
  3389                           
  3390                           ;../Tetris/Tetris.c: 310:   gameTable[i] = gameTable[i - 1];
  3391  0F93  0821               	movf	Tetris_ShiftTableDown@i,w
  3392  0F94  00F4               	movwf	??_Tetris_ShiftTableDown
  3393  0F95  0774               	addwf	??_Tetris_ShiftTableDown,w
  3394  0F96  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3395  0F97  00F5               	movwf	??_Tetris_ShiftTableDown+1
  3396  0F98  0875               	movf	??_Tetris_ShiftTableDown+1,w
  3397  0F99  3EFE               	addlw	-2
  3398  0F9A  0084               	movwf	4
  3399  0F9B  0800               	movf	0,w
  3400  0F9C  00F6               	movwf	??_Tetris_ShiftTableDown+2
  3401  0F9D  0A84               	incf	4,f
  3402  0F9E  0800               	movf	0,w
  3403  0F9F  00F7               	movwf	??_Tetris_ShiftTableDown+3
  3404  0FA0  0821               	movf	Tetris_ShiftTableDown@i,w
  3405  0FA1  00F8               	movwf	??_Tetris_ShiftTableDown+4
  3406  0FA2  0778               	addwf	??_Tetris_ShiftTableDown+4,w
  3407  0FA3  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3408  0FA4  00F9               	movwf	??_Tetris_ShiftTableDown+5
  3409  0FA5  0879               	movf	??_Tetris_ShiftTableDown+5,w
  3410  0FA6  0084               	movwf	4
  3411  0FA7  0876               	movf	??_Tetris_ShiftTableDown+2,w
  3412  0FA8  0080               	movwf	0
  3413  0FA9  0A84               	incf	4,f
  3414  0FAA  0877               	movf	??_Tetris_ShiftTableDown+3,w
  3415  0FAB  0080               	movwf	0
  3416                           
  3417                           ;../Tetris/Tetris.c: 311:  }
  3418  0FAC  3001               	movlw	1
  3419  0FAD  02A1               	subwf	Tetris_ShiftTableDown@i,f
  3420  0FAE  2F7F               	goto	l2283
  3421  0FAF                     l2297:	
  3422                           
  3423                           ;../Tetris/Tetris.c: 313:  gameTable[i] = 0;
  3424  0FAF  0821               	movf	Tetris_ShiftTableDown@i,w
  3425  0FB0  00F4               	movwf	??_Tetris_ShiftTableDown
  3426  0FB1  0774               	addwf	??_Tetris_ShiftTableDown,w
  3427  0FB2  0720               	addwf	Tetris_ShiftTableDown@gameTable,w
  3428  0FB3  00F5               	movwf	??_Tetris_ShiftTableDown+1
  3429  0FB4  0875               	movf	??_Tetris_ShiftTableDown+1,w
  3430  0FB5  0084               	movwf	4
  3431  0FB6  1383               	bcf	3,7	;select IRP bank0
  3432  0FB7  0180               	clrf	0
  3433  0FB8  0A84               	incf	4,f
  3434  0FB9  0180               	clrf	0
  3435  0FBA  0008               	return
  3436  0FBB                     __end_of_Tetris_ShiftTableDown:	
  3437                           
  3438                           	psect	text11
  3439  061A                     __ptext11:	
  3440 ;; *************** function _Tetris_RotatePlayer *****************
  3441 ;; Defined at:
  3442 ;;		line 448 in file "../Tetris/Tetris.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  game            1    wreg     PTR struct .
  3445 ;;		 -> main@tetrisGame(63), 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  game            1   19[BANK0 ] PTR struct .
  3448 ;;		 -> main@tetrisGame(63), 
  3449 ;;  oldRotation     1   18[BANK0 ] unsigned char 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3459 ;;      Params:         0       0       0       0
  3460 ;;      Locals:         0       2       0       0
  3461 ;;      Temps:          0       6       0       0
  3462 ;;      Totals:         0       8       0       0
  3463 ;;Total ram usage:        8 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    4
  3466 ;; This function calls:
  3467 ;;		_Tetris_ApplyPlayerToTable
  3468 ;;		_Tetris_PlayerOverlapsEnvironment
  3469 ;;		_Tetris_PlayerUnitBitsAreValid
  3470 ;;		_Tetris_RemovePlayerFromTable
  3471 ;;		_Tetris_UpdatePlayerUnitBits
  3472 ;;		___lbmod
  3473 ;; This function is called by:
  3474 ;;		_main
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           
  3479                           ;psect for function _Tetris_RotatePlayer
  3480  061A                     _Tetris_RotatePlayer:	
  3481                           
  3482                           ;incstack = 0
  3483                           ; Regs used in _Tetris_RotatePlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  3484                           ;Tetris_RotatePlayer@game stored from wreg
  3485  061A  1283               	bcf	3,5	;RP0=0, select bank0
  3486  061B  1303               	bcf	3,6	;RP1=0, select bank0
  3487  061C  00B3               	movwf	Tetris_RotatePlayer@game
  3488                           
  3489                           ;../Tetris/Tetris.c: 448: void Tetris_RotatePlayer(Tetris_Game *game);../Tetris/Tetris.c
      +                          : 449: {;../Tetris/Tetris.c: 450:  Tetris_RemovePlayerFromTable(game);
  3490  061D  0833               	movf	Tetris_RotatePlayer@game,w
  3491  061E  158A  263E  118A   	fcall	_Tetris_RemovePlayerFromTable
  3492                           
  3493                           ;../Tetris/Tetris.c: 452:  uint8_t oldRotation = game->player.rotation;
  3494  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0623  0833               	movf	Tetris_RotatePlayer@game,w
  3497  0624  3E3C               	addlw	60
  3498  0625  0084               	movwf	4
  3499  0626  1383               	bcf	3,7	;select IRP bank0
  3500  0627  0800               	movf	0,w
  3501  0628  00AC               	movwf	??_Tetris_RotatePlayer
  3502  0629  082C               	movf	??_Tetris_RotatePlayer,w
  3503  062A  00B2               	movwf	Tetris_RotatePlayer@oldRotation
  3504                           
  3505                           ;../Tetris/Tetris.c: 453:  ++game->player.rotation;
  3506  062B  3001               	movlw	1
  3507  062C  00AC               	movwf	??_Tetris_RotatePlayer
  3508  062D  0833               	movf	Tetris_RotatePlayer@game,w
  3509  062E  3E3C               	addlw	60
  3510  062F  0084               	movwf	4
  3511  0630  082C               	movf	??_Tetris_RotatePlayer,w
  3512  0631  0780               	addwf	0,f
  3513                           
  3514                           ;../Tetris/Tetris.c: 454:  game->player.rotation %= game->player.unit->numRotations;
  3515  0632  3001               	movlw	1
  3516  0633  00AC               	movwf	??_Tetris_RotatePlayer
  3517  0634  3000               	movlw	0
  3518  0635  00AD               	movwf	??_Tetris_RotatePlayer+1
  3519  0636  0833               	movf	Tetris_RotatePlayer@game,w
  3520  0637  3E32               	addlw	50
  3521  0638  0084               	movwf	4
  3522  0639  0800               	movf	0,w
  3523  063A  00AE               	movwf	??_Tetris_RotatePlayer+2
  3524  063B  0A84               	incf	4,f
  3525  063C  0800               	movf	0,w
  3526  063D  00AF               	movwf	??_Tetris_RotatePlayer+3
  3527  063E  082C               	movf	??_Tetris_RotatePlayer,w
  3528  063F  072E               	addwf	??_Tetris_RotatePlayer+2,w
  3529  0640  0084               	movwf	4
  3530  0641  082D               	movf	??_Tetris_RotatePlayer+1,w
  3531  0642  1803               	skipnc
  3532  0643  0A2D               	incf	??_Tetris_RotatePlayer+1,w
  3533  0644  072F               	addwf	??_Tetris_RotatePlayer+3,w
  3534  0645  00FF               	movwf	127
  3535  0646  118A  2100  118A   	fcall	stringtab
  3536  0649  00B0               	movwf	??_Tetris_RotatePlayer+4
  3537  064A  0830               	movf	??_Tetris_RotatePlayer+4,w
  3538  064B  00F3               	movwf	___lbmod@divisor
  3539  064C  0833               	movf	Tetris_RotatePlayer@game,w
  3540  064D  3E3C               	addlw	60
  3541  064E  0084               	movwf	4
  3542  064F  1383               	bcf	3,7	;select IRP bank0
  3543  0650  0800               	movf	0,w
  3544  0651  158A  2496  118A   	fcall	___lbmod
  3545  0654  1283               	bcf	3,5	;RP0=0, select bank0
  3546  0655  1303               	bcf	3,6	;RP1=0, select bank0
  3547  0656  00B1               	movwf	??_Tetris_RotatePlayer+5
  3548  0657  0833               	movf	Tetris_RotatePlayer@game,w
  3549  0658  3E3C               	addlw	60
  3550  0659  0084               	movwf	4
  3551  065A  0831               	movf	??_Tetris_RotatePlayer+5,w
  3552  065B  1383               	bcf	3,7	;select IRP bank0
  3553  065C  0080               	movwf	0
  3554                           
  3555                           ;../Tetris/Tetris.c: 455:  Tetris_UpdatePlayerUnitBits(&game->player);
  3556  065D  0833               	movf	Tetris_RotatePlayer@game,w
  3557  065E  3E30               	addlw	48
  3558  065F  118A  24F0  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  3559                           
  3560                           ;../Tetris/Tetris.c: 456:  if (!Tetris_PlayerUnitBitsAreValid(&game->player) || Tetris_P
      +                          layerOverlapsEnvironment(game))
  3561  0662  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0663  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0664  0833               	movf	Tetris_RotatePlayer@game,w
  3564  0665  3E30               	addlw	48
  3565  0666  118A  20C4  118A   	fcall	_Tetris_PlayerUnitBitsAreValid
  3566  0669  3A00               	xorlw	0
  3567  066A  1903               	skipnz
  3568  066B  2E75               	goto	l3321
  3569  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3570  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3571  066E  0833               	movf	Tetris_RotatePlayer@game,w
  3572  066F  158A  26B5  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  3573  0672  3A00               	xorlw	0
  3574  0673  1903               	skipnz
  3575  0674  2E84               	goto	l3325
  3576  0675                     l3321:	
  3577                           
  3578                           ;../Tetris/Tetris.c: 457:  {;../Tetris/Tetris.c: 458:   game->player.rotation = oldRotat
      +                          ion;
  3579  0675  1283               	bcf	3,5	;RP0=0, select bank0
  3580  0676  1303               	bcf	3,6	;RP1=0, select bank0
  3581  0677  0832               	movf	Tetris_RotatePlayer@oldRotation,w
  3582  0678  00AC               	movwf	??_Tetris_RotatePlayer
  3583  0679  0833               	movf	Tetris_RotatePlayer@game,w
  3584  067A  3E3C               	addlw	60
  3585  067B  0084               	movwf	4
  3586  067C  082C               	movf	??_Tetris_RotatePlayer,w
  3587  067D  1383               	bcf	3,7	;select IRP bank0
  3588  067E  0080               	movwf	0
  3589                           
  3590                           ;../Tetris/Tetris.c: 459:   Tetris_UpdatePlayerUnitBits(&game->player);
  3591  067F  0833               	movf	Tetris_RotatePlayer@game,w
  3592  0680  3E30               	addlw	48
  3593  0681  118A  24F0  118A   	fcall	_Tetris_UpdatePlayerUnitBits
  3594  0684                     l3325:	
  3595                           
  3596                           ;../Tetris/Tetris.c: 462:  Tetris_ApplyPlayerToTable(game);
  3597  0684  1283               	bcf	3,5	;RP0=0, select bank0
  3598  0685  1303               	bcf	3,6	;RP1=0, select bank0
  3599  0686  0833               	movf	Tetris_RotatePlayer@game,w
  3600  0687  118A  268A         	fcall	_Tetris_ApplyPlayerToTable
  3601  0689  0008               	return
  3602  068A                     __end_of_Tetris_RotatePlayer:	
  3603                           
  3604                           	psect	text12
  3605  0C96                     __ptext12:	
  3606 ;; *************** function ___lbmod *****************
  3607 ;; Defined at:
  3608 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lbmod.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  dividend        1    wreg     unsigned char 
  3611 ;;  divisor         1    3[COMMON] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  dividend        1    7[COMMON] unsigned char 
  3614 ;;  rem             1    9[COMMON] unsigned char 
  3615 ;;  counter         1    8[COMMON] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;                  1    wreg      unsigned char 
  3618 ;; Registers used:
  3619 ;;		wreg, status,2, status,0
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3625 ;;      Params:         1       0       0       0
  3626 ;;      Locals:         3       0       0       0
  3627 ;;      Temps:          3       0       0       0
  3628 ;;      Totals:         7       0       0       0
  3629 ;;Total ram usage:        7 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    1
  3632 ;; This function calls:
  3633 ;;		Nothing
  3634 ;; This function is called by:
  3635 ;;		_Tetris_RotatePlayer
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           
  3640                           ;psect for function ___lbmod
  3641  0C96                     ___lbmod:	
  3642                           
  3643                           ;incstack = 0
  3644                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3645                           ;___lbmod@dividend stored from wreg
  3646  0C96  00F7               	movwf	___lbmod@dividend
  3647  0C97  3008               	movlw	8
  3648  0C98  00F4               	movwf	??___lbmod
  3649  0C99  0874               	movf	??___lbmod,w
  3650  0C9A  00F8               	movwf	___lbmod@counter
  3651  0C9B  01F9               	clrf	___lbmod@rem
  3652  0C9C                     l2675:	
  3653  0C9C  0877               	movf	___lbmod@dividend,w
  3654  0C9D  00F4               	movwf	??___lbmod
  3655  0C9E  3007               	movlw	7
  3656  0C9F                     u1985:	
  3657  0C9F  1003               	clrc
  3658  0CA0  0CF4               	rrf	??___lbmod,f
  3659  0CA1  3EFF               	addlw	-1
  3660  0CA2  1D03               	skipz
  3661  0CA3  2C9F               	goto	u1985
  3662  0CA4  0879               	movf	___lbmod@rem,w
  3663  0CA5  00F5               	movwf	??___lbmod+1
  3664  0CA6  0775               	addwf	??___lbmod+1,w
  3665  0CA7  0474               	iorwf	??___lbmod,w
  3666  0CA8  00F6               	movwf	??___lbmod+2
  3667  0CA9  0876               	movf	??___lbmod+2,w
  3668  0CAA  00F9               	movwf	___lbmod@rem
  3669  0CAB  1003               	clrc
  3670  0CAC  0DF7               	rlf	___lbmod@dividend,f
  3671  0CAD  0873               	movf	___lbmod@divisor,w
  3672  0CAE  0279               	subwf	___lbmod@rem,w
  3673  0CAF  1C03               	skipc
  3674  0CB0  2CB3               	goto	l761
  3675  0CB1  0873               	movf	___lbmod@divisor,w
  3676  0CB2  02F9               	subwf	___lbmod@rem,f
  3677  0CB3                     l761:	
  3678  0CB3  3001               	movlw	1
  3679  0CB4  02F8               	subwf	___lbmod@counter,f
  3680  0CB5  1D03               	btfss	3,2
  3681  0CB6  2C9C               	goto	l2675
  3682  0CB7  0879               	movf	___lbmod@rem,w
  3683  0CB8  0008               	return
  3684  0CB9                     __end_of___lbmod:	
  3685                           
  3686                           	psect	text13
  3687  00C4                     __ptext13:	
  3688 ;; *************** function _Tetris_PlayerUnitBitsAreValid *****************
  3689 ;; Defined at:
  3690 ;;		line 283 in file "../Tetris/Tetris.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  player          1    wreg     PTR const struct .
  3693 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  player          1    9[BANK0 ] PTR const struct .
  3696 ;;		 -> tetrisGame.player(13), main@tetrisGame(63), 
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      unsigned char 
  3699 ;; Registers used:
  3700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3706 ;;      Params:         0       0       0       0
  3707 ;;      Locals:         0       1       0       0
  3708 ;;      Temps:          0       4       0       0
  3709 ;;      Totals:         0       5       0       0
  3710 ;;Total ram usage:        5 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    3
  3713 ;; This function calls:
  3714 ;;		_Tetris_CountUnitBits
  3715 ;; This function is called by:
  3716 ;;		_Tetris_RotatePlayer
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           
  3721                           ;psect for function _Tetris_PlayerUnitBitsAreValid
  3722  00C4                     _Tetris_PlayerUnitBitsAreValid:	
  3723                           
  3724                           ;incstack = 0
  3725                           ; Regs used in _Tetris_PlayerUnitBitsAreValid: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath+cstack]
  3726                           ;Tetris_PlayerUnitBitsAreValid@player stored from wreg
  3727  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  3728  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  3729  00C6  00A9               	movwf	Tetris_PlayerUnitBitsAreValid@player
  3730                           
  3731                           ;../Tetris/Tetris.c: 283: static uint8_t Tetris_PlayerUnitBitsAreValid(const Tetris_Play
      +                          er *player);../Tetris/Tetris.c: 284: {;../Tetris/Tetris.c: 285:  return Tetris_CountUnit
      +                          Bits(player->unit->bits[player->rotation])
  3732  00C7  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3733  00C8  3E04               	addlw	4
  3734  00C9  00F3               	movwf	Tetris_CountUnitBits@unitBits
  3735  00CA  3000               	movlw	0
  3736  00CB  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  3737  00CC  158A  26F6  118A   	fcall	_Tetris_CountUnitBits
  3738  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  3739  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  3740  00D1  00A5               	movwf	??_Tetris_PlayerUnitBitsAreValid
  3741  00D2  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3742  00D3  3E02               	addlw	2
  3743  00D4  0084               	movwf	4
  3744  00D5  1383               	bcf	3,7	;select IRP bank0
  3745  00D6  0800               	movf	0,w
  3746  00D7  00A6               	movwf	??_Tetris_PlayerUnitBitsAreValid+1
  3747  00D8  0A84               	incf	4,f
  3748  00D9  0800               	movf	0,w
  3749  00DA  00A7               	movwf	??_Tetris_PlayerUnitBitsAreValid+2
  3750  00DB  0829               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  3751  00DC  3E0C               	addlw	12
  3752  00DD  0084               	movwf	4
  3753  00DE  0800               	movf	0,w
  3754  00DF  00A8               	movwf	??_Tetris_PlayerUnitBitsAreValid+3
  3755  00E0  3002               	movlw	2
  3756  00E1                     u2685:	
  3757  00E1  1003               	clrc
  3758  00E2  0DA8               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,f
  3759  00E3  3EFF               	addlw	-1
  3760  00E4  1D03               	skipz
  3761  00E5  28E1               	goto	u2685
  3762  00E6  1003               	clrc
  3763  00E7  0D28               	rlf	??_Tetris_PlayerUnitBitsAreValid+3,w
  3764  00E8  3E02               	addlw	2
  3765  00E9  0726               	addwf	??_Tetris_PlayerUnitBitsAreValid+1,w
  3766  00EA  00F3               	movwf	Tetris_CountUnitBits@unitBits
  3767  00EB  0827               	movf	??_Tetris_PlayerUnitBitsAreValid+2,w
  3768  00EC  1803               	skipnc
  3769  00ED  3E01               	addlw	1
  3770  00EE  00F4               	movwf	Tetris_CountUnitBits@unitBits+1
  3771  00EF  158A  26F6  118A   	fcall	_Tetris_CountUnitBits
  3772  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  3773  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  3774  00F4  0625               	xorwf	??_Tetris_PlayerUnitBitsAreValid,w
  3775  00F5  1D03               	btfss	3,2
  3776  00F6  28F9               	goto	u2690
  3777  00F7  3001               	movlw	1
  3778  00F8  0008               	return
  3779  00F9                     u2690:	
  3780  00F9  3000               	movlw	0
  3781  00FA  0008               	return
  3782  00FB                     __end_of_Tetris_PlayerUnitBitsAreValid:	
  3783                           
  3784                           	psect	text14
  3785  0EF6                     __ptext14:	
  3786 ;; *************** function _Tetris_CountUnitBits *****************
  3787 ;; Defined at:
  3788 ;;		line 247 in file "../Tetris/Tetris.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  unitBits        2    3[COMMON] PTR const unsigned int 
  3791 ;;		 -> tetrisGame.player(13), Tetris_units.bits(32), Tetris_units(238), main@tetrisGame(63), 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  j               1    3[BANK0 ] unsigned char 
  3794 ;;  mask            2    0[BANK0 ] unsigned int 
  3795 ;;  i               1    4[BANK0 ] unsigned char 
  3796 ;;  result          1    2[BANK0 ] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      unsigned char 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3806 ;;      Params:         2       0       0       0
  3807 ;;      Locals:         0       5       0       0
  3808 ;;      Temps:          5       0       0       0
  3809 ;;      Totals:         7       5       0       0
  3810 ;;Total ram usage:       12 bytes
  3811 ;; Hardware stack levels used:    2
  3812 ;; Hardware stack levels required when called:    1
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_Tetris_PlayerUnitBitsAreValid
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           
  3821                           ;psect for function _Tetris_CountUnitBits
  3822  0EF6                     _Tetris_CountUnitBits:	
  3823                           
  3824                           ;../Tetris/Tetris.c: 247: static uint8_t Tetris_CountUnitBits(const uint16_t *unitBits);
      +                          ../Tetris/Tetris.c: 248: {;../Tetris/Tetris.c: 249:  uint8_t result = 0;
  3825                           
  3826                           ;incstack = 0
  3827                           ; Regs used in _Tetris_CountUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  3828  0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  3829  0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  3830  0EF8  01A2               	clrf	Tetris_CountUnitBits@result
  3831                           
  3832                           ;../Tetris/Tetris.c: 250:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  3833  0EF9  01A4               	clrf	Tetris_CountUnitBits@i
  3834  0EFA                     l3027:	
  3835                           
  3836                           ;../Tetris/Tetris.c: 251:  {;../Tetris/Tetris.c: 252:   uint16_t mask = 1;
  3837  0EFA  3001               	movlw	1
  3838  0EFB  00A0               	movwf	Tetris_CountUnitBits@mask
  3839  0EFC  3000               	movlw	0
  3840  0EFD  00A1               	movwf	Tetris_CountUnitBits@mask+1
  3841                           
  3842                           ;../Tetris/Tetris.c: 253:   for (uint8_t j = 0; j < TETRIS_TABLE_WIDTH; ++j)
  3843  0EFE  01A3               	clrf	Tetris_CountUnitBits@j
  3844  0EFF                     l3035:	
  3845                           
  3846                           ;../Tetris/Tetris.c: 254:   {;../Tetris/Tetris.c: 255:    if (unitBits[i] & mask)
  3847  0EFF  0824               	movf	Tetris_CountUnitBits@i,w
  3848  0F00  00F5               	movwf	??_Tetris_CountUnitBits
  3849  0F01  0775               	addwf	??_Tetris_CountUnitBits,w
  3850  0F02  0773               	addwf	Tetris_CountUnitBits@unitBits,w
  3851  0F03  0084               	movwf	4
  3852  0F04  0874               	movf	Tetris_CountUnitBits@unitBits+1,w
  3853  0F05  1803               	skipnc
  3854  0F06  0A74               	incf	Tetris_CountUnitBits@unitBits+1,w
  3855  0F07  00FF               	movwf	127
  3856  0F08  118A  2100  158A   	fcall	stringtab
  3857  0F0B  00F6               	movwf	??_Tetris_CountUnitBits+1
  3858  0F0C  118A  2100  158A   	fcall	stringtab
  3859  0F0F  00F7               	movwf	??_Tetris_CountUnitBits+2
  3860  0F10  0820               	movf	Tetris_CountUnitBits@mask,w
  3861  0F11  0576               	andwf	??_Tetris_CountUnitBits+1,w
  3862  0F12  00F8               	movwf	??_Tetris_CountUnitBits+3
  3863  0F13  0821               	movf	Tetris_CountUnitBits@mask+1,w
  3864  0F14  0577               	andwf	??_Tetris_CountUnitBits+2,w
  3865  0F15  00F9               	movwf	??_Tetris_CountUnitBits+4
  3866  0F16  0878               	movf	??_Tetris_CountUnitBits+3,w
  3867  0F17  0479               	iorwf	??_Tetris_CountUnitBits+4,w
  3868  0F18  1903               	btfsc	3,2
  3869  0F19  2F1E               	goto	l3039
  3870                           
  3871                           ;../Tetris/Tetris.c: 256:     ++result;
  3872  0F1A  3001               	movlw	1
  3873  0F1B  00F5               	movwf	??_Tetris_CountUnitBits
  3874  0F1C  0875               	movf	??_Tetris_CountUnitBits,w
  3875  0F1D  07A2               	addwf	Tetris_CountUnitBits@result,f
  3876  0F1E                     l3039:	
  3877                           
  3878                           ;../Tetris/Tetris.c: 257:    mask <<= 1;
  3879  0F1E  3001               	movlw	1
  3880  0F1F                     u2455:	
  3881  0F1F  1003               	clrc
  3882  0F20  0DA0               	rlf	Tetris_CountUnitBits@mask,f
  3883  0F21  0DA1               	rlf	Tetris_CountUnitBits@mask+1,f
  3884  0F22  3EFF               	addlw	-1
  3885  0F23  1D03               	skipz
  3886  0F24  2F1F               	goto	u2455
  3887                           
  3888                           ;../Tetris/Tetris.c: 258:   }
  3889  0F25  3001               	movlw	1
  3890  0F26  00F5               	movwf	??_Tetris_CountUnitBits
  3891  0F27  0875               	movf	??_Tetris_CountUnitBits,w
  3892  0F28  07A3               	addwf	Tetris_CountUnitBits@j,f
  3893  0F29  3010               	movlw	16
  3894  0F2A  0223               	subwf	Tetris_CountUnitBits@j,w
  3895  0F2B  1C03               	skipc
  3896  0F2C  2EFF               	goto	l3035
  3897                           
  3898                           ;../Tetris/Tetris.c: 259:  }
  3899  0F2D  3001               	movlw	1
  3900  0F2E  00F5               	movwf	??_Tetris_CountUnitBits
  3901  0F2F  0875               	movf	??_Tetris_CountUnitBits,w
  3902  0F30  07A4               	addwf	Tetris_CountUnitBits@i,f
  3903  0F31  3004               	movlw	4
  3904  0F32  0224               	subwf	Tetris_CountUnitBits@i,w
  3905  0F33  1C03               	skipc
  3906  0F34  2EFA               	goto	l3027
  3907                           
  3908                           ;../Tetris/Tetris.c: 260:  return result;
  3909  0F35  0822               	movf	Tetris_CountUnitBits@result,w
  3910  0F36  0008               	return
  3911  0F37                     __end_of_Tetris_CountUnitBits:	
  3912                           
  3913                           	psect	text15
  3914  0BEF                     __ptext15:	
  3915 ;; *************** function _Tetris_ResetGame *****************
  3916 ;; Defined at:
  3917 ;;		line 344 in file "../Tetris/Tetris.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  game            1    wreg     PTR struct .
  3920 ;;		 -> main@tetrisGame(63), 
  3921 ;;  playerUnit      2   34[BANK0 ] PTR const struct .
  3922 ;;		 -> Tetris_units(238), 
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  game            1   36[BANK0 ] PTR struct .
  3925 ;;		 -> main@tetrisGame(63), 
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      void 
  3928 ;; Registers used:
  3929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3935 ;;      Params:         0       2       0       0
  3936 ;;      Locals:         0       1       0       0
  3937 ;;      Temps:          0       0       0       0
  3938 ;;      Totals:         0       3       0       0
  3939 ;;Total ram usage:        3 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    5
  3942 ;; This function calls:
  3943 ;;		_Tetris_ApplyPlayerToTable
  3944 ;;		_Tetris_ResetPlayer
  3945 ;;		_memset
  3946 ;; This function is called by:
  3947 ;;		_main
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _Tetris_ResetGame
  3953  0BEF                     _Tetris_ResetGame:	
  3954                           
  3955                           ;incstack = 0
  3956                           ; Regs used in _Tetris_ResetGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3957                           ;Tetris_ResetGame@game stored from wreg
  3958  0BEF  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0BF0  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0BF1  00C4               	movwf	Tetris_ResetGame@game
  3961                           
  3962                           ;../Tetris/Tetris.c: 344: void Tetris_ResetGame(Tetris_Game *game, const Tetris_Unit *pl
      +                          ayerUnit);../Tetris/Tetris.c: 345: {;../Tetris/Tetris.c: 346:  memset(game, 0, sizeof *g
      +                          ame);
  3963  0BF2  3000               	movlw	0
  3964  0BF3  00F3               	movwf	memset@c
  3965  0BF4  00F4               	movwf	memset@c+1
  3966  0BF5  303F               	movlw	63
  3967  0BF6  00F5               	movwf	memset@n
  3968  0BF7  3000               	movlw	0
  3969  0BF8  00F6               	movwf	memset@n+1
  3970  0BF9  0844               	movf	Tetris_ResetGame@game,w
  3971  0BFA  158A  235C  158A   	fcall	_memset
  3972                           
  3973                           ;../Tetris/Tetris.c: 347:  Tetris_ResetPlayer(&game->player, playerUnit);
  3974  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  3975  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  3976  0BFF  0842               	movf	Tetris_ResetGame@playerUnit,w
  3977  0C00  00BD               	movwf	Tetris_ResetPlayer@playerUnit
  3978  0C01  0843               	movf	Tetris_ResetGame@playerUnit+1,w
  3979  0C02  00BE               	movwf	Tetris_ResetPlayer@playerUnit+1
  3980  0C03  0844               	movf	Tetris_ResetGame@game,w
  3981  0C04  3E30               	addlw	48
  3982  0C05  158A  2473  158A   	fcall	_Tetris_ResetPlayer
  3983                           
  3984                           ;../Tetris/Tetris.c: 348:  Tetris_ApplyPlayerToTable(game);
  3985  0C08  1283               	bcf	3,5	;RP0=0, select bank0
  3986  0C09  1303               	bcf	3,6	;RP1=0, select bank0
  3987  0C0A  0844               	movf	Tetris_ResetGame@game,w
  3988  0C0B  118A  268A         	fcall	_Tetris_ApplyPlayerToTable
  3989  0C0D  0008               	return
  3990  0C0E                     __end_of_Tetris_ResetGame:	
  3991                           
  3992                           	psect	text16
  3993  0C73                     __ptext16:	
  3994 ;; *************** function _Tetris_ResetPlayer *****************
  3995 ;; Defined at:
  3996 ;;		line 295 in file "../Tetris/Tetris.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  player          1    wreg     PTR struct .
  3999 ;;		 -> main@tetrisGame(63), 
  4000 ;;  playerUnit      2   29[BANK0 ] PTR const struct .
  4001 ;;		 -> Tetris_units(238), 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  player          1   33[BANK0 ] PTR struct .
  4004 ;;		 -> main@tetrisGame(63), 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4014 ;;      Params:         0       2       0       0
  4015 ;;      Locals:         0       1       0       0
  4016 ;;      Temps:          0       2       0       0
  4017 ;;      Totals:         0       5       0       0
  4018 ;;Total ram usage:        5 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    4
  4021 ;; This function calls:
  4022 ;;		_Tetris_SetPlayerUnit
  4023 ;; This function is called by:
  4024 ;;		_Tetris_ResetGame
  4025 ;;		_Tetris_UpdateGame
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           
  4030                           ;psect for function _Tetris_ResetPlayer
  4031  0C73                     _Tetris_ResetPlayer:	
  4032                           
  4033                           ;incstack = 0
  4034                           ; Regs used in _Tetris_ResetPlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4035                           ;Tetris_ResetPlayer@player stored from wreg
  4036  0C73  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0C74  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0C75  00C1               	movwf	Tetris_ResetPlayer@player
  4039                           
  4040                           ;../Tetris/Tetris.c: 295: static void Tetris_ResetPlayer(Tetris_Player *player, const Te
      +                          tris_Unit *playerUnit);../Tetris/Tetris.c: 296: {;../Tetris/Tetris.c: 297:  player->posi
      +                          tion = Tetris_playerStartingPosition;
  4041  0C76  3012               	movlw	low (_Tetris_playerStartingPosition| (0+32768))
  4042  0C77  0084               	movwf	4
  4043  0C78  3083               	movlw	high (_Tetris_playerStartingPosition| (0+32768))
  4044  0C79  00FF               	movwf	127
  4045  0C7A  118A  2100  158A   	fcall	stringtab
  4046  0C7D  00BF               	movwf	??_Tetris_ResetPlayer
  4047  0C7E  118A  2100  158A   	fcall	stringtab
  4048  0C81  00C0               	movwf	??_Tetris_ResetPlayer+1
  4049  0C82  0841               	movf	Tetris_ResetPlayer@player,w
  4050  0C83  0084               	movwf	4
  4051  0C84  083F               	movf	??_Tetris_ResetPlayer,w
  4052  0C85  1383               	bcf	3,7	;select IRP bank0
  4053  0C86  0080               	movwf	0
  4054  0C87  0A84               	incf	4,f
  4055  0C88  0840               	movf	??_Tetris_ResetPlayer+1,w
  4056  0C89  0080               	movwf	0
  4057                           
  4058                           ;../Tetris/Tetris.c: 298:  player->rotation = 0;
  4059  0C8A  0841               	movf	Tetris_ResetPlayer@player,w
  4060  0C8B  3E0C               	addlw	12
  4061  0C8C  0084               	movwf	4
  4062  0C8D  0180               	clrf	0
  4063                           
  4064                           ;../Tetris/Tetris.c: 299:  Tetris_SetPlayerUnit(player, playerUnit);
  4065  0C8E  083D               	movf	Tetris_ResetPlayer@playerUnit,w
  4066  0C8F  00F8               	movwf	Tetris_SetPlayerUnit@unit
  4067  0C90  083E               	movf	Tetris_ResetPlayer@playerUnit+1,w
  4068  0C91  00F9               	movwf	Tetris_SetPlayerUnit@unit+1
  4069  0C92  0841               	movf	Tetris_ResetPlayer@player,w
  4070  0C93  158A  22E0         	fcall	_Tetris_SetPlayerUnit
  4071  0C95  0008               	return
  4072  0C96                     __end_of_Tetris_ResetPlayer:	
  4073                           
  4074                           	psect	text17
  4075  0AE0                     __ptext17:	
  4076 ;; *************** function _Tetris_SetPlayerUnit *****************
  4077 ;; Defined at:
  4078 ;;		line 289 in file "../Tetris/Tetris.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  player          1    wreg     PTR struct .
  4081 ;;		 -> main@tetrisGame(63), 
  4082 ;;  unit            2    8[COMMON] PTR const struct .
  4083 ;;		 -> Tetris_units(238), 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  player          1   10[BANK0 ] PTR struct .
  4086 ;;		 -> main@tetrisGame(63), 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4096 ;;      Params:         2       0       0       0
  4097 ;;      Locals:         0       1       0       0
  4098 ;;      Temps:          0       0       0       0
  4099 ;;      Totals:         2       1       0       0
  4100 ;;Total ram usage:        3 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    3
  4103 ;; This function calls:
  4104 ;;		_Tetris_UpdatePlayerUnitBits
  4105 ;; This function is called by:
  4106 ;;		_Tetris_ResetPlayer
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           
  4111                           ;psect for function _Tetris_SetPlayerUnit
  4112  0AE0                     _Tetris_SetPlayerUnit:	
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _Tetris_SetPlayerUnit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4116                           ;Tetris_SetPlayerUnit@player stored from wreg
  4117  0AE0  1283               	bcf	3,5	;RP0=0, select bank0
  4118  0AE1  1303               	bcf	3,6	;RP1=0, select bank0
  4119  0AE2  00AA               	movwf	Tetris_SetPlayerUnit@player
  4120                           
  4121                           ;../Tetris/Tetris.c: 289: static void Tetris_SetPlayerUnit(Tetris_Player *player, const 
      +                          Tetris_Unit *unit);../Tetris/Tetris.c: 290: {;../Tetris/Tetris.c: 291:  player->unit = u
      +                          nit;
  4122  0AE3  082A               	movf	Tetris_SetPlayerUnit@player,w
  4123  0AE4  3E02               	addlw	2
  4124  0AE5  0084               	movwf	4
  4125  0AE6  0878               	movf	Tetris_SetPlayerUnit@unit,w
  4126  0AE7  1383               	bcf	3,7	;select IRP bank0
  4127  0AE8  0080               	movwf	0
  4128  0AE9  0A84               	incf	4,f
  4129  0AEA  0879               	movf	Tetris_SetPlayerUnit@unit+1,w
  4130  0AEB  0080               	movwf	0
  4131                           
  4132                           ;../Tetris/Tetris.c: 292:  Tetris_UpdatePlayerUnitBits(player);
  4133  0AEC  082A               	movf	Tetris_SetPlayerUnit@player,w
  4134  0AED  118A  24F0         	fcall	_Tetris_UpdatePlayerUnitBits
  4135  0AEF  0008               	return
  4136  0AF0                     __end_of_Tetris_SetPlayerUnit:	
  4137                           
  4138                           	psect	text18
  4139  04F0                     __ptext18:	
  4140 ;; *************** function _Tetris_UpdatePlayerUnitBits *****************
  4141 ;; Defined at:
  4142 ;;		line 263 in file "../Tetris/Tetris.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  player          1    wreg     PTR struct .
  4145 ;;		 -> main@tetrisGame(63), 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  player          1    7[COMMON] PTR struct .
  4148 ;;		 -> main@tetrisGame(63), 
  4149 ;;  i               1    4[COMMON] unsigned char 
  4150 ;;  i               1    3[COMMON] unsigned char 
  4151 ;;  i               1    5[COMMON] unsigned char 
  4152 ;;  shift           1    6[COMMON] char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      void 
  4155 ;; Registers used:
  4156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4162 ;;      Params:         0       0       0       0
  4163 ;;      Locals:         5       0       0       0
  4164 ;;      Temps:          0      10       0       0
  4165 ;;      Totals:         5      10       0       0
  4166 ;;Total ram usage:       15 bytes
  4167 ;; Hardware stack levels used:    2
  4168 ;; Hardware stack levels required when called:    1
  4169 ;; This function calls:
  4170 ;;		Nothing
  4171 ;; This function is called by:
  4172 ;;		_Tetris_SetPlayerUnit
  4173 ;;		_Tetris_RotatePlayer
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _Tetris_UpdatePlayerUnitBits
  4179  04F0                     _Tetris_UpdatePlayerUnitBits:	
  4180                           
  4181                           ;incstack = 0
  4182                           ; Regs used in _Tetris_UpdatePlayerUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h]
  4183                           ;Tetris_UpdatePlayerUnitBits@player stored from wreg
  4184  04F0  00F7               	movwf	Tetris_UpdatePlayerUnitBits@player
  4185                           
  4186                           ;../Tetris/Tetris.c: 263: static void Tetris_UpdatePlayerUnitBits(Tetris_Player *player)
      +                          ;../Tetris/Tetris.c: 264: {;../Tetris/Tetris.c: 265:  for (uint8_t i = 0; i < TETRIS_UNI
      +                          T_HEIGHT; ++i)
  4187  04F1  01F5               	clrf	Tetris_UpdatePlayerUnitBits@i
  4188  04F2                     l2943:	
  4189                           
  4190                           ;../Tetris/Tetris.c: 266:   player->unitBits[i] = player->unit->bits[player->rotation][i
      +                          ];
  4191  04F2  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4192  04F3  3E02               	addlw	2
  4193  04F4  0084               	movwf	4
  4194  04F5  1383               	bcf	3,7	;select IRP bank0
  4195  04F6  0800               	movf	0,w
  4196  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  4197  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  4198  04F9  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4199  04FA  0A84               	incf	4,f
  4200  04FB  0800               	movf	0,w
  4201  04FC  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4202  04FD  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4203  04FE  3E0C               	addlw	12
  4204  04FF  0084               	movwf	4
  4205  0500  0800               	movf	0,w
  4206  0501  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  4207  0502  3002               	movlw	2
  4208  0503                     u2275:	
  4209  0503  1003               	clrc
  4210  0504  0DA2               	rlf	??_Tetris_UpdatePlayerUnitBits+2,f
  4211  0505  3EFF               	addlw	-1
  4212  0506  1D03               	skipz
  4213  0507  2D03               	goto	u2275
  4214  0508  1003               	clrc
  4215  0509  0D22               	rlf	??_Tetris_UpdatePlayerUnitBits+2,w
  4216  050A  3E02               	addlw	2
  4217  050B  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4218  050C  00A3               	movwf	??_Tetris_UpdatePlayerUnitBits+3
  4219  050D  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4220  050E  1803               	skipnc
  4221  050F  3E01               	addlw	1
  4222  0510  00A4               	movwf	??_Tetris_UpdatePlayerUnitBits+4
  4223  0511  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  4224  0512  00A5               	movwf	??_Tetris_UpdatePlayerUnitBits+5
  4225  0513  0725               	addwf	??_Tetris_UpdatePlayerUnitBits+5,w
  4226  0514  0723               	addwf	??_Tetris_UpdatePlayerUnitBits+3,w
  4227  0515  0084               	movwf	4
  4228  0516  0824               	movf	??_Tetris_UpdatePlayerUnitBits+4,w
  4229  0517  1803               	skipnc
  4230  0518  0A24               	incf	??_Tetris_UpdatePlayerUnitBits+4,w
  4231  0519  00FF               	movwf	127
  4232  051A  118A  2100  118A   	fcall	stringtab
  4233  051D  00A6               	movwf	??_Tetris_UpdatePlayerUnitBits+6
  4234  051E  118A  2100  118A   	fcall	stringtab
  4235  0521  00A7               	movwf	??_Tetris_UpdatePlayerUnitBits+7
  4236  0522  0875               	movf	Tetris_UpdatePlayerUnitBits@i,w
  4237  0523  00A8               	movwf	??_Tetris_UpdatePlayerUnitBits+8
  4238  0524  0728               	addwf	??_Tetris_UpdatePlayerUnitBits+8,w
  4239  0525  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4240  0526  00A9               	movwf	??_Tetris_UpdatePlayerUnitBits+9
  4241  0527  0829               	movf	??_Tetris_UpdatePlayerUnitBits+9,w
  4242  0528  3E04               	addlw	4
  4243  0529  0084               	movwf	4
  4244  052A  0826               	movf	??_Tetris_UpdatePlayerUnitBits+6,w
  4245  052B  1383               	bcf	3,7	;select IRP bank0
  4246  052C  0080               	movwf	0
  4247  052D  0A84               	incf	4,f
  4248  052E  0827               	movf	??_Tetris_UpdatePlayerUnitBits+7,w
  4249  052F  0080               	movwf	0
  4250  0530  3001               	movlw	1
  4251  0531  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4252  0532  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4253  0533  07F5               	addwf	Tetris_UpdatePlayerUnitBits@i,f
  4254  0534  3004               	movlw	4
  4255  0535  0275               	subwf	Tetris_UpdatePlayerUnitBits@i,w
  4256  0536  1C03               	skipc
  4257  0537  2CF2               	goto	l2943
  4258                           
  4259                           ;../Tetris/Tetris.c: 268:  int8_t shift = 8 - player->position.x + Tetris_unitPivot.x;
  4260  0538  0877               	movf	Tetris_UpdatePlayerUnitBits@player,w
  4261  0539  0084               	movwf	4
  4262  053A  0800               	movf	0,w
  4263  053B  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4264  053C  3014               	movlw	low (_Tetris_unitPivot| (0+32768))
  4265  053D  0084               	movwf	4
  4266  053E  3083               	movlw	high (_Tetris_unitPivot| (0+32768))
  4267  053F  00FF               	movwf	127
  4268  0540  118A  2100  118A   	fcall	stringtab
  4269  0543  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4270  0544  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4271  0545  0221               	subwf	??_Tetris_UpdatePlayerUnitBits+1,w
  4272  0546  3E08               	addlw	8
  4273  0547  00A2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  4274  0548  0822               	movf	??_Tetris_UpdatePlayerUnitBits+2,w
  4275  0549  00F6               	movwf	Tetris_UpdatePlayerUnitBits@shift
  4276                           
  4277                           ;../Tetris/Tetris.c: 270:  if (shift > 0)
  4278  054A  0876               	movf	Tetris_UpdatePlayerUnitBits@shift,w
  4279  054B  3A80               	xorlw	128
  4280  054C  3E7F               	addlw	-129
  4281  054D  1C03               	skipc
  4282  054E  2D6C               	goto	l2965
  4283                           
  4284                           ;../Tetris/Tetris.c: 271:  {;../Tetris/Tetris.c: 272:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  4285  054F  01F3               	clrf	Tetris_UpdatePlayerUnitBits@i_346
  4286  0550                     l2959:	
  4287                           
  4288                           ;../Tetris/Tetris.c: 273:    player->unitBits[i] <<= shift;
  4289  0550  0873               	movf	Tetris_UpdatePlayerUnitBits@i_346,w
  4290  0551  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4291  0552  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4292  0553  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4293  0554  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4294  0555  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4295  0556  3E04               	addlw	4
  4296  0557  0084               	movwf	4
  4297  0558  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  4298  0559  1383               	bcf	3,7	;select IRP bank0
  4299  055A  2D60               	goto	u2300
  4300  055B                     u2305:	
  4301  055B  1003               	clrc
  4302  055C  0D80               	rlf	0,f
  4303  055D  0A84               	incf	4,f
  4304  055E  0D80               	rlf	0,f
  4305  055F  0384               	decf	4,f
  4306  0560                     u2300:	
  4307  0560  3EFF               	addlw	-1
  4308  0561  1D03               	skipz
  4309  0562  2D5B               	goto	u2305
  4310  0563  3001               	movlw	1
  4311  0564  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4312  0565  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4313  0566  07F3               	addwf	Tetris_UpdatePlayerUnitBits@i_346,f
  4314  0567  3004               	movlw	4
  4315  0568  0273               	subwf	Tetris_UpdatePlayerUnitBits@i_346,w
  4316  0569  1803               	btfsc	3,0
  4317  056A  0008               	return
  4318  056B  2D50               	goto	l2959
  4319  056C                     l2965:	
  4320                           
  4321                           ;../Tetris/Tetris.c: 276:  {;../Tetris/Tetris.c: 277:   shift = -shift;
  4322  056C  09F6               	comf	Tetris_UpdatePlayerUnitBits@shift,f
  4323  056D  0AF6               	incf	Tetris_UpdatePlayerUnitBits@shift,f
  4324                           
  4325                           ;../Tetris/Tetris.c: 278:   for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4326  056E  01F4               	clrf	Tetris_UpdatePlayerUnitBits@i_347
  4327  056F                     l2973:	
  4328                           
  4329                           ;../Tetris/Tetris.c: 279:    player->unitBits[i] >>= shift;
  4330  056F  0874               	movf	Tetris_UpdatePlayerUnitBits@i_347,w
  4331  0570  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4332  0571  0720               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  4333  0572  0777               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  4334  0573  00A1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  4335  0574  0821               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  4336  0575  3E04               	addlw	4
  4337  0576  0084               	movwf	4
  4338  0577  0A76               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  4339  0578  1383               	bcf	3,7	;select IRP bank0
  4340  0579  2D7F               	goto	u2320
  4341  057A                     u2325:	
  4342  057A  0A84               	incf	4,f
  4343  057B  1003               	clrc
  4344  057C  0C80               	rrf	0,f
  4345  057D  0384               	decf	4,f
  4346  057E  0C80               	rrf	0,f
  4347  057F                     u2320:	
  4348  057F  3EFF               	addlw	-1
  4349  0580  1D03               	skipz
  4350  0581  2D7A               	goto	u2325
  4351  0582  3001               	movlw	1
  4352  0583  00A0               	movwf	??_Tetris_UpdatePlayerUnitBits
  4353  0584  0820               	movf	??_Tetris_UpdatePlayerUnitBits,w
  4354  0585  07F4               	addwf	Tetris_UpdatePlayerUnitBits@i_347,f
  4355  0586  3004               	movlw	4
  4356  0587  0274               	subwf	Tetris_UpdatePlayerUnitBits@i_347,w
  4357  0588  1803               	btfsc	3,0
  4358  0589  0008               	return
  4359  058A  2D6F               	goto	l2973
  4360  058B                     __end_of_Tetris_UpdatePlayerUnitBits:	
  4361                           
  4362                           	psect	text19
  4363  06EE                     __ptext19:	
  4364 ;; *************** function _Tetris_MovePlayerRight *****************
  4365 ;; Defined at:
  4366 ;;		line 425 in file "../Tetris/Tetris.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  game            1    wreg     PTR struct .
  4369 ;;		 -> main@tetrisGame(63), 
  4370 ;; Auto vars:     Size  Location     Type
  4371 ;;  game            1   16[BANK0 ] PTR struct .
  4372 ;;		 -> main@tetrisGame(63), 
  4373 ;;  i               1   15[BANK0 ] unsigned char 
  4374 ;;  i               1   14[BANK0 ] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4384 ;;      Params:         0       0       0       0
  4385 ;;      Locals:         0       3       0       0
  4386 ;;      Temps:          0       2       0       0
  4387 ;;      Totals:         0       5       0       0
  4388 ;;Total ram usage:        5 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    4
  4391 ;; This function calls:
  4392 ;;		_Tetris_ApplyPlayerToTable
  4393 ;;		_Tetris_PlayerOverlapsEnvironment
  4394 ;;		_Tetris_PlayerTouchingRightBound
  4395 ;;		_Tetris_RemovePlayerFromTable
  4396 ;; This function is called by:
  4397 ;;		_main
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           
  4402                           ;psect for function _Tetris_MovePlayerRight
  4403  06EE                     _Tetris_MovePlayerRight:	
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _Tetris_MovePlayerRight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  4407                           ;Tetris_MovePlayerRight@game stored from wreg
  4408  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  4409  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  4410  06F0  00B0               	movwf	Tetris_MovePlayerRight@game
  4411                           
  4412                           ;../Tetris/Tetris.c: 425: void Tetris_MovePlayerRight(Tetris_Game *game);../Tetris/Tetri
      +                          s.c: 426: {;../Tetris/Tetris.c: 427:  if (Tetris_PlayerTouchingRightBound(&game->player)
      +                          )
  4413  06F1  0830               	movf	Tetris_MovePlayerRight@game,w
  4414  06F2  3E30               	addlw	48
  4415  06F3  158A  23B2  118A   	fcall	_Tetris_PlayerTouchingRightBound
  4416  06F6  3A00               	xorlw	0
  4417  06F7  1D03               	btfss	3,2
  4418  06F8  0008               	return
  4419                           
  4420                           ;../Tetris/Tetris.c: 430:  Tetris_RemovePlayerFromTable(game);
  4421  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  4422  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  4423  06FB  0830               	movf	Tetris_MovePlayerRight@game,w
  4424  06FC  158A  263E  118A   	fcall	_Tetris_RemovePlayerFromTable
  4425                           
  4426                           ;../Tetris/Tetris.c: 432:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4427  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  4428  0700  1303               	bcf	3,6	;RP1=0, select bank0
  4429  0701  01AE               	clrf	Tetris_MovePlayerRight@i
  4430  0702                     l2769:	
  4431                           
  4432                           ;../Tetris/Tetris.c: 433:   game->player.unitBits[i] >>= 1;
  4433  0702  082E               	movf	Tetris_MovePlayerRight@i,w
  4434  0703  00AC               	movwf	??_Tetris_MovePlayerRight
  4435  0704  072C               	addwf	??_Tetris_MovePlayerRight,w
  4436  0705  0730               	addwf	Tetris_MovePlayerRight@game,w
  4437  0706  00AD               	movwf	??_Tetris_MovePlayerRight+1
  4438  0707  082D               	movf	??_Tetris_MovePlayerRight+1,w
  4439  0708  3E34               	addlw	52
  4440  0709  0084               	movwf	4
  4441  070A  0A84               	incf	4,f
  4442  070B  1003               	clrc
  4443  070C  1383               	bcf	3,7	;select IRP bank0
  4444  070D  0C80               	rrf	0,f
  4445  070E  0384               	decf	4,f
  4446  070F  0C80               	rrf	0,f
  4447  0710  3001               	movlw	1
  4448  0711  00AC               	movwf	??_Tetris_MovePlayerRight
  4449  0712  082C               	movf	??_Tetris_MovePlayerRight,w
  4450  0713  07AE               	addwf	Tetris_MovePlayerRight@i,f
  4451  0714  3004               	movlw	4
  4452  0715  022E               	subwf	Tetris_MovePlayerRight@i,w
  4453  0716  1C03               	skipc
  4454  0717  2F02               	goto	l2769
  4455                           
  4456                           ;../Tetris/Tetris.c: 435:  if (Tetris_PlayerOverlapsEnvironment(game))
  4457  0718  0830               	movf	Tetris_MovePlayerRight@game,w
  4458  0719  158A  26B5  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  4459  071C  3A00               	xorlw	0
  4460  071D  1903               	skipnz
  4461  071E  2F39               	goto	l2789
  4462                           
  4463                           ;../Tetris/Tetris.c: 436:  {;../Tetris/Tetris.c: 437:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  4464  071F  1283               	bcf	3,5	;RP0=0, select bank0
  4465  0720  1303               	bcf	3,6	;RP1=0, select bank0
  4466  0721  01AF               	clrf	Tetris_MovePlayerRight@i_475
  4467  0722                     l2783:	
  4468                           
  4469                           ;../Tetris/Tetris.c: 438:    game->player.unitBits[i] <<= 1;
  4470  0722  082F               	movf	Tetris_MovePlayerRight@i_475,w
  4471  0723  00AC               	movwf	??_Tetris_MovePlayerRight
  4472  0724  072C               	addwf	??_Tetris_MovePlayerRight,w
  4473  0725  0730               	addwf	Tetris_MovePlayerRight@game,w
  4474  0726  00AD               	movwf	??_Tetris_MovePlayerRight+1
  4475  0727  082D               	movf	??_Tetris_MovePlayerRight+1,w
  4476  0728  3E34               	addlw	52
  4477  0729  0084               	movwf	4
  4478  072A  1003               	clrc
  4479  072B  1383               	bcf	3,7	;select IRP bank0
  4480  072C  0D80               	rlf	0,f
  4481  072D  0A84               	incf	4,f
  4482  072E  0D80               	rlf	0,f
  4483  072F  0384               	decf	4,f
  4484  0730  3001               	movlw	1
  4485  0731  00AC               	movwf	??_Tetris_MovePlayerRight
  4486  0732  082C               	movf	??_Tetris_MovePlayerRight,w
  4487  0733  07AF               	addwf	Tetris_MovePlayerRight@i_475,f
  4488  0734  3004               	movlw	4
  4489  0735  022F               	subwf	Tetris_MovePlayerRight@i_475,w
  4490  0736  1803               	btfsc	3,0
  4491  0737  2F43               	goto	l2791
  4492  0738  2F22               	goto	l2783
  4493  0739                     l2789:	
  4494                           
  4495                           ;../Tetris/Tetris.c: 441:  {;../Tetris/Tetris.c: 442:   ++game->player.position.x;
  4496  0739  3001               	movlw	1
  4497  073A  1283               	bcf	3,5	;RP0=0, select bank0
  4498  073B  1303               	bcf	3,6	;RP1=0, select bank0
  4499  073C  00AC               	movwf	??_Tetris_MovePlayerRight
  4500  073D  0830               	movf	Tetris_MovePlayerRight@game,w
  4501  073E  3E30               	addlw	48
  4502  073F  0084               	movwf	4
  4503  0740  082C               	movf	??_Tetris_MovePlayerRight,w
  4504  0741  1383               	bcf	3,7	;select IRP bank0
  4505  0742  0780               	addwf	0,f
  4506  0743                     l2791:	
  4507                           
  4508                           ;../Tetris/Tetris.c: 445:  Tetris_ApplyPlayerToTable(game);
  4509  0743  0830               	movf	Tetris_MovePlayerRight@game,w
  4510  0744  118A  268A         	fcall	_Tetris_ApplyPlayerToTable
  4511  0746  0008               	return
  4512  0747                     __end_of_Tetris_MovePlayerRight:	
  4513                           
  4514                           	psect	text20
  4515  0BB2                     __ptext20:	
  4516 ;; *************** function _Tetris_PlayerTouchingRightBound *****************
  4517 ;; Defined at:
  4518 ;;		line 208 in file "../Tetris/Tetris.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  player          1    wreg     PTR struct .
  4521 ;;		 -> main@tetrisGame(63), 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  player          1    7[COMMON] PTR struct .
  4524 ;;		 -> main@tetrisGame(63), 
  4525 ;;  i               1    8[COMMON] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      unsigned char 
  4528 ;; Registers used:
  4529 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4535 ;;      Params:         0       0       0       0
  4536 ;;      Locals:         2       0       0       0
  4537 ;;      Temps:          4       0       0       0
  4538 ;;      Totals:         6       0       0       0
  4539 ;;Total ram usage:        6 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    1
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_Tetris_MovePlayerRight
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _Tetris_PlayerTouchingRightBound
  4551  0BB2                     _Tetris_PlayerTouchingRightBound:	
  4552                           
  4553                           ;incstack = 0
  4554                           ; Regs used in _Tetris_PlayerTouchingRightBound: [wreg-fsr0h+status,2+status,0]
  4555                           ;Tetris_PlayerTouchingRightBound@player stored from wreg
  4556  0BB2  00F7               	movwf	Tetris_PlayerTouchingRightBound@player
  4557                           
  4558                           ;../Tetris/Tetris.c: 208: static uint8_t Tetris_PlayerTouchingRightBound(Tetris_Player *
      +                          player);../Tetris/Tetris.c: 209: {;../Tetris/Tetris.c: 210:  for (uint8_t i = 0; i < TET
      +                          RIS_UNIT_HEIGHT; ++i)
  4559  0BB3  01F8               	clrf	Tetris_PlayerTouchingRightBound@i
  4560  0BB4                     l2517:	
  4561                           
  4562                           ;../Tetris/Tetris.c: 211:  {;../Tetris/Tetris.c: 212:   if (player->unitBits[i] & 0x0001
      +                          )
  4563  0BB4  0878               	movf	Tetris_PlayerTouchingRightBound@i,w
  4564  0BB5  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  4565  0BB6  0773               	addwf	??_Tetris_PlayerTouchingRightBound,w
  4566  0BB7  0777               	addwf	Tetris_PlayerTouchingRightBound@player,w
  4567  0BB8  00F4               	movwf	??_Tetris_PlayerTouchingRightBound+1
  4568  0BB9  0874               	movf	??_Tetris_PlayerTouchingRightBound+1,w
  4569  0BBA  3E04               	addlw	4
  4570  0BBB  0084               	movwf	4
  4571  0BBC  1383               	bcf	3,7	;select IRP bank0
  4572  0BBD  0800               	movf	0,w
  4573  0BBE  00F5               	movwf	??_Tetris_PlayerTouchingRightBound+2
  4574  0BBF  0A84               	incf	4,f
  4575  0BC0  0800               	movf	0,w
  4576  0BC1  00F6               	movwf	??_Tetris_PlayerTouchingRightBound+3
  4577  0BC2  1C75               	btfss	??_Tetris_PlayerTouchingRightBound+2,0
  4578  0BC3  2BC6               	goto	l2523
  4579                           
  4580                           ;../Tetris/Tetris.c: 213:    return 1;
  4581  0BC4  3001               	movlw	1
  4582  0BC5  0008               	return
  4583  0BC6                     l2523:	
  4584                           
  4585                           ;../Tetris/Tetris.c: 214:  }
  4586  0BC6  3001               	movlw	1
  4587  0BC7  00F3               	movwf	??_Tetris_PlayerTouchingRightBound
  4588  0BC8  0873               	movf	??_Tetris_PlayerTouchingRightBound,w
  4589  0BC9  07F8               	addwf	Tetris_PlayerTouchingRightBound@i,f
  4590  0BCA  3004               	movlw	4
  4591  0BCB  0278               	subwf	Tetris_PlayerTouchingRightBound@i,w
  4592  0BCC  1C03               	skipc
  4593  0BCD  2BB4               	goto	l2517
  4594                           
  4595                           ;../Tetris/Tetris.c: 216:  return 0;
  4596  0BCE  3000               	movlw	0
  4597  0BCF  0008               	return
  4598  0BD0                     __end_of_Tetris_PlayerTouchingRightBound:	
  4599                           
  4600                           	psect	text21
  4601  0747                     __ptext21:	
  4602 ;; *************** function _Tetris_MovePlayerLeft *****************
  4603 ;; Defined at:
  4604 ;;		line 402 in file "../Tetris/Tetris.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  game            1    wreg     PTR struct .
  4607 ;;		 -> main@tetrisGame(63), 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;  game            1   16[BANK0 ] PTR struct .
  4610 ;;		 -> main@tetrisGame(63), 
  4611 ;;  i               1   15[BANK0 ] unsigned char 
  4612 ;;  i               1   14[BANK0 ] unsigned char 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  1    wreg      void 
  4615 ;; Registers used:
  4616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4617 ;; Tracked objects:
  4618 ;;		On entry : 0/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4622 ;;      Params:         0       0       0       0
  4623 ;;      Locals:         0       3       0       0
  4624 ;;      Temps:          0       2       0       0
  4625 ;;      Totals:         0       5       0       0
  4626 ;;Total ram usage:        5 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    4
  4629 ;; This function calls:
  4630 ;;		_Tetris_ApplyPlayerToTable
  4631 ;;		_Tetris_PlayerOverlapsEnvironment
  4632 ;;		_Tetris_PlayerTouchingLeftBound
  4633 ;;		_Tetris_RemovePlayerFromTable
  4634 ;; This function is called by:
  4635 ;;		_main
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           
  4640                           ;psect for function _Tetris_MovePlayerLeft
  4641  0747                     _Tetris_MovePlayerLeft:	
  4642                           
  4643                           ;incstack = 0
  4644                           ; Regs used in _Tetris_MovePlayerLeft: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  4645                           ;Tetris_MovePlayerLeft@game stored from wreg
  4646  0747  1283               	bcf	3,5	;RP0=0, select bank0
  4647  0748  1303               	bcf	3,6	;RP1=0, select bank0
  4648  0749  00B0               	movwf	Tetris_MovePlayerLeft@game
  4649                           
  4650                           ;../Tetris/Tetris.c: 402: void Tetris_MovePlayerLeft(Tetris_Game *game);../Tetris/Tetris
      +                          .c: 403: {;../Tetris/Tetris.c: 404:  if (Tetris_PlayerTouchingLeftBound(&game->player))
  4651  074A  0830               	movf	Tetris_MovePlayerLeft@game,w
  4652  074B  3E30               	addlw	48
  4653  074C  158A  2394  118A   	fcall	_Tetris_PlayerTouchingLeftBound
  4654  074F  3A00               	xorlw	0
  4655  0750  1D03               	btfss	3,2
  4656  0751  0008               	return
  4657                           
  4658                           ;../Tetris/Tetris.c: 407:  Tetris_RemovePlayerFromTable(game);
  4659  0752  1283               	bcf	3,5	;RP0=0, select bank0
  4660  0753  1303               	bcf	3,6	;RP1=0, select bank0
  4661  0754  0830               	movf	Tetris_MovePlayerLeft@game,w
  4662  0755  158A  263E  118A   	fcall	_Tetris_RemovePlayerFromTable
  4663                           
  4664                           ;../Tetris/Tetris.c: 409:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4665  0758  1283               	bcf	3,5	;RP0=0, select bank0
  4666  0759  1303               	bcf	3,6	;RP1=0, select bank0
  4667  075A  01AE               	clrf	Tetris_MovePlayerLeft@i
  4668  075B                     l2733:	
  4669                           
  4670                           ;../Tetris/Tetris.c: 410:   game->player.unitBits[i] <<= 1;
  4671  075B  082E               	movf	Tetris_MovePlayerLeft@i,w
  4672  075C  00AC               	movwf	??_Tetris_MovePlayerLeft
  4673  075D  072C               	addwf	??_Tetris_MovePlayerLeft,w
  4674  075E  0730               	addwf	Tetris_MovePlayerLeft@game,w
  4675  075F  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  4676  0760  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  4677  0761  3E34               	addlw	52
  4678  0762  0084               	movwf	4
  4679  0763  1003               	clrc
  4680  0764  1383               	bcf	3,7	;select IRP bank0
  4681  0765  0D80               	rlf	0,f
  4682  0766  0A84               	incf	4,f
  4683  0767  0D80               	rlf	0,f
  4684  0768  0384               	decf	4,f
  4685  0769  3001               	movlw	1
  4686  076A  00AC               	movwf	??_Tetris_MovePlayerLeft
  4687  076B  082C               	movf	??_Tetris_MovePlayerLeft,w
  4688  076C  07AE               	addwf	Tetris_MovePlayerLeft@i,f
  4689  076D  3004               	movlw	4
  4690  076E  022E               	subwf	Tetris_MovePlayerLeft@i,w
  4691  076F  1C03               	skipc
  4692  0770  2F5B               	goto	l2733
  4693                           
  4694                           ;../Tetris/Tetris.c: 412:  if (Tetris_PlayerOverlapsEnvironment(game))
  4695  0771  0830               	movf	Tetris_MovePlayerLeft@game,w
  4696  0772  158A  26B5  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  4697  0775  3A00               	xorlw	0
  4698  0776  1903               	skipnz
  4699  0777  2F92               	goto	l2753
  4700                           
  4701                           ;../Tetris/Tetris.c: 413:  {;../Tetris/Tetris.c: 414:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  4702  0778  1283               	bcf	3,5	;RP0=0, select bank0
  4703  0779  1303               	bcf	3,6	;RP1=0, select bank0
  4704  077A  01AF               	clrf	Tetris_MovePlayerLeft@i_461
  4705  077B                     l2747:	
  4706                           
  4707                           ;../Tetris/Tetris.c: 415:    game->player.unitBits[i] >>= 1;
  4708  077B  082F               	movf	Tetris_MovePlayerLeft@i_461,w
  4709  077C  00AC               	movwf	??_Tetris_MovePlayerLeft
  4710  077D  072C               	addwf	??_Tetris_MovePlayerLeft,w
  4711  077E  0730               	addwf	Tetris_MovePlayerLeft@game,w
  4712  077F  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  4713  0780  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  4714  0781  3E34               	addlw	52
  4715  0782  0084               	movwf	4
  4716  0783  0A84               	incf	4,f
  4717  0784  1003               	clrc
  4718  0785  1383               	bcf	3,7	;select IRP bank0
  4719  0786  0C80               	rrf	0,f
  4720  0787  0384               	decf	4,f
  4721  0788  0C80               	rrf	0,f
  4722  0789  3001               	movlw	1
  4723  078A  00AC               	movwf	??_Tetris_MovePlayerLeft
  4724  078B  082C               	movf	??_Tetris_MovePlayerLeft,w
  4725  078C  07AF               	addwf	Tetris_MovePlayerLeft@i_461,f
  4726  078D  3004               	movlw	4
  4727  078E  022F               	subwf	Tetris_MovePlayerLeft@i_461,w
  4728  078F  1803               	btfsc	3,0
  4729  0790  2F9A               	goto	l2755
  4730  0791  2F7B               	goto	l2747
  4731  0792                     l2753:	
  4732                           
  4733                           ;../Tetris/Tetris.c: 418:  {;../Tetris/Tetris.c: 419:   --game->player.position.x;
  4734  0792  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0793  1303               	bcf	3,6	;RP1=0, select bank0
  4736  0794  0830               	movf	Tetris_MovePlayerLeft@game,w
  4737  0795  3E30               	addlw	48
  4738  0796  0084               	movwf	4
  4739  0797  3001               	movlw	1
  4740  0798  1383               	bcf	3,7	;select IRP bank0
  4741  0799  0280               	subwf	0,f
  4742  079A                     l2755:	
  4743                           
  4744                           ;../Tetris/Tetris.c: 422:  Tetris_ApplyPlayerToTable(game);
  4745  079A  0830               	movf	Tetris_MovePlayerLeft@game,w
  4746  079B  118A  268A         	fcall	_Tetris_ApplyPlayerToTable
  4747  079D  0008               	return
  4748  079E                     __end_of_Tetris_MovePlayerLeft:	
  4749                           
  4750                           	psect	text22
  4751  0E3E                     __ptext22:	
  4752 ;; *************** function _Tetris_RemovePlayerFromTable *****************
  4753 ;; Defined at:
  4754 ;;		line 219 in file "../Tetris/Tetris.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  game            1    wreg     PTR struct .
  4757 ;;		 -> main@tetrisGame(63), 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  game            1    7[COMMON] PTR struct .
  4760 ;;		 -> main@tetrisGame(63), 
  4761 ;;  i               1    8[COMMON] unsigned char 
  4762 ;;  start           1    6[COMMON] unsigned char 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4772 ;;      Params:         0       0       0       0
  4773 ;;      Locals:         3       0       0       0
  4774 ;;      Temps:          0       8       0       0
  4775 ;;      Totals:         3       8       0       0
  4776 ;;Total ram usage:       11 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    3
  4779 ;; This function calls:
  4780 ;;		_Tetris_PlayerTopmostY
  4781 ;; This function is called by:
  4782 ;;		_Tetris_MovePlayerDown
  4783 ;;		_Tetris_MovePlayerLeft
  4784 ;;		_Tetris_MovePlayerRight
  4785 ;;		_Tetris_RotatePlayer
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           
  4790                           ;psect for function _Tetris_RemovePlayerFromTable
  4791  0E3E                     _Tetris_RemovePlayerFromTable:	
  4792                           
  4793                           ;incstack = 0
  4794                           ; Regs used in _Tetris_RemovePlayerFromTable: [wreg-fsr0h+status,2+status,0+btemp+1+pcla
      +                          th+cstack]
  4795                           ;Tetris_RemovePlayerFromTable@game stored from wreg
  4796  0E3E  00F7               	movwf	Tetris_RemovePlayerFromTable@game
  4797                           
  4798                           ;../Tetris/Tetris.c: 219: static void Tetris_RemovePlayerFromTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 220: {;../Tetris/Tetris.c: 221:  uint8_t start = Tetris_PlayerTopmostY
      +                          (&game->player);
  4799  0E3F  0877               	movf	Tetris_RemovePlayerFromTable@game,w
  4800  0E40  3E30               	addlw	48
  4801  0E41  158A  22F0  158A   	fcall	_Tetris_PlayerTopmostY
  4802  0E44  1283               	bcf	3,5	;RP0=0, select bank0
  4803  0E45  1303               	bcf	3,6	;RP1=0, select bank0
  4804  0E46  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4805  0E47  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  4806  0E48  00F6               	movwf	Tetris_RemovePlayerFromTable@start
  4807                           
  4808                           ;../Tetris/Tetris.c: 222:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  4809  0E49  01F8               	clrf	Tetris_RemovePlayerFromTable@i
  4810  0E4A                     l2203:	
  4811                           
  4812                           ;../Tetris/Tetris.c: 223:  {;../Tetris/Tetris.c: 224:   game->table[start + i] &= ~game-
      +                          >player.unitBits[i];
  4813  0E4A  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  4814  0E4B  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4815  0E4C  0720               	addwf	??_Tetris_RemovePlayerFromTable,w
  4816  0E4D  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  4817  0E4E  00A1               	movwf	??_Tetris_RemovePlayerFromTable+1
  4818  0E4F  0821               	movf	??_Tetris_RemovePlayerFromTable+1,w
  4819  0E50  3E34               	addlw	52
  4820  0E51  0084               	movwf	4
  4821  0E52  1383               	bcf	3,7	;select IRP bank0
  4822  0E53  0800               	movf	0,w
  4823  0E54  00A2               	movwf	??_Tetris_RemovePlayerFromTable+2
  4824  0E55  0A84               	incf	4,f
  4825  0E56  0800               	movf	0,w
  4826  0E57  00A3               	movwf	??_Tetris_RemovePlayerFromTable+3
  4827  0E58  09A2               	comf	??_Tetris_RemovePlayerFromTable+2,f
  4828  0E59  09A3               	comf	??_Tetris_RemovePlayerFromTable+3,f
  4829  0E5A  0876               	movf	Tetris_RemovePlayerFromTable@start,w
  4830  0E5B  00A4               	movwf	??_Tetris_RemovePlayerFromTable+4
  4831  0E5C  0724               	addwf	??_Tetris_RemovePlayerFromTable+4,w
  4832  0E5D  0777               	addwf	Tetris_RemovePlayerFromTable@game,w
  4833  0E5E  00A5               	movwf	??_Tetris_RemovePlayerFromTable+5
  4834  0E5F  0878               	movf	Tetris_RemovePlayerFromTable@i,w
  4835  0E60  00A6               	movwf	??_Tetris_RemovePlayerFromTable+6
  4836  0E61  0726               	addwf	??_Tetris_RemovePlayerFromTable+6,w
  4837  0E62  0725               	addwf	??_Tetris_RemovePlayerFromTable+5,w
  4838  0E63  00A7               	movwf	??_Tetris_RemovePlayerFromTable+7
  4839  0E64  0827               	movf	??_Tetris_RemovePlayerFromTable+7,w
  4840  0E65  0084               	movwf	4
  4841  0E66  0822               	movf	??_Tetris_RemovePlayerFromTable+2,w
  4842  0E67  0580               	andwf	0,f
  4843  0E68  0A84               	incf	4,f
  4844  0E69  0823               	movf	??_Tetris_RemovePlayerFromTable+3,w
  4845  0E6A  0580               	andwf	0,f
  4846                           
  4847                           ;../Tetris/Tetris.c: 225:  }
  4848  0E6B  3001               	movlw	1
  4849  0E6C  00A0               	movwf	??_Tetris_RemovePlayerFromTable
  4850  0E6D  0820               	movf	??_Tetris_RemovePlayerFromTable,w
  4851  0E6E  07F8               	addwf	Tetris_RemovePlayerFromTable@i,f
  4852  0E6F  3004               	movlw	4
  4853  0E70  0278               	subwf	Tetris_RemovePlayerFromTable@i,w
  4854  0E71  1803               	btfsc	3,0
  4855  0E72  0008               	return
  4856  0E73  2E4A               	goto	l2203
  4857  0E74                     __end_of_Tetris_RemovePlayerFromTable:	
  4858                           
  4859                           	psect	text23
  4860  0B94                     __ptext23:	
  4861 ;; *************** function _Tetris_PlayerTouchingLeftBound *****************
  4862 ;; Defined at:
  4863 ;;		line 197 in file "../Tetris/Tetris.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  player          1    wreg     PTR struct .
  4866 ;;		 -> main@tetrisGame(63), 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  player          1    7[COMMON] PTR struct .
  4869 ;;		 -> main@tetrisGame(63), 
  4870 ;;  i               1    8[COMMON] unsigned char 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      unsigned char 
  4873 ;; Registers used:
  4874 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4880 ;;      Params:         0       0       0       0
  4881 ;;      Locals:         2       0       0       0
  4882 ;;      Temps:          4       0       0       0
  4883 ;;      Totals:         6       0       0       0
  4884 ;;Total ram usage:        6 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    1
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_Tetris_MovePlayerLeft
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _Tetris_PlayerTouchingLeftBound
  4896  0B94                     _Tetris_PlayerTouchingLeftBound:	
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _Tetris_PlayerTouchingLeftBound: [wreg-fsr0h+status,2+status,0]
  4900                           ;Tetris_PlayerTouchingLeftBound@player stored from wreg
  4901  0B94  00F7               	movwf	Tetris_PlayerTouchingLeftBound@player
  4902                           
  4903                           ;../Tetris/Tetris.c: 197: static uint8_t Tetris_PlayerTouchingLeftBound(Tetris_Player *p
      +                          layer);../Tetris/Tetris.c: 198: {;../Tetris/Tetris.c: 199:  for (uint8_t i = 0; i < TETR
      +                          IS_UNIT_HEIGHT; ++i)
  4904  0B95  01F8               	clrf	Tetris_PlayerTouchingLeftBound@i
  4905  0B96                     l2497:	
  4906                           
  4907                           ;../Tetris/Tetris.c: 200:  {;../Tetris/Tetris.c: 201:   if (player->unitBits[i] & 0x8000
      +                          )
  4908  0B96  0878               	movf	Tetris_PlayerTouchingLeftBound@i,w
  4909  0B97  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  4910  0B98  0773               	addwf	??_Tetris_PlayerTouchingLeftBound,w
  4911  0B99  0777               	addwf	Tetris_PlayerTouchingLeftBound@player,w
  4912  0B9A  00F4               	movwf	??_Tetris_PlayerTouchingLeftBound+1
  4913  0B9B  0874               	movf	??_Tetris_PlayerTouchingLeftBound+1,w
  4914  0B9C  3E04               	addlw	4
  4915  0B9D  0084               	movwf	4
  4916  0B9E  1383               	bcf	3,7	;select IRP bank0
  4917  0B9F  0800               	movf	0,w
  4918  0BA0  00F5               	movwf	??_Tetris_PlayerTouchingLeftBound+2
  4919  0BA1  0A84               	incf	4,f
  4920  0BA2  0800               	movf	0,w
  4921  0BA3  00F6               	movwf	??_Tetris_PlayerTouchingLeftBound+3
  4922  0BA4  1FF6               	btfss	??_Tetris_PlayerTouchingLeftBound+3,7
  4923  0BA5  2BA8               	goto	l2503
  4924                           
  4925                           ;../Tetris/Tetris.c: 202:    return 1;
  4926  0BA6  3001               	movlw	1
  4927  0BA7  0008               	return
  4928  0BA8                     l2503:	
  4929                           
  4930                           ;../Tetris/Tetris.c: 203:  }
  4931  0BA8  3001               	movlw	1
  4932  0BA9  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound
  4933  0BAA  0873               	movf	??_Tetris_PlayerTouchingLeftBound,w
  4934  0BAB  07F8               	addwf	Tetris_PlayerTouchingLeftBound@i,f
  4935  0BAC  3004               	movlw	4
  4936  0BAD  0278               	subwf	Tetris_PlayerTouchingLeftBound@i,w
  4937  0BAE  1C03               	skipc
  4938  0BAF  2B96               	goto	l2497
  4939                           
  4940                           ;../Tetris/Tetris.c: 205:  return 0;
  4941  0BB0  3000               	movlw	0
  4942  0BB1  0008               	return
  4943  0BB2                     __end_of_Tetris_PlayerTouchingLeftBound:	
  4944                           
  4945                           	psect	text24
  4946  0EB5                     __ptext24:	
  4947 ;; *************** function _Tetris_PlayerOverlapsEnvironment *****************
  4948 ;; Defined at:
  4949 ;;		line 185 in file "../Tetris/Tetris.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  game            1    wreg     PTR struct .
  4952 ;;		 -> main@tetrisGame(63), 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  game            1    8[COMMON] PTR struct .
  4955 ;;		 -> main@tetrisGame(63), 
  4956 ;;  i               1    7[COMMON] unsigned char 
  4957 ;;  start           1    6[COMMON] unsigned char 
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      unsigned char 
  4960 ;; Registers used:
  4961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4967 ;;      Params:         0       0       0       0
  4968 ;;      Locals:         3       0       0       0
  4969 ;;      Temps:          0      12       0       0
  4970 ;;      Totals:         3      12       0       0
  4971 ;;Total ram usage:       15 bytes
  4972 ;; Hardware stack levels used:    1
  4973 ;; Hardware stack levels required when called:    3
  4974 ;; This function calls:
  4975 ;;		_Tetris_PlayerTopmostY
  4976 ;; This function is called by:
  4977 ;;		_Tetris_UpdateGame
  4978 ;;		_Tetris_MovePlayerDown
  4979 ;;		_Tetris_MovePlayerLeft
  4980 ;;		_Tetris_MovePlayerRight
  4981 ;;		_Tetris_RotatePlayer
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _Tetris_PlayerOverlapsEnvironment
  4987  0EB5                     _Tetris_PlayerOverlapsEnvironment:	
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _Tetris_PlayerOverlapsEnvironment: [wreg-fsr0h+status,2+status,0+btemp+1+
      +                          pclath+cstack]
  4991                           ;Tetris_PlayerOverlapsEnvironment@game stored from wreg
  4992  0EB5  00F8               	movwf	Tetris_PlayerOverlapsEnvironment@game
  4993                           
  4994                           ;../Tetris/Tetris.c: 185: static uint8_t Tetris_PlayerOverlapsEnvironment(Tetris_Game *g
      +                          ame);../Tetris/Tetris.c: 186: {;../Tetris/Tetris.c: 187:  uint8_t start = Tetris_PlayerT
      +                          opmostY(&game->player);
  4995  0EB6  0878               	movf	Tetris_PlayerOverlapsEnvironment@game,w
  4996  0EB7  3E30               	addlw	48
  4997  0EB8  158A  22F0  158A   	fcall	_Tetris_PlayerTopmostY
  4998  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  4999  0EBC  1303               	bcf	3,6	;RP1=0, select bank0
  5000  0EBD  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5001  0EBE  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  5002  0EBF  00F6               	movwf	Tetris_PlayerOverlapsEnvironment@start
  5003                           
  5004                           ;../Tetris/Tetris.c: 188:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5005  0EC0  01F7               	clrf	Tetris_PlayerOverlapsEnvironment@i
  5006  0EC1                     l2181:	
  5007                           
  5008                           ;../Tetris/Tetris.c: 189:  {;../Tetris/Tetris.c: 190:   if (game->player.unitBits[i] & g
      +                          ame->table[i + start])
  5009  0EC1  0877               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  5010  0EC2  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5011  0EC3  0720               	addwf	??_Tetris_PlayerOverlapsEnvironment,w
  5012  0EC4  0778               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  5013  0EC5  00A1               	movwf	??_Tetris_PlayerOverlapsEnvironment+1
  5014  0EC6  0876               	movf	Tetris_PlayerOverlapsEnvironment@start,w
  5015  0EC7  00A2               	movwf	??_Tetris_PlayerOverlapsEnvironment+2
  5016  0EC8  0722               	addwf	??_Tetris_PlayerOverlapsEnvironment+2,w
  5017  0EC9  0721               	addwf	??_Tetris_PlayerOverlapsEnvironment+1,w
  5018  0ECA  00A3               	movwf	??_Tetris_PlayerOverlapsEnvironment+3
  5019  0ECB  0823               	movf	??_Tetris_PlayerOverlapsEnvironment+3,w
  5020  0ECC  0084               	movwf	4
  5021  0ECD  1383               	bcf	3,7	;select IRP bank0
  5022  0ECE  0800               	movf	0,w
  5023  0ECF  00A4               	movwf	??_Tetris_PlayerOverlapsEnvironment+4
  5024  0ED0  0A84               	incf	4,f
  5025  0ED1  0800               	movf	0,w
  5026  0ED2  00A5               	movwf	??_Tetris_PlayerOverlapsEnvironment+5
  5027  0ED3  0877               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  5028  0ED4  00A6               	movwf	??_Tetris_PlayerOverlapsEnvironment+6
  5029  0ED5  0726               	addwf	??_Tetris_PlayerOverlapsEnvironment+6,w
  5030  0ED6  0778               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  5031  0ED7  00A7               	movwf	??_Tetris_PlayerOverlapsEnvironment+7
  5032  0ED8  0827               	movf	??_Tetris_PlayerOverlapsEnvironment+7,w
  5033  0ED9  3E34               	addlw	52
  5034  0EDA  0084               	movwf	4
  5035  0EDB  0800               	movf	0,w
  5036  0EDC  00A8               	movwf	??_Tetris_PlayerOverlapsEnvironment+8
  5037  0EDD  0A84               	incf	4,f
  5038  0EDE  0800               	movf	0,w
  5039  0EDF  00A9               	movwf	??_Tetris_PlayerOverlapsEnvironment+9
  5040  0EE0  0824               	movf	??_Tetris_PlayerOverlapsEnvironment+4,w
  5041  0EE1  0528               	andwf	??_Tetris_PlayerOverlapsEnvironment+8,w
  5042  0EE2  00AA               	movwf	??_Tetris_PlayerOverlapsEnvironment+10
  5043  0EE3  0825               	movf	??_Tetris_PlayerOverlapsEnvironment+5,w
  5044  0EE4  0529               	andwf	??_Tetris_PlayerOverlapsEnvironment+9,w
  5045  0EE5  00AB               	movwf	??_Tetris_PlayerOverlapsEnvironment+11
  5046  0EE6  082A               	movf	??_Tetris_PlayerOverlapsEnvironment+10,w
  5047  0EE7  042B               	iorwf	??_Tetris_PlayerOverlapsEnvironment+11,w
  5048  0EE8  1903               	btfsc	3,2
  5049  0EE9  2EEC               	goto	l2187
  5050                           
  5051                           ;../Tetris/Tetris.c: 191:    return 1;
  5052  0EEA  3001               	movlw	1
  5053  0EEB  0008               	return
  5054  0EEC                     l2187:	
  5055                           
  5056                           ;../Tetris/Tetris.c: 192:  }
  5057  0EEC  3001               	movlw	1
  5058  0EED  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  5059  0EEE  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  5060  0EEF  07F7               	addwf	Tetris_PlayerOverlapsEnvironment@i,f
  5061  0EF0  3004               	movlw	4
  5062  0EF1  0277               	subwf	Tetris_PlayerOverlapsEnvironment@i,w
  5063  0EF2  1C03               	skipc
  5064  0EF3  2EC1               	goto	l2181
  5065                           
  5066                           ;../Tetris/Tetris.c: 194:  return 0;
  5067  0EF4  3000               	movlw	0
  5068  0EF5  0008               	return
  5069  0EF6                     __end_of_Tetris_PlayerOverlapsEnvironment:	
  5070                           
  5071                           	psect	text25
  5072  068A                     __ptext25:	
  5073 ;; *************** function _Tetris_ApplyPlayerToTable *****************
  5074 ;; Defined at:
  5075 ;;		line 228 in file "../Tetris/Tetris.c"
  5076 ;; Parameters:    Size  Location     Type
  5077 ;;  game            1    wreg     PTR struct .
  5078 ;;		 -> main@tetrisGame(63), 
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  game            1    9[COMMON] PTR struct .
  5081 ;;		 -> main@tetrisGame(63), 
  5082 ;;  i               1    8[COMMON] unsigned char 
  5083 ;;  i               1    7[COMMON] unsigned char 
  5084 ;;  start           1    6[COMMON] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      unsigned char 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5094 ;;      Params:         0       0       0       0
  5095 ;;      Locals:         4       0       0       0
  5096 ;;      Temps:          0       8       0       0
  5097 ;;      Totals:         4       8       0       0
  5098 ;;Total ram usage:       12 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    3
  5101 ;; This function calls:
  5102 ;;		_Tetris_PlayerTopmostY
  5103 ;; This function is called by:
  5104 ;;		_Tetris_ResetGame
  5105 ;;		_Tetris_UpdateGame
  5106 ;;		_Tetris_MovePlayerDown
  5107 ;;		_Tetris_MovePlayerLeft
  5108 ;;		_Tetris_MovePlayerRight
  5109 ;;		_Tetris_RotatePlayer
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _Tetris_ApplyPlayerToTable
  5115  068A                     _Tetris_ApplyPlayerToTable:	
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _Tetris_ApplyPlayerToTable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+
      +                          cstack]
  5119                           ;Tetris_ApplyPlayerToTable@game stored from wreg
  5120  068A  00F9               	movwf	Tetris_ApplyPlayerToTable@game
  5121                           
  5122                           ;../Tetris/Tetris.c: 228: static uint8_t Tetris_ApplyPlayerToTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 229: {;../Tetris/Tetris.c: 230:  uint8_t start = Tetris_PlayerTopmostY
      +                          (&game->player);
  5123  068B  0879               	movf	Tetris_ApplyPlayerToTable@game,w
  5124  068C  3E30               	addlw	48
  5125  068D  158A  22F0  118A   	fcall	_Tetris_PlayerTopmostY
  5126  0690  1283               	bcf	3,5	;RP0=0, select bank0
  5127  0691  1303               	bcf	3,6	;RP1=0, select bank0
  5128  0692  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5129  0693  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5130  0694  00F6               	movwf	Tetris_ApplyPlayerToTable@start
  5131                           
  5132                           ;../Tetris/Tetris.c: 232:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5133  0695  01F7               	clrf	Tetris_ApplyPlayerToTable@i
  5134  0696                     l2217:	
  5135                           
  5136                           ;../Tetris/Tetris.c: 233:  {;../Tetris/Tetris.c: 234:   if (game->player.unitBits[i] == 
      +                          0)
  5137  0696  0877               	movf	Tetris_ApplyPlayerToTable@i,w
  5138  0697  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5139  0698  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  5140  0699  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  5141  069A  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  5142  069B  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5143  069C  3E34               	addlw	52
  5144  069D  0084               	movwf	4
  5145  069E  1383               	bcf	3,7	;select IRP bank0
  5146  069F  0800               	movf	0,w
  5147  06A0  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  5148  06A1  0A84               	incf	4,f
  5149  06A2  0800               	movf	0,w
  5150  06A3  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  5151  06A4  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  5152  06A5  0423               	iorwf	??_Tetris_ApplyPlayerToTable+3,w
  5153  06A6  1903               	btfsc	3,2
  5154  06A7  2EBA               	goto	l2227
  5155                           
  5156                           ;../Tetris/Tetris.c: 237:   if (start + i >= TETRIS_TABLE_HEIGHT)
  5157  06A8  0876               	movf	Tetris_ApplyPlayerToTable@start,w
  5158  06A9  0777               	addwf	Tetris_ApplyPlayerToTable@i,w
  5159  06AA  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5160  06AB  01A1               	clrf	??_Tetris_ApplyPlayerToTable+1
  5161  06AC  0DA1               	rlf	??_Tetris_ApplyPlayerToTable+1,f
  5162  06AD  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5163  06AE  3A80               	xorlw	128
  5164  06AF  00FF               	movwf	127
  5165  06B0  3080               	movlw	128
  5166  06B1  027F               	subwf	127,w
  5167  06B2  1D03               	skipz
  5168  06B3  2EB6               	goto	u1475
  5169  06B4  3018               	movlw	24
  5170  06B5  0220               	subwf	??_Tetris_ApplyPlayerToTable,w
  5171  06B6                     u1475:	
  5172  06B6  1C03               	skipc
  5173  06B7  2EBA               	goto	l2227
  5174                           
  5175                           ;../Tetris/Tetris.c: 238:    return 0;
  5176  06B8  3000               	movlw	0
  5177  06B9  0008               	return
  5178  06BA                     l2227:	
  5179  06BA  3001               	movlw	1
  5180  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  5181  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  5182  06BD  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5183  06BE  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5184  06BF  07F7               	addwf	Tetris_ApplyPlayerToTable@i,f
  5185  06C0  3004               	movlw	4
  5186  06C1  0277               	subwf	Tetris_ApplyPlayerToTable@i,w
  5187  06C2  1C03               	skipc
  5188  06C3  2E96               	goto	l2217
  5189                           
  5190                           ;../Tetris/Tetris.c: 241:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  5191  06C4  01F8               	clrf	Tetris_ApplyPlayerToTable@i_326
  5192  06C5                     l2237:	
  5193                           
  5194                           ;../Tetris/Tetris.c: 242:   game->table[start + i] |= game->player.unitBits[i];
  5195  06C5  0878               	movf	Tetris_ApplyPlayerToTable@i_326,w
  5196  06C6  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5197  06C7  0720               	addwf	??_Tetris_ApplyPlayerToTable,w
  5198  06C8  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  5199  06C9  00A1               	movwf	??_Tetris_ApplyPlayerToTable+1
  5200  06CA  0821               	movf	??_Tetris_ApplyPlayerToTable+1,w
  5201  06CB  3E34               	addlw	52
  5202  06CC  0084               	movwf	4
  5203  06CD  1383               	bcf	3,7	;select IRP bank0
  5204  06CE  0800               	movf	0,w
  5205  06CF  00A2               	movwf	??_Tetris_ApplyPlayerToTable+2
  5206  06D0  0A84               	incf	4,f
  5207  06D1  0800               	movf	0,w
  5208  06D2  00A3               	movwf	??_Tetris_ApplyPlayerToTable+3
  5209  06D3  0876               	movf	Tetris_ApplyPlayerToTable@start,w
  5210  06D4  00A4               	movwf	??_Tetris_ApplyPlayerToTable+4
  5211  06D5  0724               	addwf	??_Tetris_ApplyPlayerToTable+4,w
  5212  06D6  0779               	addwf	Tetris_ApplyPlayerToTable@game,w
  5213  06D7  00A5               	movwf	??_Tetris_ApplyPlayerToTable+5
  5214  06D8  0878               	movf	Tetris_ApplyPlayerToTable@i_326,w
  5215  06D9  00A6               	movwf	??_Tetris_ApplyPlayerToTable+6
  5216  06DA  0726               	addwf	??_Tetris_ApplyPlayerToTable+6,w
  5217  06DB  0725               	addwf	??_Tetris_ApplyPlayerToTable+5,w
  5218  06DC  00A7               	movwf	??_Tetris_ApplyPlayerToTable+7
  5219  06DD  0827               	movf	??_Tetris_ApplyPlayerToTable+7,w
  5220  06DE  0084               	movwf	4
  5221  06DF  0822               	movf	??_Tetris_ApplyPlayerToTable+2,w
  5222  06E0  0480               	iorwf	0,f
  5223  06E1  0A84               	incf	4,f
  5224  06E2  0823               	movf	??_Tetris_ApplyPlayerToTable+3,w
  5225  06E3  0480               	iorwf	0,f
  5226  06E4  3001               	movlw	1
  5227  06E5  00A0               	movwf	??_Tetris_ApplyPlayerToTable
  5228  06E6  0820               	movf	??_Tetris_ApplyPlayerToTable,w
  5229  06E7  07F8               	addwf	Tetris_ApplyPlayerToTable@i_326,f
  5230  06E8  3004               	movlw	4
  5231  06E9  0278               	subwf	Tetris_ApplyPlayerToTable@i_326,w
  5232  06EA  1C03               	skipc
  5233  06EB  2EC5               	goto	l2237
  5234                           
  5235                           ;../Tetris/Tetris.c: 244:  return 1;
  5236  06EC  3001               	movlw	1
  5237  06ED  0008               	return
  5238  06EE                     __end_of_Tetris_ApplyPlayerToTable:	
  5239                           
  5240                           	psect	text26
  5241  0AF0                     __ptext26:	
  5242 ;; *************** function _Tetris_PlayerTopmostY *****************
  5243 ;; Defined at:
  5244 ;;		line 180 in file "../Tetris/Tetris.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  player          1    wreg     PTR struct .
  5247 ;;		 -> main@tetrisGame(63), 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  player          1    5[COMMON] PTR struct .
  5250 ;;		 -> main@tetrisGame(63), 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      unsigned char 
  5253 ;; Registers used:
  5254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5260 ;;      Params:         0       0       0       0
  5261 ;;      Locals:         1       0       0       0
  5262 ;;      Temps:          2       0       0       0
  5263 ;;      Totals:         3       0       0       0
  5264 ;;Total ram usage:        3 bytes
  5265 ;; Hardware stack levels used:    2
  5266 ;; Hardware stack levels required when called:    1
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_Tetris_PlayerOverlapsEnvironment
  5271 ;;		_Tetris_RemovePlayerFromTable
  5272 ;;		_Tetris_ApplyPlayerToTable
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           
  5277                           ;psect for function _Tetris_PlayerTopmostY
  5278  0AF0                     _Tetris_PlayerTopmostY:	
  5279                           
  5280                           ;incstack = 0
  5281                           ; Regs used in _Tetris_PlayerTopmostY: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5282                           ;Tetris_PlayerTopmostY@player stored from wreg
  5283  0AF0  00F5               	movwf	Tetris_PlayerTopmostY@player
  5284                           
  5285                           ;../Tetris/Tetris.c: 180: static uint8_t Tetris_PlayerTopmostY(Tetris_Player *player);..
      +                          /Tetris/Tetris.c: 181: {;../Tetris/Tetris.c: 182:  return player->position.y - Tetris_un
      +                          itPivot.y;
  5286  0AF1  3015               	movlw	low ((_Tetris_unitPivot+1)| (0+32768))
  5287  0AF2  0084               	movwf	4
  5288  0AF3  3083               	movlw	high ((_Tetris_unitPivot+1)| (0+32768))
  5289  0AF4  1283               	bcf	3,5	;RP0=0, select bank0
  5290  0AF5  1303               	bcf	3,6	;RP1=0, select bank0
  5291  0AF6  00FF               	movwf	127
  5292  0AF7  118A  2100         	fcall	stringtab
  5293  0AF9  00F3               	movwf	??_Tetris_PlayerTopmostY
  5294  0AFA  0A75               	incf	Tetris_PlayerTopmostY@player,w
  5295  0AFB  0084               	movwf	4
  5296  0AFC  1383               	bcf	3,7	;select IRP bank0
  5297  0AFD  0800               	movf	0,w
  5298  0AFE  00F4               	movwf	??_Tetris_PlayerTopmostY+1
  5299  0AFF  0873               	movf	??_Tetris_PlayerTopmostY,w
  5300  0B00  0274               	subwf	??_Tetris_PlayerTopmostY+1,w
  5301  0B01  0008               	return
  5302  0B02                     __end_of_Tetris_PlayerTopmostY:	
  5303                           
  5304                           	psect	text27
  5305  0B02                     __ptext27:	
  5306 ;; *************** function _ShowLogo *****************
  5307 ;; Defined at:
  5308 ;;		line 114 in file "main.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5322 ;;      Params:         0       0       0       0
  5323 ;;      Locals:         0       0       0       0
  5324 ;;      Temps:          0       3       0       0
  5325 ;;      Totals:         0       3       0       0
  5326 ;;Total ram usage:        3 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    7
  5329 ;; This function calls:
  5330 ;;		_DrawLogo
  5331 ;; This function is called by:
  5332 ;;		_main
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           
  5337                           ;psect for function _ShowLogo
  5338  0B02                     _ShowLogo:	
  5339                           
  5340                           ;main.c: 116:     DrawLogo();
  5341                           
  5342                           ;incstack = 0
  5343                           ; Regs used in _ShowLogo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5344  0B02  118A  2404  158A   	fcall	_DrawLogo
  5345                           
  5346                           ;main.c: 117:     _delay((unsigned long)((2800)*(8000000/4000.0)));
  5347  0B05  301D               	movlw	29
  5348  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  5349  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  5350  0B08  00B0               	movwf	??_ShowLogo+2
  5351  0B09  3069               	movlw	105
  5352  0B0A  00AF               	movwf	??_ShowLogo+1
  5353  0B0B  30A4               	movlw	164
  5354  0B0C  00AE               	movwf	??_ShowLogo
  5355  0B0D                     u2927:	
  5356  0B0D  0BAE               	decfsz	??_ShowLogo,f
  5357  0B0E  2B0D               	goto	u2927
  5358  0B0F  0BAF               	decfsz	??_ShowLogo+1,f
  5359  0B10  2B0D               	goto	u2927
  5360  0B11  0BB0               	decfsz	??_ShowLogo+2,f
  5361  0B12  2B0D               	goto	u2927
  5362  0B13  2B14               	nop2
  5363  0B14  0008               	return
  5364  0B15                     __end_of_ShowLogo:	
  5365                           
  5366                           	psect	text28
  5367  0404                     __ptext28:	
  5368 ;; *************** function _DrawLogo *****************
  5369 ;; Defined at:
  5370 ;;		line 85 in file "Drawing.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;  y               1   11[BANK0 ] unsigned char 
  5375 ;;  y               1   10[BANK0 ] unsigned char 
  5376 ;;  x               1   13[BANK0 ] unsigned char 
  5377 ;;  x               1   12[BANK0 ] unsigned char 
  5378 ;; Return value:  Size  Location     Type
  5379 ;;                  1    wreg      void 
  5380 ;; Registers used:
  5381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5387 ;;      Params:         0       0       0       0
  5388 ;;      Locals:         0       4       0       0
  5389 ;;      Temps:          0       8       0       0
  5390 ;;      Totals:         0      12       0       0
  5391 ;;Total ram usage:       12 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:    6
  5394 ;; This function calls:
  5395 ;;		_LCD_SegmentSelection
  5396 ;;		_LCD_SetX
  5397 ;;		_LCD_SetY
  5398 ;;		_LCD_WriteData
  5399 ;; This function is called by:
  5400 ;;		_ShowLogo
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           
  5405                           ;psect for function _DrawLogo
  5406  0404                     _DrawLogo:	
  5407                           
  5408                           ;Drawing.c: 87:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  5409                           
  5410                           ;incstack = 0
  5411 ;; using string table level
  5412                           ; Regs used in _DrawLogo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5413  0404  3002               	movlw	2
  5414  0405  158A  22C0  118A   	fcall	_LCD_SegmentSelection
  5415                           
  5416                           ;Drawing.c: 88:     LCD_SetY(0);
  5417  0408  3000               	movlw	0
  5418  0409  158A  227D  118A   	fcall	_LCD_SetY
  5419                           
  5420                           ;Drawing.c: 89:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  5421  040C  1283               	bcf	3,5	;RP0=0, select bank0
  5422  040D  1303               	bcf	3,6	;RP1=0, select bank0
  5423  040E  01AC               	clrf	DrawLogo@x
  5424  040F                     l3153:	
  5425                           
  5426                           ;Drawing.c: 90:     {;Drawing.c: 91:         LCD_SetX(x);
  5427  040F  082C               	movf	DrawLogo@x,w
  5428  0410  158A  2271  118A   	fcall	_LCD_SetX
  5429                           
  5430                           ;Drawing.c: 92:         for (uint8_t y = 0; y < LCD_SEGMENT_HEIGHT / 2; ++y)
  5431  0413  1283               	bcf	3,5	;RP0=0, select bank0
  5432  0414  1303               	bcf	3,6	;RP1=0, select bank0
  5433  0415  01AA               	clrf	DrawLogo@y
  5434  0416                     l3161:	
  5435                           
  5436                           ;Drawing.c: 93:         {;Drawing.c: 94:             LCD_WriteData(logoImage[x][y]);
  5437  0416  082A               	movf	DrawLogo@y,w
  5438  0417  00A2               	movwf	??_DrawLogo
  5439  0418  01A3               	clrf	??_DrawLogo+1
  5440  0419  082C               	movf	DrawLogo@x,w
  5441  041A  00A4               	movwf	??_DrawLogo+2
  5442  041B  01A5               	clrf	??_DrawLogo+3
  5443  041C  3006               	movlw	6
  5444  041D  00FF               	movwf	127
  5445  041E                     u2605:	
  5446  041E  1003               	clrc
  5447  041F  0DA4               	rlf	??_DrawLogo+2,f
  5448  0420  0DA5               	rlf	??_DrawLogo+3,f
  5449  0421  0BFF               	decfsz	127,f
  5450  0422  2C1E               	goto	u2605
  5451  0423  3012               	movlw	low (_logoImage| (0+32768))
  5452  0424  00A6               	movwf	??_DrawLogo+4
  5453  0425  3081               	movlw	high (_logoImage| (0+32768))
  5454  0426  00A7               	movwf	??_DrawLogo+5
  5455  0427  0824               	movf	??_DrawLogo+2,w
  5456  0428  0726               	addwf	??_DrawLogo+4,w
  5457  0429  00A8               	movwf	??_DrawLogo+6
  5458  042A  0825               	movf	??_DrawLogo+3,w
  5459  042B  1803               	skipnc
  5460  042C  0A25               	incf	??_DrawLogo+3,w
  5461  042D  0727               	addwf	??_DrawLogo+5,w
  5462  042E  00A9               	movwf	??_DrawLogo+7
  5463  042F  0822               	movf	??_DrawLogo,w
  5464  0430  0728               	addwf	??_DrawLogo+6,w
  5465  0431  0084               	movwf	4
  5466  0432  0823               	movf	??_DrawLogo+1,w
  5467  0433  1803               	skipnc
  5468  0434  0A23               	incf	??_DrawLogo+1,w
  5469  0435  0729               	addwf	??_DrawLogo+7,w
  5470  0436  00FF               	movwf	127
  5471  0437  118A  2100  118A   	fcall	stringtab
  5472  043A  158A  225B  118A   	fcall	_LCD_WriteData
  5473                           
  5474                           ;Drawing.c: 95:             LCD_WriteData(logoImage[x][y]);
  5475  043D  1283               	bcf	3,5	;RP0=0, select bank0
  5476  043E  1303               	bcf	3,6	;RP1=0, select bank0
  5477  043F  082A               	movf	DrawLogo@y,w
  5478  0440  00A2               	movwf	??_DrawLogo
  5479  0441  01A3               	clrf	??_DrawLogo+1
  5480  0442  082C               	movf	DrawLogo@x,w
  5481  0443  00A4               	movwf	??_DrawLogo+2
  5482  0444  01A5               	clrf	??_DrawLogo+3
  5483  0445  3006               	movlw	6
  5484  0446  00FF               	movwf	127
  5485  0447                     u2615:	
  5486  0447  1003               	clrc
  5487  0448  0DA4               	rlf	??_DrawLogo+2,f
  5488  0449  0DA5               	rlf	??_DrawLogo+3,f
  5489  044A  0BFF               	decfsz	127,f
  5490  044B  2C47               	goto	u2615
  5491  044C  3012               	movlw	low (_logoImage| (0+32768))
  5492  044D  00A6               	movwf	??_DrawLogo+4
  5493  044E  3081               	movlw	high (_logoImage| (0+32768))
  5494  044F  00A7               	movwf	??_DrawLogo+5
  5495  0450  0824               	movf	??_DrawLogo+2,w
  5496  0451  0726               	addwf	??_DrawLogo+4,w
  5497  0452  00A8               	movwf	??_DrawLogo+6
  5498  0453  0825               	movf	??_DrawLogo+3,w
  5499  0454  1803               	skipnc
  5500  0455  0A25               	incf	??_DrawLogo+3,w
  5501  0456  0727               	addwf	??_DrawLogo+5,w
  5502  0457  00A9               	movwf	??_DrawLogo+7
  5503  0458  0822               	movf	??_DrawLogo,w
  5504  0459  0728               	addwf	??_DrawLogo+6,w
  5505  045A  0084               	movwf	4
  5506  045B  0823               	movf	??_DrawLogo+1,w
  5507  045C  1803               	skipnc
  5508  045D  0A23               	incf	??_DrawLogo+1,w
  5509  045E  0729               	addwf	??_DrawLogo+7,w
  5510  045F  00FF               	movwf	127
  5511  0460  118A  2100  118A   	fcall	stringtab
  5512  0463  158A  225B  118A   	fcall	_LCD_WriteData
  5513                           
  5514                           ;Drawing.c: 96:         }
  5515  0466  3001               	movlw	1
  5516  0467  1283               	bcf	3,5	;RP0=0, select bank0
  5517  0468  1303               	bcf	3,6	;RP1=0, select bank0
  5518  0469  00A2               	movwf	??_DrawLogo
  5519  046A  0822               	movf	??_DrawLogo,w
  5520  046B  07AA               	addwf	DrawLogo@y,f
  5521  046C  3020               	movlw	32
  5522  046D  022A               	subwf	DrawLogo@y,w
  5523  046E  1C03               	skipc
  5524  046F  2C16               	goto	l3161
  5525                           
  5526                           ;Drawing.c: 97:     }
  5527  0470  3001               	movlw	1
  5528  0471  00A2               	movwf	??_DrawLogo
  5529  0472  0822               	movf	??_DrawLogo,w
  5530  0473  07AC               	addwf	DrawLogo@x,f
  5531  0474  3008               	movlw	8
  5532  0475  022C               	subwf	DrawLogo@x,w
  5533  0476  1C03               	skipc
  5534  0477  2C0F               	goto	l3153
  5535                           
  5536                           ;Drawing.c: 99:     LCD_SegmentSelection(LCD_BOTTOM_SEGMENT);
  5537  0478  3001               	movlw	1
  5538  0479  158A  22C0  118A   	fcall	_LCD_SegmentSelection
  5539                           
  5540                           ;Drawing.c: 100:     LCD_SetY(0);
  5541  047C  3000               	movlw	0
  5542  047D  158A  227D  118A   	fcall	_LCD_SetY
  5543                           
  5544                           ;Drawing.c: 101:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  5545  0480  1283               	bcf	3,5	;RP0=0, select bank0
  5546  0481  1303               	bcf	3,6	;RP1=0, select bank0
  5547  0482  01AD               	clrf	DrawLogo@x_707
  5548  0483                     l3179:	
  5549                           
  5550                           ;Drawing.c: 102:     {;Drawing.c: 103:         LCD_SetX(x);
  5551  0483  082D               	movf	DrawLogo@x_707,w
  5552  0484  158A  2271  118A   	fcall	_LCD_SetX
  5553                           
  5554                           ;Drawing.c: 104:         for (uint8_t y = LCD_SEGMENT_HEIGHT / 2; y < LCD_SEGMENT_HEIGHT
      +                          ; ++y)
  5555  0487  3020               	movlw	32
  5556  0488  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0489  1303               	bcf	3,6	;RP1=0, select bank0
  5558  048A  00A2               	movwf	??_DrawLogo
  5559  048B  0822               	movf	??_DrawLogo,w
  5560  048C  00AB               	movwf	DrawLogo@y_708
  5561  048D                     l3187:	
  5562                           
  5563                           ;Drawing.c: 105:         {;Drawing.c: 106:             LCD_WriteData(logoImage[x][y]);
  5564  048D  082B               	movf	DrawLogo@y_708,w
  5565  048E  00A2               	movwf	??_DrawLogo
  5566  048F  01A3               	clrf	??_DrawLogo+1
  5567  0490  082D               	movf	DrawLogo@x_707,w
  5568  0491  00A4               	movwf	??_DrawLogo+2
  5569  0492  01A5               	clrf	??_DrawLogo+3
  5570  0493  3006               	movlw	6
  5571  0494  00FF               	movwf	127
  5572  0495                     u2645:	
  5573  0495  1003               	clrc
  5574  0496  0DA4               	rlf	??_DrawLogo+2,f
  5575  0497  0DA5               	rlf	??_DrawLogo+3,f
  5576  0498  0BFF               	decfsz	127,f
  5577  0499  2C95               	goto	u2645
  5578  049A  3012               	movlw	low (_logoImage| (0+32768))
  5579  049B  00A6               	movwf	??_DrawLogo+4
  5580  049C  3081               	movlw	high (_logoImage| (0+32768))
  5581  049D  00A7               	movwf	??_DrawLogo+5
  5582  049E  0824               	movf	??_DrawLogo+2,w
  5583  049F  0726               	addwf	??_DrawLogo+4,w
  5584  04A0  00A8               	movwf	??_DrawLogo+6
  5585  04A1  0825               	movf	??_DrawLogo+3,w
  5586  04A2  1803               	skipnc
  5587  04A3  0A25               	incf	??_DrawLogo+3,w
  5588  04A4  0727               	addwf	??_DrawLogo+5,w
  5589  04A5  00A9               	movwf	??_DrawLogo+7
  5590  04A6  0822               	movf	??_DrawLogo,w
  5591  04A7  0728               	addwf	??_DrawLogo+6,w
  5592  04A8  0084               	movwf	4
  5593  04A9  0823               	movf	??_DrawLogo+1,w
  5594  04AA  1803               	skipnc
  5595  04AB  0A23               	incf	??_DrawLogo+1,w
  5596  04AC  0729               	addwf	??_DrawLogo+7,w
  5597  04AD  00FF               	movwf	127
  5598  04AE  118A  2100  118A   	fcall	stringtab
  5599  04B1  158A  225B  118A   	fcall	_LCD_WriteData
  5600                           
  5601                           ;Drawing.c: 107:             LCD_WriteData(logoImage[x][y]);
  5602  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  5603  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  5604  04B6  082B               	movf	DrawLogo@y_708,w
  5605  04B7  00A2               	movwf	??_DrawLogo
  5606  04B8  01A3               	clrf	??_DrawLogo+1
  5607  04B9  082D               	movf	DrawLogo@x_707,w
  5608  04BA  00A4               	movwf	??_DrawLogo+2
  5609  04BB  01A5               	clrf	??_DrawLogo+3
  5610  04BC  3006               	movlw	6
  5611  04BD  00FF               	movwf	127
  5612  04BE                     u2655:	
  5613  04BE  1003               	clrc
  5614  04BF  0DA4               	rlf	??_DrawLogo+2,f
  5615  04C0  0DA5               	rlf	??_DrawLogo+3,f
  5616  04C1  0BFF               	decfsz	127,f
  5617  04C2  2CBE               	goto	u2655
  5618  04C3  3012               	movlw	low (_logoImage| (0+32768))
  5619  04C4  00A6               	movwf	??_DrawLogo+4
  5620  04C5  3081               	movlw	high (_logoImage| (0+32768))
  5621  04C6  00A7               	movwf	??_DrawLogo+5
  5622  04C7  0824               	movf	??_DrawLogo+2,w
  5623  04C8  0726               	addwf	??_DrawLogo+4,w
  5624  04C9  00A8               	movwf	??_DrawLogo+6
  5625  04CA  0825               	movf	??_DrawLogo+3,w
  5626  04CB  1803               	skipnc
  5627  04CC  0A25               	incf	??_DrawLogo+3,w
  5628  04CD  0727               	addwf	??_DrawLogo+5,w
  5629  04CE  00A9               	movwf	??_DrawLogo+7
  5630  04CF  0822               	movf	??_DrawLogo,w
  5631  04D0  0728               	addwf	??_DrawLogo+6,w
  5632  04D1  0084               	movwf	4
  5633  04D2  0823               	movf	??_DrawLogo+1,w
  5634  04D3  1803               	skipnc
  5635  04D4  0A23               	incf	??_DrawLogo+1,w
  5636  04D5  0729               	addwf	??_DrawLogo+7,w
  5637  04D6  00FF               	movwf	127
  5638  04D7  118A  2100  118A   	fcall	stringtab
  5639  04DA  158A  225B  118A   	fcall	_LCD_WriteData
  5640                           
  5641                           ;Drawing.c: 108:         }
  5642  04DD  3001               	movlw	1
  5643  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  5644  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  5645  04E0  00A2               	movwf	??_DrawLogo
  5646  04E1  0822               	movf	??_DrawLogo,w
  5647  04E2  07AB               	addwf	DrawLogo@y_708,f
  5648  04E3  3040               	movlw	64
  5649  04E4  022B               	subwf	DrawLogo@y_708,w
  5650  04E5  1C03               	skipc
  5651  04E6  2C8D               	goto	l3187
  5652                           
  5653                           ;Drawing.c: 109:     }
  5654  04E7  3001               	movlw	1
  5655  04E8  00A2               	movwf	??_DrawLogo
  5656  04E9  0822               	movf	??_DrawLogo,w
  5657  04EA  07AD               	addwf	DrawLogo@x_707,f
  5658  04EB  3008               	movlw	8
  5659  04EC  022D               	subwf	DrawLogo@x_707,w
  5660  04ED  1803               	btfsc	3,0
  5661  04EE  0008               	return
  5662  04EF  2C83               	goto	l3179
  5663  04F0                     __end_of_DrawLogo:	
  5664                           
  5665                           	psect	text29
  5666  0B78                     __ptext29:	
  5667 ;; *************** function _Setup *****************
  5668 ;; Defined at:
  5669 ;;		line 99 in file "main.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;                  1    wreg      void 
  5676 ;; Registers used:
  5677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5683 ;;      Params:         0       0       0       0
  5684 ;;      Locals:         0       0       0       0
  5685 ;;      Temps:          0       0       0       0
  5686 ;;      Totals:         0       0       0       0
  5687 ;;Total ram usage:        0 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; Hardware stack levels required when called:    7
  5690 ;; This function calls:
  5691 ;;		_Buttons_SetupPortsAndInterrups
  5692 ;;		_LCD_Clear
  5693 ;;		_LCD_Reset
  5694 ;;		_LCD_SegmentSelection
  5695 ;;		_LCD_SetupPorts
  5696 ;;		_LCD_TurnOn
  5697 ;;		_SetupOscillator
  5698 ;;		_SetupRandomness
  5699 ;;		_SetupTimer
  5700 ;; This function is called by:
  5701 ;;		_main
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _Setup
  5707  0B78                     _Setup:	
  5708                           
  5709                           ;main.c: 101:     SetupOscillator();
  5710                           
  5711                           ;incstack = 0
  5712                           ; Regs used in _Setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5713  0B78  158A  223B  158A   	fcall	_SetupOscillator
  5714                           
  5715                           ;main.c: 102:     SetupRandomness();
  5716  0B7B  158A  23D0  158A   	fcall	_SetupRandomness
  5717                           
  5718                           ;main.c: 103:     SetupTimer();
  5719  0B7E  158A  2266  158A   	fcall	_SetupTimer
  5720                           
  5721                           ;main.c: 105:     Buttons_SetupPortsAndInterrups();
  5722  0B81  158A  2235  158A   	fcall	_Buttons_SetupPortsAndInterrups
  5723                           
  5724                           ;main.c: 107:     LCD_SetupPorts();
  5725  0B84  158A  2450  158A   	fcall	_LCD_SetupPorts
  5726                           
  5727                           ;main.c: 108:     LCD_Reset();
  5728  0B87  158A  232A  158A   	fcall	_LCD_Reset
  5729                           
  5730                           ;main.c: 109:     LCD_SegmentSelection(LCD_BOTH_SEGMENTS);
  5731  0B8A  3003               	movlw	3
  5732  0B8B  158A  22C0  158A   	fcall	_LCD_SegmentSelection
  5733                           
  5734                           ;main.c: 110:     LCD_Clear();
  5735  0B8E  158A  24FF  158A   	fcall	_LCD_Clear
  5736                           
  5737                           ;main.c: 111:     LCD_TurnOn();
  5738  0B91  158A  2251         	fcall	_LCD_TurnOn
  5739  0B93  0008               	return
  5740  0B94                     __end_of_Setup:	
  5741                           
  5742                           	psect	text30
  5743  0A66                     __ptext30:	
  5744 ;; *************** function _SetupTimer *****************
  5745 ;; Defined at:
  5746 ;;		line 56 in file "main.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		None
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5760 ;;      Params:         0       0       0       0
  5761 ;;      Locals:         0       0       0       0
  5762 ;;      Temps:          0       0       0       0
  5763 ;;      Totals:         0       0       0       0
  5764 ;;Total ram usage:        0 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    1
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_Setup
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _SetupTimer
  5776  0A66                     _SetupTimer:	
  5777                           
  5778                           ;main.c: 58:     TMR1IE = 1;
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in _SetupTimer: []
  5782  0A66  1683               	bsf	3,5	;RP0=1, select bank1
  5783  0A67  1303               	bcf	3,6	;RP1=0, select bank1
  5784  0A68  140C               	bsf	12,0	;volatile
  5785                           
  5786                           ;main.c: 59:     TMR1CS = 0;
  5787  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  5788  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  5789  0A6B  1090               	bcf	16,1	;volatile
  5790                           
  5791                           ;main.c: 60:     PEIE = 1;
  5792  0A6C  170B               	bsf	11,6	;volatile
  5793                           
  5794                           ;main.c: 61:     TMR1ON = 1;
  5795  0A6D  1410               	bsf	16,0	;volatile
  5796                           
  5797                           ;main.c: 62:     T1CKPS0 = 1;
  5798  0A6E  1610               	bsf	16,4	;volatile
  5799                           
  5800                           ;main.c: 63:     T1CKPS1 = 0;
  5801  0A6F  1290               	bcf	16,5	;volatile
  5802  0A70  0008               	return
  5803  0A71                     __end_of_SetupTimer:	
  5804                           
  5805                           	psect	text31
  5806  0BD0                     __ptext31:	
  5807 ;; *************** function _SetupRandomness *****************
  5808 ;; Defined at:
  5809 ;;		line 93 in file "main.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      void 
  5816 ;; Registers used:
  5817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5823 ;;      Params:         0       0       0       0
  5824 ;;      Locals:         0       0       0       0
  5825 ;;      Temps:          0       0       0       0
  5826 ;;      Totals:         0       0       0       0
  5827 ;;Total ram usage:        0 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    3
  5830 ;; This function calls:
  5831 ;;		___eetoi
  5832 ;;		___itoee
  5833 ;;		_srand
  5834 ;; This function is called by:
  5835 ;;		_Setup
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           
  5840                           ;psect for function _SetupRandomness
  5841  0BD0                     _SetupRandomness:	
  5842                           
  5843                           ;main.c: 95:     srand(uniqueSeed);
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in _SetupRandomness: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5847  0BD0  3001               	movlw	(low _uniqueSeed)& (0+255)
  5848  0BD1  158A  2315  158A   	fcall	___eetoi
  5849  0BD4  0879               	movf	?___eetoi+1,w
  5850  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  5851  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  5852  0BD7  00A6               	movwf	srand@x+1
  5853  0BD8  0878               	movf	?___eetoi,w
  5854  0BD9  00A5               	movwf	srand@x
  5855  0BDA  158A  2248  158A   	fcall	_srand
  5856                           
  5857                           ;main.c: 96:     ++uniqueSeed;
  5858  0BDD  3001               	movlw	(low _uniqueSeed)& (0+255)
  5859  0BDE  158A  2315  158A   	fcall	___eetoi
  5860  0BE1  0878               	movf	?___eetoi,w
  5861  0BE2  3E01               	addlw	1
  5862  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  5863  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  5864  0BE5  00A5               	movwf	___itoee@data
  5865  0BE6  0879               	movf	?___eetoi+1,w
  5866  0BE7  1803               	skipnc
  5867  0BE8  3E01               	addlw	1
  5868  0BE9  3E00               	addlw	0
  5869  0BEA  00A6               	movwf	___itoee@data+1
  5870  0BEB  3001               	movlw	(low _uniqueSeed)& (0+255)
  5871  0BEC  158A  22B1         	fcall	___itoee
  5872  0BEE  0008               	return
  5873  0BEF                     __end_of_SetupRandomness:	
  5874                           
  5875                           	psect	text32
  5876  0A48                     __ptext32:	
  5877 ;; *************** function _srand *****************
  5878 ;; Defined at:
  5879 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  x               2    5[BANK0 ] unsigned int 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5893 ;;      Params:         0       2       0       0
  5894 ;;      Locals:         0       0       0       0
  5895 ;;      Temps:          0       0       0       0
  5896 ;;      Totals:         0       2       0       0
  5897 ;;Total ram usage:        2 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    1
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_SetupRandomness
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function _srand
  5909  0A48                     _srand:	
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _srand: [wreg]
  5913  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  5914  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  5915  0A4A  0825               	movf	srand@x,w
  5916  0A4B  00C7               	movwf	_randx
  5917  0A4C  0826               	movf	srand@x+1,w
  5918  0A4D  00C8               	movwf	_randx+1
  5919  0A4E  01C9               	clrf	_randx+2
  5920  0A4F  01CA               	clrf	_randx+3
  5921  0A50  0008               	return
  5922  0A51                     __end_of_srand:	
  5923                           
  5924                           	psect	text33
  5925  0AB1                     __ptext33:	
  5926 ;; *************** function ___itoee *****************
  5927 ;; Defined at:
  5928 ;;		line 157 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;  addr            1    wreg     PTR eeprom void 
  5931 ;;		 -> uniqueSeed(2), 
  5932 ;;  data            2    5[BANK0 ] unsigned int 
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;  addr            1    9[BANK0 ] PTR eeprom void 
  5935 ;;		 -> uniqueSeed(2), 
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  2    5[BANK0 ] unsigned int 
  5938 ;; Registers used:
  5939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5945 ;;      Params:         0       2       0       0
  5946 ;;      Locals:         0       1       0       0
  5947 ;;      Temps:          0       2       0       0
  5948 ;;      Totals:         0       5       0       0
  5949 ;;Total ram usage:        5 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    2
  5952 ;; This function calls:
  5953 ;;		___memcpyee
  5954 ;; This function is called by:
  5955 ;;		_SetupRandomness
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function ___itoee
  5961  0AB1                     ___itoee:	
  5962                           
  5963                           ;incstack = 0
  5964                           ; Regs used in ___itoee: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5965                           ;___itoee@addr stored from wreg
  5966  0AB1  1283               	bcf	3,5	;RP0=0, select bank0
  5967  0AB2  1303               	bcf	3,6	;RP1=0, select bank0
  5968  0AB3  00A9               	movwf	___itoee@addr
  5969  0AB4  3025               	movlw	(low (___itoee@data| 0))& (0+255)
  5970  0AB5  00A7               	movwf	??___itoee
  5971  0AB6  0827               	movf	??___itoee,w
  5972  0AB7  00F3               	movwf	___memcpyee@from
  5973  0AB8  3002               	movlw	2
  5974  0AB9  00A8               	movwf	??___itoee+1
  5975  0ABA  0828               	movf	??___itoee+1,w
  5976  0ABB  00F4               	movwf	___memcpyee@size
  5977  0ABC  0829               	movf	___itoee@addr,w
  5978  0ABD  158A  2674         	fcall	___memcpyee
  5979  0ABF  0008               	return
  5980  0AC0                     __end_of___itoee:	
  5981                           
  5982                           	psect	text34
  5983  0E74                     __ptext34:	
  5984 ;; *************** function ___memcpyee *****************
  5985 ;; Defined at:
  5986 ;;		line 39 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  to              1    wreg     PTR eeprom unsigned char
  5989 ;;		 -> uniqueSeed(2), 
  5990 ;;  from            1    3[COMMON] PTR const unsigned char 
  5991 ;;		 -> __fltoee@data(4), __fttoee@data(4), __otoee@data(4), __ltoee@data(4), 
  5992 ;;		 -> __mtoee@data(3), __itoee@data(2), __ctoee@data(1), 
  5993 ;;  size            1    4[COMMON] unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  to              1    7[COMMON] PTR eeprom unsigned char
  5996 ;;		 -> uniqueSeed(2), 
  5997 ;;  ptr             1    6[COMMON] PTR const unsigned char 
  5998 ;;		 -> __fltoee@data(4), __fttoee@data(4), __otoee@data(4), __ltoee@data(4), 
  5999 ;;		 -> __mtoee@data(3), __itoee@data(2), __ctoee@data(1), 
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  1    wreg      void 
  6002 ;; Registers used:
  6003 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6009 ;;      Params:         2       0       0       0
  6010 ;;      Locals:         2       0       0       0
  6011 ;;      Temps:          1       0       0       0
  6012 ;;      Totals:         5       0       0       0
  6013 ;;Total ram usage:        5 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; Hardware stack levels required when called:    1
  6016 ;; This function calls:
  6017 ;;		Nothing
  6018 ;; This function is called by:
  6019 ;;		___itoee
  6020 ;; This function uses a non-reentrant model
  6021 ;;
  6022                           
  6023                           
  6024                           ;psect for function ___memcpyee
  6025  0E74                     ___memcpyee:	
  6026                           
  6027                           ;incstack = 0
  6028                           ; Regs used in ___memcpyee: [wreg-fsr0h+status,2+status,0]
  6029                           ;___memcpyee@to stored from wreg
  6030  0E74  00F7               	movwf	___memcpyee@to
  6031                           
  6032                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 39: __memcpy
      +                          ee(__eeprom unsigned char * to, const unsigned char *from, unsigned char size);C:\Progra
      +                          m Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 40: {;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 41:  const unsigned char *ptr
      +                           =from;
  6033  0E75  0873               	movf	___memcpyee@from,w
  6034  0E76  00F5               	movwf	??___memcpyee
  6035  0E77  0875               	movf	??___memcpyee,w
  6036  0E78  00F6               	movwf	___memcpyee@ptr
  6037  0E79                     l494:	
  6038                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 43:  while (
      +                          EECON1bits.WR) continue;
  6039                           
  6040  0E79  1683               	bsf	3,5	;RP0=1, select bank3
  6041  0E7A  1703               	bsf	3,6	;RP1=1, select bank3
  6042  0E7B  188C               	btfsc	12,1	;volsfr
  6043  0E7C  2E79               	goto	l494
  6044                           
  6045                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 44:  EEADR =
      +                           (unsigned char)to - 1U;
  6046  0E7D  0877               	movf	___memcpyee@to,w
  6047  0E7E  3EFF               	addlw	255
  6048  0E7F  1283               	bcf	3,5	;RP0=0, select bank2
  6049  0E80  1703               	bsf	3,6	;RP1=1, select bank2
  6050  0E81  008D               	movwf	13	;volatile
  6051                           
  6052                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 46:  EECON1 
      +                          &= 0x7F;
  6053  0E82  307F               	movlw	127
  6054  0E83  00F5               	movwf	??___memcpyee
  6055  0E84  0875               	movf	??___memcpyee,w
  6056  0E85  1683               	bsf	3,5	;RP0=1, select bank3
  6057  0E86  1703               	bsf	3,6	;RP1=1, select bank3
  6058  0E87  058C               	andwf	12,f	;volsfr
  6059  0E88                     l3005:	
  6060                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 48:  while(s
      +                          ize--) {
  6061                           
  6062                           
  6063                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 48:  while(s
      +                          ize--) {
  6064  0E88  3001               	movlw	1
  6065  0E89  02F4               	subwf	___memcpyee@size,f
  6066  0E8A  0A74               	incf	___memcpyee@size,w
  6067  0E8B  1903               	btfsc	3,2
  6068  0E8C  0008               	return
  6069  0E8D                     l499:	
  6070                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 51:   }
  6071                           
  6072                           
  6073                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 49:   while 
      +                          (EECON1bits.WR) {
  6074  0E8D  1683               	bsf	3,5	;RP0=1, select bank3
  6075  0E8E  1703               	bsf	3,6	;RP1=1, select bank3
  6076  0E8F  188C               	btfsc	12,1	;volsfr
  6077  0E90  2E8D               	goto	l499
  6078                           
  6079                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 52:   EEDATA
      +                           = *ptr++;
  6080  0E91  0876               	movf	___memcpyee@ptr,w
  6081  0E92  0084               	movwf	4
  6082  0E93  1383               	bcf	3,7	;select IRP bank0
  6083  0E94  0800               	movf	0,w
  6084  0E95  1283               	bcf	3,5	;RP0=0, select bank2
  6085  0E96  1703               	bsf	3,6	;RP1=1, select bank2
  6086  0E97  008C               	movwf	12	;volatile
  6087  0E98  3001               	movlw	1
  6088  0E99  00F5               	movwf	??___memcpyee
  6089  0E9A  0875               	movf	??___memcpyee,w
  6090  0E9B  07F6               	addwf	___memcpyee@ptr,f
  6091                           
  6092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 53:   ++EEAD
      +                          R;
  6093  0E9C  3001               	movlw	1
  6094  0E9D  00F5               	movwf	??___memcpyee
  6095  0E9E  0875               	movf	??___memcpyee,w
  6096  0E9F  078D               	addwf	13,f	;volatile
  6097                           
  6098                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 54:   STATUS
      +                          bits.CARRY = 0;
  6099  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  6100  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  6101  0EA2  1003               	bcf	3,0	;volatile
  6102                           
  6103                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 55:   if (IN
      +                          TCONbits.GIE) {
  6104  0EA3  1B8B               	btfsc	11,7	;volatile
  6105                           
  6106                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 56:    STATU
      +                          Sbits.CARRY = 1;
  6107  0EA4  1403               	bsf	3,0	;volatile
  6108                           
  6109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 58:   INTCON
      +                          bits.GIE = 0;
  6110                           
  6111                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 57:   }
  6112  0EA5  138B               	bcf	11,7	;volatile
  6113                           
  6114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 59:   EECON1
      +                          bits.WREN = 1;
  6115  0EA6  1683               	bsf	3,5	;RP0=1, select bank3
  6116  0EA7  1703               	bsf	3,6	;RP1=1, select bank3
  6117  0EA8  150C               	bsf	12,2	;volsfr
  6118                           
  6119                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 60:   EECON2
      +                           = 0x55;
  6120  0EA9  3055               	movlw	85
  6121  0EAA  008D               	movwf	13	;volsfr
  6122                           
  6123                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 61:   EECON2
      +                           = 0xAA;
  6124  0EAB  30AA               	movlw	170
  6125  0EAC  008D               	movwf	13	;volsfr
  6126                           
  6127                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 62:   EECON1
      +                          bits.WR = 1;
  6128  0EAD  148C               	bsf	12,1	;volsfr
  6129                           
  6130                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 63:   EECON1
      +                          bits.WREN = 0;
  6131  0EAE  110C               	bcf	12,2	;volsfr
  6132                           
  6133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 64:   if (ST
      +                          ATUSbits.CARRY) {
  6134  0EAF  1283               	bcf	3,5	;RP0=0, select bank0
  6135  0EB0  1303               	bcf	3,6	;RP1=0, select bank0
  6136  0EB1  1C03               	btfss	3,0	;volatile
  6137  0EB2  2E88               	goto	l3005
  6138                           
  6139                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 65:    INTCO
      +                          Nbits.GIE = 1;
  6140  0EB3  178B               	bsf	11,7	;volatile
  6141  0EB4  2E88               	goto	l3005
  6142  0EB5                     __end_of___memcpyee:	
  6143                           
  6144                           	psect	text35
  6145  0B15                     __ptext35:	
  6146 ;; *************** function ___eetoi *****************
  6147 ;; Defined at:
  6148 ;;		line 112 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  6149 ;; Parameters:    Size  Location     Type
  6150 ;;  addr            1    wreg     PTR eeprom void 
  6151 ;;		 -> uniqueSeed(2), 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;  addr            1    2[BANK0 ] PTR eeprom void 
  6154 ;;		 -> uniqueSeed(2), 
  6155 ;;  data            2    3[BANK0 ] unsigned int 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  2    8[COMMON] unsigned int 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6165 ;;      Params:         2       0       0       0
  6166 ;;      Locals:         0       3       0       0
  6167 ;;      Temps:          0       2       0       0
  6168 ;;      Totals:         2       5       0       0
  6169 ;;Total ram usage:        7 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    2
  6172 ;; This function calls:
  6173 ;;		___eecpymem
  6174 ;; This function is called by:
  6175 ;;		_SetupRandomness
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function ___eetoi
  6181  0B15                     ___eetoi:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in ___eetoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6185                           ;___eetoi@addr stored from wreg
  6186  0B15  1283               	bcf	3,5	;RP0=0, select bank0
  6187  0B16  1303               	bcf	3,6	;RP1=0, select bank0
  6188  0B17  00A2               	movwf	___eetoi@addr
  6189                           
  6190                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 112: __eetoi
      +                          (__eeprom void *addr);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 113: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.
      +                          c: 114:  unsigned int data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\p
      +                          ic\__eeprom.c: 115:  __eecpymem((unsigned char *) &data,addr,2);
  6191  0B18  0822               	movf	___eetoi@addr,w
  6192  0B19  00A0               	movwf	??___eetoi
  6193  0B1A  0820               	movf	??___eetoi,w
  6194  0B1B  00F3               	movwf	___eecpymem@from
  6195  0B1C  3002               	movlw	2
  6196  0B1D  00A1               	movwf	??___eetoi+1
  6197  0B1E  0821               	movf	??___eetoi+1,w
  6198  0B1F  00F4               	movwf	___eecpymem@size
  6199  0B20  3023               	movlw	(low (___eetoi@data| 0))& (0+255)
  6200  0B21  158A  257B         	fcall	___eecpymem
  6201                           
  6202                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 116:  return
      +                           data;
  6203  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  6204  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  6205  0B25  0824               	movf	___eetoi@data+1,w
  6206  0B26  00F9               	movwf	?___eetoi+1
  6207  0B27  0823               	movf	___eetoi@data,w
  6208  0B28  00F8               	movwf	?___eetoi
  6209  0B29  0008               	return
  6210  0B2A                     __end_of___eetoi:	
  6211                           
  6212                           	psect	text36
  6213  0D7B                     __ptext36:	
  6214 ;; *************** function ___eecpymem *****************
  6215 ;; Defined at:
  6216 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  to              1    wreg     PTR volatile unsigned ch
  6219 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  6220 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  6221 ;;  from            1    3[COMMON] PTR eeprom unsigned char
  6222 ;;		 -> uniqueSeed(2), 
  6223 ;;  size            1    4[COMMON] unsigned char 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  to              1    7[COMMON] PTR volatile unsigned ch
  6226 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  6227 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  6228 ;;  cp              1    6[COMMON] PTR volatile unsigned ch
  6229 ;;		 -> __eetofl@data(4), __eetoft@data(4), __eetoo@data(4), __eetol@data(4), 
  6230 ;;		 -> __eetom@data(3), __eetoi@data(2), __eetoc@data(1), 
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      void 
  6233 ;; Registers used:
  6234 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6240 ;;      Params:         2       0       0       0
  6241 ;;      Locals:         2       0       0       0
  6242 ;;      Temps:          1       0       0       0
  6243 ;;      Totals:         5       0       0       0
  6244 ;;Total ram usage:        5 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    1
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		___eetoi
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           
  6255                           ;psect for function ___eecpymem
  6256  0D7B                     ___eecpymem:	
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in ___eecpymem: [wreg-fsr0h+status,2+status,0]
  6260                           ;___eecpymem@to stored from wreg
  6261  0D7B  00F7               	movwf	___eecpymem@to
  6262                           
  6263                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: __eecpyme
      +                          m(volatile unsigned char *to, __eeprom unsigned char * from, unsigned char size);C:\Prog
      +                          ram Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program File
      +                          s (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\M
      +                          icrochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: ;C:\Program Files (x86)\Microchip\
      +                          xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 6: };C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c90\pic\__eeprom.c: 7: {
  6264  0D7C  0877               	movf	___eecpymem@to,w
  6265  0D7D  00F5               	movwf	??___eecpymem
  6266  0D7E  0875               	movf	??___eecpymem,w
  6267  0D7F  00F6               	movwf	___eecpymem@cp
  6268  0D80                     l482:	
  6269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10:  while (
      +                          EECON1bits.WR) continue;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\
      +                          __eeprom.c: 10:  __memcpyee(addr,(unsigned char *) &data,2);;C:\Program Files (x86)\Micr
      +                          ochip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 10: {
  6270                           
  6271  0D80  1683               	bsf	3,5	;RP0=1, select bank3
  6272  0D81  1703               	bsf	3,6	;RP1=1, select bank3
  6273  0D82  188C               	btfsc	12,1	;volsfr
  6274  0D83  2D80               	goto	l482
  6275                           
  6276                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 11:  EEADR =
      +                           (unsigned char)from;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__e
      +                          eprom.c: 11:  return data;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pi
      +                          c\__eeprom.c: 11:  double data;
  6277  0D84  0873               	movf	___eecpymem@from,w
  6278  0D85  1283               	bcf	3,5	;RP0=0, select bank2
  6279  0D86  1703               	bsf	3,6	;RP1=1, select bank2
  6280  0D87  008D               	movwf	13	;volatile
  6281  0D88                     l2121:	
  6282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  6283                           
  6284                           
  6285                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  while(s
      +                          ize--) {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12: 
      +                          };C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 12:  __eecp
      +                          ymem((unsigned char *) &data,addr,4);
  6286  0D88  3001               	movlw	1
  6287  0D89  02F4               	subwf	___eecpymem@size,f
  6288  0D8A  0A74               	incf	___eecpymem@size,w
  6289  0D8B  1903               	btfsc	3,2
  6290  0D8C  0008               	return
  6291  0D8D                     l487:	
  6292  0D8D  1683               	bsf	3,5	;RP0=1, select bank3
  6293  0D8E  1703               	bsf	3,6	;RP1=1, select bank3
  6294  0D8F  188C               	btfsc	12,1	;volsfr
  6295  0D90  2D8D               	goto	l487
  6296                           
  6297                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:   EECON1
      +                           &= 0x7F;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 15:
      +                           
  6298  0D91  307F               	movlw	127
  6299  0D92  00F5               	movwf	??___eecpymem
  6300  0D93  0875               	movf	??___eecpymem,w
  6301  0D94  058C               	andwf	12,f	;volsfr
  6302                           
  6303                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 17:   EECON1
      +                          bits.RD = 1;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 
      +                          17: __fttoee(__eeprom void *addr, float data)
  6304  0D95  140C               	bsf	12,0	;volsfr
  6305                           
  6306                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:   *cp++ 
      +                          = EEDATA;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 18:
      +                           {
  6307  0D96  1283               	bcf	3,5	;RP0=0, select bank2
  6308  0D97  1703               	bsf	3,6	;RP1=1, select bank2
  6309  0D98  080C               	movf	12,w	;volatile
  6310  0D99  00F5               	movwf	??___eecpymem
  6311  0D9A  0876               	movf	___eecpymem@cp,w
  6312  0D9B  0084               	movwf	4
  6313  0D9C  0875               	movf	??___eecpymem,w
  6314  0D9D  1383               	bcf	3,7	;select IRP bank0
  6315  0D9E  0080               	movwf	0
  6316  0D9F  3001               	movlw	1
  6317  0DA0  00F5               	movwf	??___eecpymem
  6318  0DA1  0875               	movf	??___eecpymem,w
  6319  0DA2  07F6               	addwf	___eecpymem@cp,f
  6320                           
  6321                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:   ++EEAD
      +                          R;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\pic\__eeprom.c: 19:  __mem
      +                          cpyee(addr,(unsigned char *) &data,3);
  6322  0DA3  3001               	movlw	1
  6323  0DA4  00F5               	movwf	??___eecpymem
  6324  0DA5  0875               	movf	??___eecpymem,w
  6325  0DA6  078D               	addwf	13,f	;volatile
  6326  0DA7  2D88               	goto	l2121
  6327  0DA8                     __end_of___eecpymem:	
  6328                           
  6329                           	psect	text37
  6330  0A3B                     __ptext37:	
  6331 ;; *************** function _SetupOscillator *****************
  6332 ;; Defined at:
  6333 ;;		line 47 in file "main.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		None
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6347 ;;      Params:         0       0       0       0
  6348 ;;      Locals:         0       0       0       0
  6349 ;;      Temps:          0       0       0       0
  6350 ;;      Totals:         0       0       0       0
  6351 ;;Total ram usage:        0 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    1
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_Setup
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _SetupOscillator
  6363  0A3B                     _SetupOscillator:	
  6364                           
  6365                           ;main.c: 51:     IRCF0 = 1;
  6366                           
  6367                           ;incstack = 0
  6368                           ; Regs used in _SetupOscillator: []
  6369  0A3B  1683               	bsf	3,5	;RP0=1, select bank1
  6370  0A3C  1303               	bcf	3,6	;RP1=0, select bank1
  6371  0A3D  160F               	bsf	15,4	;volatile
  6372                           
  6373                           ;main.c: 52:     IRCF1 = 1;
  6374  0A3E  168F               	bsf	15,5	;volatile
  6375                           
  6376                           ;main.c: 53:     IRCF2 = 1;
  6377  0A3F  170F               	bsf	15,6	;volatile
  6378  0A40  0008               	return
  6379  0A41                     __end_of_SetupOscillator:	
  6380                           
  6381                           	psect	text38
  6382  0A51                     __ptext38:	
  6383 ;; *************** function _LCD_TurnOn *****************
  6384 ;; Defined at:
  6385 ;;		line 120 in file "LCD.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;		None
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;		None
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      void 
  6392 ;; Registers used:
  6393 ;;		wreg, status,2, status,0, pclath, cstack
  6394 ;; Tracked objects:
  6395 ;;		On entry : 0/0
  6396 ;;		On exit  : 0/0
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6399 ;;      Params:         0       0       0       0
  6400 ;;      Locals:         0       0       0       0
  6401 ;;      Temps:          0       1       0       0
  6402 ;;      Totals:         0       1       0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used:    1
  6405 ;; Hardware stack levels required when called:    5
  6406 ;; This function calls:
  6407 ;;		_LCD_Write
  6408 ;; This function is called by:
  6409 ;;		_Setup
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           
  6414                           ;psect for function _LCD_TurnOn
  6415  0A51                     _LCD_TurnOn:	
  6416                           
  6417                           ;LCD.c: 122:     LCD_Write(LCD_WRITE_INSTRUCTION, 0x3F);
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _LCD_TurnOn: [wreg+status,2+status,0+pclath+cstack]
  6421  0A51  303F               	movlw	63
  6422  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  6423  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  6424  0A54  00A0               	movwf	??_LCD_TurnOn
  6425  0A55  0820               	movf	??_LCD_TurnOn,w
  6426  0A56  00F8               	movwf	LCD_Write@data
  6427  0A57  3000               	movlw	0
  6428  0A58  158A  2341         	fcall	_LCD_Write
  6429  0A5A  0008               	return
  6430  0A5B                     __end_of_LCD_TurnOn:	
  6431                           
  6432                           	psect	text39
  6433  0C50                     __ptext39:	
  6434 ;; *************** function _LCD_SetupPorts *****************
  6435 ;; Defined at:
  6436 ;;		line 48 in file "LCD.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;		None
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6450 ;;      Params:         0       0       0       0
  6451 ;;      Locals:         0       0       0       0
  6452 ;;      Temps:          0       0       0       0
  6453 ;;      Totals:         0       0       0       0
  6454 ;;Total ram usage:        0 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    1
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_Setup
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _LCD_SetupPorts
  6466  0C50                     _LCD_SetupPorts:	
  6467                           
  6468                           ;LCD.c: 50:     ANSELH = 0;
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _LCD_SetupPorts: [wreg+status,2]
  6472  0C50  1683               	bsf	3,5	;RP0=1, select bank3
  6473  0C51  1703               	bsf	3,6	;RP1=1, select bank3
  6474  0C52  0189               	clrf	9	;volatile
  6475                           
  6476                           ;LCD.c: 51:     TRISB = 0xFF;
  6477  0C53  30FF               	movlw	255
  6478  0C54  1683               	bsf	3,5	;RP0=1, select bank1
  6479  0C55  1303               	bcf	3,6	;RP1=0, select bank1
  6480  0C56  0086               	movwf	6	;volatile
  6481                           
  6482                           ;LCD.c: 52:     WPUB = 0xFF;
  6483  0C57  30FF               	movlw	255
  6484  0C58  0095               	movwf	21	;volatile
  6485                           
  6486                           ;LCD.c: 53:     nRBPU = 0;
  6487  0C59  1381               	bcf	1,7	;volatile
  6488                           
  6489                           ;LCD.c: 54:     PORTB = 0;
  6490  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  6491  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  6492  0C5C  0186               	clrf	6	;volatile
  6493                           
  6494                           ;LCD.c: 56:     TRISD = 0;
  6495  0C5D  1683               	bsf	3,5	;RP0=1, select bank1
  6496  0C5E  1303               	bcf	3,6	;RP1=0, select bank1
  6497  0C5F  0188               	clrf	8	;volatile
  6498                           
  6499                           ;LCD.c: 57:     PORTD = 0;
  6500  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  6501  0C61  1303               	bcf	3,6	;RP1=0, select bank0
  6502  0C62  0188               	clrf	8	;volatile
  6503                           
  6504                           ;LCD.c: 58:     TRISC = 0;
  6505  0C63  1683               	bsf	3,5	;RP0=1, select bank1
  6506  0C64  1303               	bcf	3,6	;RP1=0, select bank1
  6507  0C65  0187               	clrf	7	;volatile
  6508                           
  6509                           ;LCD.c: 59:     PORTC = 0;
  6510  0C66  1283               	bcf	3,5	;RP0=0, select bank0
  6511  0C67  1303               	bcf	3,6	;RP1=0, select bank0
  6512  0C68  0187               	clrf	7	;volatile
  6513                           
  6514                           ;LCD.c: 61:     ANSEL = 0;
  6515  0C69  1683               	bsf	3,5	;RP0=1, select bank3
  6516  0C6A  1703               	bsf	3,6	;RP1=1, select bank3
  6517  0C6B  0188               	clrf	8	;volatile
  6518                           
  6519                           ;LCD.c: 62:     TRISA = 0;
  6520  0C6C  1683               	bsf	3,5	;RP0=1, select bank1
  6521  0C6D  1303               	bcf	3,6	;RP1=0, select bank1
  6522  0C6E  0185               	clrf	5	;volatile
  6523                           
  6524                           ;LCD.c: 63:     PORTA = 0;
  6525  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  6526  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  6527  0C71  0185               	clrf	5	;volatile
  6528  0C72  0008               	return
  6529  0C73                     __end_of_LCD_SetupPorts:	
  6530                           
  6531                           	psect	text40
  6532  0B2A                     __ptext40:	
  6533 ;; *************** function _LCD_Reset *****************
  6534 ;; Defined at:
  6535 ;;		line 66 in file "LCD.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6549 ;;      Params:         0       0       0       0
  6550 ;;      Locals:         0       0       0       0
  6551 ;;      Temps:          0       0       0       0
  6552 ;;      Totals:         0       0       0       0
  6553 ;;Total ram usage:        0 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    6
  6556 ;; This function calls:
  6557 ;;		_LCD_SetX
  6558 ;;		_LCD_SetY
  6559 ;;		_LCD_SetZ
  6560 ;; This function is called by:
  6561 ;;		_Setup
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function _LCD_Reset
  6567  0B2A                     _LCD_Reset:	
  6568                           
  6569                           ;LCD.c: 68:     RD1 = 0;
  6570                           
  6571                           ;incstack = 0
  6572                           ; Regs used in _LCD_Reset: [wreg+status,2+status,0+pclath+cstack]
  6573  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  6574  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  6575  0B2C  1088               	bcf	8,1	;volatile
  6576                           
  6577                           ;LCD.c: 69:     __nop();
  6578  0B2D  0000               	nop
  6579                           
  6580                           ;LCD.c: 70:     __nop();
  6581  0B2E  0000               	nop
  6582                           
  6583                           ;LCD.c: 71:     __nop();
  6584  0B2F  0000               	nop
  6585                           
  6586                           ;LCD.c: 72:     __nop();
  6587  0B30  0000               	nop
  6588                           
  6589                           ;LCD.c: 73:     RD1 = 1;
  6590  0B31  1283               	bcf	3,5	;RP0=0, select bank0
  6591  0B32  1303               	bcf	3,6	;RP1=0, select bank0
  6592  0B33  1488               	bsf	8,1	;volatile
  6593                           
  6594                           ;LCD.c: 74:     __nop();
  6595  0B34  0000               	nop
  6596                           
  6597                           ;LCD.c: 75:     LCD_SetX(0);
  6598  0B35  3000               	movlw	0
  6599  0B36  158A  2271  158A   	fcall	_LCD_SetX
  6600                           
  6601                           ;LCD.c: 76:     LCD_SetY(0);
  6602  0B39  3000               	movlw	0
  6603  0B3A  158A  227D  158A   	fcall	_LCD_SetY
  6604                           
  6605                           ;LCD.c: 77:     LCD_SetZ(0);
  6606  0B3D  3000               	movlw	0
  6607  0B3E  158A  2289         	fcall	_LCD_SetZ
  6608  0B40  0008               	return
  6609  0B41                     __end_of_LCD_Reset:	
  6610                           
  6611                           	psect	text41
  6612  0A89                     __ptext41:	
  6613 ;; *************** function _LCD_SetZ *****************
  6614 ;; Defined at:
  6615 ;;		line 140 in file "LCD.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  z               1    wreg     unsigned char 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  z               1    1[BANK0 ] unsigned char 
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      void 
  6622 ;; Registers used:
  6623 ;;		wreg, status,2, status,0, pclath, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6629 ;;      Params:         0       0       0       0
  6630 ;;      Locals:         0       1       0       0
  6631 ;;      Temps:          0       1       0       0
  6632 ;;      Totals:         0       2       0       0
  6633 ;;Total ram usage:        2 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    5
  6636 ;; This function calls:
  6637 ;;		_LCD_Write
  6638 ;; This function is called by:
  6639 ;;		_LCD_Reset
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           
  6644                           ;psect for function _LCD_SetZ
  6645  0A89                     _LCD_SetZ:	
  6646                           
  6647                           ;incstack = 0
  6648                           ; Regs used in _LCD_SetZ: [wreg+status,2+status,0+pclath+cstack]
  6649                           ;LCD_SetZ@z stored from wreg
  6650  0A89  1283               	bcf	3,5	;RP0=0, select bank0
  6651  0A8A  1303               	bcf	3,6	;RP1=0, select bank0
  6652  0A8B  00A1               	movwf	LCD_SetZ@z
  6653                           
  6654                           ;LCD.c: 140: void LCD_SetZ(uint8_t z);LCD.c: 141: {;LCD.c: 142:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xC0 | z);
  6655  0A8C  0821               	movf	LCD_SetZ@z,w
  6656  0A8D  38C0               	iorlw	192
  6657  0A8E  00A0               	movwf	??_LCD_SetZ
  6658  0A8F  0820               	movf	??_LCD_SetZ,w
  6659  0A90  00F8               	movwf	LCD_Write@data
  6660  0A91  3000               	movlw	0
  6661  0A92  158A  2341         	fcall	_LCD_Write
  6662  0A94  0008               	return
  6663  0A95                     __end_of_LCD_SetZ:	
  6664                           
  6665                           	psect	text42
  6666  0CFF                     __ptext42:	
  6667 ;; *************** function _LCD_Clear *****************
  6668 ;; Defined at:
  6669 ;;		line 145 in file "LCD.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  y               1    3[BANK0 ] unsigned char 
  6674 ;;  x               1    4[BANK0 ] unsigned char 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, status,2, status,0, pclath, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6684 ;;      Params:         0       0       0       0
  6685 ;;      Locals:         0       2       0       0
  6686 ;;      Temps:          0       1       0       0
  6687 ;;      Totals:         0       3       0       0
  6688 ;;Total ram usage:        3 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    6
  6691 ;; This function calls:
  6692 ;;		_LCD_SetX
  6693 ;;		_LCD_SetY
  6694 ;;		_LCD_WriteData
  6695 ;; This function is called by:
  6696 ;;		_Setup
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function _LCD_Clear
  6702  0CFF                     _LCD_Clear:	
  6703                           
  6704                           ;LCD.c: 147:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  6708  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  6709  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  6710  0D01  01A4               	clrf	LCD_Clear@x
  6711  0D02                     l3125:	
  6712                           
  6713                           ;LCD.c: 148:     {;LCD.c: 149:         LCD_SetX(x);
  6714  0D02  0824               	movf	LCD_Clear@x,w
  6715  0D03  158A  2271  158A   	fcall	_LCD_SetX
  6716                           
  6717                           ;LCD.c: 150:         LCD_SetY(0);
  6718  0D06  3000               	movlw	0
  6719  0D07  158A  227D  158A   	fcall	_LCD_SetY
  6720                           
  6721                           ;LCD.c: 151:         for (uint8_t y = 0; y < LCD_SEGMENT_HEIGHT; ++y)
  6722  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  6723  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  6724  0D0C  01A3               	clrf	LCD_Clear@y
  6725  0D0D                     l3133:	
  6726                           
  6727                           ;LCD.c: 152:             LCD_WriteData(0);
  6728  0D0D  3000               	movlw	0
  6729  0D0E  158A  225B  158A   	fcall	_LCD_WriteData
  6730  0D11  3001               	movlw	1
  6731  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  6732  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  6733  0D14  00A2               	movwf	??_LCD_Clear
  6734  0D15  0822               	movf	??_LCD_Clear,w
  6735  0D16  07A3               	addwf	LCD_Clear@y,f
  6736  0D17  3040               	movlw	64
  6737  0D18  0223               	subwf	LCD_Clear@y,w
  6738  0D19  1C03               	skipc
  6739  0D1A  2D0D               	goto	l3133
  6740                           
  6741                           ;LCD.c: 153:     }
  6742  0D1B  3001               	movlw	1
  6743  0D1C  00A2               	movwf	??_LCD_Clear
  6744  0D1D  0822               	movf	??_LCD_Clear,w
  6745  0D1E  07A4               	addwf	LCD_Clear@x,f
  6746  0D1F  3008               	movlw	8
  6747  0D20  0224               	subwf	LCD_Clear@x,w
  6748  0D21  1803               	btfsc	3,0
  6749  0D22  0008               	return
  6750  0D23  2D02               	goto	l3125
  6751  0D24                     __end_of_LCD_Clear:	
  6752                           
  6753                           	psect	text43
  6754  0A35                     __ptext43:	
  6755 ;; *************** function _Buttons_SetupPortsAndInterrups *****************
  6756 ;; Defined at:
  6757 ;;		line 40 in file "Buttons.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;		None
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;		None
  6762 ;; Return value:  Size  Location     Type
  6763 ;;                  1    wreg      void 
  6764 ;; Registers used:
  6765 ;;		wreg, status,2, status,0, pclath, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6771 ;;      Params:         0       0       0       0
  6772 ;;      Locals:         0       0       0       0
  6773 ;;      Temps:          0       0       0       0
  6774 ;;      Totals:         0       0       0       0
  6775 ;;Total ram usage:        0 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:    2
  6778 ;; This function calls:
  6779 ;;		_Buttons_SetupInterrupts
  6780 ;;		_Buttons_SetupPortB
  6781 ;; This function is called by:
  6782 ;;		_Setup
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           
  6787                           ;psect for function _Buttons_SetupPortsAndInterrups
  6788  0A35                     _Buttons_SetupPortsAndInterrups:	
  6789                           
  6790                           ;Buttons.c: 42:     Buttons_SetupPortB();
  6791                           
  6792                           ;incstack = 0
  6793                           ; Regs used in _Buttons_SetupPortsAndInterrups: [wreg+status,2+status,0+pclath+cstack]
  6794  0A35  118A  27F3  158A   	fcall	_Buttons_SetupPortB
  6795                           
  6796                           ;Buttons.c: 43:     Buttons_SetupInterrupts();
  6797  0A38  158A  222F         	fcall	_Buttons_SetupInterrupts
  6798  0A3A  0008               	return
  6799  0A3B                     __end_of_Buttons_SetupPortsAndInterrups:	
  6800                           
  6801                           	psect	text44
  6802  07F3                     __ptext44:	
  6803 ;; *************** function _Buttons_SetupPortB *****************
  6804 ;; Defined at:
  6805 ;;		line 11 in file "Buttons.c"
  6806 ;; Parameters:    Size  Location     Type
  6807 ;;		None
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;		None
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  1    wreg      void 
  6812 ;; Registers used:
  6813 ;;		wreg, status,2
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6819 ;;      Params:         0       0       0       0
  6820 ;;      Locals:         0       0       0       0
  6821 ;;      Temps:          0       0       0       0
  6822 ;;      Totals:         0       0       0       0
  6823 ;;Total ram usage:        0 bytes
  6824 ;; Hardware stack levels used:    1
  6825 ;; Hardware stack levels required when called:    1
  6826 ;; This function calls:
  6827 ;;		Nothing
  6828 ;; This function is called by:
  6829 ;;		_Buttons_SetupPortsAndInterrups
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _Buttons_SetupPortB
  6835  07F3                     _Buttons_SetupPortB:	
  6836                           
  6837                           ;Buttons.c: 13:     TRISB = 0xFF;
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _Buttons_SetupPortB: [wreg+status,2]
  6841  07F3  30FF               	movlw	255
  6842  07F4  1683               	bsf	3,5	;RP0=1, select bank1
  6843  07F5  1303               	bcf	3,6	;RP1=0, select bank1
  6844  07F6  0086               	movwf	6	;volatile
  6845                           
  6846                           ;Buttons.c: 14:     ANSELH = 0;
  6847  07F7  1683               	bsf	3,5	;RP0=1, select bank3
  6848  07F8  1703               	bsf	3,6	;RP1=1, select bank3
  6849  07F9  0189               	clrf	9	;volatile
  6850                           
  6851                           ;Buttons.c: 15:     WPUB = 0b00011111;
  6852  07FA  301F               	movlw	31
  6853  07FB  1683               	bsf	3,5	;RP0=1, select bank1
  6854  07FC  1303               	bcf	3,6	;RP1=0, select bank1
  6855  07FD  0095               	movwf	21	;volatile
  6856                           
  6857                           ;Buttons.c: 16:     nRBPU = 0;
  6858  07FE  1381               	bcf	1,7	;volatile
  6859  07FF  0008               	return
  6860  0800                     __end_of_Buttons_SetupPortB:	
  6861                           
  6862                           	psect	text45
  6863  0A2F                     __ptext45:	
  6864 ;; *************** function _Buttons_SetupInterrupts *****************
  6865 ;; Defined at:
  6866 ;;		line 19 in file "Buttons.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		None
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6880 ;;      Params:         0       0       0       0
  6881 ;;      Locals:         0       0       0       0
  6882 ;;      Temps:          0       0       0       0
  6883 ;;      Totals:         0       0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    1
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_Buttons_SetupPortsAndInterrups
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _Buttons_SetupInterrupts
  6896  0A2F                     _Buttons_SetupInterrupts:	
  6897                           
  6898                           ;Buttons.c: 21:     GIE = 1;
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in _Buttons_SetupInterrupts: []
  6902  0A2F  178B               	bsf	11,7	;volatile
  6903                           
  6904                           ;Buttons.c: 22:     INTE = 1;
  6905  0A30  160B               	bsf	11,4	;volatile
  6906                           
  6907                           ;Buttons.c: 23:     INTEDG = 0;
  6908  0A31  1683               	bsf	3,5	;RP0=1, select bank1
  6909  0A32  1303               	bcf	3,6	;RP1=0, select bank1
  6910  0A33  1301               	bcf	1,6	;volatile
  6911  0A34  0008               	return
  6912  0A35                     __end_of_Buttons_SetupInterrupts:	
  6913                           
  6914                           	psect	text46
  6915  00FB                     __ptext46:	
  6916 ;; *************** function _ResetTimer *****************
  6917 ;; Defined at:
  6918 ;;		line 66 in file "main.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;		None
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;		None
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		status,2
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6932 ;;      Params:         0       0       0       0
  6933 ;;      Locals:         0       0       0       0
  6934 ;;      Temps:          0       0       0       0
  6935 ;;      Totals:         0       0       0       0
  6936 ;;Total ram usage:        0 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; Hardware stack levels required when called:    1
  6939 ;; This function calls:
  6940 ;;		Nothing
  6941 ;; This function is called by:
  6942 ;;		_main
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function _ResetTimer
  6948  00FB                     _ResetTimer:	
  6949                           
  6950                           ;main.c: 68:     TMR1 = 0;
  6951                           
  6952                           ;incstack = 0
  6953                           ; Regs used in _ResetTimer: [status,2]
  6954  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  6955  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  6956  00FD  018E               	clrf	14	;volatile
  6957  00FE  018F               	clrf	15	;volatile
  6958  00FF  0008               	return
  6959  0100                     __end_of_ResetTimer:	
  6960                           
  6961                           	psect	text47
  6962  0E09                     __ptext47:	
  6963 ;; *************** function _DrawTetris *****************
  6964 ;; Defined at:
  6965 ;;		line 55 in file "Drawing.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  tetrisGame      1    wreg     PTR struct .
  6968 ;;		 -> main@tetrisGame(63), 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  tetrisGame      1   17[BANK0 ] PTR struct .
  6971 ;;		 -> main@tetrisGame(63), 
  6972 ;;  x               1   22[BANK0 ] unsigned char 
  6973 ;;  rightMask       2   20[BANK0 ] unsigned int 
  6974 ;;  leftMask        2   18[BANK0 ] unsigned int 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  1    wreg      void 
  6977 ;; Registers used:
  6978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6984 ;;      Params:         0       0       0       0
  6985 ;;      Locals:         0       6       0       0
  6986 ;;      Temps:          0       1       0       0
  6987 ;;      Totals:         0       7       0       0
  6988 ;;Total ram usage:        7 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    7
  6991 ;; This function calls:
  6992 ;;		_DrawTetrisGameColumn
  6993 ;; This function is called by:
  6994 ;;		_main
  6995 ;; This function uses a non-reentrant model
  6996 ;;
  6997                           
  6998                           
  6999                           ;psect for function _DrawTetris
  7000  0E09                     _DrawTetris:	
  7001                           
  7002                           ;incstack = 0
  7003                           ; Regs used in _DrawTetris: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7004                           ;DrawTetris@tetrisGame stored from wreg
  7005  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  7006  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  7007  0E0B  00B1               	movwf	DrawTetris@tetrisGame
  7008                           
  7009                           ;Drawing.c: 55: void DrawTetris(Tetris_Game *tetrisGame);Drawing.c: 56: {;Drawing.c: 57:
      +                               uint16_t leftMask = 0b0000000000000010;
  7010  0E0C  3002               	movlw	2
  7011  0E0D  00B2               	movwf	DrawTetris@leftMask
  7012  0E0E  3000               	movlw	0
  7013  0E0F  00B3               	movwf	DrawTetris@leftMask+1
  7014                           
  7015                           ;Drawing.c: 58:     uint16_t rightMask = 0b0000000000000001;
  7016  0E10  3001               	movlw	1
  7017  0E11  00B4               	movwf	DrawTetris@rightMask
  7018  0E12  3000               	movlw	0
  7019  0E13  00B5               	movwf	DrawTetris@rightMask+1
  7020                           
  7021                           ;Drawing.c: 60:     for (uint8_t x = 0; x < LCD_NUM_PAGES; ++x)
  7022  0E14  01B6               	clrf	DrawTetris@x
  7023  0E15                     l3355:	
  7024                           
  7025                           ;Drawing.c: 61:     {;Drawing.c: 62:         DrawTetrisGameColumn(tetrisGame, x, rightMa
      +                          sk, leftMask);
  7026  0E15  0836               	movf	DrawTetris@x,w
  7027  0E16  00B0               	movwf	??_DrawTetris
  7028  0E17  0830               	movf	??_DrawTetris,w
  7029  0E18  00A2               	movwf	DrawTetrisGameColumn@x
  7030  0E19  0835               	movf	DrawTetris@rightMask+1,w
  7031  0E1A  00A4               	movwf	DrawTetrisGameColumn@rightMask+1
  7032  0E1B  0834               	movf	DrawTetris@rightMask,w
  7033  0E1C  00A3               	movwf	DrawTetrisGameColumn@rightMask
  7034  0E1D  0833               	movf	DrawTetris@leftMask+1,w
  7035  0E1E  00A6               	movwf	DrawTetrisGameColumn@leftMask+1
  7036  0E1F  0832               	movf	DrawTetris@leftMask,w
  7037  0E20  00A5               	movwf	DrawTetrisGameColumn@leftMask
  7038  0E21  0831               	movf	DrawTetris@tetrisGame,w
  7039  0E22  118A  258B  158A   	fcall	_DrawTetrisGameColumn
  7040                           
  7041                           ;Drawing.c: 63:         leftMask <<= 2;
  7042  0E25  3002               	movlw	2
  7043  0E26  1283               	bcf	3,5	;RP0=0, select bank0
  7044  0E27  1303               	bcf	3,6	;RP1=0, select bank0
  7045  0E28                     u2835:	
  7046  0E28  1003               	clrc
  7047  0E29  0DB2               	rlf	DrawTetris@leftMask,f
  7048  0E2A  0DB3               	rlf	DrawTetris@leftMask+1,f
  7049  0E2B  3EFF               	addlw	-1
  7050  0E2C  1D03               	skipz
  7051  0E2D  2E28               	goto	u2835
  7052                           
  7053                           ;Drawing.c: 64:         rightMask <<= 2;
  7054  0E2E  3002               	movlw	2
  7055  0E2F                     u2845:	
  7056  0E2F  1003               	clrc
  7057  0E30  0DB4               	rlf	DrawTetris@rightMask,f
  7058  0E31  0DB5               	rlf	DrawTetris@rightMask+1,f
  7059  0E32  3EFF               	addlw	-1
  7060  0E33  1D03               	skipz
  7061  0E34  2E2F               	goto	u2845
  7062                           
  7063                           ;Drawing.c: 65:     }
  7064  0E35  3001               	movlw	1
  7065  0E36  00B0               	movwf	??_DrawTetris
  7066  0E37  0830               	movf	??_DrawTetris,w
  7067  0E38  07B6               	addwf	DrawTetris@x,f
  7068  0E39  3008               	movlw	8
  7069  0E3A  0236               	subwf	DrawTetris@x,w
  7070  0E3B  1803               	btfsc	3,0
  7071  0E3C  0008               	return
  7072  0E3D  2E15               	goto	l3355
  7073  0E3E                     __end_of_DrawTetris:	
  7074                           
  7075                           	psect	text48
  7076  058B                     __ptext48:	
  7077 ;; *************** function _DrawTetrisGameColumn *****************
  7078 ;; Defined at:
  7079 ;;		line 17 in file "Drawing.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;  tetrisGame      1    wreg     PTR struct .
  7082 ;;		 -> main@tetrisGame(63), 
  7083 ;;  x               1    2[BANK0 ] unsigned char 
  7084 ;;  rightMask       2    3[BANK0 ] unsigned int 
  7085 ;;  leftMask        2    5[BANK0 ] unsigned int 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;  tetrisGame      1    9[BANK0 ] PTR struct .
  7088 ;;		 -> main@tetrisGame(63), 
  7089 ;;  i               1   13[BANK0 ] unsigned char 
  7090 ;;  gameRow         2   11[BANK0 ] unsigned int 
  7091 ;;  lcdRow          1   15[BANK0 ] unsigned char 
  7092 ;;  y               1   14[BANK0 ] unsigned char 
  7093 ;;  tableY          1   10[BANK0 ] unsigned char 
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  1    wreg      void 
  7096 ;; Registers used:
  7097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7098 ;; Tracked objects:
  7099 ;;		On entry : 0/0
  7100 ;;		On exit  : 0/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7103 ;;      Params:         0       5       0       0
  7104 ;;      Locals:         0       7       0       0
  7105 ;;      Temps:          0       2       0       0
  7106 ;;      Totals:         0      14       0       0
  7107 ;;Total ram usage:       14 bytes
  7108 ;; Hardware stack levels used:    1
  7109 ;; Hardware stack levels required when called:    6
  7110 ;; This function calls:
  7111 ;;		_LCD_SegmentSelection
  7112 ;;		_LCD_SetX
  7113 ;;		_LCD_SetY
  7114 ;;		_LCD_WriteData
  7115 ;; This function is called by:
  7116 ;;		_DrawTetris
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           
  7121                           ;psect for function _DrawTetrisGameColumn
  7122  058B                     _DrawTetrisGameColumn:	
  7123                           
  7124                           ;incstack = 0
  7125                           ; Regs used in _DrawTetrisGameColumn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7126                           ;DrawTetrisGameColumn@tetrisGame stored from wreg
  7127  058B  1283               	bcf	3,5	;RP0=0, select bank0
  7128  058C  1303               	bcf	3,6	;RP1=0, select bank0
  7129  058D  00A9               	movwf	DrawTetrisGameColumn@tetrisGame
  7130                           
  7131                           ;Drawing.c: 17: static void DrawTetrisGameColumn(Tetris_Game *tetrisGame, uint8_t x, uin
      +                          t16_t rightMask, uint16_t leftMask);Drawing.c: 18: {;Drawing.c: 19:     uint8_t tableY =
      +                           0;
  7132  058E  01AA               	clrf	DrawTetrisGameColumn@tableY
  7133                           
  7134                           ;Drawing.c: 21:     LCD_SegmentSelection(LCD_TOP_SEGMENT);
  7135  058F  3002               	movlw	2
  7136  0590  158A  22C0  118A   	fcall	_LCD_SegmentSelection
  7137                           
  7138                           ;Drawing.c: 22:     LCD_SetY(SCORE_SPACE);
  7139  0593  3008               	movlw	8
  7140  0594  158A  227D  118A   	fcall	_LCD_SetY
  7141                           
  7142                           ;Drawing.c: 23:     LCD_SetX(x);
  7143  0597  1283               	bcf	3,5	;RP0=0, select bank0
  7144  0598  1303               	bcf	3,6	;RP1=0, select bank0
  7145  0599  0822               	movf	DrawTetrisGameColumn@x,w
  7146  059A  158A  2271  118A   	fcall	_LCD_SetX
  7147                           
  7148                           ;Drawing.c: 25:     for (uint8_t y = SCORE_SPACE; y < LCD_HEIGHT; y += GAME_PIXEL_HEIGHT
      +                          )
  7149  059D  3008               	movlw	8
  7150  059E  1283               	bcf	3,5	;RP0=0, select bank0
  7151  059F  1303               	bcf	3,6	;RP1=0, select bank0
  7152  05A0  00A7               	movwf	??_DrawTetrisGameColumn
  7153  05A1  0827               	movf	??_DrawTetrisGameColumn,w
  7154  05A2  00AE               	movwf	DrawTetrisGameColumn@y
  7155  05A3                     l3253:	
  7156                           
  7157                           ;Drawing.c: 26:     {;Drawing.c: 27:         uint16_t gameRow = tetrisGame->table[tableY
      +                          ];
  7158  05A3  082A               	movf	DrawTetrisGameColumn@tableY,w
  7159  05A4  00A7               	movwf	??_DrawTetrisGameColumn
  7160  05A5  0727               	addwf	??_DrawTetrisGameColumn,w
  7161  05A6  0729               	addwf	DrawTetrisGameColumn@tetrisGame,w
  7162  05A7  00A8               	movwf	??_DrawTetrisGameColumn+1
  7163  05A8  0828               	movf	??_DrawTetrisGameColumn+1,w
  7164  05A9  0084               	movwf	4
  7165  05AA  1383               	bcf	3,7	;select IRP bank0
  7166  05AB  0800               	movf	0,w
  7167  05AC  00AB               	movwf	DrawTetrisGameColumn@gameRow
  7168  05AD  0A84               	incf	4,f
  7169  05AE  0800               	movf	0,w
  7170  05AF  00AC               	movwf	DrawTetrisGameColumn@gameRow+1
  7171                           
  7172                           ;Drawing.c: 28:         uint8_t lcdRow = 0;
  7173  05B0  01AF               	clrf	DrawTetrisGameColumn@lcdRow
  7174                           
  7175                           ;Drawing.c: 29:         if (gameRow & rightMask)
  7176  05B1  0823               	movf	DrawTetrisGameColumn@rightMask,w
  7177  05B2  052B               	andwf	DrawTetrisGameColumn@gameRow,w
  7178  05B3  00A7               	movwf	??_DrawTetrisGameColumn
  7179  05B4  0824               	movf	DrawTetrisGameColumn@rightMask+1,w
  7180  05B5  052C               	andwf	DrawTetrisGameColumn@gameRow+1,w
  7181  05B6  00A8               	movwf	??_DrawTetrisGameColumn+1
  7182  05B7  0827               	movf	??_DrawTetrisGameColumn,w
  7183  05B8  0428               	iorwf	??_DrawTetrisGameColumn+1,w
  7184  05B9  1903               	btfsc	3,2
  7185  05BA  2DBF               	goto	l3261
  7186                           
  7187                           ;Drawing.c: 30:             lcdRow = 0x0F;
  7188  05BB  300F               	movlw	15
  7189  05BC  00A7               	movwf	??_DrawTetrisGameColumn
  7190  05BD  0827               	movf	??_DrawTetrisGameColumn,w
  7191  05BE  00AF               	movwf	DrawTetrisGameColumn@lcdRow
  7192  05BF                     l3261:	
  7193                           
  7194                           ;Drawing.c: 31:         if (gameRow & leftMask)
  7195  05BF  0825               	movf	DrawTetrisGameColumn@leftMask,w
  7196  05C0  052B               	andwf	DrawTetrisGameColumn@gameRow,w
  7197  05C1  00A7               	movwf	??_DrawTetrisGameColumn
  7198  05C2  0826               	movf	DrawTetrisGameColumn@leftMask+1,w
  7199  05C3  052C               	andwf	DrawTetrisGameColumn@gameRow+1,w
  7200  05C4  00A8               	movwf	??_DrawTetrisGameColumn+1
  7201  05C5  0827               	movf	??_DrawTetrisGameColumn,w
  7202  05C6  0428               	iorwf	??_DrawTetrisGameColumn+1,w
  7203  05C7  1903               	btfsc	3,2
  7204  05C8  2DCD               	goto	l435
  7205                           
  7206                           ;Drawing.c: 32:             lcdRow |= 0xF0;
  7207  05C9  30F0               	movlw	240
  7208  05CA  00A7               	movwf	??_DrawTetrisGameColumn
  7209  05CB  0827               	movf	??_DrawTetrisGameColumn,w
  7210  05CC  04AF               	iorwf	DrawTetrisGameColumn@lcdRow,f
  7211  05CD                     l435:	
  7212                           
  7213                           ;Drawing.c: 34:         if (y == 63)
  7214  05CD  303F               	movlw	63
  7215  05CE  062E               	xorwf	DrawTetrisGameColumn@y,w
  7216  05CF  1D03               	btfss	3,2
  7217  05D0  2DFC               	goto	l3267
  7218                           
  7219                           ;Drawing.c: 35:         {;Drawing.c: 36:             LCD_WriteData(lcdRow);
  7220  05D1  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7221  05D2  158A  225B  118A   	fcall	_LCD_WriteData
  7222                           
  7223                           ;Drawing.c: 37:             LCD_SegmentSelection(LCD_BOTTOM_SEGMENT);
  7224  05D5  3001               	movlw	1
  7225  05D6  158A  22C0  118A   	fcall	_LCD_SegmentSelection
  7226                           
  7227                           ;Drawing.c: 38:             LCD_SetX(x);
  7228  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  7229  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  7230  05DB  0822               	movf	DrawTetrisGameColumn@x,w
  7231  05DC  158A  2271  118A   	fcall	_LCD_SetX
  7232                           
  7233                           ;Drawing.c: 39:             LCD_SetY(0);
  7234  05DF  3000               	movlw	0
  7235  05E0  158A  227D  118A   	fcall	_LCD_SetY
  7236                           
  7237                           ;Drawing.c: 40:             LCD_WriteData(lcdRow);
  7238  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  7239  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  7240  05E5  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7241  05E6  158A  225B  118A   	fcall	_LCD_WriteData
  7242                           
  7243                           ;Drawing.c: 41:             LCD_WriteData(lcdRow);
  7244  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  7245  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  7246  05EB  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7247  05EC  158A  225B  118A   	fcall	_LCD_WriteData
  7248                           
  7249                           ;Drawing.c: 42:             LCD_WriteData(lcdRow);
  7250  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  7251  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  7252  05F1  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7253  05F2  158A  225B  118A   	fcall	_LCD_WriteData
  7254                           
  7255                           ;Drawing.c: 43:             LCD_WriteData(lcdRow);
  7256  05F5  1283               	bcf	3,5	;RP0=0, select bank0
  7257  05F6  1303               	bcf	3,6	;RP1=0, select bank0
  7258  05F7  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7259  05F8  158A  225B  118A   	fcall	_LCD_WriteData
  7260                           
  7261                           ;Drawing.c: 44:         }
  7262  05FB  2E0B               	goto	l3279
  7263  05FC                     l3267:	
  7264                           
  7265                           ;Drawing.c: 46:         {;Drawing.c: 47:             for (uint8_t i = 0; i < GAME_PIXEL_
      +                          HEIGHT; ++i)
  7266  05FC  01AD               	clrf	DrawTetrisGameColumn@i
  7267  05FD                     l3273:	
  7268                           
  7269                           ;Drawing.c: 48:                 LCD_WriteData(lcdRow);
  7270  05FD  082F               	movf	DrawTetrisGameColumn@lcdRow,w
  7271  05FE  158A  225B  118A   	fcall	_LCD_WriteData
  7272  0601  3001               	movlw	1
  7273  0602  1283               	bcf	3,5	;RP0=0, select bank0
  7274  0603  1303               	bcf	3,6	;RP1=0, select bank0
  7275  0604  00A7               	movwf	??_DrawTetrisGameColumn
  7276  0605  0827               	movf	??_DrawTetrisGameColumn,w
  7277  0606  07AD               	addwf	DrawTetrisGameColumn@i,f
  7278  0607  3005               	movlw	5
  7279  0608  022D               	subwf	DrawTetrisGameColumn@i,w
  7280  0609  1C03               	skipc
  7281  060A  2DFD               	goto	l3273
  7282  060B                     l3279:	
  7283                           
  7284                           ;Drawing.c: 51:         ++tableY;
  7285  060B  3001               	movlw	1
  7286  060C  1283               	bcf	3,5	;RP0=0, select bank0
  7287  060D  1303               	bcf	3,6	;RP1=0, select bank0
  7288  060E  00A7               	movwf	??_DrawTetrisGameColumn
  7289  060F  0827               	movf	??_DrawTetrisGameColumn,w
  7290  0610  07AA               	addwf	DrawTetrisGameColumn@tableY,f
  7291                           
  7292                           ;Drawing.c: 52:     }
  7293  0611  3005               	movlw	5
  7294  0612  00A7               	movwf	??_DrawTetrisGameColumn
  7295  0613  0827               	movf	??_DrawTetrisGameColumn,w
  7296  0614  07AE               	addwf	DrawTetrisGameColumn@y,f
  7297  0615  3080               	movlw	128
  7298  0616  022E               	subwf	DrawTetrisGameColumn@y,w
  7299  0617  1803               	btfsc	3,0
  7300  0618  0008               	return
  7301  0619  2DA3               	goto	l3253
  7302  061A                     __end_of_DrawTetrisGameColumn:	
  7303                           
  7304                           	psect	text49
  7305  0A5B                     __ptext49:	
  7306 ;; *************** function _LCD_WriteData *****************
  7307 ;; Defined at:
  7308 ;;		line 102 in file "LCD.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  data            1    wreg     unsigned char 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  data            1    1[BANK0 ] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0, pclath, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7322 ;;      Params:         0       0       0       0
  7323 ;;      Locals:         0       1       0       0
  7324 ;;      Temps:          0       1       0       0
  7325 ;;      Totals:         0       2       0       0
  7326 ;;Total ram usage:        2 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    5
  7329 ;; This function calls:
  7330 ;;		_LCD_Write
  7331 ;; This function is called by:
  7332 ;;		_LCD_Clear
  7333 ;;		_DrawTetrisGameColumn
  7334 ;;		_DrawLogo
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           
  7339                           ;psect for function _LCD_WriteData
  7340  0A5B                     _LCD_WriteData:	
  7341                           
  7342                           ;incstack = 0
  7343                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0+pclath+cstack]
  7344                           ;LCD_WriteData@data stored from wreg
  7345  0A5B  1283               	bcf	3,5	;RP0=0, select bank0
  7346  0A5C  1303               	bcf	3,6	;RP1=0, select bank0
  7347  0A5D  00A1               	movwf	LCD_WriteData@data
  7348                           
  7349                           ;LCD.c: 102: void LCD_WriteData(uint8_t data);LCD.c: 103: {;LCD.c: 104:     LCD_Write(LC
      +                          D_WRITE_DATA, data);
  7350  0A5E  0821               	movf	LCD_WriteData@data,w
  7351  0A5F  00A0               	movwf	??_LCD_WriteData
  7352  0A60  0820               	movf	??_LCD_WriteData,w
  7353  0A61  00F8               	movwf	LCD_Write@data
  7354  0A62  3001               	movlw	1
  7355  0A63  158A  2341         	fcall	_LCD_Write
  7356  0A65  0008               	return
  7357  0A66                     __end_of_LCD_WriteData:	
  7358                           
  7359                           	psect	text50
  7360  0A7D                     __ptext50:	
  7361 ;; *************** function _LCD_SetY *****************
  7362 ;; Defined at:
  7363 ;;		line 130 in file "LCD.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;  y               1    wreg     unsigned char 
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;  y               1    1[BANK0 ] unsigned char 
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  1    wreg      void 
  7370 ;; Registers used:
  7371 ;;		wreg, status,2, status,0, pclath, cstack
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7377 ;;      Params:         0       0       0       0
  7378 ;;      Locals:         0       1       0       0
  7379 ;;      Temps:          0       1       0       0
  7380 ;;      Totals:         0       2       0       0
  7381 ;;Total ram usage:        2 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    5
  7384 ;; This function calls:
  7385 ;;		_LCD_Write
  7386 ;; This function is called by:
  7387 ;;		_LCD_Reset
  7388 ;;		_LCD_Clear
  7389 ;;		_DrawTetrisGameColumn
  7390 ;;		_DrawLogo
  7391 ;;		_DrawScore
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           
  7396                           ;psect for function _LCD_SetY
  7397  0A7D                     _LCD_SetY:	
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _LCD_SetY: [wreg+status,2+status,0+pclath+cstack]
  7401                           ;LCD_SetY@y stored from wreg
  7402  0A7D  1283               	bcf	3,5	;RP0=0, select bank0
  7403  0A7E  1303               	bcf	3,6	;RP1=0, select bank0
  7404  0A7F  00A1               	movwf	LCD_SetY@y
  7405                           
  7406                           ;LCD.c: 130: void LCD_SetY(uint8_t y);LCD.c: 131: {;LCD.c: 132:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0x40 | y);
  7407  0A80  0821               	movf	LCD_SetY@y,w
  7408  0A81  3840               	iorlw	64
  7409  0A82  00A0               	movwf	??_LCD_SetY
  7410  0A83  0820               	movf	??_LCD_SetY,w
  7411  0A84  00F8               	movwf	LCD_Write@data
  7412  0A85  3000               	movlw	0
  7413  0A86  158A  2341         	fcall	_LCD_Write
  7414  0A88  0008               	return
  7415  0A89                     __end_of_LCD_SetY:	
  7416                           
  7417                           	psect	text51
  7418  0A71                     __ptext51:	
  7419 ;; *************** function _LCD_SetX *****************
  7420 ;; Defined at:
  7421 ;;		line 135 in file "LCD.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  x               1    wreg     unsigned char 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  x               1    1[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      void 
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7435 ;;      Params:         0       0       0       0
  7436 ;;      Locals:         0       1       0       0
  7437 ;;      Temps:          0       1       0       0
  7438 ;;      Totals:         0       2       0       0
  7439 ;;Total ram usage:        2 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    5
  7442 ;; This function calls:
  7443 ;;		_LCD_Write
  7444 ;; This function is called by:
  7445 ;;		_LCD_Reset
  7446 ;;		_LCD_Clear
  7447 ;;		_DrawTetrisGameColumn
  7448 ;;		_DrawLogo
  7449 ;;		_DrawScore
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           
  7454                           ;psect for function _LCD_SetX
  7455  0A71                     _LCD_SetX:	
  7456                           
  7457                           ;incstack = 0
  7458                           ; Regs used in _LCD_SetX: [wreg+status,2+status,0+pclath+cstack]
  7459                           ;LCD_SetX@x stored from wreg
  7460  0A71  1283               	bcf	3,5	;RP0=0, select bank0
  7461  0A72  1303               	bcf	3,6	;RP1=0, select bank0
  7462  0A73  00A1               	movwf	LCD_SetX@x
  7463                           
  7464                           ;LCD.c: 135: void LCD_SetX(uint8_t x);LCD.c: 136: {;LCD.c: 137:     LCD_Write(LCD_WRITE_
      +                          INSTRUCTION, 0xB8 | x);
  7465  0A74  0821               	movf	LCD_SetX@x,w
  7466  0A75  38B8               	iorlw	184
  7467  0A76  00A0               	movwf	??_LCD_SetX
  7468  0A77  0820               	movf	??_LCD_SetX,w
  7469  0A78  00F8               	movwf	LCD_Write@data
  7470  0A79  3000               	movlw	0
  7471  0A7A  158A  2341         	fcall	_LCD_Write
  7472  0A7C  0008               	return
  7473  0A7D                     __end_of_LCD_SetX:	
  7474                           
  7475                           	psect	text52
  7476  0B41                     __ptext52:	
  7477 ;; *************** function _LCD_Write *****************
  7478 ;; Defined at:
  7479 ;;		line 35 in file "LCD.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  mode            1    wreg     enum E1321
  7482 ;;  data            1    8[COMMON] unsigned char 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  mode            1    9[COMMON] enum E1321
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, pclath, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7494 ;;      Params:         1       0       0       0
  7495 ;;      Locals:         1       0       0       0
  7496 ;;      Temps:          0       0       0       0
  7497 ;;      Totals:         2       0       0       0
  7498 ;;Total ram usage:        2 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    4
  7501 ;; This function calls:
  7502 ;;		_LCD_BlockWhileBusy
  7503 ;; This function is called by:
  7504 ;;		_LCD_WriteData
  7505 ;;		_LCD_TurnOn
  7506 ;;		_LCD_SetY
  7507 ;;		_LCD_SetX
  7508 ;;		_LCD_SetZ
  7509 ;;		_LCD_TurnOff
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           
  7514                           ;psect for function _LCD_Write
  7515  0B41                     _LCD_Write:	
  7516                           
  7517                           ;incstack = 0
  7518                           ; Regs used in _LCD_Write: [wreg+status,2+status,0+pclath+cstack]
  7519                           ;LCD_Write@mode stored from wreg
  7520  0B41  00F9               	movwf	LCD_Write@mode
  7521                           
  7522                           ;LCD.c: 35: static void LCD_Write(LCD_WriteMode mode, uint8_t data);LCD.c: 36: {;LCD.c: 
      +                          37:     LCD_BlockWhileBusy();
  7523  0B42  158A  2241  158A   	fcall	_LCD_BlockWhileBusy
  7524                           
  7525                           ;LCD.c: 39:     TRISA = 0;
  7526  0B45  1683               	bsf	3,5	;RP0=1, select bank1
  7527  0B46  1303               	bcf	3,6	;RP1=0, select bank1
  7528  0B47  0185               	clrf	5	;volatile
  7529                           
  7530                           ;LCD.c: 40:     RC3 = 0;
  7531  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  7532  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  7533  0B4A  1187               	bcf	7,3	;volatile
  7534                           
  7535                           ;LCD.c: 41:     RC2 = mode;
  7536  0B4B  1C79               	btfss	LCD_Write@mode,0
  7537  0B4C  2B51               	goto	u1260
  7538  0B4D  1283               	bcf	3,5	;RP0=0, select bank0
  7539  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
  7540  0B4F  1507               	bsf	7,2	;volatile
  7541  0B50  2B54               	goto	l2099
  7542  0B51                     u1260:	
  7543  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  7544  0B52  1303               	bcf	3,6	;RP1=0, select bank0
  7545  0B53  1107               	bcf	7,2	;volatile
  7546  0B54                     l2099:	
  7547                           
  7548                           ;LCD.c: 42:     PORTA = data;
  7549  0B54  0878               	movf	LCD_Write@data,w
  7550  0B55  0085               	movwf	5	;volatile
  7551                           
  7552                           ;LCD.c: 43:     RD0 = 1;
  7553  0B56  1408               	bsf	8,0	;volatile
  7554                           
  7555                           ;LCD.c: 44:     __nop();
  7556  0B57  0000               	nop
  7557                           
  7558                           ;LCD.c: 45:     RD0 = 0;
  7559  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  7560  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  7561  0B5A  1008               	bcf	8,0	;volatile
  7562  0B5B  0008               	return
  7563  0B5C                     __end_of_LCD_Write:	
  7564                           
  7565                           	psect	text53
  7566  0A41                     __ptext53:	
  7567 ;; *************** function _LCD_BlockWhileBusy *****************
  7568 ;; Defined at:
  7569 ;;		line 28 in file "LCD.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;		None
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;		None
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, pclath, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 0/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7583 ;;      Params:         0       0       0       0
  7584 ;;      Locals:         0       0       0       0
  7585 ;;      Temps:          0       0       0       0
  7586 ;;      Totals:         0       0       0       0
  7587 ;;Total ram usage:        0 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    3
  7590 ;; This function calls:
  7591 ;;		_LCD_IsBusy
  7592 ;; This function is called by:
  7593 ;;		_LCD_Write
  7594 ;;		_LCD_ReadData
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           
  7599                           ;psect for function _LCD_BlockWhileBusy
  7600  0A41                     _LCD_BlockWhileBusy:	
  7601  0A41                     l2043:	
  7602                           ;LCD.c: 30:     while (LCD_IsBusy())
  7603                           
  7604                           ;incstack = 0
  7605                           ; Regs used in _LCD_BlockWhileBusy: [wreg+status,2+pclath+cstack]
  7606                           
  7607                           
  7608                           ;LCD.c: 30:     while (LCD_IsBusy())
  7609  0A41  158A  22A3  158A   	fcall	_LCD_IsBusy
  7610  0A44  3A00               	xorlw	0
  7611  0A45  1903               	btfsc	3,2
  7612  0A46  0008               	return
  7613  0A47  2A41               	goto	l2043
  7614  0A48                     __end_of_LCD_BlockWhileBusy:	
  7615                           
  7616                           	psect	text54
  7617  0AA3                     __ptext54:	
  7618 ;; *************** function _LCD_IsBusy *****************
  7619 ;; Defined at:
  7620 ;;		line 22 in file "LCD.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;		None
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;  status          1    7[COMMON] unsigned char 
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  1    wreg      unsigned char 
  7627 ;; Registers used:
  7628 ;;		wreg, status,2, pclath, cstack
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7634 ;;      Params:         0       0       0       0
  7635 ;;      Locals:         2       0       0       0
  7636 ;;      Temps:          1       0       0       0
  7637 ;;      Totals:         3       0       0       0
  7638 ;;Total ram usage:        3 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    2
  7641 ;; This function calls:
  7642 ;;		_LCD_ReadStatus
  7643 ;; This function is called by:
  7644 ;;		_LCD_BlockWhileBusy
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           
  7649                           ;psect for function _LCD_IsBusy
  7650  0AA3                     _LCD_IsBusy:	
  7651                           
  7652                           ;LCD.c: 24:     uint8_t status = LCD_ReadStatus();
  7653                           
  7654                           ;incstack = 0
  7655                           ; Regs used in _LCD_IsBusy: [wreg+status,2+pclath+cstack]
  7656  0AA3  158A  22D0  158A   	fcall	_LCD_ReadStatus
  7657  0AA6  00F5               	movwf	??_LCD_IsBusy
  7658  0AA7  0875               	movf	??_LCD_IsBusy,w
  7659  0AA8  00F7               	movwf	LCD_IsBusy@status
  7660                           
  7661                           ;LCD.c: 25:     return (status & LCD_BUSY_FLAG) || (status & LCD_RESET_FLAG);
  7662  0AA9  01F6               	clrf	_LCD_IsBusy$598
  7663  0AAA  0AF6               	incf	_LCD_IsBusy$598,f
  7664  0AAB  1FF7               	btfss	LCD_IsBusy@status,7
  7665  0AAC  1A77               	btfsc	LCD_IsBusy@status,4
  7666  0AAD  2AAF               	goto	l2037
  7667  0AAE  01F6               	clrf	_LCD_IsBusy$598
  7668  0AAF                     l2037:	
  7669  0AAF  0876               	movf	_LCD_IsBusy$598,w
  7670  0AB0  0008               	return
  7671  0AB1                     __end_of_LCD_IsBusy:	
  7672                           
  7673                           	psect	text55
  7674  0AD0                     __ptext55:	
  7675 ;; *************** function _LCD_ReadStatus *****************
  7676 ;; Defined at:
  7677 ;;		line 80 in file "LCD.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  status          1    4[COMMON] unsigned char 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      unsigned char 
  7684 ;; Registers used:
  7685 ;;		wreg
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7691 ;;      Params:         0       0       0       0
  7692 ;;      Locals:         1       0       0       0
  7693 ;;      Temps:          1       0       0       0
  7694 ;;      Totals:         2       0       0       0
  7695 ;;Total ram usage:        2 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    1
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_LCD_IsBusy
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function _LCD_ReadStatus
  7707  0AD0                     _LCD_ReadStatus:	
  7708                           
  7709                           ;LCD.c: 82:     TRISA = 0xFF;
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _LCD_ReadStatus: [wreg]
  7713  0AD0  30FF               	movlw	255
  7714  0AD1  1683               	bsf	3,5	;RP0=1, select bank1
  7715  0AD2  1303               	bcf	3,6	;RP1=0, select bank1
  7716  0AD3  0085               	movwf	5	;volatile
  7717                           
  7718                           ;LCD.c: 83:     RC3 = 1;
  7719  0AD4  1283               	bcf	3,5	;RP0=0, select bank0
  7720  0AD5  1303               	bcf	3,6	;RP1=0, select bank0
  7721  0AD6  1587               	bsf	7,3	;volatile
  7722                           
  7723                           ;LCD.c: 84:     RC2 = 0;
  7724  0AD7  1107               	bcf	7,2	;volatile
  7725                           
  7726                           ;LCD.c: 85:     RD0 = 1;
  7727  0AD8  1408               	bsf	8,0	;volatile
  7728                           
  7729                           ;LCD.c: 86:     uint8_t status = PORTA;
  7730  0AD9  0805               	movf	5,w	;volatile
  7731  0ADA  00F3               	movwf	??_LCD_ReadStatus
  7732  0ADB  0873               	movf	??_LCD_ReadStatus,w
  7733  0ADC  00F4               	movwf	LCD_ReadStatus@status
  7734                           
  7735                           ;LCD.c: 87:     RD0 = 0;
  7736  0ADD  1008               	bcf	8,0	;volatile
  7737                           
  7738                           ;LCD.c: 88:     return status;
  7739  0ADE  0874               	movf	LCD_ReadStatus@status,w
  7740  0ADF  0008               	return
  7741  0AE0                     __end_of_LCD_ReadStatus:	
  7742                           
  7743                           	psect	text56
  7744  0AC0                     __ptext56:	
  7745 ;; *************** function _LCD_SegmentSelection *****************
  7746 ;; Defined at:
  7747 ;;		line 107 in file "LCD.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  segments        1    wreg     enum E1292
  7750 ;; Auto vars:     Size  Location     Type
  7751 ;;  segments        1    3[COMMON] enum E1292
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  1    wreg      void 
  7754 ;; Registers used:
  7755 ;;		wreg
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7761 ;;      Params:         0       0       0       0
  7762 ;;      Locals:         1       0       0       0
  7763 ;;      Temps:          0       0       0       0
  7764 ;;      Totals:         1       0       0       0
  7765 ;;Total ram usage:        1 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    1
  7768 ;; This function calls:
  7769 ;;		Nothing
  7770 ;; This function is called by:
  7771 ;;		_Setup
  7772 ;;		_DrawTetrisGameColumn
  7773 ;;		_DrawLogo
  7774 ;;		_DrawScore
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           
  7779                           ;psect for function _LCD_SegmentSelection
  7780  0AC0                     _LCD_SegmentSelection:	
  7781                           
  7782                           ;incstack = 0
  7783                           ; Regs used in _LCD_SegmentSelection: [wreg]
  7784                           ;LCD_SegmentSelection@segments stored from wreg
  7785  0AC0  00F3               	movwf	LCD_SegmentSelection@segments
  7786                           
  7787                           ;LCD.c: 107: void LCD_SegmentSelection(LCD_Segments segments);LCD.c: 108: {;LCD.c: 109: 
      +                              if (segments & LCD_TOP_SEGMENT)
  7788  0AC1  1CF3               	btfss	LCD_SegmentSelection@segments,1
  7789  0AC2  2AC7               	goto	l386
  7790                           
  7791                           ;LCD.c: 110:         RC0 = 0;
  7792  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  7793  0AC4  1303               	bcf	3,6	;RP1=0, select bank0
  7794  0AC5  1007               	bcf	7,0	;volatile
  7795  0AC6  2ACA               	goto	l387
  7796  0AC7                     l386:	
  7797                           ;LCD.c: 111:     else
  7798                           
  7799                           
  7800                           ;LCD.c: 112:         RC0 = 1;
  7801  0AC7  1283               	bcf	3,5	;RP0=0, select bank0
  7802  0AC8  1303               	bcf	3,6	;RP1=0, select bank0
  7803  0AC9  1407               	bsf	7,0	;volatile
  7804  0ACA                     l387:	
  7805                           
  7806                           ;LCD.c: 114:     if (segments & LCD_BOTTOM_SEGMENT)
  7807  0ACA  1C73               	btfss	LCD_SegmentSelection@segments,0
  7808  0ACB  2ACE               	goto	l388
  7809                           
  7810                           ;LCD.c: 115:         RC1 = 0;
  7811  0ACC  1087               	bcf	7,1	;volatile
  7812  0ACD  0008               	return
  7813  0ACE                     l388:	
  7814                           ;LCD.c: 116:     else
  7815                           
  7816                           
  7817                           ;LCD.c: 117:         RC1 = 1;
  7818  0ACE  1487               	bsf	7,1	;volatile
  7819  0ACF  0008               	return
  7820  0AD0                     __end_of_LCD_SegmentSelection:	
  7821                           
  7822                           	psect	text57
  7823  0D4F                     __ptext57:	
  7824 ;; *************** function _Buttons_Update *****************
  7825 ;; Defined at:
  7826 ;;		line 51 in file "Buttons.c"
  7827 ;; Parameters:    Size  Location     Type
  7828 ;;  buttons         1    wreg     PTR struct .
  7829 ;;		 -> main@buttons(4), 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;  buttons         1    6[COMMON] PTR struct .
  7832 ;;		 -> main@buttons(4), 
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  1    wreg      void 
  7835 ;; Registers used:
  7836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7842 ;;      Params:         0       0       0       0
  7843 ;;      Locals:         1       0       0       0
  7844 ;;      Temps:          0       0       0       0
  7845 ;;      Totals:         1       0       0       0
  7846 ;;Total ram usage:        1 bytes
  7847 ;; Hardware stack levels used:    1
  7848 ;; Hardware stack levels required when called:    2
  7849 ;; This function calls:
  7850 ;;		_Buttons_UpdateButton
  7851 ;; This function is called by:
  7852 ;;		_main
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           
  7857                           ;psect for function _Buttons_Update
  7858  0D4F                     _Buttons_Update:	
  7859                           
  7860                           ;incstack = 0
  7861                           ; Regs used in _Buttons_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7862                           ;Buttons_Update@buttons stored from wreg
  7863  0D4F  00F6               	movwf	Buttons_Update@buttons
  7864                           
  7865                           ;Buttons.c: 51: void Buttons_Update(Buttons *buttons);Buttons.c: 52: {;Buttons.c: 53:   
      +                            Buttons_UpdateButton(&buttons->left, RB2);
  7866  0D50  3000               	movlw	0
  7867  0D51  1283               	bcf	3,5	;RP0=0, select bank0
  7868  0D52  1303               	bcf	3,6	;RP1=0, select bank0
  7869  0D53  1906               	btfsc	6,2	;volatile
  7870  0D54  3001               	movlw	1
  7871  0D55  00F3               	movwf	Buttons_UpdateButton@nHeld
  7872  0D56  0876               	movf	Buttons_Update@buttons,w
  7873  0D57  158A  242F  158A   	fcall	_Buttons_UpdateButton
  7874                           
  7875                           ;Buttons.c: 54:     Buttons_UpdateButton(&buttons->right, RB3);
  7876  0D5A  3000               	movlw	0
  7877  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  7878  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  7879  0D5D  1986               	btfsc	6,3	;volatile
  7880  0D5E  3001               	movlw	1
  7881  0D5F  00F3               	movwf	Buttons_UpdateButton@nHeld
  7882  0D60  0876               	movf	Buttons_Update@buttons,w
  7883  0D61  3E01               	addlw	1
  7884  0D62  158A  242F  158A   	fcall	_Buttons_UpdateButton
  7885                           
  7886                           ;Buttons.c: 55:     Buttons_UpdateButton(&buttons->down, RB4);
  7887  0D65  3000               	movlw	0
  7888  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  7889  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  7890  0D68  1A06               	btfsc	6,4	;volatile
  7891  0D69  3001               	movlw	1
  7892  0D6A  00F3               	movwf	Buttons_UpdateButton@nHeld
  7893  0D6B  0876               	movf	Buttons_Update@buttons,w
  7894  0D6C  3E02               	addlw	2
  7895  0D6D  158A  242F  158A   	fcall	_Buttons_UpdateButton
  7896                           
  7897                           ;Buttons.c: 56:     Buttons_UpdateButton(&buttons->rotate, RB1);
  7898  0D70  3000               	movlw	0
  7899  0D71  1283               	bcf	3,5	;RP0=0, select bank0
  7900  0D72  1303               	bcf	3,6	;RP1=0, select bank0
  7901  0D73  1886               	btfsc	6,1	;volatile
  7902  0D74  3001               	movlw	1
  7903  0D75  00F3               	movwf	Buttons_UpdateButton@nHeld
  7904  0D76  0876               	movf	Buttons_Update@buttons,w
  7905  0D77  3E03               	addlw	3
  7906  0D78  158A  242F         	fcall	_Buttons_UpdateButton
  7907  0D7A  0008               	return
  7908  0D7B                     __end_of_Buttons_Update:	
  7909                           
  7910                           	psect	text58
  7911  0C2F                     __ptext58:	
  7912 ;; *************** function _Buttons_UpdateButton *****************
  7913 ;; Defined at:
  7914 ;;		line 26 in file "Buttons.c"
  7915 ;; Parameters:    Size  Location     Type
  7916 ;;  button          1    wreg     PTR struct .
  7917 ;;		 -> main@buttons(4), 
  7918 ;;  nHeld           1    3[COMMON] unsigned char 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;  button          1    5[COMMON] PTR struct .
  7921 ;;		 -> main@buttons(4), 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  1    wreg      void 
  7924 ;; Registers used:
  7925 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7931 ;;      Params:         1       0       0       0
  7932 ;;      Locals:         1       0       0       0
  7933 ;;      Temps:          1       0       0       0
  7934 ;;      Totals:         3       0       0       0
  7935 ;;Total ram usage:        3 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    1
  7938 ;; This function calls:
  7939 ;;		Nothing
  7940 ;; This function is called by:
  7941 ;;		_Buttons_Update
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           
  7946                           ;psect for function _Buttons_UpdateButton
  7947  0C2F                     _Buttons_UpdateButton:	
  7948                           
  7949                           ;incstack = 0
  7950                           ; Regs used in _Buttons_UpdateButton: [wreg-fsr0h+status,2+status,0]
  7951                           ;Buttons_UpdateButton@button stored from wreg
  7952  0C2F  00F5               	movwf	Buttons_UpdateButton@button
  7953                           
  7954                           ;Buttons.c: 26: static void Buttons_UpdateButton(Button *button, uint8_t nHeld);Buttons.
      +                          c: 27: {;Buttons.c: 28:     if (!nHeld)
  7955  0C30  0873               	movf	Buttons_UpdateButton@nHeld,w
  7956  0C31  1D03               	btfss	3,2
  7957  0C32  2C48               	goto	l2625
  7958                           
  7959                           ;Buttons.c: 29:     {;Buttons.c: 30:         button->pressed = !button->held;
  7960  0C33  0875               	movf	Buttons_UpdateButton@button,w
  7961  0C34  0084               	movwf	4
  7962  0C35  1003               	clrc
  7963  0C36  1383               	bcf	3,7	;select IRP bank0
  7964  0C37  1C80               	btfss	0,1
  7965  0C38  1403               	setc
  7966  0C39  3000               	movlw	0
  7967  0C3A  1803               	skipnc
  7968  0C3B  3001               	movlw	1
  7969  0C3C  00F4               	movwf	??_Buttons_UpdateButton
  7970  0C3D  0875               	movf	Buttons_UpdateButton@button,w
  7971  0C3E  0084               	movwf	4
  7972  0C3F  0800               	movf	0,w
  7973  0C40  0674               	xorwf	??_Buttons_UpdateButton,w
  7974  0C41  39FE               	andlw	-2
  7975  0C42  0674               	xorwf	??_Buttons_UpdateButton,w
  7976  0C43  0080               	movwf	0
  7977                           
  7978                           ;Buttons.c: 31:         button->held = 1;
  7979  0C44  0875               	movf	Buttons_UpdateButton@button,w
  7980  0C45  0084               	movwf	4
  7981  0C46  1480               	bsf	0,1
  7982                           
  7983                           ;Buttons.c: 32:     }
  7984  0C47  0008               	return
  7985  0C48                     l2625:	
  7986                           
  7987                           ;Buttons.c: 34:     {;Buttons.c: 35:         button->pressed = 0;
  7988  0C48  0875               	movf	Buttons_UpdateButton@button,w
  7989  0C49  0084               	movwf	4
  7990  0C4A  1383               	bcf	3,7	;select IRP bank0
  7991  0C4B  1000               	bcf	0,0
  7992                           
  7993                           ;Buttons.c: 36:         button->held = 0;
  7994  0C4C  0875               	movf	Buttons_UpdateButton@button,w
  7995  0C4D  0084               	movwf	4
  7996  0C4E  1080               	bcf	0,1
  7997  0C4F  0008               	return
  7998  0C50                     __end_of_Buttons_UpdateButton:	
  7999                           
  8000                           	psect	text59
  8001  0A95                     __ptext59:	
  8002 ;; *************** function _Buttons_Clear *****************
  8003 ;; Defined at:
  8004 ;;		line 46 in file "Buttons.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  buttons         1    wreg     PTR struct .
  8007 ;;		 -> main@buttons(4), 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  buttons         1    0[BANK0 ] PTR struct .
  8010 ;;		 -> main@buttons(4), 
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  1    wreg      void 
  8013 ;; Registers used:
  8014 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8020 ;;      Params:         0       0       0       0
  8021 ;;      Locals:         0       1       0       0
  8022 ;;      Temps:          0       0       0       0
  8023 ;;      Totals:         0       1       0       0
  8024 ;;Total ram usage:        1 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    2
  8027 ;; This function calls:
  8028 ;;		_memset
  8029 ;; This function is called by:
  8030 ;;		_main
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           
  8035                           ;psect for function _Buttons_Clear
  8036  0A95                     _Buttons_Clear:	
  8037                           
  8038                           ;incstack = 0
  8039                           ; Regs used in _Buttons_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8040                           ;Buttons_Clear@buttons stored from wreg
  8041  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  8042  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  8043  0A97  00A0               	movwf	Buttons_Clear@buttons
  8044                           
  8045                           ;Buttons.c: 46: void Buttons_Clear(Buttons *buttons);Buttons.c: 47: {;Buttons.c: 48:    
      +                           memset(buttons, 0, sizeof *buttons);
  8046  0A98  3000               	movlw	0
  8047  0A99  00F3               	movwf	memset@c
  8048  0A9A  00F4               	movwf	memset@c+1
  8049  0A9B  3004               	movlw	4
  8050  0A9C  00F5               	movwf	memset@n
  8051  0A9D  3000               	movlw	0
  8052  0A9E  00F6               	movwf	memset@n+1
  8053  0A9F  0820               	movf	Buttons_Clear@buttons,w
  8054  0AA0  158A  235C         	fcall	_memset
  8055  0AA2  0008               	return
  8056  0AA3                     __end_of_Buttons_Clear:	
  8057                           
  8058                           	psect	text60
  8059  0B5C                     __ptext60:	
  8060 ;; *************** function _memset *****************
  8061 ;; Defined at:
  8062 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\memset.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;  p1              1    wreg     PTR void 
  8065 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  8066 ;;  c               2    3[COMMON] int 
  8067 ;;  n               2    5[COMMON] unsigned int 
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;  p1              1    9[COMMON] PTR void 
  8070 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  8071 ;;  p               1    8[COMMON] PTR unsigned char 
  8072 ;;		 -> main@buttons(4), main@tetrisGame(63), 
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  1    wreg      PTR void 
  8075 ;; Registers used:
  8076 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8082 ;;      Params:         4       0       0       0
  8083 ;;      Locals:         2       0       0       0
  8084 ;;      Temps:          1       0       0       0
  8085 ;;      Totals:         7       0       0       0
  8086 ;;Total ram usage:        7 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    1
  8089 ;; This function calls:
  8090 ;;		Nothing
  8091 ;; This function is called by:
  8092 ;;		_Tetris_ResetGame
  8093 ;;		_Buttons_Clear
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           
  8098                           ;psect for function _memset
  8099  0B5C                     _memset:	
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  8103                           ;memset@p1 stored from wreg
  8104  0B5C  00F9               	movwf	memset@p1
  8105  0B5D  0879               	movf	memset@p1,w
  8106  0B5E  00F7               	movwf	??_memset
  8107  0B5F  0877               	movf	??_memset,w
  8108  0B60  00F8               	movwf	memset@p
  8109  0B61                     l3217:	
  8110  0B61  3001               	movlw	1
  8111  0B62  02F5               	subwf	memset@n,f
  8112  0B63  3000               	movlw	0
  8113  0B64  1C03               	skipc
  8114  0B65  03F6               	decf	memset@n+1,f
  8115  0B66  02F6               	subwf	memset@n+1,f
  8116  0B67  0A75               	incf	memset@n,w
  8117  0B68  1903               	btfsc	3,2
  8118  0B69  0A76               	incf	memset@n+1,w
  8119  0B6A  1903               	btfsc	3,2
  8120  0B6B  0008               	return
  8121  0B6C  0873               	movf	memset@c,w
  8122  0B6D  00F7               	movwf	??_memset
  8123  0B6E  0878               	movf	memset@p,w
  8124  0B6F  0084               	movwf	4
  8125  0B70  0877               	movf	??_memset,w
  8126  0B71  1383               	bcf	3,7	;select IRP bank0
  8127  0B72  0080               	movwf	0
  8128  0B73  3001               	movlw	1
  8129  0B74  00F7               	movwf	??_memset
  8130  0B75  0877               	movf	??_memset,w
  8131  0B76  07F8               	addwf	memset@p,f
  8132  0B77  2B61               	goto	l3217
  8133  0B78                     __end_of_memset:	
  8134                           
  8135                           	psect	text61
  8136  0C0E                     __ptext61:	
  8137 ;; *************** function _InterruptHandler *****************
  8138 ;; Defined at:
  8139 ;;		line 71 in file "main.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;		None
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, status,0
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8153 ;;      Params:         0       0       0       0
  8154 ;;      Locals:         0       0       0       0
  8155 ;;      Temps:          3       0       0       0
  8156 ;;      Totals:         3       0       0       0
  8157 ;;Total ram usage:        3 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		Interrupt level 1
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           
  8167                           ;psect for function _InterruptHandler
  8168  0C0E                     _InterruptHandler:	
  8169                           
  8170                           ;main.c: 73:     static uint8_t timerInterruptCounter = 0;;main.c: 75:     if (INTE && I
      +                          NTF)
  8171  0C0E  1A0B               	btfsc	11,4	;volatile
  8172  0C0F  1C8B               	btfss	11,1	;volatile
  8173  0C10  2C12               	goto	i1l84
  8174                           
  8175                           ;main.c: 76:     {;main.c: 77:         INTF = 0;
  8176  0C11  108B               	bcf	11,1	;volatile
  8177  0C12                     i1l84:	
  8178                           ;main.c: 79:     }
  8179                           
  8180                           
  8181                           ;main.c: 81:     if (TMR1IE && TMR1IF)
  8182  0C12  1683               	bsf	3,5	;RP0=1, select bank1
  8183  0C13  1303               	bcf	3,6	;RP1=0, select bank1
  8184  0C14  1C0C               	btfss	12,0	;volatile
  8185  0C15  2C28               	goto	i1l87
  8186  0C16  1283               	bcf	3,5	;RP0=0, select bank0
  8187  0C17  1303               	bcf	3,6	;RP1=0, select bank0
  8188  0C18  1C0C               	btfss	12,0	;volatile
  8189  0C19  2C28               	goto	i1l87
  8190                           
  8191                           ;main.c: 82:     {;main.c: 83:         TMR1IF = 0;
  8192  0C1A  100C               	bcf	12,0	;volatile
  8193                           
  8194                           ;main.c: 84:         ++timerInterruptCounter;
  8195  0C1B  3001               	movlw	1
  8196  0C1C  00F0               	movwf	??_InterruptHandler
  8197  0C1D  0870               	movf	??_InterruptHandler,w
  8198  0C1E  07FA               	addwf	InterruptHandler@timerInterruptCounter,f
  8199                           
  8200                           ;main.c: 85:         if (timerInterruptCounter >= timerPrescaler)
  8201  0C1F  1683               	bsf	3,5	;RP0=1, select bank1
  8202  0C20  1303               	bcf	3,6	;RP1=0, select bank1
  8203  0C21  0864               	movf	_timerPrescaler^(0+128),w
  8204  0C22  027A               	subwf	InterruptHandler@timerInterruptCounter,w
  8205  0C23  1C03               	skipc
  8206  0C24  2C28               	goto	i1l87
  8207                           
  8208                           ;main.c: 86:         {;main.c: 87:             updateReady = 1;
  8209  0C25  01E3               	clrf	_updateReady^(0+128)
  8210  0C26  0AE3               	incf	_updateReady^(0+128),f
  8211                           
  8212                           ;main.c: 88:             timerInterruptCounter = 0;
  8213  0C27  01FA               	clrf	InterruptHandler@timerInterruptCounter
  8214  0C28                     i1l87:	
  8215  0C28  0872               	movf	??_InterruptHandler+2,w
  8216  0C29  008A               	movwf	10
  8217  0C2A  0E71               	swapf	(??_InterruptHandler+1)^(0+4294967168),w
  8218  0C2B  0083               	movwf	3
  8219  0C2C  0EFE               	swapf	126,f
  8220  0C2D  0E7E               	swapf	126,w
  8221  0C2E  0009               	retfie
  8222  0C2F                     __end_of_InterruptHandler:	
  8223  007E                     btemp	set	126	;btemp
  8224  007E                     wtemp0	set	126
  8225                           
  8226                           	psect	intentry
  8227  0004                     __pintentry:	
  8228                           ;incstack = 0
  8229                           ; Regs used in _InterruptHandler: [wreg+status,2+status,0]
  8230                           
  8231  0004                     interrupt_function:	
  8232  007E                     saved_w	set	btemp
  8233  0004  00FE               	movwf	btemp
  8234  0005  0E03               	swapf	3,w
  8235  0006  00F1               	movwf	??_InterruptHandler+1
  8236  0007  080A               	movf	10,w
  8237  0008  00F2               	movwf	??_InterruptHandler+2
  8238  0009  158A  2C0E         	ljmp	_InterruptHandler


Data Sizes:
    Strings     0
    Constant    754
    Data        5
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     39      43
    BANK1            80     67      69
    BANK2            80      0       0

Pointer List with Targets:

    DrawTetris@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetris@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetrisGameColumn@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    main@tetrisGame.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    memset@p1	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    memset@p	PTR unsigned char  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    __itoee@addr	PTR eeprom void  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __eetoi@addr	PTR eeprom void  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __memcpyee@to	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __memcpyee@from	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[4]), __fttoee@data(COMMON[4]), __otoee@data(COMMON[4]), __ltoee@data(COMMON[4]), 
		 -> __mtoee@data(COMMON[3]), __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    __memcpyee@ptr	PTR const unsigned char  size(1) Largest target is 4
		 -> __fltoee@data(COMMON[4]), __fttoee@data(COMMON[4]), __otoee@data(COMMON[4]), __ltoee@data(COMMON[4]), 
		 -> __mtoee@data(COMMON[3]), __itoee@data(BANK0[2]), __ctoee@data(COMMON[1]), 

    __eecpymem@from	PTR eeprom unsigned char  size(1) Largest target is 2
		 -> uniqueSeed(EEDATA[2]), 

    __eecpymem@to	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    __eecpymem@cp	PTR volatile unsigned char  size(1) Largest target is 4
		 -> __eetofl@data(COMMON[4]), __eetoft@data(COMMON[4]), __eetoo@data(COMMON[4]), __eetol@data(COMMON[4]), 
		 -> __eetom@data(COMMON[3]), __eetoi@data(BANK0[2]), __eetoc@data(COMMON[1]), 

    DrawTetris@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    DrawTetrisGameColumn@tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    DrawTetrisGameColumn@tetrisGame	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Buttons_Update@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_Clear@buttons	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Buttons_UpdateButton@button	PTR struct . size(1) Largest target is 4
		 -> main@buttons(BANK1[4]), 

    Tetris_RotatePlayer@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RotatePlayer@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerRight@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerRight@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerLeft@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerLeft@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_MovePlayerDown@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_MovePlayerDown@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ClearFilledRows@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_UpdateGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdateGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetGame@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    sp__memset	PTR void  size(1) Largest target is 63
		 -> main@buttons(BANK1[4]), main@tetrisGame(BANK1[63]), 

    Tetris_ResetGame@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetUnit	PTR const struct . size(2) Largest target is 238
		 -> NULL(NULL[0]), Tetris_units(CODE[238]), 

    Tetris_ShiftTableDown@gameTable	PTR unsigned int  size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_ResetPlayer@playerUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ResetPlayer@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_SetPlayerUnit@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_SetPlayerUnit@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerUnitBitsAreValid@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerUnitBitsAreValid@player	PTR const struct . size(1) Largest target is 63
		 -> tetrisGame.player(BANK0[13]), main@tetrisGame(BANK1[63]), 

    Tetris_UpdatePlayerUnitBits@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_UpdatePlayerUnitBits@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_CountUnitBits@unitBits	PTR const unsigned int  size(2) Largest target is 238
		 -> tetrisGame.player(BANK0[13]), Tetris_units.bits(CODE[32]), Tetris_units(CODE[238]), main@tetrisGame(BANK1[63]), 

    Tetris_ApplyPlayerToTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_ApplyPlayerToTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_RemovePlayerFromTable@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_RemovePlayerFromTable@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingRightBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingRightBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTouchingLeftBound@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTouchingLeftBound@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerOverlapsEnvironment@game.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerOverlapsEnvironment@game	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    Tetris_PlayerTopmostY@player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    Tetris_PlayerTopmostY@player	PTR struct . size(1) Largest target is 63
		 -> main@tetrisGame(BANK1[63]), 

    sp__Tetris_GetRandomUnit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    S99$unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 

    tetrisGame.player.unit	PTR const struct . size(2) Largest target is 238
		 -> Tetris_units(CODE[238]), 


Critical Paths under _main in COMMON

    _Tetris_UpdateGame->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerDown->_Tetris_ApplyPlayerToTable
    _Tetris_GetRandomUnit->___awmod
    _rand->___lmul
    ___wmul->___awmod
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_ApplyPlayerToTable
    _Tetris_RotatePlayer->___lbmod
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ApplyPlayerToTable
    _Tetris_ResetGame->_memset
    _Tetris_ResetPlayer->_Tetris_SetPlayerUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerLeft->_Tetris_ApplyPlayerToTable
    _Tetris_RemovePlayerFromTable->_Tetris_PlayerTopmostY
    _Tetris_PlayerOverlapsEnvironment->_Tetris_PlayerTopmostY
    _Tetris_ApplyPlayerToTable->_Tetris_PlayerTopmostY
    _SetupRandomness->___eetoi
    _srand->___eetoi
    ___itoee->___eetoi
    ___eetoi->___eecpymem
    _LCD_TurnOn->_LCD_Write
    _LCD_SetZ->_LCD_Write
    _LCD_WriteData->_LCD_Write
    _LCD_SetY->_LCD_Write
    _LCD_SetX->_LCD_Write
    _LCD_BlockWhileBusy->_LCD_IsBusy
    _LCD_IsBusy->_LCD_ReadStatus
    _Buttons_Update->_Buttons_UpdateButton
    _Buttons_Clear->_memset

Critical Paths under _InterruptHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Tetris_UpdateGame
    _Tetris_UpdateGame->_Tetris_ResetPlayer
    _Tetris_MovePlayerDown->_Tetris_PlayerOverlapsEnvironment
    _Tetris_GetRandomUnit->___wmul
    _rand->___lmul
    ___wmul->___awmod
    ___awmod->_rand
    _Tetris_ClearFilledRows->_Tetris_ShiftTableDown
    _Tetris_RotatePlayer->_Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ResetPlayer
    _Tetris_ResetPlayer->_Tetris_GetRandomUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerRight->_Tetris_PlayerOverlapsEnvironment
    _Tetris_MovePlayerLeft->_Tetris_PlayerOverlapsEnvironment
    _ShowLogo->_DrawLogo
    _DrawLogo->_LCD_SetX
    _DrawLogo->_LCD_SetY
    _DrawLogo->_LCD_WriteData
    _SetupRandomness->___itoee
    _srand->___eetoi
    ___itoee->___eetoi
    _LCD_Reset->_LCD_SetX
    _LCD_Reset->_LCD_SetY
    _LCD_Reset->_LCD_SetZ
    _LCD_Clear->_LCD_SetX
    _LCD_Clear->_LCD_SetY
    _LCD_Clear->_LCD_WriteData
    _DrawTetris->_DrawTetrisGameColumn
    _DrawTetrisGameColumn->_LCD_SetX
    _DrawTetrisGameColumn->_LCD_SetY
    _DrawTetrisGameColumn->_LCD_WriteData

Critical Paths under _InterruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InterruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                68    68      0   32951
                                             38 BANK0      1     1      0
                                              0 BANK1     67    67      0
                      _Buttons_Clear
                     _Buttons_Update
                         _DrawTetris
                         _ResetTimer
                              _Setup
                           _ShowLogo
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerLeft
             _Tetris_MovePlayerRight
                   _Tetris_ResetGame
                _Tetris_RotatePlayer
                  _Tetris_UpdateGame
 ---------------------------------------------------------------------------------
 (1) _Tetris_UpdateGame                                    4     4      0    6256
                                             34 BANK0      4     4      0
          _Tetris_ApplyPlayerToTable
             _Tetris_ClearFilledRows
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerDown
   _Tetris_PlayerOverlapsEnvironment
                 _Tetris_ResetPlayer
         _Tetris_ScoreForRowsCleared
 ---------------------------------------------------------------------------------
 (2) _Tetris_ScoreForRowsCleared                           3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_MovePlayerDown                                2     2      0    1784
                                             12 BANK0      2     2      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_GetRandomUnit                                 2     2      0    1173
                                             27 BANK0      2     2      0
                            ___awmod
                             ___wmul
                               _rand
 ---------------------------------------------------------------------------------
 (3) _rand                                                 7     5      2     316
                                              8 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     316
                                              3 COMMON     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     244
                                             21 BANK0      6     2      4
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              8 COMMON     1     1      0
                                             15 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _Tetris_ClearFilledRows                               7     7      0     544
                                              2 BANK0      7     7      0
              _Tetris_ShiftTableDown
 ---------------------------------------------------------------------------------
 (3) _Tetris_ShiftTableDown                                9     8      1     353
                                              3 COMMON     7     6      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_RotatePlayer                                  8     8      0    3572
                                             12 BANK0      8     8      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
      _Tetris_PlayerUnitBitsAreValid
       _Tetris_RemovePlayerFromTable
        _Tetris_UpdatePlayerUnitBits
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              3 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerUnitBitsAreValid                        5     5      0     581
                                              5 BANK0      5     5      0
               _Tetris_CountUnitBits
 ---------------------------------------------------------------------------------
 (4) _Tetris_CountUnitBits                                12    10      2     452
                                              3 COMMON     7     5      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_ResetGame                                     3     1      2    2831
                                             34 BANK0      3     1      2
          _Tetris_ApplyPlayerToTable
               _Tetris_GetRandomUnit (ARG)
                 _Tetris_ResetPlayer
                             _memset
 ---------------------------------------------------------------------------------
 (2) _Tetris_ResetPlayer                                   5     3      2    1347
                                             29 BANK0      5     3      2
               _Tetris_GetRandomUnit (ARG)
               _Tetris_SetPlayerUnit
 ---------------------------------------------------------------------------------
 (3) _Tetris_SetPlayerUnit                                 3     1      2     971
                                              8 COMMON     2     0      2
                                             10 BANK0      1     1      0
        _Tetris_UpdatePlayerUnitBits
 ---------------------------------------------------------------------------------
 (5) _Tetris_UpdatePlayerUnitBits                         15    15      0     752
                                              3 COMMON     5     5      0
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerRight                               5     5      0    2008
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
    _Tetris_PlayerTouchingRightBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingRightBound                      6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerLeft                                5     5      0    2008
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
     _Tetris_PlayerTouchingLeftBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (3) _Tetris_RemovePlayerFromTable                        11    11      0     432
                                              6 COMMON     3     3      0
                                              0 BANK0      8     8      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingLeftBound                       6     6      0     123
                                              3 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerOverlapsEnvironment                    15    15      0     465
                                              6 COMMON     3     3      0
                                              0 BANK0     12    12      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (3) _Tetris_ApplyPlayerToTable                           12    12      0     665
                                              6 COMMON     4     4      0
                                              0 BANK0      8     8      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (4) _Tetris_PlayerTopmostY                                3     3      0     121
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ShowLogo                                             3     3      0    2495
                                             14 BANK0      3     3      0
                           _DrawLogo
 ---------------------------------------------------------------------------------
 (2) _DrawLogo                                            12    12      0    2495
                                              2 BANK0     12    12      0
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    7602
     _Buttons_SetupPortsAndInterrups
                          _LCD_Clear
                          _LCD_Reset
               _LCD_SegmentSelection
                     _LCD_SetupPorts
                         _LCD_TurnOn
                    _SetupOscillator
                    _SetupRandomness
                         _SetupTimer
 ---------------------------------------------------------------------------------
 (2) _SetupTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetupRandomness                                      0     0      0    3061
                            ___eetoi
                            ___itoee
                              _srand
 ---------------------------------------------------------------------------------
 (3) _srand                                                2     0      2      98
                                              5 BANK0      2     0      2
                            ___eetoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___itoee                                              5     3      2    1600
                                              5 BANK0      5     3      2
                            ___eetoi (ARG)
                         ___memcpyee
 ---------------------------------------------------------------------------------
 (4) ___memcpyee                                           5     3      2    1402
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___eetoi                                              7     5      2    1363
                                              8 COMMON     2     0      2
                                              0 BANK0      5     5      0
                         ___eecpymem
 ---------------------------------------------------------------------------------
 (4) ___eecpymem                                           5     3      2    1229
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _SetupOscillator                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_TurnOn                                           1     1      0     592
                                              0 BANK0      1     1      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_SetupPorts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1869
                           _LCD_SetX
                           _LCD_SetY
                           _LCD_SetZ
 ---------------------------------------------------------------------------------
 (3) _LCD_SetZ                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            3     3      0    2036
                                              2 BANK0      3     3      0
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _Buttons_SetupPortsAndInterrups                       0     0      0       0
            _Buttons_SetupInterrupts
                 _Buttons_SetupPortB
 ---------------------------------------------------------------------------------
 (3) _Buttons_SetupPortB                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Buttons_SetupInterrupts                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ResetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DrawTetris                                           7     7      0    3078
                                             16 BANK0      7     7      0
               _DrawTetrisGameColumn
 ---------------------------------------------------------------------------------
 (2) _DrawTetrisGameColumn                                14     9      5    2838
                                              2 BANK0     14     9      5
               _LCD_SegmentSelection
                           _LCD_SetX
                           _LCD_SetY
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (3) _LCD_WriteData                                        2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_SetY                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_SetX                                             2     2      0     623
                                              0 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            2     1      1     592
                                              8 COMMON     2     1      1
                 _LCD_BlockWhileBusy
 ---------------------------------------------------------------------------------
 (5) _LCD_BlockWhileBusy                                   0     0      0      92
                         _LCD_IsBusy
 ---------------------------------------------------------------------------------
 (6) _LCD_IsBusy                                           3     3      0      92
                                              5 COMMON     3     3      0
                     _LCD_ReadStatus
 ---------------------------------------------------------------------------------
 (7) _LCD_ReadStatus                                       2     2      0      23
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _LCD_SegmentSelection                                 1     1      0      44
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buttons_Update                                       1     1      0     689
                                              6 COMMON     1     1      0
               _Buttons_UpdateButton
 ---------------------------------------------------------------------------------
 (2) _Buttons_UpdateButton                                 3     2      1     568
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Buttons_Clear                                        1     1      0     636
                                              0 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     569
                                              3 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _InterruptHandler                                     3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buttons_Clear
     _memset
   _Buttons_Update
     _Buttons_UpdateButton
   _DrawTetris
     _DrawTetrisGameColumn
       _LCD_SegmentSelection
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
   _ResetTimer
   _Setup
     _Buttons_SetupPortsAndInterrups
       _Buttons_SetupInterrupts
       _Buttons_SetupPortB
     _LCD_Clear
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
     _LCD_Reset
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetZ
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
     _LCD_SegmentSelection
     _LCD_SetupPorts
     _LCD_TurnOn
       _LCD_Write
         _LCD_BlockWhileBusy
           _LCD_IsBusy
             _LCD_ReadStatus
     _SetupOscillator
     _SetupRandomness
       ___eetoi
         ___eecpymem
       ___itoee
         ___eetoi (ARG)
           ___eecpymem
         ___memcpyee (ARG)
       _srand
         ___eetoi (ARG)
           ___eecpymem
     _SetupTimer
   _ShowLogo
     _DrawLogo
       _LCD_SegmentSelection
       _LCD_SetX
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_SetY
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
       _LCD_WriteData
         _LCD_Write
           _LCD_BlockWhileBusy
             _LCD_IsBusy
               _LCD_ReadStatus
   _Tetris_GetRandomUnit
     ___awmod
       _rand (ARG)
         ___lmul
     ___wmul
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _Tetris_MovePlayerLeft
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingLeftBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_MovePlayerRight
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingRightBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_ResetGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_GetRandomUnit (ARG)
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_ResetPlayer (ARG)
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _memset (ARG)
   _Tetris_RotatePlayer
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerUnitBitsAreValid
       _Tetris_CountUnitBits
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
     _Tetris_UpdatePlayerUnitBits
     ___lbmod
   _Tetris_UpdateGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_ClearFilledRows
       _Tetris_ShiftTableDown
     _Tetris_GetRandomUnit
       ___awmod
         _rand (ARG)
           ___lmul
       ___wmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_MovePlayerDown
       _Tetris_ApplyPlayerToTable
         _Tetris_PlayerTopmostY
       _Tetris_PlayerOverlapsEnvironment
         _Tetris_PlayerTopmostY
       _Tetris_RemovePlayerFromTable
         _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_ResetPlayer
       _Tetris_GetRandomUnit (ARG)
         ___awmod
           _rand (ARG)
             ___lmul
         ___wmul
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _Tetris_SetPlayerUnit (ARG)
         _Tetris_UpdatePlayerUnitBits
     _Tetris_ScoreForRowsCleared

 _InterruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     43      45       5       86.3%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     27      2B       3       53.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      7B      10        0.0%
ABS                  0      0      7B       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       3       0        1.2%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 30 15:45:00 2019

                           _LCD_ReadStatus 0AD0                    __end_of_SetupRandomness 0BEF  
                              ?_LCD_IsBusy 0070                                          pc 0002  
                ??_Buttons_SetupInterrupts 0073                                __CFG_CP$OFF 0000  
                                       fsr 0004                        ___wmul@multiplicand 0037  
                              ?_LCD_TurnOn 0070                                        l435 05CD  
                                      l551 0CC5                                        l386 0AC7  
                                      l482 0D80                                        l387 0ACA  
                                      l388 0ACE                                        l494 0E79  
                                      l487 0D8D                                        l761 0CB3  
                                      l499 0E8D                                        _GIE 005F  
                                      _RB1 0031                                        _RB2 0032  
                                      _RC0 0038                                        _RB3 0033  
                                      _RC1 0039                                        _RB4 0034  
                                      _RC2 003A                                        _RD0 0040  
                                      _RC3 003B                                        _RD1 0041  
                             __CFG_CPD$OFF 0000                       LCD_ReadStatus@status 0074  
                                      fsr0 0004                                        indf 0000  
                             ___awmod@sign 0034                 DrawTetrisGameColumn@lcdRow 002F  
                  __end_of_SetupOscillator 0A41                 DrawTetrisGameColumn@tableY 002A  
                             __CFG_LVP$OFF 0000                     _Tetris_MovePlayerRight 06EE  
                                     l2121 0D88                                       l2043 0A41  
                                     l2203 0E4A                                       l2037 0AAF  
                                     l3005 0E88                                       l3101 0060  
                                     l3013 0F57                                       l2217 0696  
                                     l3105 006B                                       l3009 0F3F  
                                     l2227 06BA                                       l3035 0EFF  
                                     l3027 0EFA                                       l3133 0D0D  
                                     l3125 0D02                                       l2237 06C5  
                                     l2181 0EC1                                       l3109 0073  
                                     l2503 0BA8                                       l3039 0F1E  
                                     l3217 0B61                                       l3161 0416  
                                     l3153 040F                                       l3321 0675  
                                     l2337 0CBD                                       l3401 07EE  
                                     l2099 0B54                                       l2187 0EEC  
                                     l2523 0BC6                                       l2283 0F7F  
                                     l2611 0DFF                                       l3083 0037  
                                     l3235 0DD6                                       l3227 0DC9  
                                     l3261 05BF                                       l3253 05A3  
                                     l2517 0BB4                                       l3325 0684  
                                     l2613 0E03                                       l2605 0DDD  
                                     l3341 00BD                                       l3095 0044  
                                     l3087 003E                                       l2551 0CE2  
                                     l2543 0CDE                                       l3343 00C2  
                                     l2625 0C48                                       l3273 05FD  
                                     l2297 0FAF                                       l3097 0052  
                                     l3425 0CF0                                       l3267 05FC  
                                     l3355 0E15                                       l3187 048D  
                                     l3179 0483                                       l2555 0CE4  
                                     l2547 0CE0                                       l2733 075B  
                                     l2565 0CE8                                       l3373 07B8  
                                     l3279 060B                                       l2559 0CE6  
                                     l3391 07DB                                       l3383 07CC  
                                     l2497 0B96                                       l2753 0792  
                                     l3393 07E3                                       l3369 07A4  
                                     l2755 079A                                       l2747 077B  
                                     l2675 0C9C                                       l3387 07D4  
                                     l3379 07C4                                       l2791 0743  
                                     l2783 0722                                       l2943 04F2  
                                     l2769 0702                                       l2789 0739  
                                     l2973 056F                                       l2965 056C  
                                     l2959 0550                                       u1260 0B51  
                                     u2300 0560                                       u2320 057F  
                                     u2305 055B                                       u2325 057A  
                                     u2415 0F59                                       u2425 0F61  
                                     u1475 06B6                                       u2275 0503  
                                     u2605 041E                                       u2525 0047  
                                     u2615 0447                                       u2455 0F1F  
                                     u2545 0058                                       u1585 0CC6  
                                     u2555 0061                                       u1595 0CCD  
                                     u2645 0495                                       u2485 0FF2  
                                     u2655 04BE              ?_Tetris_RemovePlayerFromTable 0070  
                                     u2690 00F9                                       u2835 0E28  
                                     _PEIE 005E                                       u2845 0E2F  
                                     u2685 00E1               Tetris_ResetPlayer@playerUnit 003D  
                                     _INTE 005C                                       _INTF 0059  
                                     u2927 0B0D                                       u1985 0C9F  
                                     i1l84 0C12                                       i1l87 0C28  
                                     _TMR1 000E                                       _WPUB 0095  
                              main@buttons 00A0                               __CFG_WRT$OFF 0000  
               ?_Tetris_ApplyPlayerToTable 0070                                       _main 079E  
                                     _rand 0FBB                         __size_of_LCD_Clear 0025  
                                     btemp 007E                         __size_of_LCD_Reset 0017  
                                     start 000B              Tetris_ApplyPlayerToTable@game 0079  
                       __size_of_LCD_Write 001B                              __CFG_IESO$OFF 0000  
                   __size_of_Buttons_Clear 000E                     __end_of_LCD_ReadStatus 0AE0  
                            _LCD_WriteData 0A5B                              __CFG_MCLRE$ON 0000  
                             ___itoee@addr 0029                               ___itoee@data 0025  
                           _LCD_SetupPorts 0C50               __end_of_Tetris_CountUnitBits 0F37  
                         __end_of_LCD_SetX 0A7D                           __end_of_LCD_SetY 0A89  
                         __end_of_LCD_SetZ 0A95      __end_of_Tetris_PlayerUnitBitsAreValid 00FB  
   __size_of_Tetris_PlayerUnitBitsAreValid 0037              _Tetris_PlayerUnitBitsAreValid 00C4  
                                    ?_main 0070                     ??_Tetris_GetRandomUnit 003B  
                          __end_of___eetoi 0B2A                                      ?_rand 0028  
                                    _EEADR 010D                              __CFG_WDTE$OFF 0000  
                          __end_of___awmod 0078                            __end_of___lbmod 0CB9  
                                    _ANSEL 0188                            __end_of___itoee 0AC0  
                                    _IRCF0 047C                                      _IRCF1 047D  
                                    _IRCF2 047E                                      _PORTA 0005  
                                    _PORTB 0006                                      _PORTC 0007  
                                    _PORTD 0008                                      _TRISA 0085  
                                    _TRISB 0086                                      _TRISC 0087  
                                    _TRISD 0088                        ___lmul@multiplicand 0024  
                               _DrawTetris 0E09                             __CFG_FCMEN$OFF 0000  
                __size_of_Tetris_ResetGame 001F                                      _nRBPU 040F  
                                    _Setup 0B78                Tetris_PlayerTopmostY@player 0075  
                                    _randx 0047                                      _srand 0A48  
                      __size_of_LCD_IsBusy 000E           Tetris_PlayerTouchingRightBound@i 0078  
                           __CFG_BOREN$OFF 0000                       Tetris_ResetGame@game 0044  
                                    pclath 000A                              ___memcpyee@to 0077  
                                    status 0003                                      wtemp0 007E  
                      __size_of_LCD_TurnOn 000A          __end_of_Tetris_ApplyPlayerToTable 06EE  
             ??_Tetris_ScoreForRowsCleared 0073                             ?_LCD_WriteData 0070  
                          ?_LCD_ReadStatus 0070     __end_of_Buttons_SetupPortsAndInterrups 0A3B  
  __size_of_Buttons_SetupPortsAndInterrups 0006             _Buttons_SetupPortsAndInterrups 0A35  
                  __size_of_Buttons_Update 002C        __end_of_Tetris_UpdatePlayerUnitBits 058B  
              _Tetris_UpdatePlayerUnitBits 04F0                            __initialization 000D  
                         __end_of_DrawLogo 04F0                     __end_of_LCD_SetupPorts 0C73  
                             __end_of_main 07F3                               __end_of_rand 1000  
                         ?_SetupRandomness 0070                   Tetris_CountUnitBits@mask 0020  
                    Tetris_CountUnitBits@i 0024                      Tetris_CountUnitBits@j 0023  
                Buttons_UpdateButton@nHeld 0073                                     ??_main 0046  
                                   ??_rand 002A                          __end_of_LCD_Clear 0D24  
                  ?_Tetris_ClearFilledRows 0070                          __end_of_LCD_Reset 0B41  
                            _Buttons_Clear 0A95                       _Buttons_UpdateButton 0C2F  
                        __end_of_LCD_Write 0B5C                           __end_of_ShowLogo 0B15  
                                   ?_Setup 0070       Tetris_PlayerOverlapsEnvironment@game 0078  
                         ?_SetupOscillator 0070                    Tetris_ClearFilledRows@i 0028  
                                   _EEDATA 010C                                     _EECON1 018C  
                                   _EECON2 018D             __size_of_Tetris_MovePlayerLeft 0057  
           __size_of_Tetris_MovePlayerDown 0030                                     ?_srand 0025  
                                   _ANSELH 0189              __end_of_Tetris_MovePlayerLeft 079E  
            __end_of_Tetris_MovePlayerDown 0DD8                                     _INTEDG 040E  
           __size_of_Tetris_PlayerTopmostY 0012              __end_of_Tetris_PlayerTopmostY 0B02  
                                   _TMR1IE 0460                                     _TMR1IF 0060  
                                   _TMR1CS 0081                                     _TMR1ON 0080  
                               _ResetTimer 00FB             ??_Tetris_RemovePlayerFromTable 0020  
                           __CFG_PWRTE$OFF 0000                         _Tetris_ResetPlayer 0C73  
                          ?_LCD_SetupPorts 0070                                     ___lmul 0F37  
                                   ___wmul 0CB9                                  ??___eetoi 0020  
                                ??___awmod 0078                                  ??___lbmod 0074  
                                ??___itoee 0027                                     _memset 0B5C  
                          ___awmod@divisor 002F                                 _SetupTimer 0A66  
                      ?_Tetris_ResetPlayer 003D             __end_of_Tetris_ClearFilledRows 0E09  
                          ___awmod@counter 0033                             ?_Buttons_Clear 0070  
                    ?_Buttons_UpdateButton 0073              __size_of_LCD_SegmentSelection 0010  
           ?_Tetris_PlayerUnitBitsAreValid 0070               Tetris_UpdatePlayerUnitBits@i 0075  
             __end_of_DrawTetrisGameColumn 061A                                     saved_w 007E  
                              ?_DrawTetris 0070                                     srand@x 0025  
                           ___memcpyee@ptr 0076                                 ___eecpymem 0D7B  
                     ??_Tetris_ResetPlayer 003F                            ___lbmod@divisor 0073  
                     _Tetris_CountUnitBits 0EF6                    __end_of__initialization 0028  
                          ___lbmod@counter 0078                                  ?_LCD_SetX 0070  
                                ?_LCD_SetY 0070                                  ?_LCD_SetZ 0070  
                          ??_LCD_WriteData 0020              __size_of_Tetris_SetPlayerUnit 0010  
                               ___memcpyee 0E74                                  LCD_SetX@x 0021  
                                LCD_SetY@y 0021                                  LCD_SetZ@z 0021  
                           __pcstackCOMMON 0070             __size_of_Tetris_ShiftTableDown 0043  
                            __end_of_Setup 0B94                               ??_LCD_IsBusy 0075  
            __end_of_Tetris_ShiftTableDown 0FBB                               __pidataBANK0 0A2B  
                             __pidataBANK1 0003                         _Buttons_SetupPortB 07F3  
                            __end_of_srand 0A51                __size_of_LCD_BlockWhileBusy 0007  
                             ??_LCD_TurnOn 0020                  __size_of_InterruptHandler 0021  
                      ?_Buttons_SetupPortB 0070                    ?_Tetris_MovePlayerRight 0070  
 __end_of_Tetris_PlayerOverlapsEnvironment 0EF6  __size_of_Tetris_PlayerOverlapsEnvironment 0041  
       ??_Tetris_PlayerOverlapsEnvironment 0020          ?_Tetris_PlayerOverlapsEnvironment 0070  
         _Tetris_PlayerOverlapsEnvironment 0EB5                           _Tetris_ResetGame 0BEF  
                                  ??_Setup 007A                 Buttons_UpdateButton@button 0075  
                                ?_DrawLogo 0070                                    ??_srand 007A  
                               __pbssBANK1 00E3                         __end_of_LCD_IsBusy 0AB1  
                    ?_Tetris_CountUnitBits 0073                                 ??_LCD_SetX 0020  
                               ??_LCD_SetY 0020                                 ??_LCD_SetZ 0020  
              ??_Tetris_ApplyPlayerToTable 0020         __end_of_Tetris_ScoreForRowsCleared 0CFF  
               _Tetris_ScoreForRowsCleared 0CDC                                ?_ResetTimer 0070  
                       __end_of_LCD_TurnOn 0A5B                       ??_Buttons_SetupPortB 0073  
    InterruptHandler@timerInterruptCounter 007A                             _Buttons_Update 0D4F  
           Tetris_RotatePlayer@oldRotation 0032                                 __pmaintext 079E  
                                ?_ShowLogo 0070                        __size_of_DrawTetris 0035  
                                  ?___lmul 0020               __size_of_Tetris_RotatePlayer 0070  
                                  ?___wmul 0035                                 __pintentry 0004  
                                  ?_memset 0073                             ___lmul@product 0074  
                          ??_Buttons_Clear 007A                                ?_SetupTimer 0070  
                   ??_Buttons_UpdateButton 0074                                    _T1CKPS0 0084  
                                  _T1CKPS1 0085             __end_of_Tetris_MovePlayerRight 0747  
                   Tetris_MovePlayerLeft@i 002E                                 ??_DrawLogo 0022  
                               __stringtab 0100                                ?___eecpymem 0073  
                         ??_LCD_ReadStatus 0073                     __end_of_Buttons_Update 0D7B  
                 ?_Buttons_SetupInterrupts 0070                                ?___memcpyee 0073  
                            LCD_Write@data 0078                              LCD_Write@mode 0079  
                     _DrawTetrisGameColumn 058B                                 ??_ShowLogo 002E  
    __end_of_Tetris_playerStartingPosition 0314              _Tetris_playerStartingPosition 0312  
                        LCD_WriteData@data 0021                   Tetris_SetPlayerUnit@unit 0078  
                                  ___eetoi 0B15                            __size_of___lmul 0041  
                                  ___awmod 002B                                    ___lbmod 0C96  
                          __size_of___wmul 0023                                    ___itoee 0AB1  
          Tetris_PlayerTouchingLeftBound@i 0078                            __size_of_memset 001C  
                _Tetris_ApplyPlayerToTable 068A                                    __ptext1 0078  
                                  __ptext2 0CDC                                    __ptext3 0DA8  
                                  __ptext4 0D24                                    __ptext5 0FBB  
                                  __ptext6 0F37                                    __ptext7 0CB9  
                                  __ptext8 002B                                    __ptext9 0DD8  
            __size_of_Tetris_GetRandomUnit 002B       __size_of_Tetris_UpdatePlayerUnitBits 009B  
                         ___awmod@dividend 0031                        __size_of_ResetTimer 0005  
                        __end_of_logoImage 0312                                  _LCD_Clear 0CFF  
                                _LCD_Reset 0B2A                  Tetris_MovePlayerLeft@game 0030  
    Tetris_ScoreForRowsCleared@rowsCleared 0075                                  _LCD_Write 0B41  
                Tetris_MovePlayerDown@game 002D                     ??_Tetris_CountUnitBits 0075  
                     end_of_initialization 0028          Tetris_ClearFilledRows@rowsCleared 0026  
                                  memset@c 0073                                    memset@n 0075  
                                  memset@p 0078                        __size_of_SetupTimer 000B  
                     DrawTetris@tetrisGame 0031                           ??_LCD_SetupPorts 0073  
                          ?_Buttons_Update 0070                             main@tetrisGame 00A4  
                         _Tetris_unitPivot 0314                      ?_DrawTetrisGameColumn 0022  
                Tetris_ShiftTableDown@upto 0073                            ___memcpyee@from 0073  
                          ___memcpyee@size 0074                               __pstringtext 0100  
        Tetris_UpdatePlayerUnitBits@player 0077                        __size_of___eecpymem 002D  
                         _InterruptHandler 0C0E                                  DrawLogo@x 002C  
                                DrawLogo@y 002A      Tetris_PlayerTouchingRightBound@player 0077  
                 __size_of_SetupRandomness 001F                Tetris_MovePlayerRight@i_475 002F  
                         ___lbmod@dividend 0077                               ??_DrawTetris 0030  
                               ?_LCD_Clear 0070                        __size_of___memcpyee 0041  
                     Buttons_Clear@buttons 0020                                 ?_LCD_Reset 0070  
                               ?_LCD_Write 0078              Tetris_RemovePlayerFromTable@i 0078  
                    Tetris_UpdateGame@game 0045                                ___lbmod@rem 0079  
          __end_of_Buttons_SetupInterrupts 0A35                                 _uniqueSeed 0001  
                    _Tetris_MovePlayerLeft 0747                      _Tetris_MovePlayerDown 0DA8  
                 __size_of_SetupOscillator 0006                                 LCD_Clear@x 0024  
                               LCD_Clear@y 0023               __end_of_LCD_SegmentSelection 0AD0  
          ??_Tetris_PlayerUnitBitsAreValid 0025                      _Tetris_PlayerTopmostY 0AF0  
                        __size_of_LCD_SetX 000C                          __size_of_LCD_SetY 000C  
                        __size_of_LCD_SetZ 000C                   __end_of_Tetris_ResetGame 0C0E  
                       __end_of_DrawTetris 0E3E                             __end_of___lmul 0F78  
                           __end_of___wmul 0CDC                 Tetris_ResetGame@playerUnit 0042  
                           __end_of_memset 0B78               __end_of_Tetris_SetPlayerUnit 0AF0  
   __end_of_Tetris_PlayerTouchingLeftBound 0BB2    __size_of_Tetris_PlayerTouchingLeftBound 001E  
           _Tetris_PlayerTouchingLeftBound 0B94                        start_initialization 000D  
      Tetris_PlayerUnitBitsAreValid@player 0029                        _Tetris_RotatePlayer 061A  
                        __size_of_DrawLogo 00EC                __size_of_Tetris_ResetPlayer 0023  
                             ??_ResetTimer 0073                ?_Tetris_ScoreForRowsCleared 0070  
                 __CFG_FOSC$INTRC_NOCLKOUT 0000                     ??_DrawTetrisGameColumn 0027  
                    __end_of_LCD_WriteData 0A66                 __end_of_LCD_BlockWhileBusy 0A48  
                     ?_Tetris_RotatePlayer 0070                                   ??___lmul 0073  
                                 ??___wmul 0079           Tetris_RemovePlayerFromTable@game 0077  
                              __pdataBANK0 0047                                __pdataBANK1 00E4  
                        __size_of_ShowLogo 0013                      _Tetris_ShiftTableDown 0F78  
                                 ??_memset 0077                               ??_SetupTimer 0073  
                              __pbssEEDATA 0000                                __pbssCOMMON 007A  
                                ___latbits 0001                              __pcstackBANK0 0020  
                            __pcstackBANK1 00A0                         __end_of_ResetTimer 0100  
                              ??_LCD_Clear 0022                          _Tetris_UpdateGame 0078  
                              ??_LCD_Reset 007A         __size_of_Tetris_ApplyPlayerToTable 0064  
             Tetris_UpdateGame@rowsCleared 0044                                ??_LCD_Write 0079  
                        ??_SetupRandomness 007A                         ?_Tetris_UpdateGame 0070  
                             ??___eecpymem 0075                     ?_Tetris_MovePlayerLeft 0070  
                   ?_Tetris_MovePlayerDown 0070                DrawTetrisGameColumn@gameRow 002B  
                   ?_Tetris_PlayerTopmostY 0070                         __end_of_SetupTimer 0A71  
                      ??_Tetris_UpdateGame 0042                __size_of_Buttons_SetupPortB 000D  
                             ??___memcpyee 0075                      ??_Tetris_RotatePlayer 002C  
                     __end_of_Tetris_units 0404                   ??_Tetris_ClearFilledRows 0022  
             ?_Tetris_UpdatePlayerUnitBits 0070                                   ?___eetoi 0078  
                        ??_SetupOscillator 0073                                   ?___awmod 002F  
                                 ?___lbmod 0073                                   ?___itoee 0025  
           Tetris_ShiftTableDown@gameTable 0020                         __end_of___eecpymem 0DA8  
                                _highscore 0000                      __end_of_Buttons_Clear 0AA3  
         __size_of_Buttons_SetupInterrupts 0006                   __end_of_Tetris_unitPivot 0316  
            __size_of_Buttons_UpdateButton 0021                       _LCD_SegmentSelection 0AC0  
                __end_of_Tetris_UpdateGame 00C4                             __size_of_Setup 001C  
           Tetris_ApplyPlayerToTable@i_326 0078                         __end_of___memcpyee 0EB5  
                      DrawTetris@rightMask 0034                           ??_Buttons_Update 0076  
                           __size_of_srand 0009                                  _logoImage 0112  
                           _timerPrescaler 00E4             Tetris_ApplyPlayerToTable@start 0076  
                        interrupt_function 0004                                   _LCD_SetX 0A71  
                                 _LCD_SetY 0A7D                   __end_of_InterruptHandler 0C2F  
                                 _LCD_SetZ 0A89                             ___wmul@product 0039  
                  Tetris_MovePlayerRight@i 002E               __end_of_Tetris_GetRandomUnit 0D4F  
           DrawTetrisGameColumn@tetrisGame 0029                       _Tetris_SetPlayerUnit 0AE0  
                   Tetris_ShiftTableDown@i 0021                     ?_Tetris_ShiftTableDown 0073  
            ??_Tetris_UpdatePlayerUnitBits 0020                      DrawTetrisGameColumn@i 002D  
                    DrawTetrisGameColumn@x 0022                      DrawTetrisGameColumn@y 002E  
               Tetris_CountUnitBits@result 0022                                __stringbase 0112  
                        ___wmul@multiplier 0035                      ?_LCD_SegmentSelection 0070  
                            DrawLogo@x_707 002D                              DrawLogo@y_708 002B  
                    Buttons_Update@buttons 0076        __size_of_Tetris_ScoreForRowsCleared 0023  
             Tetris_CountUnitBits@unitBits 0073                                   _DrawLogo 0404  
                        ___lmul@multiplier 0020          Tetris_PlayerOverlapsEnvironment@i 0077  
  __end_of_Tetris_PlayerTouchingRightBound 0BD0   __size_of_Tetris_PlayerTouchingRightBound 001E  
        ??_Tetris_PlayerTouchingRightBound 0073           ?_Tetris_PlayerTouchingRightBound 0070  
          _Tetris_PlayerTouchingRightBound 0BB2              __size_of_Tetris_CountUnitBits 0041  
                         LCD_IsBusy@status 0077                                 _EECON1bits 018C  
                    ?_Tetris_SetPlayerUnit 0078                                   _ShowLogo 0B02  
                        ?_Tetris_ResetGame 0042                 Tetris_SetPlayerUnit@player 002A  
          __size_of_Tetris_ClearFilledRows 0031                    __size_of_LCD_ReadStatus 0010  
                 ??_Tetris_MovePlayerRight 002C                         ??_Tetris_ResetGame 007A  
                         __size_of___eetoi 0015                           __size_of___awmod 004D  
                         __size_of___lbmod 0023                           __size_of___itoee 000F  
        Tetris_RemovePlayerFromTable@start 0076                         __end_of__stringtab 0112  
               __size_of_Tetris_UpdateGame 004C           ??_Buttons_SetupPortsAndInterrups 0073  
          ?_Buttons_SetupPortsAndInterrups 0070                         DrawTetris@leftMask 0032  
                                 __ptext10 0F78                                   __ptext11 061A  
                                 __ptext20 0BB2                                   __ptext12 0C96  
                                 __ptext21 0747                                   __ptext13 00C4  
                                 __ptext30 0A66                                   __ptext22 0E3E  
                                 __ptext14 0EF6                                   __ptext31 0BD0  
                                 __ptext23 0B94                                   __ptext15 0BEF  
                                 __ptext40 0B2A                                   __ptext32 0A48  
                                 __ptext24 0EB5                                   __ptext16 0C73  
                                 __ptext41 0A89                                   __ptext33 0AB1  
                                 __ptext25 068A                                   __ptext17 0AE0  
                                 __ptext50 0A7D                                   __ptext42 0CFF  
                                 __ptext34 0E74                                   __ptext26 0AF0  
                                 __ptext18 04F0                                   __ptext51 0A71  
                                 __ptext43 0A35                                   __ptext35 0B15  
                                 __ptext27 0B02                                   __ptext19 06EE  
                                 __ptext60 0B5C                                   __ptext52 0B41  
                                 __ptext44 07F3                                   __ptext36 0D7B  
                                 __ptext28 0404                                   __ptext61 0C0E  
                                 __ptext53 0A41                                   __ptext45 0A2F  
                                 __ptext37 0A3B                                   __ptext29 0B78  
                                 __ptext54 0AA3                                   __ptext46 00FB  
                                 __ptext38 0A51                                   __ptext55 0AD0  
                                 __ptext47 0E09                                   __ptext39 0C50  
                                 __ptext56 0AC0                                   __ptext48 058B  
                                 __ptext57 0D4F                                   __ptext49 0A5B  
                                 __ptext58 0C2F                                   __ptext59 0A95  
                        __CFG_BOR4V$BOR40V 0000              DrawTetrisGameColumn@rightMask 0023  
     Tetris_PlayerTouchingLeftBound@player 0077           ??_Tetris_PlayerTouchingLeftBound 0073  
          ?_Tetris_PlayerTouchingLeftBound 0070                              __size_of_main 0055  
                            __size_of_rand 0045                    Tetris_RotatePlayer@game 0033  
                               _LCD_IsBusy 0AA3                 Tetris_MovePlayerLeft@i_461 002F  
          Tetris_ClearFilledRows@gameTable 0027                    __size_of_LCD_SetupPorts 0023  
                               _LCD_TurnOn 0A51                    _Buttons_SetupInterrupts 0A2F  
                   ??_LCD_SegmentSelection 0073                            _SetupRandomness 0BD0  
                          ___eecpymem@from 0073                            ___eecpymem@size 0074  
                               _INTCONbits 000B                       _Tetris_GetRandomUnit 0D24  
                       _LCD_BlockWhileBusy 0A41                    ??_Tetris_MovePlayerLeft 002C  
                  ??_Tetris_MovePlayerDown 002C                     _Tetris_ClearFilledRows 0DD8  
                                 memset@p1 0079                               _Tetris_units 0316  
             DrawTetrisGameColumn@leftMask 0025               LCD_SegmentSelection@segments 0073  
                  ??_Tetris_PlayerTopmostY 0073                 __end_of_Tetris_ResetPlayer 0C96  
                 Tetris_ResetPlayer@player 0041                                   intlevel1 0000  
                      ?_LCD_BlockWhileBusy 0070                            _SetupOscillator 0A3B  
                   ??_Tetris_SetPlayerUnit 007A                                  stringcode 010A  
    Tetris_PlayerOverlapsEnvironment@start 0076              __size_of_DrawTetrisGameColumn 008F  
         Tetris_UpdatePlayerUnitBits@i_346 0073           Tetris_UpdatePlayerUnitBits@i_347 0074  
                           _LCD_IsBusy$598 0076            __size_of_Tetris_MovePlayerRight 0059  
                     ??_LCD_BlockWhileBusy 0078           Tetris_UpdatePlayerUnitBits@shift 0076  
               Tetris_MovePlayerRight@game 0030                      ?_Tetris_GetRandomUnit 002C  
                              DrawTetris@x 0036                                   stringtab 0100  
                   __size_of_LCD_WriteData 000B       __end_of_Tetris_RemovePlayerFromTable 0E74  
    __size_of_Tetris_RemovePlayerFromTable 0036               _Tetris_RemovePlayerFromTable 0E3E  
                            ___eecpymem@cp 0076                              ___eecpymem@to 0077  
               __end_of_Buttons_SetupPortB 0800                                 _STATUSbits 0003  
              __end_of_Tetris_RotatePlayer 068A                          ?_InterruptHandler 0070  
             __end_of_Buttons_UpdateButton 0C50                 Tetris_ApplyPlayerToTable@i 0077  
                  ??_Tetris_ShiftTableDown 0074                         ??_InterruptHandler 0070  
                              _updateReady 00E3                               ___eetoi@addr 0022  
                             ___eetoi@data 0023  
