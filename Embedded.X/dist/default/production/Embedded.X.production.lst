

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Apr 26 22:33:09 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F884
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.05
    35                           ; Generated 20/12/2018 GMT
    36                           ; 
    37                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F884 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224                           
   225                           	psect	idataBANK0
   226  03C2                     __pidataBANK0:	
   227                           
   228                           ;initializer for _randx
   229  03C2  3401               	retlw	1
   230  03C3  3400               	retlw	0
   231  03C4  3400               	retlw	0
   232  03C5  3400               	retlw	0
   233                           
   234                           	psect	strings
   235  0002                     __pstrings:	
   236  0002                     stringtab:	
   237  0002                     __stringtab:	
   238                           
   239                           ;	String table - string pointers are 1 byte each
   240  0002  1BFF               	btfsc	btemp+1,7
   241  0003  280C               	ljmp	stringcode
   242  0004  1383               	bcf	3,7
   243  0005  187F               	btfsc	btemp+1,0
   244  0006  1783               	bsf	3,7
   245  0007  0800               	movf	0,w
   246  0008  0A84               	incf	4,f
   247  0009  1903               	skipnz
   248  000A  0AFF               	incf	btemp+1,f
   249  000B  0008               	return
   250  000C                     stringcode:	
   251  000C                     stringdir:	
   252  000C  3000               	movlw	high stringdir
   253  000D  008A               	movwf	10
   254  000E  0804               	movf	4,w
   255  000F  0A84               	incf	4,f
   256  0010  0782               	addwf	2,f
   257  0011                     __stringbase:	
   258  0011  3400               	retlw	0
   259  0012                     __end_of__stringtab:	
   260  0012                     _Tetris_playerStartingPosition:	
   261  0012  3408               	retlw	8
   262  0013  3402               	retlw	2
   263  0014                     __end_of_Tetris_playerStartingPosition:	
   264  0014                     _Tetris_unitPivot:	
   265  0014  3403               	retlw	3
   266  0015  3402               	retlw	2
   267  0016                     __end_of_Tetris_unitPivot:	
   268  0016                     _Tetris_units:	
   269  0016  3402               	retlw	2
   270  0017  3410               	retlw	16
   271  0018  3400               	retlw	0
   272  0019  3410               	retlw	16
   273  001A  3400               	retlw	0
   274  001B  3410               	retlw	16
   275  001C  3400               	retlw	0
   276  001D  3410               	retlw	16
   277  001E  3400               	retlw	0
   278  001F  3400               	retlw	0
   279  0020  3400               	retlw	0
   280  0021  3400               	retlw	0
   281  0022  3400               	retlw	0
   282  0023  343C               	retlw	60
   283  0024  3400               	retlw	0
   284  0025  3400               	retlw	0
   285  0026  3400               	retlw	0
   286  0027  3400               	retlw	0
   287  0028  3400               	retlw	0
   288  0029  3400               	retlw	0
   289  002A  3400               	retlw	0
   290  002B  3400               	retlw	0
   291  002C  3400               	retlw	0
   292  002D  3400               	retlw	0
   293  002E  3400               	retlw	0
   294  002F  3400               	retlw	0
   295  0030  3400               	retlw	0
   296  0031  3400               	retlw	0
   297  0032  3400               	retlw	0
   298  0033  3400               	retlw	0
   299  0034  3400               	retlw	0
   300  0035  3400               	retlw	0
   301  0036  3400               	retlw	0
   302  0037  3401               	retlw	1
   303  0038  3400               	retlw	0
   304  0039  3400               	retlw	0
   305  003A  3418               	retlw	24
   306  003B  3400               	retlw	0
   307  003C  3418               	retlw	24
   308  003D  3400               	retlw	0
   309  003E  3400               	retlw	0
   310  003F  3400               	retlw	0
   311  0040  3400               	retlw	0
   312  0041  3400               	retlw	0
   313  0042  3400               	retlw	0
   314  0043  3400               	retlw	0
   315  0044  3400               	retlw	0
   316  0045  3400               	retlw	0
   317  0046  3400               	retlw	0
   318  0047  3400               	retlw	0
   319  0048  3400               	retlw	0
   320  0049  3400               	retlw	0
   321  004A  3400               	retlw	0
   322  004B  3400               	retlw	0
   323  004C  3400               	retlw	0
   324  004D  3400               	retlw	0
   325  004E  3400               	retlw	0
   326  004F  3400               	retlw	0
   327  0050  3400               	retlw	0
   328  0051  3400               	retlw	0
   329  0052  3400               	retlw	0
   330  0053  3400               	retlw	0
   331  0054  3400               	retlw	0
   332  0055  3400               	retlw	0
   333  0056  3400               	retlw	0
   334  0057  3400               	retlw	0
   335  0058  3404               	retlw	4
   336  0059  3400               	retlw	0
   337  005A  3400               	retlw	0
   338  005B  3410               	retlw	16
   339  005C  3400               	retlw	0
   340  005D  3438               	retlw	56
   341  005E  3400               	retlw	0
   342  005F  3400               	retlw	0
   343  0060  3400               	retlw	0
   344  0061  3400               	retlw	0
   345  0062  3400               	retlw	0
   346  0063  3410               	retlw	16
   347  0064  3400               	retlw	0
   348  0065  3418               	retlw	24
   349  0066  3400               	retlw	0
   350  0067  3410               	retlw	16
   351  0068  3400               	retlw	0
   352  0069  3400               	retlw	0
   353  006A  3400               	retlw	0
   354  006B  3400               	retlw	0
   355  006C  3400               	retlw	0
   356  006D  3438               	retlw	56
   357  006E  3400               	retlw	0
   358  006F  3410               	retlw	16
   359  0070  3400               	retlw	0
   360  0071  3400               	retlw	0
   361  0072  3400               	retlw	0
   362  0073  3410               	retlw	16
   363  0074  3400               	retlw	0
   364  0075  3430               	retlw	48
   365  0076  3400               	retlw	0
   366  0077  3410               	retlw	16
   367  0078  3400               	retlw	0
   368  0079                     __end_of_Tetris_units:	
   369                           
   370                           	psect	cinit
   371  07EE                     start_initialization:	
   372                           ; #config settings
   373                           
   374  07EE                     __initialization:	
   375                           
   376                           ; Initialize objects allocated to BANK0
   377  07EE  118A  23C2  118A   	fcall	__pidataBANK0	;fetch initializer
   378  07F1  00B6               	movwf	__pdataBANK0& (0+127)
   379  07F2  118A  23C3  118A   	fcall	__pidataBANK0+1	;fetch initializer
   380  07F5  00B7               	movwf	(__pdataBANK0+1)& (0+127)
   381  07F6  118A  23C4  118A   	fcall	__pidataBANK0+2	;fetch initializer
   382  07F9  00B8               	movwf	(__pdataBANK0+2)& (0+127)
   383  07FA  118A  23C5         	fcall	__pidataBANK0+3	;fetch initializer
   384  07FC  00B9               	movwf	(__pdataBANK0+3)& (0+127)
   385  07FD                     end_of_initialization:	
   386                           ;End of C runtime variable initialization code
   387                           
   388  07FD                     __end_of__initialization:	
   389  07FD  0183               	clrf	3
   390  07FE  118A  2BF6         	ljmp	_main	;jump to C main() function
   391                           
   392                           	psect	dataBANK0
   393  0036                     __pdataBANK0:	
   394  0036                     _randx:	
   395  0036                     	ds	4
   396                           
   397                           	psect	cstackBANK1
   398  00A0                     __pcstackBANK1:	
   399  00A0                     main@game:	
   400                           
   401                           ; 78 bytes @ 0x0
   402  00A0                     	ds	78
   403                           
   404                           	psect	cstackCOMMON
   405  0070                     __pcstackCOMMON:	
   406  0070                     ?_Tetris_GetRandomUnit:	
   407  0070                     ?_Tetris_MovePlayerLeft:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     ?_Tetris_RotatePlayer:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     ?_memset:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0070                     ?_main:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_Tetris_PlayerTopmostY:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ??_Tetris_PlayerTopmostY:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_Tetris_PlayerOverlapsEnvironment:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_Tetris_PlayerTouchingLeftBound:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ??_Tetris_PlayerTouchingLeftBound:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_Tetris_RemovePlayerFromTable:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_Tetris_ApplyPlayerToTable:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ?_Tetris_CountUnitBits:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     ?_Tetris_UpdatePlayerUnitBits:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0070                     ??_Tetris_UpdatePlayerUnitBits:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0070                     ?_Tetris_PlayerUnitBitsAreValid:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0070                     ?___lbmod:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0070                     ?___lmul:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0070                     ___lbmod@divisor:	
   459                           ; 4 bytes @ 0x0
   460                           
   461  0070                     Tetris_CountUnitBits@unitBits:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0070                     memset@c:	
   465                           ; 2 bytes @ 0x0
   466                           
   467  0070                     ___lmul@multiplier:	
   468                           ; 2 bytes @ 0x0
   469                           
   470                           
   471                           ; 4 bytes @ 0x0
   472  0070                     	ds	1
   473  0071                     ??___lbmod:	
   474                           
   475                           ; 1 bytes @ 0x1
   476  0071                     	ds	1
   477  0072                     ??_Tetris_CountUnitBits:	
   478  0072                     Tetris_PlayerTopmostY@player:	
   479                           ; 1 bytes @ 0x2
   480                           
   481  0072                     memset@n:	
   482                           ; 1 bytes @ 0x2
   483                           
   484                           
   485                           ; 2 bytes @ 0x2
   486  0072                     	ds	1
   487  0073                     ??_Tetris_RemovePlayerFromTable:	
   488  0073                     ??_Tetris_ApplyPlayerToTable:	
   489                           ; 1 bytes @ 0x3
   490                           
   491  0073                     Tetris_PlayerOverlapsEnvironment@start:	
   492                           ; 1 bytes @ 0x3
   493                           
   494                           
   495                           ; 1 bytes @ 0x3
   496  0073                     	ds	1
   497  0074                     ??_memset:	
   498  0074                     Tetris_PlayerOverlapsEnvironment@game:	
   499                           ; 1 bytes @ 0x4
   500                           
   501  0074                     Tetris_PlayerTouchingLeftBound@player:	
   502                           ; 1 bytes @ 0x4
   503                           
   504  0074                     ___lbmod@dividend:	
   505                           ; 1 bytes @ 0x4
   506                           
   507  0074                     ___lmul@multiplicand:	
   508                           ; 1 bytes @ 0x4
   509                           
   510                           
   511                           ; 4 bytes @ 0x4
   512  0074                     	ds	1
   513  0075                     Tetris_PlayerOverlapsEnvironment@i:	
   514  0075                     Tetris_PlayerTouchingLeftBound@i:	
   515                           ; 1 bytes @ 0x5
   516                           
   517  0075                     ___lbmod@counter:	
   518                           ; 1 bytes @ 0x5
   519                           
   520  0075                     memset@p1:	
   521                           ; 1 bytes @ 0x5
   522                           
   523                           
   524                           ; 1 bytes @ 0x5
   525  0075                     	ds	1
   526  0076                     ___lbmod@rem:	
   527  0076                     memset@p:	
   528                           ; 1 bytes @ 0x6
   529                           
   530                           
   531                           ; 1 bytes @ 0x6
   532  0076                     	ds	1
   533  0077                     Tetris_UpdatePlayerUnitBits@i_197:	
   534  0077                     Tetris_CountUnitBits@mask:	
   535                           ; 1 bytes @ 0x7
   536                           
   537                           
   538                           ; 2 bytes @ 0x7
   539  0077                     	ds	1
   540  0078                     ??___lmul:	
   541  0078                     Tetris_UpdatePlayerUnitBits@i_198:	
   542                           ; 1 bytes @ 0x8
   543                           
   544                           
   545                           ; 1 bytes @ 0x8
   546  0078                     	ds	1
   547  0079                     Tetris_CountUnitBits@result:	
   548  0079                     Tetris_UpdatePlayerUnitBits@i:	
   549                           ; 1 bytes @ 0x9
   550                           
   551  0079                     ___lmul@product:	
   552                           ; 1 bytes @ 0x9
   553                           
   554                           
   555                           ; 4 bytes @ 0x9
   556  0079                     	ds	1
   557  007A                     Tetris_CountUnitBits@j:	
   558  007A                     Tetris_UpdatePlayerUnitBits@shift:	
   559                           ; 1 bytes @ 0xA
   560                           
   561                           
   562                           ; 1 bytes @ 0xA
   563  007A                     	ds	1
   564  007B                     Tetris_RemovePlayerFromTable@start:	
   565  007B                     Tetris_ApplyPlayerToTable@start:	
   566                           ; 1 bytes @ 0xB
   567                           
   568  007B                     Tetris_CountUnitBits@i:	
   569                           ; 1 bytes @ 0xB
   570                           
   571  007B                     Tetris_UpdatePlayerUnitBits@player:	
   572                           ; 1 bytes @ 0xB
   573                           
   574                           
   575                           ; 1 bytes @ 0xB
   576  007B                     	ds	1
   577  007C                     ?_Tetris_SetPlayerUnit:	
   578  007C                     Tetris_RemovePlayerFromTable@game:	
   579                           ; 1 bytes @ 0xC
   580                           
   581  007C                     Tetris_ApplyPlayerToTable@i:	
   582                           ; 1 bytes @ 0xC
   583                           
   584  007C                     Tetris_PlayerUnitBitsAreValid@player:	
   585                           ; 1 bytes @ 0xC
   586                           
   587  007C                     Tetris_SetPlayerUnit@unit:	
   588                           ; 1 bytes @ 0xC
   589                           
   590                           
   591                           ; 1 bytes @ 0xC
   592  007C                     	ds	1
   593  007D                     ??_Tetris_SetPlayerUnit:	
   594  007D                     ??___awmod:	
   595                           ; 1 bytes @ 0xD
   596                           
   597  007D                     Tetris_RemovePlayerFromTable@i:	
   598                           ; 1 bytes @ 0xD
   599                           
   600  007D                     Tetris_ApplyPlayerToTable@game:	
   601                           ; 1 bytes @ 0xD
   602                           
   603                           
   604                           ; 1 bytes @ 0xD
   605  007D                     	ds	1
   606                           
   607                           	psect	cstackBANK0
   608  0020                     __pcstackBANK0:	
   609  0020                     ??_Tetris_PlayerOverlapsEnvironment:	
   610  0020                     ??_Tetris_PlayerUnitBitsAreValid:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0020                     ?_rand:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0020                     Tetris_SetPlayerUnit@player:	
   617                           ; 2 bytes @ 0x0
   618                           
   619                           
   620                           ; 1 bytes @ 0x0
   621  0020                     	ds	1
   622  0021                     ?_Tetris_ResetPlayer:	
   623  0021                     Tetris_ResetPlayer@playerUnit:	
   624                           ; 1 bytes @ 0x1
   625                           
   626                           
   627                           ; 1 bytes @ 0x1
   628  0021                     	ds	1
   629  0022                     ??_rand:	
   630  0022                     ??_Tetris_ResetPlayer:	
   631                           ; 1 bytes @ 0x2
   632                           
   633                           
   634                           ; 1 bytes @ 0x2
   635  0022                     	ds	2
   636  0024                     Tetris_ResetPlayer@player:	
   637                           
   638                           ; 1 bytes @ 0x4
   639  0024                     	ds	3
   640  0027                     ?___awmod:	
   641  0027                     ___awmod@divisor:	
   642                           ; 2 bytes @ 0x7
   643                           
   644                           
   645                           ; 2 bytes @ 0x7
   646  0027                     	ds	2
   647  0029                     ___awmod@dividend:	
   648                           
   649                           ; 2 bytes @ 0x9
   650  0029                     	ds	2
   651  002B                     ___awmod@counter:	
   652                           
   653                           ; 1 bytes @ 0xB
   654  002B                     	ds	1
   655  002C                     ??_Tetris_MovePlayerLeft:	
   656  002C                     ??_Tetris_RotatePlayer:	
   657                           ; 1 bytes @ 0xC
   658                           
   659  002C                     ___awmod@sign:	
   660                           ; 1 bytes @ 0xC
   661                           
   662                           
   663                           ; 1 bytes @ 0xC
   664  002C                     	ds	1
   665  002D                     ?___bmul:	
   666  002D                     ___bmul@multiplicand:	
   667                           ; 1 bytes @ 0xD
   668                           
   669                           
   670                           ; 1 bytes @ 0xD
   671  002D                     	ds	1
   672  002E                     ??___bmul:	
   673  002E                     Tetris_MovePlayerLeft@i:	
   674                           ; 1 bytes @ 0xE
   675                           
   676  002E                     Tetris_RotatePlayer@oldRotation:	
   677                           ; 1 bytes @ 0xE
   678                           
   679                           
   680                           ; 1 bytes @ 0xE
   681  002E                     	ds	1
   682  002F                     Tetris_MovePlayerLeft@i_281:	
   683  002F                     Tetris_RotatePlayer@game:	
   684                           ; 1 bytes @ 0xF
   685                           
   686  002F                     ___bmul@product:	
   687                           ; 1 bytes @ 0xF
   688                           
   689                           
   690                           ; 1 bytes @ 0xF
   691  002F                     	ds	1
   692  0030                     Tetris_MovePlayerLeft@game:	
   693  0030                     ___bmul@multiplier:	
   694                           ; 1 bytes @ 0x10
   695                           
   696                           
   697                           ; 1 bytes @ 0x10
   698  0030                     	ds	1
   699  0031                     ??_Tetris_GetRandomUnit:	
   700                           
   701                           ; 1 bytes @ 0x11
   702  0031                     	ds	1
   703  0032                     ?_Tetris_ResetGame:	
   704  0032                     Tetris_ResetGame@playerUnit:	
   705                           ; 1 bytes @ 0x12
   706                           
   707                           
   708                           ; 1 bytes @ 0x12
   709  0032                     	ds	1
   710  0033                     ??_Tetris_ResetGame:	
   711                           
   712                           ; 1 bytes @ 0x13
   713  0033                     	ds	1
   714  0034                     Tetris_ResetGame@game:	
   715                           
   716                           ; 1 bytes @ 0x14
   717  0034                     	ds	1
   718  0035                     ??_main:	
   719                           
   720                           ; 1 bytes @ 0x15
   721  0035                     	ds	1
   722                           
   723                           	psect	maintext
   724  03F6                     __pmaintext:	
   725 ;;
   726 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   727 ;;
   728 ;; *************** function _main *****************
   729 ;; Defined at:
   730 ;;		line 5 in file "main.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;  game           78    0[BANK1 ] struct .
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : B00/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   744 ;;      Params:         0       0       0       0
   745 ;;      Locals:         0       0      78       0
   746 ;;      Temps:          0       1       0       0
   747 ;;      Totals:         0       1      78       0
   748 ;;Total ram usage:       79 bytes
   749 ;; Hardware stack levels required when called:    5
   750 ;; This function calls:
   751 ;;		_Tetris_GetRandomUnit
   752 ;;		_Tetris_MovePlayerLeft
   753 ;;		_Tetris_ResetGame
   754 ;;		_Tetris_RotatePlayer
   755 ;; This function is called by:
   756 ;;		Startup code after reset
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           
   761                           ;psect for function _main
   762  03F6                     _main:	
   763                           
   764                           ;main.c: 7:     Tetris_Game game;;main.c: 8:     Tetris_ResetGame(&game, Tetris_GetRando
      +                          mUnit());
   765                           
   766                           ;incstack = 0
   767                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   768  03F6  118A  2427  118A   	fcall	_Tetris_GetRandomUnit
   769  03F9  1283               	bcf	3,5	;RP0=0, select bank0
   770  03FA  1303               	bcf	3,6	;RP1=0, select bank0
   771  03FB  00B5               	movwf	??_main
   772  03FC  0835               	movf	??_main,w
   773  03FD  00B2               	movwf	Tetris_ResetGame@playerUnit
   774  03FE  30A0               	movlw	(low (main@game| 0))& (0+255)
   775  03FF  118A  2462  118A   	fcall	_Tetris_ResetGame
   776                           
   777                           ;main.c: 9:     Tetris_MovePlayerLeft(&game);
   778  0402  30A0               	movlw	(low (main@game| 0))& (0+255)
   779  0403  118A  26B1  118A   	fcall	_Tetris_MovePlayerLeft
   780                           
   781                           ;main.c: 10:     Tetris_RotatePlayer(&game);
   782  0406  30A0               	movlw	(low (main@game| 0))& (0+255)
   783  0407  118A  2708         	fcall	_Tetris_RotatePlayer
   784  0409  118A  2800         	ljmp	start
   785  040B                     __end_of_main:	
   786                           
   787                           	psect	text1
   788  0708                     __ptext1:	
   789 ;; *************** function _Tetris_RotatePlayer *****************
   790 ;; Defined at:
   791 ;;		line 282 in file "../Tetris/Tetris.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;  game            1    wreg     PTR struct .
   794 ;;		 -> main@game(78), 
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  game            1   15[BANK0 ] PTR struct .
   797 ;;		 -> main@game(78), 
   798 ;;  oldRotation     1   14[BANK0 ] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   808 ;;      Params:         0       0       0       0
   809 ;;      Locals:         0       2       0       0
   810 ;;      Temps:          0       2       0       0
   811 ;;      Totals:         0       4       0       0
   812 ;;Total ram usage:        4 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    3
   815 ;; This function calls:
   816 ;;		_Tetris_ApplyPlayerToTable
   817 ;;		_Tetris_PlayerOverlapsEnvironment
   818 ;;		_Tetris_PlayerUnitBitsAreValid
   819 ;;		_Tetris_RemovePlayerFromTable
   820 ;;		_Tetris_UpdatePlayerUnitBits
   821 ;;		___lbmod
   822 ;; This function is called by:
   823 ;;		_main
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           
   828                           ;psect for function _Tetris_RotatePlayer
   829  0708                     _Tetris_RotatePlayer:	
   830                           
   831                           ;incstack = 0
   832                           ; Regs used in _Tetris_RotatePlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
   833                           ;Tetris_RotatePlayer@game stored from wreg
   834  0708  1283               	bcf	3,5	;RP0=0, select bank0
   835  0709  1303               	bcf	3,6	;RP1=0, select bank0
   836  070A  00AF               	movwf	Tetris_RotatePlayer@game
   837                           
   838                           ;../Tetris/Tetris.c: 282: void Tetris_RotatePlayer(Tetris_Game *game);../Tetris/Tetris.c
      +                          : 283: {;../Tetris/Tetris.c: 284:  Tetris_RemovePlayerFromTable(game);
   839  070B  082F               	movf	Tetris_RotatePlayer@game,w
   840  070C  118A  252A  118A   	fcall	_Tetris_RemovePlayerFromTable
   841                           
   842                           ;../Tetris/Tetris.c: 286:  uint8_t oldRotation = game->player.rotation;
   843  070F  1283               	bcf	3,5	;RP0=0, select bank0
   844  0710  1303               	bcf	3,6	;RP1=0, select bank0
   845  0711  082F               	movf	Tetris_RotatePlayer@game,w
   846  0712  3E4B               	addlw	75
   847  0713  0084               	movwf	4
   848  0714  1383               	bcf	3,7	;select IRP bank0
   849  0715  0800               	movf	0,w
   850  0716  00AC               	movwf	??_Tetris_RotatePlayer
   851  0717  082C               	movf	??_Tetris_RotatePlayer,w
   852  0718  00AE               	movwf	Tetris_RotatePlayer@oldRotation
   853                           
   854                           ;../Tetris/Tetris.c: 287:  ++game->player.rotation;
   855  0719  3001               	movlw	1
   856  071A  00AC               	movwf	??_Tetris_RotatePlayer
   857  071B  082F               	movf	Tetris_RotatePlayer@game,w
   858  071C  3E4B               	addlw	75
   859  071D  0084               	movwf	4
   860  071E  082C               	movf	??_Tetris_RotatePlayer,w
   861  071F  0780               	addwf	0,f
   862                           
   863                           ;../Tetris/Tetris.c: 288:  game->player.rotation %= game->player.unit->numRotations;
   864  0720  082F               	movf	Tetris_RotatePlayer@game,w
   865  0721  3E42               	addlw	66
   866  0722  0084               	movwf	4
   867  0723  0800               	movf	0,w
   868  0724  0084               	movwf	4
   869  0725  118A  200C  118A   	fcall	stringdir
   870  0728  00AC               	movwf	??_Tetris_RotatePlayer
   871  0729  082C               	movf	??_Tetris_RotatePlayer,w
   872  072A  00F0               	movwf	___lbmod@divisor
   873  072B  082F               	movf	Tetris_RotatePlayer@game,w
   874  072C  3E4B               	addlw	75
   875  072D  0084               	movwf	4
   876  072E  0800               	movf	0,w
   877  072F  118A  24A2  118A   	fcall	___lbmod
   878  0732  1283               	bcf	3,5	;RP0=0, select bank0
   879  0733  1303               	bcf	3,6	;RP1=0, select bank0
   880  0734  00AD               	movwf	??_Tetris_RotatePlayer+1
   881  0735  082F               	movf	Tetris_RotatePlayer@game,w
   882  0736  3E4B               	addlw	75
   883  0737  0084               	movwf	4
   884  0738  082D               	movf	??_Tetris_RotatePlayer+1,w
   885  0739  1383               	bcf	3,7	;select IRP bank0
   886  073A  0080               	movwf	0
   887                           
   888                           ;../Tetris/Tetris.c: 289:  Tetris_UpdatePlayerUnitBits(&game->player);
   889  073B  082F               	movf	Tetris_RotatePlayer@game,w
   890  073C  3E40               	addlw	64
   891  073D  118A  2768  118A   	fcall	_Tetris_UpdatePlayerUnitBits
   892                           
   893                           ;../Tetris/Tetris.c: 290:  if (!Tetris_PlayerUnitBitsAreValid(&game->player) || Tetris_P
      +                          layerOverlapsEnvironment(game))
   894  0740  1283               	bcf	3,5	;RP0=0, select bank0
   895  0741  1303               	bcf	3,6	;RP1=0, select bank0
   896  0742  082F               	movf	Tetris_RotatePlayer@game,w
   897  0743  3E40               	addlw	64
   898  0744  118A  24F7  118A   	fcall	_Tetris_PlayerUnitBitsAreValid
   899  0747  3A00               	xorlw	0
   900  0748  1903               	skipnz
   901  0749  2F53               	goto	l1449
   902  074A  1283               	bcf	3,5	;RP0=0, select bank0
   903  074B  1303               	bcf	3,6	;RP1=0, select bank0
   904  074C  082F               	movf	Tetris_RotatePlayer@game,w
   905  074D  118A  259D  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
   906  0750  3A00               	xorlw	0
   907  0751  1903               	skipnz
   908  0752  2F62               	goto	l1453
   909  0753                     l1449:	
   910                           
   911                           ;../Tetris/Tetris.c: 291:  {;../Tetris/Tetris.c: 292:   game->player.rotation = oldRotat
      +                          ion;
   912  0753  1283               	bcf	3,5	;RP0=0, select bank0
   913  0754  1303               	bcf	3,6	;RP1=0, select bank0
   914  0755  082E               	movf	Tetris_RotatePlayer@oldRotation,w
   915  0756  00AC               	movwf	??_Tetris_RotatePlayer
   916  0757  082F               	movf	Tetris_RotatePlayer@game,w
   917  0758  3E4B               	addlw	75
   918  0759  0084               	movwf	4
   919  075A  082C               	movf	??_Tetris_RotatePlayer,w
   920  075B  1383               	bcf	3,7	;select IRP bank0
   921  075C  0080               	movwf	0
   922                           
   923                           ;../Tetris/Tetris.c: 293:   Tetris_UpdatePlayerUnitBits(&game->player);
   924  075D  082F               	movf	Tetris_RotatePlayer@game,w
   925  075E  3E40               	addlw	64
   926  075F  118A  2768  118A   	fcall	_Tetris_UpdatePlayerUnitBits
   927  0762                     l1453:	
   928                           
   929                           ;../Tetris/Tetris.c: 296:  Tetris_ApplyPlayerToTable(game);
   930  0762  1283               	bcf	3,5	;RP0=0, select bank0
   931  0763  1303               	bcf	3,6	;RP1=0, select bank0
   932  0764  082F               	movf	Tetris_RotatePlayer@game,w
   933  0765  118A  24C5         	fcall	_Tetris_ApplyPlayerToTable
   934  0767  0008               	return
   935  0768                     __end_of_Tetris_RotatePlayer:	
   936                           
   937                           	psect	text2
   938  04A2                     __ptext2:	
   939 ;; *************** function ___lbmod *****************
   940 ;; Defined at:
   941 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lbmod.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;  dividend        1    wreg     unsigned char 
   944 ;;  divisor         1    0[COMMON] unsigned char 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  dividend        1    4[COMMON] unsigned char 
   947 ;;  rem             1    6[COMMON] unsigned char 
   948 ;;  counter         1    5[COMMON] unsigned char 
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      unsigned char 
   951 ;; Registers used:
   952 ;;		wreg, status,2, status,0
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   958 ;;      Params:         1       0       0       0
   959 ;;      Locals:         3       0       0       0
   960 ;;      Temps:          3       0       0       0
   961 ;;      Totals:         7       0       0       0
   962 ;;Total ram usage:        7 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_Tetris_RotatePlayer
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           
   972                           ;psect for function ___lbmod
   973  04A2                     ___lbmod:	
   974                           
   975                           ;incstack = 0
   976                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
   977                           ;___lbmod@dividend stored from wreg
   978  04A2  00F4               	movwf	___lbmod@dividend
   979  04A3  3008               	movlw	8
   980  04A4  00F1               	movwf	??___lbmod
   981  04A5  0871               	movf	??___lbmod,w
   982  04A6  00F5               	movwf	___lbmod@counter
   983  04A7  01F6               	clrf	___lbmod@rem
   984  04A8                     l1379:	
   985  04A8  0874               	movf	___lbmod@dividend,w
   986  04A9  00F1               	movwf	??___lbmod
   987  04AA  3007               	movlw	7
   988  04AB                     u935:	
   989  04AB  1003               	clrc
   990  04AC  0CF1               	rrf	??___lbmod,f
   991  04AD  3EFF               	addlw	-1
   992  04AE  1D03               	skipz
   993  04AF  2CAB               	goto	u935
   994  04B0  0876               	movf	___lbmod@rem,w
   995  04B1  00F2               	movwf	??___lbmod+1
   996  04B2  0772               	addwf	??___lbmod+1,w
   997  04B3  0471               	iorwf	??___lbmod,w
   998  04B4  00F3               	movwf	??___lbmod+2
   999  04B5  0873               	movf	??___lbmod+2,w
  1000  04B6  00F6               	movwf	___lbmod@rem
  1001  04B7  1003               	clrc
  1002  04B8  0DF4               	rlf	___lbmod@dividend,f
  1003  04B9  0870               	movf	___lbmod@divisor,w
  1004  04BA  0276               	subwf	___lbmod@rem,w
  1005  04BB  1C03               	skipc
  1006  04BC  2CBF               	goto	l425
  1007  04BD  0870               	movf	___lbmod@divisor,w
  1008  04BE  02F6               	subwf	___lbmod@rem,f
  1009  04BF                     l425:	
  1010  04BF  3001               	movlw	1
  1011  04C0  02F5               	subwf	___lbmod@counter,f
  1012  04C1  1D03               	btfss	3,2
  1013  04C2  2CA8               	goto	l1379
  1014  04C3  0876               	movf	___lbmod@rem,w
  1015  04C4  0008               	return
  1016  04C5                     __end_of___lbmod:	
  1017                           
  1018                           	psect	text3
  1019  04F7                     __ptext3:	
  1020 ;; *************** function _Tetris_PlayerUnitBitsAreValid *****************
  1021 ;; Defined at:
  1022 ;;		line 174 in file "../Tetris/Tetris.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  player          1    wreg     PTR const struct .
  1025 ;;		 -> game.player(13), main@game(78), 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  player          1   12[COMMON] PTR const struct .
  1028 ;;		 -> game.player(13), main@game(78), 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      unsigned char 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1038 ;;      Params:         0       0       0       0
  1039 ;;      Locals:         1       0       0       0
  1040 ;;      Temps:          0       4       0       0
  1041 ;;      Totals:         1       4       0       0
  1042 ;;Total ram usage:        5 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    2
  1045 ;; This function calls:
  1046 ;;		_Tetris_CountUnitBits
  1047 ;; This function is called by:
  1048 ;;		_Tetris_RotatePlayer
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           
  1053                           ;psect for function _Tetris_PlayerUnitBitsAreValid
  1054  04F7                     _Tetris_PlayerUnitBitsAreValid:	
  1055                           
  1056                           ;incstack = 0
  1057                           ; Regs used in _Tetris_PlayerUnitBitsAreValid: [wreg-fsr0h+status,2+status,0+btemp+1+pcl
      +                          ath+cstack]
  1058                           ;Tetris_PlayerUnitBitsAreValid@player stored from wreg
  1059  04F7  00FC               	movwf	Tetris_PlayerUnitBitsAreValid@player
  1060                           
  1061                           ;../Tetris/Tetris.c: 174: static uint8_t Tetris_PlayerUnitBitsAreValid(const Tetris_Play
      +                          er *player);../Tetris/Tetris.c: 175: {;../Tetris/Tetris.c: 176:  return Tetris_CountUnit
      +                          Bits(player->unit->bits[player->rotation]) == Tetris_CountUnitBits(player->unitBits);
  1062  04F8  087C               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  1063  04F9  3E03               	addlw	3
  1064  04FA  00F0               	movwf	Tetris_CountUnitBits@unitBits
  1065  04FB  3000               	movlw	0
  1066  04FC  00F1               	movwf	Tetris_CountUnitBits@unitBits+1
  1067  04FD  118A  25DE  118A   	fcall	_Tetris_CountUnitBits
  1068  0500  1283               	bcf	3,5	;RP0=0, select bank0
  1069  0501  1303               	bcf	3,6	;RP1=0, select bank0
  1070  0502  00A0               	movwf	??_Tetris_PlayerUnitBitsAreValid
  1071  0503  087C               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  1072  0504  3E0B               	addlw	11
  1073  0505  0084               	movwf	4
  1074  0506  1383               	bcf	3,7	;select IRP bank0
  1075  0507  0800               	movf	0,w
  1076  0508  00A1               	movwf	??_Tetris_PlayerUnitBitsAreValid+1
  1077  0509  3003               	movlw	3
  1078  050A                     u775:	
  1079  050A  1003               	clrc
  1080  050B  0DA1               	rlf	??_Tetris_PlayerUnitBitsAreValid+1,f
  1081  050C  3EFF               	addlw	-1
  1082  050D  1D03               	skipz
  1083  050E  2D0A               	goto	u775
  1084  050F  087C               	movf	Tetris_PlayerUnitBitsAreValid@player,w
  1085  0510  3E02               	addlw	2
  1086  0511  0084               	movwf	4
  1087  0512  0800               	movf	0,w
  1088  0513  0721               	addwf	??_Tetris_PlayerUnitBitsAreValid+1,w
  1089  0514  00A2               	movwf	??_Tetris_PlayerUnitBitsAreValid+2
  1090  0515  3001               	movlw	1
  1091  0516  0722               	addwf	??_Tetris_PlayerUnitBitsAreValid+2,w
  1092  0517  00A3               	movwf	??_Tetris_PlayerUnitBitsAreValid+3
  1093  0518  0823               	movf	??_Tetris_PlayerUnitBitsAreValid+3,w
  1094  0519  00F0               	movwf	Tetris_CountUnitBits@unitBits
  1095  051A  3000               	movlw	0
  1096  051B  1D03               	btfss	3,2
  1097  051C  3080               	movlw	128
  1098  051D  00F1               	movwf	Tetris_CountUnitBits@unitBits+1
  1099  051E  118A  25DE  118A   	fcall	_Tetris_CountUnitBits
  1100  0521  1283               	bcf	3,5	;RP0=0, select bank0
  1101  0522  1303               	bcf	3,6	;RP1=0, select bank0
  1102  0523  0620               	xorwf	??_Tetris_PlayerUnitBitsAreValid,w
  1103  0524  1D03               	btfss	3,2
  1104  0525  2D28               	goto	u780
  1105  0526  3001               	movlw	1
  1106  0527  0008               	return
  1107  0528                     u780:	
  1108  0528  3000               	movlw	0
  1109  0529  0008               	return
  1110  052A                     __end_of_Tetris_PlayerUnitBitsAreValid:	
  1111                           
  1112                           	psect	text4
  1113  05DE                     __ptext4:	
  1114 ;; *************** function _Tetris_CountUnitBits *****************
  1115 ;; Defined at:
  1116 ;;		line 138 in file "../Tetris/Tetris.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;  unitBits        2    0[COMMON] PTR const unsigned int 
  1119 ;;		 -> game.player(13), Tetris_units.bits(32), Tetris_units(99), main@game(78), 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  j               1   10[COMMON] unsigned char 
  1122 ;;  mask            2    7[COMMON] unsigned int 
  1123 ;;  i               1   11[COMMON] unsigned char 
  1124 ;;  result          1    9[COMMON] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      unsigned char 
  1127 ;; Registers used:
  1128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1134 ;;      Params:         2       0       0       0
  1135 ;;      Locals:         5       0       0       0
  1136 ;;      Temps:          5       0       0       0
  1137 ;;      Totals:        12       0       0       0
  1138 ;;Total ram usage:       12 bytes
  1139 ;; Hardware stack levels used:    2
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_Tetris_PlayerUnitBitsAreValid
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function _Tetris_CountUnitBits
  1149  05DE                     _Tetris_CountUnitBits:	
  1150                           
  1151                           ;../Tetris/Tetris.c: 138: static uint8_t Tetris_CountUnitBits(const uint16_t *unitBits);
      +                          ../Tetris/Tetris.c: 139: {;../Tetris/Tetris.c: 140:  uint8_t result = 0;
  1152                           
  1153                           ;incstack = 0
  1154                           ; Regs used in _Tetris_CountUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1155  05DE  01F9               	clrf	Tetris_CountUnitBits@result
  1156                           
  1157                           ;../Tetris/Tetris.c: 141:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  1158  05DF  01FB               	clrf	Tetris_CountUnitBits@i
  1159  05E0                     l1185:	
  1160                           
  1161                           ;../Tetris/Tetris.c: 142:  {;../Tetris/Tetris.c: 143:   uint16_t mask = 1;
  1162  05E0  3001               	movlw	1
  1163  05E1  00F7               	movwf	Tetris_CountUnitBits@mask
  1164  05E2  3000               	movlw	0
  1165  05E3  00F8               	movwf	Tetris_CountUnitBits@mask+1
  1166                           
  1167                           ;../Tetris/Tetris.c: 144:   for (uint8_t j = 0; j < 16; ++j)
  1168  05E4  01FA               	clrf	Tetris_CountUnitBits@j
  1169  05E5                     l1193:	
  1170                           
  1171                           ;../Tetris/Tetris.c: 145:   {;../Tetris/Tetris.c: 146:    if (unitBits[i] & mask)
  1172  05E5  087B               	movf	Tetris_CountUnitBits@i,w
  1173  05E6  00F2               	movwf	??_Tetris_CountUnitBits
  1174  05E7  0772               	addwf	??_Tetris_CountUnitBits,w
  1175  05E8  0770               	addwf	Tetris_CountUnitBits@unitBits,w
  1176  05E9  0084               	movwf	4
  1177  05EA  0871               	movf	Tetris_CountUnitBits@unitBits+1,w
  1178  05EB  1803               	skipnc
  1179  05EC  0A71               	incf	Tetris_CountUnitBits@unitBits+1,w
  1180  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  1181  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  1182  05EF  00FF               	movwf	127
  1183  05F0  118A  2002  118A   	fcall	stringtab
  1184  05F3  00F3               	movwf	??_Tetris_CountUnitBits+1
  1185  05F4  118A  2002  118A   	fcall	stringtab
  1186  05F7  00F4               	movwf	??_Tetris_CountUnitBits+2
  1187  05F8  0877               	movf	Tetris_CountUnitBits@mask,w
  1188  05F9  0573               	andwf	??_Tetris_CountUnitBits+1,w
  1189  05FA  00F5               	movwf	??_Tetris_CountUnitBits+3
  1190  05FB  0878               	movf	Tetris_CountUnitBits@mask+1,w
  1191  05FC  0574               	andwf	??_Tetris_CountUnitBits+2,w
  1192  05FD  00F6               	movwf	??_Tetris_CountUnitBits+4
  1193  05FE  0875               	movf	??_Tetris_CountUnitBits+3,w
  1194  05FF  0476               	iorwf	??_Tetris_CountUnitBits+4,w
  1195  0600  1903               	btfsc	3,2
  1196  0601  2E06               	goto	l1197
  1197                           
  1198                           ;../Tetris/Tetris.c: 147:     ++result;
  1199  0602  3001               	movlw	1
  1200  0603  00F2               	movwf	??_Tetris_CountUnitBits
  1201  0604  0872               	movf	??_Tetris_CountUnitBits,w
  1202  0605  07F9               	addwf	Tetris_CountUnitBits@result,f
  1203  0606                     l1197:	
  1204                           
  1205                           ;../Tetris/Tetris.c: 148:    mask <<= 1;
  1206  0606  3001               	movlw	1
  1207  0607                     u635:	
  1208  0607  1003               	clrc
  1209  0608  0DF7               	rlf	Tetris_CountUnitBits@mask,f
  1210  0609  0DF8               	rlf	Tetris_CountUnitBits@mask+1,f
  1211  060A  3EFF               	addlw	-1
  1212  060B  1D03               	skipz
  1213  060C  2E07               	goto	u635
  1214                           
  1215                           ;../Tetris/Tetris.c: 149:   }
  1216  060D  3001               	movlw	1
  1217  060E  00F2               	movwf	??_Tetris_CountUnitBits
  1218  060F  0872               	movf	??_Tetris_CountUnitBits,w
  1219  0610  07FA               	addwf	Tetris_CountUnitBits@j,f
  1220  0611  3010               	movlw	16
  1221  0612  027A               	subwf	Tetris_CountUnitBits@j,w
  1222  0613  1C03               	skipc
  1223  0614  2DE5               	goto	l1193
  1224                           
  1225                           ;../Tetris/Tetris.c: 150:  }
  1226  0615  3001               	movlw	1
  1227  0616  00F2               	movwf	??_Tetris_CountUnitBits
  1228  0617  0872               	movf	??_Tetris_CountUnitBits,w
  1229  0618  07FB               	addwf	Tetris_CountUnitBits@i,f
  1230  0619  3004               	movlw	4
  1231  061A  027B               	subwf	Tetris_CountUnitBits@i,w
  1232  061B  1C03               	skipc
  1233  061C  2DE0               	goto	l1185
  1234                           
  1235                           ;../Tetris/Tetris.c: 151:  return result;
  1236  061D  0879               	movf	Tetris_CountUnitBits@result,w
  1237  061E  0008               	return
  1238  061F                     __end_of_Tetris_CountUnitBits:	
  1239                           
  1240                           	psect	text5
  1241  0462                     __ptext5:	
  1242 ;; *************** function _Tetris_ResetGame *****************
  1243 ;; Defined at:
  1244 ;;		line 210 in file "../Tetris/Tetris.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  game            1    wreg     PTR struct .
  1247 ;;		 -> main@game(78), 
  1248 ;;  playerUnit      1   18[BANK0 ] PTR const struct .
  1249 ;;		 -> Tetris_units(99), 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  game            1   20[BANK0 ] PTR struct .
  1252 ;;		 -> main@game(78), 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1262 ;;      Params:         0       1       0       0
  1263 ;;      Locals:         0       1       0       0
  1264 ;;      Temps:          0       1       0       0
  1265 ;;      Totals:         0       3       0       0
  1266 ;;Total ram usage:        3 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    4
  1269 ;; This function calls:
  1270 ;;		_Tetris_ApplyPlayerToTable
  1271 ;;		_Tetris_ResetPlayer
  1272 ;;		_memset
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _Tetris_ResetGame
  1280  0462                     _Tetris_ResetGame:	
  1281                           
  1282                           ;incstack = 0
  1283                           ; Regs used in _Tetris_ResetGame: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1284                           ;Tetris_ResetGame@game stored from wreg
  1285  0462  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0463  1303               	bcf	3,6	;RP1=0, select bank0
  1287  0464  00B4               	movwf	Tetris_ResetGame@game
  1288                           
  1289                           ;../Tetris/Tetris.c: 210: void Tetris_ResetGame(Tetris_Game *game, const Tetris_Unit *pl
      +                          ayerUnit);../Tetris/Tetris.c: 211: {;../Tetris/Tetris.c: 212:  memset(game, 0, sizeof *g
      +                          ame);
  1290  0465  3000               	movlw	0
  1291  0466  00F0               	movwf	memset@c
  1292  0467  00F1               	movwf	memset@c+1
  1293  0468  304E               	movlw	78
  1294  0469  00F2               	movwf	memset@n
  1295  046A  3000               	movlw	0
  1296  046B  00F3               	movwf	memset@n+1
  1297  046C  0834               	movf	Tetris_ResetGame@game,w
  1298  046D  118A  240B  118A   	fcall	_memset
  1299                           
  1300                           ;../Tetris/Tetris.c: 213:  Tetris_ResetPlayer(&game->player, playerUnit);
  1301  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1302  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0472  0832               	movf	Tetris_ResetGame@playerUnit,w
  1304  0473  00B3               	movwf	??_Tetris_ResetGame
  1305  0474  0833               	movf	??_Tetris_ResetGame,w
  1306  0475  00A1               	movwf	Tetris_ResetPlayer@playerUnit
  1307  0476  0834               	movf	Tetris_ResetGame@game,w
  1308  0477  3E40               	addlw	64
  1309  0478  118A  2481  118A   	fcall	_Tetris_ResetPlayer
  1310                           
  1311                           ;../Tetris/Tetris.c: 214:  Tetris_ApplyPlayerToTable(game);
  1312  047B  1283               	bcf	3,5	;RP0=0, select bank0
  1313  047C  1303               	bcf	3,6	;RP1=0, select bank0
  1314  047D  0834               	movf	Tetris_ResetGame@game,w
  1315  047E  118A  24C5         	fcall	_Tetris_ApplyPlayerToTable
  1316  0480  0008               	return
  1317  0481                     __end_of_Tetris_ResetGame:	
  1318                           
  1319                           	psect	text6
  1320  040B                     __ptext6:	
  1321 ;; *************** function _memset *****************
  1322 ;; Defined at:
  1323 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\memset.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  p1              1    wreg     PTR void 
  1326 ;;		 -> main@game(78), 
  1327 ;;  c               2    0[COMMON] int 
  1328 ;;  n               2    2[COMMON] unsigned int 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  p1              1    5[COMMON] PTR void 
  1331 ;;		 -> main@game(78), 
  1332 ;;  p               1    6[COMMON] PTR unsigned char 
  1333 ;;		 -> main@game(78), 
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      PTR void 
  1336 ;; Registers used:
  1337 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1343 ;;      Params:         4       0       0       0
  1344 ;;      Locals:         2       0       0       0
  1345 ;;      Temps:          1       0       0       0
  1346 ;;      Totals:         7       0       0       0
  1347 ;;Total ram usage:        7 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; This function calls:
  1350 ;;		Nothing
  1351 ;; This function is called by:
  1352 ;;		_Tetris_ResetGame
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           
  1357                           ;psect for function _memset
  1358  040B                     _memset:	
  1359                           
  1360                           ;incstack = 0
  1361                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  1362                           ;memset@p1 stored from wreg
  1363  040B  00F5               	movwf	memset@p1
  1364  040C  0875               	movf	memset@p1,w
  1365  040D  00F4               	movwf	??_memset
  1366  040E  0874               	movf	??_memset,w
  1367  040F  00F6               	movwf	memset@p
  1368  0410                     l1321:	
  1369  0410  3001               	movlw	1
  1370  0411  02F2               	subwf	memset@n,f
  1371  0412  3000               	movlw	0
  1372  0413  1C03               	skipc
  1373  0414  03F3               	decf	memset@n+1,f
  1374  0415  02F3               	subwf	memset@n+1,f
  1375  0416  0A72               	incf	memset@n,w
  1376  0417  1903               	btfsc	3,2
  1377  0418  0A73               	incf	memset@n+1,w
  1378  0419  1903               	btfsc	3,2
  1379  041A  0008               	return
  1380  041B  0870               	movf	memset@c,w
  1381  041C  00F4               	movwf	??_memset
  1382  041D  0876               	movf	memset@p,w
  1383  041E  0084               	movwf	4
  1384  041F  0874               	movf	??_memset,w
  1385  0420  1383               	bcf	3,7	;select IRP bank0
  1386  0421  0080               	movwf	0
  1387  0422  3001               	movlw	1
  1388  0423  00F4               	movwf	??_memset
  1389  0424  0874               	movf	??_memset,w
  1390  0425  07F6               	addwf	memset@p,f
  1391  0426  2C10               	goto	l1321
  1392  0427                     __end_of_memset:	
  1393                           
  1394                           	psect	text7
  1395  0481                     __ptext7:	
  1396 ;; *************** function _Tetris_ResetPlayer *****************
  1397 ;; Defined at:
  1398 ;;		line 185 in file "../Tetris/Tetris.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  player          1    wreg     PTR struct .
  1401 ;;		 -> main@game(78), 
  1402 ;;  playerUnit      1    1[BANK0 ] PTR const struct .
  1403 ;;		 -> Tetris_units(99), 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  player          1    4[BANK0 ] PTR struct .
  1406 ;;		 -> main@game(78), 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1416 ;;      Params:         0       1       0       0
  1417 ;;      Locals:         0       1       0       0
  1418 ;;      Temps:          0       2       0       0
  1419 ;;      Totals:         0       4       0       0
  1420 ;;Total ram usage:        4 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    3
  1423 ;; This function calls:
  1424 ;;		_Tetris_SetPlayerUnit
  1425 ;; This function is called by:
  1426 ;;		_Tetris_ResetGame
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           
  1431                           ;psect for function _Tetris_ResetPlayer
  1432  0481                     _Tetris_ResetPlayer:	
  1433                           
  1434                           ;incstack = 0
  1435                           ; Regs used in _Tetris_ResetPlayer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1436                           ;Tetris_ResetPlayer@player stored from wreg
  1437  0481  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0482  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0483  00A4               	movwf	Tetris_ResetPlayer@player
  1440                           
  1441                           ;../Tetris/Tetris.c: 185: static void Tetris_ResetPlayer(Tetris_Player *player, const Te
      +                          tris_Unit *playerUnit);../Tetris/Tetris.c: 186: {;../Tetris/Tetris.c: 187:  player->posi
      +                          tion = Tetris_playerStartingPosition;
  1442  0484  3001               	movlw	low (_Tetris_playerStartingPosition-__stringbase)
  1443  0485  0084               	movwf	4
  1444  0486  118A  200C  118A   	fcall	stringdir
  1445  0489  00A2               	movwf	??_Tetris_ResetPlayer
  1446  048A  118A  200C  118A   	fcall	stringdir
  1447  048D  00A3               	movwf	??_Tetris_ResetPlayer+1
  1448  048E  0824               	movf	Tetris_ResetPlayer@player,w
  1449  048F  0084               	movwf	4
  1450  0490  0822               	movf	??_Tetris_ResetPlayer,w
  1451  0491  1383               	bcf	3,7	;select IRP bank0
  1452  0492  0080               	movwf	0
  1453  0493  0A84               	incf	4,f
  1454  0494  0823               	movf	??_Tetris_ResetPlayer+1,w
  1455  0495  0080               	movwf	0
  1456                           
  1457                           ;../Tetris/Tetris.c: 188:  player->rotation = 0;
  1458  0496  0824               	movf	Tetris_ResetPlayer@player,w
  1459  0497  3E0B               	addlw	11
  1460  0498  0084               	movwf	4
  1461  0499  0180               	clrf	0
  1462                           
  1463                           ;../Tetris/Tetris.c: 189:  Tetris_SetPlayerUnit(player, playerUnit);
  1464  049A  0821               	movf	Tetris_ResetPlayer@playerUnit,w
  1465  049B  00A2               	movwf	??_Tetris_ResetPlayer
  1466  049C  0822               	movf	??_Tetris_ResetPlayer,w
  1467  049D  00FC               	movwf	Tetris_SetPlayerUnit@unit
  1468  049E  0824               	movf	Tetris_ResetPlayer@player,w
  1469  049F  118A  23D4         	fcall	_Tetris_SetPlayerUnit
  1470  04A1  0008               	return
  1471  04A2                     __end_of_Tetris_ResetPlayer:	
  1472                           
  1473                           	psect	text8
  1474  03D4                     __ptext8:	
  1475 ;; *************** function _Tetris_SetPlayerUnit *****************
  1476 ;; Defined at:
  1477 ;;		line 179 in file "../Tetris/Tetris.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;  player          1    wreg     PTR struct .
  1480 ;;		 -> main@game(78), 
  1481 ;;  unit            1   12[COMMON] PTR const struct .
  1482 ;;		 -> Tetris_units(99), 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  player          1    0[BANK0 ] PTR struct .
  1485 ;;		 -> main@game(78), 
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      void 
  1488 ;; Registers used:
  1489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1495 ;;      Params:         1       0       0       0
  1496 ;;      Locals:         0       1       0       0
  1497 ;;      Temps:          1       0       0       0
  1498 ;;      Totals:         2       1       0       0
  1499 ;;Total ram usage:        3 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    2
  1502 ;; This function calls:
  1503 ;;		_Tetris_UpdatePlayerUnitBits
  1504 ;; This function is called by:
  1505 ;;		_Tetris_ResetPlayer
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           
  1510                           ;psect for function _Tetris_SetPlayerUnit
  1511  03D4                     _Tetris_SetPlayerUnit:	
  1512                           
  1513                           ;incstack = 0
  1514                           ; Regs used in _Tetris_SetPlayerUnit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  1515                           ;Tetris_SetPlayerUnit@player stored from wreg
  1516  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  1517  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  1518  03D6  00A0               	movwf	Tetris_SetPlayerUnit@player
  1519                           
  1520                           ;../Tetris/Tetris.c: 179: static void Tetris_SetPlayerUnit(Tetris_Player *player, const 
      +                          Tetris_Unit *unit);../Tetris/Tetris.c: 180: {;../Tetris/Tetris.c: 181:  player->unit = u
      +                          nit;
  1521  03D7  087C               	movf	Tetris_SetPlayerUnit@unit,w
  1522  03D8  00FD               	movwf	??_Tetris_SetPlayerUnit
  1523  03D9  0820               	movf	Tetris_SetPlayerUnit@player,w
  1524  03DA  3E02               	addlw	2
  1525  03DB  0084               	movwf	4
  1526  03DC  087D               	movf	??_Tetris_SetPlayerUnit,w
  1527  03DD  1383               	bcf	3,7	;select IRP bank0
  1528  03DE  0080               	movwf	0
  1529                           
  1530                           ;../Tetris/Tetris.c: 182:  Tetris_UpdatePlayerUnitBits(player);
  1531  03DF  0820               	movf	Tetris_SetPlayerUnit@player,w
  1532  03E0  118A  2768         	fcall	_Tetris_UpdatePlayerUnitBits
  1533  03E2  0008               	return
  1534  03E3                     __end_of_Tetris_SetPlayerUnit:	
  1535                           
  1536                           	psect	text9
  1537  0768                     __ptext9:	
  1538 ;; *************** function _Tetris_UpdatePlayerUnitBits *****************
  1539 ;; Defined at:
  1540 ;;		line 154 in file "../Tetris/Tetris.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  player          1    wreg     PTR struct .
  1543 ;;		 -> main@game(78), 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  player          1   11[COMMON] PTR struct .
  1546 ;;		 -> main@game(78), 
  1547 ;;  i               1    8[COMMON] unsigned char 
  1548 ;;  i               1    7[COMMON] unsigned char 
  1549 ;;  i               1    9[COMMON] unsigned char 
  1550 ;;  shift           1   10[COMMON] char 
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1560 ;;      Params:         0       0       0       0
  1561 ;;      Locals:         5       0       0       0
  1562 ;;      Temps:          7       0       0       0
  1563 ;;      Totals:        12       0       0       0
  1564 ;;Total ram usage:       12 bytes
  1565 ;; Hardware stack levels used:    2
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_Tetris_SetPlayerUnit
  1570 ;;		_Tetris_RotatePlayer
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           
  1575                           ;psect for function _Tetris_UpdatePlayerUnitBits
  1576  0768                     _Tetris_UpdatePlayerUnitBits:	
  1577                           
  1578                           ;incstack = 0
  1579                           ; Regs used in _Tetris_UpdatePlayerUnitBits: [wreg-fsr0h+status,2+status,0+btemp+1+pclat
      +                          h]
  1580                           ;Tetris_UpdatePlayerUnitBits@player stored from wreg
  1581  0768  00FB               	movwf	Tetris_UpdatePlayerUnitBits@player
  1582                           
  1583                           ;../Tetris/Tetris.c: 154: static void Tetris_UpdatePlayerUnitBits(Tetris_Player *player)
      +                          ;../Tetris/Tetris.c: 155: {;../Tetris/Tetris.c: 156:  for (uint8_t i = 0; i < TETRIS_UNI
      +                          T_HEIGHT; ++i)
  1584  0769  01F9               	clrf	Tetris_UpdatePlayerUnitBits@i
  1585  076A                     l1139:	
  1586                           
  1587                           ;../Tetris/Tetris.c: 157:   player->unitBits[i] = player->unit->bits[player->rotation][i
      +                          ];
  1588  076A  087B               	movf	Tetris_UpdatePlayerUnitBits@player,w
  1589  076B  3E0B               	addlw	11
  1590  076C  0084               	movwf	4
  1591  076D  1383               	bcf	3,7	;select IRP bank0
  1592  076E  0800               	movf	0,w
  1593  076F  00F0               	movwf	??_Tetris_UpdatePlayerUnitBits
  1594  0770  3003               	movlw	3
  1595  0771                     u555:	
  1596  0771  1003               	clrc
  1597  0772  0DF0               	rlf	??_Tetris_UpdatePlayerUnitBits,f
  1598  0773  3EFF               	addlw	-1
  1599  0774  1D03               	skipz
  1600  0775  2F71               	goto	u555
  1601  0776  087B               	movf	Tetris_UpdatePlayerUnitBits@player,w
  1602  0777  3E02               	addlw	2
  1603  0778  0084               	movwf	4
  1604  0779  0800               	movf	0,w
  1605  077A  0770               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  1606  077B  00F1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  1607  077C  0879               	movf	Tetris_UpdatePlayerUnitBits@i,w
  1608  077D  00F2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  1609  077E  0772               	addwf	??_Tetris_UpdatePlayerUnitBits+2,w
  1610  077F  0771               	addwf	??_Tetris_UpdatePlayerUnitBits+1,w
  1611  0780  3E01               	addlw	1
  1612  0781  0084               	movwf	4
  1613  0782  118A  200C  118A   	fcall	stringdir
  1614  0785  00F3               	movwf	??_Tetris_UpdatePlayerUnitBits+3
  1615  0786  118A  200C  118A   	fcall	stringdir
  1616  0789  00F4               	movwf	??_Tetris_UpdatePlayerUnitBits+4
  1617  078A  0879               	movf	Tetris_UpdatePlayerUnitBits@i,w
  1618  078B  00F5               	movwf	??_Tetris_UpdatePlayerUnitBits+5
  1619  078C  0775               	addwf	??_Tetris_UpdatePlayerUnitBits+5,w
  1620  078D  077B               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  1621  078E  00F6               	movwf	??_Tetris_UpdatePlayerUnitBits+6
  1622  078F  0876               	movf	??_Tetris_UpdatePlayerUnitBits+6,w
  1623  0790  3E03               	addlw	3
  1624  0791  0084               	movwf	4
  1625  0792  0873               	movf	??_Tetris_UpdatePlayerUnitBits+3,w
  1626  0793  0080               	movwf	0
  1627  0794  0A84               	incf	4,f
  1628  0795  0874               	movf	??_Tetris_UpdatePlayerUnitBits+4,w
  1629  0796  0080               	movwf	0
  1630  0797  3001               	movlw	1
  1631  0798  00F0               	movwf	??_Tetris_UpdatePlayerUnitBits
  1632  0799  0870               	movf	??_Tetris_UpdatePlayerUnitBits,w
  1633  079A  07F9               	addwf	Tetris_UpdatePlayerUnitBits@i,f
  1634  079B  3004               	movlw	4
  1635  079C  0279               	subwf	Tetris_UpdatePlayerUnitBits@i,w
  1636  079D  1C03               	skipc
  1637  079E  2F6A               	goto	l1139
  1638                           
  1639                           ;../Tetris/Tetris.c: 159:  int8_t shift = 8 - player->position.x + Tetris_unitPivot.x;
  1640  079F  087B               	movf	Tetris_UpdatePlayerUnitBits@player,w
  1641  07A0  0084               	movwf	4
  1642  07A1  0800               	movf	0,w
  1643  07A2  00F0               	movwf	??_Tetris_UpdatePlayerUnitBits
  1644  07A3  3003               	movlw	low (_Tetris_unitPivot-__stringbase)
  1645  07A4  0084               	movwf	4
  1646  07A5  118A  200C  118A   	fcall	stringdir
  1647  07A8  00F1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  1648  07A9  0870               	movf	??_Tetris_UpdatePlayerUnitBits,w
  1649  07AA  0271               	subwf	??_Tetris_UpdatePlayerUnitBits+1,w
  1650  07AB  3E08               	addlw	8
  1651  07AC  00F2               	movwf	??_Tetris_UpdatePlayerUnitBits+2
  1652  07AD  0872               	movf	??_Tetris_UpdatePlayerUnitBits+2,w
  1653  07AE  00FA               	movwf	Tetris_UpdatePlayerUnitBits@shift
  1654                           
  1655                           ;../Tetris/Tetris.c: 161:  if (shift > 0)
  1656  07AF  087A               	movf	Tetris_UpdatePlayerUnitBits@shift,w
  1657  07B0  3A80               	xorlw	128
  1658  07B1  3E7F               	addlw	-129
  1659  07B2  1C03               	skipc
  1660  07B3  2FD0               	goto	l1161
  1661                           
  1662                           ;../Tetris/Tetris.c: 162:  {;../Tetris/Tetris.c: 163:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  1663  07B4  01F7               	clrf	Tetris_UpdatePlayerUnitBits@i_197
  1664  07B5                     l1155:	
  1665                           
  1666                           ;../Tetris/Tetris.c: 164:    player->unitBits[i] <<= shift;
  1667  07B5  0877               	movf	Tetris_UpdatePlayerUnitBits@i_197,w
  1668  07B6  00F0               	movwf	??_Tetris_UpdatePlayerUnitBits
  1669  07B7  0770               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  1670  07B8  077B               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  1671  07B9  00F1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  1672  07BA  0871               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  1673  07BB  3E03               	addlw	3
  1674  07BC  0084               	movwf	4
  1675  07BD  0A7A               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  1676  07BE  2FC4               	goto	u580
  1677  07BF                     u585:	
  1678  07BF  1003               	clrc
  1679  07C0  0D80               	rlf	0,f
  1680  07C1  0A84               	incf	4,f
  1681  07C2  0D80               	rlf	0,f
  1682  07C3  0384               	decf	4,f
  1683  07C4                     u580:	
  1684  07C4  3EFF               	addlw	-1
  1685  07C5  1D03               	skipz
  1686  07C6  2FBF               	goto	u585
  1687  07C7  3001               	movlw	1
  1688  07C8  00F0               	movwf	??_Tetris_UpdatePlayerUnitBits
  1689  07C9  0870               	movf	??_Tetris_UpdatePlayerUnitBits,w
  1690  07CA  07F7               	addwf	Tetris_UpdatePlayerUnitBits@i_197,f
  1691  07CB  3004               	movlw	4
  1692  07CC  0277               	subwf	Tetris_UpdatePlayerUnitBits@i_197,w
  1693  07CD  1803               	btfsc	3,0
  1694  07CE  0008               	return
  1695  07CF  2FB5               	goto	l1155
  1696  07D0                     l1161:	
  1697                           
  1698                           ;../Tetris/Tetris.c: 167:  {;../Tetris/Tetris.c: 168:   shift = -shift;
  1699  07D0  09FA               	comf	Tetris_UpdatePlayerUnitBits@shift,f
  1700  07D1  0AFA               	incf	Tetris_UpdatePlayerUnitBits@shift,f
  1701                           
  1702                           ;../Tetris/Tetris.c: 169:   for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  1703  07D2  01F8               	clrf	Tetris_UpdatePlayerUnitBits@i_198
  1704  07D3                     l1169:	
  1705                           
  1706                           ;../Tetris/Tetris.c: 170:    player->unitBits[i] >>= shift;
  1707  07D3  0878               	movf	Tetris_UpdatePlayerUnitBits@i_198,w
  1708  07D4  00F0               	movwf	??_Tetris_UpdatePlayerUnitBits
  1709  07D5  0770               	addwf	??_Tetris_UpdatePlayerUnitBits,w
  1710  07D6  077B               	addwf	Tetris_UpdatePlayerUnitBits@player,w
  1711  07D7  00F1               	movwf	??_Tetris_UpdatePlayerUnitBits+1
  1712  07D8  0871               	movf	??_Tetris_UpdatePlayerUnitBits+1,w
  1713  07D9  3E03               	addlw	3
  1714  07DA  0084               	movwf	4
  1715  07DB  0A7A               	incf	Tetris_UpdatePlayerUnitBits@shift,w
  1716  07DC  2FE2               	goto	u600
  1717  07DD                     u605:	
  1718  07DD  0A84               	incf	4,f
  1719  07DE  1003               	clrc
  1720  07DF  0C80               	rrf	0,f
  1721  07E0  0384               	decf	4,f
  1722  07E1  0C80               	rrf	0,f
  1723  07E2                     u600:	
  1724  07E2  3EFF               	addlw	-1
  1725  07E3  1D03               	skipz
  1726  07E4  2FDD               	goto	u605
  1727  07E5  3001               	movlw	1
  1728  07E6  00F0               	movwf	??_Tetris_UpdatePlayerUnitBits
  1729  07E7  0870               	movf	??_Tetris_UpdatePlayerUnitBits,w
  1730  07E8  07F8               	addwf	Tetris_UpdatePlayerUnitBits@i_198,f
  1731  07E9  3004               	movlw	4
  1732  07EA  0278               	subwf	Tetris_UpdatePlayerUnitBits@i_198,w
  1733  07EB  1803               	btfsc	3,0
  1734  07EC  0008               	return
  1735  07ED  2FD3               	goto	l1169
  1736  07EE                     __end_of_Tetris_UpdatePlayerUnitBits:	
  1737                           
  1738                           	psect	text10
  1739  06B1                     __ptext10:	
  1740 ;; *************** function _Tetris_MovePlayerLeft *****************
  1741 ;; Defined at:
  1742 ;;		line 236 in file "../Tetris/Tetris.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  game            1    wreg     PTR struct .
  1745 ;;		 -> main@game(78), 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  game            1   16[BANK0 ] PTR struct .
  1748 ;;		 -> main@game(78), 
  1749 ;;  i               1   15[BANK0 ] unsigned char 
  1750 ;;  i               1   14[BANK0 ] unsigned char 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1760 ;;      Params:         0       0       0       0
  1761 ;;      Locals:         0       3       0       0
  1762 ;;      Temps:          0       2       0       0
  1763 ;;      Totals:         0       5       0       0
  1764 ;;Total ram usage:        5 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    3
  1767 ;; This function calls:
  1768 ;;		_Tetris_ApplyPlayerToTable
  1769 ;;		_Tetris_PlayerOverlapsEnvironment
  1770 ;;		_Tetris_PlayerTouchingLeftBound
  1771 ;;		_Tetris_RemovePlayerFromTable
  1772 ;; This function is called by:
  1773 ;;		_main
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           
  1778                           ;psect for function _Tetris_MovePlayerLeft
  1779  06B1                     _Tetris_MovePlayerLeft:	
  1780                           
  1781                           ;incstack = 0
  1782                           ; Regs used in _Tetris_MovePlayerLeft: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1783                           ;Tetris_MovePlayerLeft@game stored from wreg
  1784  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  1785  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  1786  06B3  00B0               	movwf	Tetris_MovePlayerLeft@game
  1787                           
  1788                           ;../Tetris/Tetris.c: 236: void Tetris_MovePlayerLeft(Tetris_Game *game);../Tetris/Tetris
      +                          .c: 237: {;../Tetris/Tetris.c: 238:  if (Tetris_PlayerTouchingLeftBound(&game->player))
  1789  06B4  0830               	movf	Tetris_MovePlayerLeft@game,w
  1790  06B5  3E40               	addlw	64
  1791  06B6  118A  2444  118A   	fcall	_Tetris_PlayerTouchingLeftBound
  1792  06B9  3A00               	xorlw	0
  1793  06BA  1D03               	btfss	3,2
  1794  06BB  0008               	return
  1795                           
  1796                           ;../Tetris/Tetris.c: 241:  Tetris_RemovePlayerFromTable(game);
  1797  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  1798  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  1799  06BE  0830               	movf	Tetris_MovePlayerLeft@game,w
  1800  06BF  118A  252A  118A   	fcall	_Tetris_RemovePlayerFromTable
  1801                           
  1802                           ;../Tetris/Tetris.c: 243:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  1803  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1804  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1805  06C4  01AE               	clrf	Tetris_MovePlayerLeft@i
  1806  06C5                     l1413:	
  1807                           
  1808                           ;../Tetris/Tetris.c: 244:   game->player.unitBits[i] <<= 1;
  1809  06C5  082E               	movf	Tetris_MovePlayerLeft@i,w
  1810  06C6  00AC               	movwf	??_Tetris_MovePlayerLeft
  1811  06C7  072C               	addwf	??_Tetris_MovePlayerLeft,w
  1812  06C8  0730               	addwf	Tetris_MovePlayerLeft@game,w
  1813  06C9  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  1814  06CA  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  1815  06CB  3E43               	addlw	67
  1816  06CC  0084               	movwf	4
  1817  06CD  1003               	clrc
  1818  06CE  1383               	bcf	3,7	;select IRP bank0
  1819  06CF  0D80               	rlf	0,f
  1820  06D0  0A84               	incf	4,f
  1821  06D1  0D80               	rlf	0,f
  1822  06D2  0384               	decf	4,f
  1823  06D3  3001               	movlw	1
  1824  06D4  00AC               	movwf	??_Tetris_MovePlayerLeft
  1825  06D5  082C               	movf	??_Tetris_MovePlayerLeft,w
  1826  06D6  07AE               	addwf	Tetris_MovePlayerLeft@i,f
  1827  06D7  3004               	movlw	4
  1828  06D8  022E               	subwf	Tetris_MovePlayerLeft@i,w
  1829  06D9  1C03               	skipc
  1830  06DA  2EC5               	goto	l1413
  1831                           
  1832                           ;../Tetris/Tetris.c: 246:  if (Tetris_PlayerOverlapsEnvironment(game))
  1833  06DB  0830               	movf	Tetris_MovePlayerLeft@game,w
  1834  06DC  118A  259D  118A   	fcall	_Tetris_PlayerOverlapsEnvironment
  1835  06DF  3A00               	xorlw	0
  1836  06E0  1903               	skipnz
  1837  06E1  2EFC               	goto	l1433
  1838                           
  1839                           ;../Tetris/Tetris.c: 247:  {;../Tetris/Tetris.c: 248:   for (uint8_t i = 0; i < TETRIS_U
      +                          NIT_HEIGHT; ++i)
  1840  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  1841  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  1842  06E4  01AF               	clrf	Tetris_MovePlayerLeft@i_281
  1843  06E5                     l1427:	
  1844                           
  1845                           ;../Tetris/Tetris.c: 249:    game->player.unitBits[i] >>= 1;
  1846  06E5  082F               	movf	Tetris_MovePlayerLeft@i_281,w
  1847  06E6  00AC               	movwf	??_Tetris_MovePlayerLeft
  1848  06E7  072C               	addwf	??_Tetris_MovePlayerLeft,w
  1849  06E8  0730               	addwf	Tetris_MovePlayerLeft@game,w
  1850  06E9  00AD               	movwf	??_Tetris_MovePlayerLeft+1
  1851  06EA  082D               	movf	??_Tetris_MovePlayerLeft+1,w
  1852  06EB  3E43               	addlw	67
  1853  06EC  0084               	movwf	4
  1854  06ED  0A84               	incf	4,f
  1855  06EE  1003               	clrc
  1856  06EF  1383               	bcf	3,7	;select IRP bank0
  1857  06F0  0C80               	rrf	0,f
  1858  06F1  0384               	decf	4,f
  1859  06F2  0C80               	rrf	0,f
  1860  06F3  3001               	movlw	1
  1861  06F4  00AC               	movwf	??_Tetris_MovePlayerLeft
  1862  06F5  082C               	movf	??_Tetris_MovePlayerLeft,w
  1863  06F6  07AF               	addwf	Tetris_MovePlayerLeft@i_281,f
  1864  06F7  3004               	movlw	4
  1865  06F8  022F               	subwf	Tetris_MovePlayerLeft@i_281,w
  1866  06F9  1803               	btfsc	3,0
  1867  06FA  2F04               	goto	l1435
  1868  06FB  2EE5               	goto	l1427
  1869  06FC                     l1433:	
  1870                           
  1871                           ;../Tetris/Tetris.c: 252:  {;../Tetris/Tetris.c: 253:   --game->player.position.x;
  1872  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1873  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1874  06FE  0830               	movf	Tetris_MovePlayerLeft@game,w
  1875  06FF  3E40               	addlw	64
  1876  0700  0084               	movwf	4
  1877  0701  3001               	movlw	1
  1878  0702  1383               	bcf	3,7	;select IRP bank0
  1879  0703  0280               	subwf	0,f
  1880  0704                     l1435:	
  1881                           
  1882                           ;../Tetris/Tetris.c: 256:  Tetris_ApplyPlayerToTable(game);
  1883  0704  0830               	movf	Tetris_MovePlayerLeft@game,w
  1884  0705  118A  24C5         	fcall	_Tetris_ApplyPlayerToTable
  1885  0707  0008               	return
  1886  0708                     __end_of_Tetris_MovePlayerLeft:	
  1887                           
  1888                           	psect	text11
  1889  052A                     __ptext11:	
  1890 ;; *************** function _Tetris_RemovePlayerFromTable *****************
  1891 ;; Defined at:
  1892 ;;		line 120 in file "../Tetris/Tetris.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  game            1    wreg     PTR struct .
  1895 ;;		 -> main@game(78), 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  game            1   12[COMMON] PTR struct .
  1898 ;;		 -> main@game(78), 
  1899 ;;  i               1   13[COMMON] unsigned char 
  1900 ;;  start           1   11[COMMON] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1910 ;;      Params:         0       0       0       0
  1911 ;;      Locals:         3       0       0       0
  1912 ;;      Temps:          8       0       0       0
  1913 ;;      Totals:        11       0       0       0
  1914 ;;Total ram usage:       11 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    2
  1917 ;; This function calls:
  1918 ;;		_Tetris_PlayerTopmostY
  1919 ;; This function is called by:
  1920 ;;		_Tetris_MovePlayerLeft
  1921 ;;		_Tetris_RotatePlayer
  1922 ;;		_Tetris_MovePlayerDown
  1923 ;;		_Tetris_MovePlayerRight
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function _Tetris_RemovePlayerFromTable
  1929  052A                     _Tetris_RemovePlayerFromTable:	
  1930                           
  1931                           ;incstack = 0
  1932                           ; Regs used in _Tetris_RemovePlayerFromTable: [wreg-fsr0h+status,2+status,0+pclath+cstac
      +                          k]
  1933                           ;Tetris_RemovePlayerFromTable@game stored from wreg
  1934  052A  00FC               	movwf	Tetris_RemovePlayerFromTable@game
  1935                           
  1936                           ;../Tetris/Tetris.c: 120: static void Tetris_RemovePlayerFromTable(Tetris_Game *game);..
      +                          /Tetris/Tetris.c: 121: {;../Tetris/Tetris.c: 122:  uint8_t start = Tetris_PlayerTopmostY
      +                          (&game->player);
  1937  052B  087C               	movf	Tetris_RemovePlayerFromTable@game,w
  1938  052C  3E40               	addlw	64
  1939  052D  118A  23C6  118A   	fcall	_Tetris_PlayerTopmostY
  1940  0530  00F3               	movwf	??_Tetris_RemovePlayerFromTable
  1941  0531  0873               	movf	??_Tetris_RemovePlayerFromTable,w
  1942  0532  00FB               	movwf	Tetris_RemovePlayerFromTable@start
  1943                           
  1944                           ;../Tetris/Tetris.c: 123:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  1945  0533  01FD               	clrf	Tetris_RemovePlayerFromTable@i
  1946  0534                     l1277:	
  1947                           
  1948                           ;../Tetris/Tetris.c: 124:  {;../Tetris/Tetris.c: 125:   game->table[start + i] &= ~game-
      +                          >player.unitBits[i];
  1949  0534  087D               	movf	Tetris_RemovePlayerFromTable@i,w
  1950  0535  00F3               	movwf	??_Tetris_RemovePlayerFromTable
  1951  0536  0773               	addwf	??_Tetris_RemovePlayerFromTable,w
  1952  0537  077C               	addwf	Tetris_RemovePlayerFromTable@game,w
  1953  0538  00F4               	movwf	??_Tetris_RemovePlayerFromTable+1
  1954  0539  0874               	movf	??_Tetris_RemovePlayerFromTable+1,w
  1955  053A  3E43               	addlw	67
  1956  053B  0084               	movwf	4
  1957  053C  1383               	bcf	3,7	;select IRP bank0
  1958  053D  0800               	movf	0,w
  1959  053E  00F5               	movwf	??_Tetris_RemovePlayerFromTable+2
  1960  053F  0A84               	incf	4,f
  1961  0540  0800               	movf	0,w
  1962  0541  00F6               	movwf	??_Tetris_RemovePlayerFromTable+3
  1963  0542  09F5               	comf	??_Tetris_RemovePlayerFromTable+2,f
  1964  0543  09F6               	comf	??_Tetris_RemovePlayerFromTable+3,f
  1965  0544  087B               	movf	Tetris_RemovePlayerFromTable@start,w
  1966  0545  00F7               	movwf	??_Tetris_RemovePlayerFromTable+4
  1967  0546  0777               	addwf	??_Tetris_RemovePlayerFromTable+4,w
  1968  0547  077C               	addwf	Tetris_RemovePlayerFromTable@game,w
  1969  0548  00F8               	movwf	??_Tetris_RemovePlayerFromTable+5
  1970  0549  087D               	movf	Tetris_RemovePlayerFromTable@i,w
  1971  054A  00F9               	movwf	??_Tetris_RemovePlayerFromTable+6
  1972  054B  0779               	addwf	??_Tetris_RemovePlayerFromTable+6,w
  1973  054C  0778               	addwf	??_Tetris_RemovePlayerFromTable+5,w
  1974  054D  00FA               	movwf	??_Tetris_RemovePlayerFromTable+7
  1975  054E  087A               	movf	??_Tetris_RemovePlayerFromTable+7,w
  1976  054F  0084               	movwf	4
  1977  0550  0875               	movf	??_Tetris_RemovePlayerFromTable+2,w
  1978  0551  0580               	andwf	0,f
  1979  0552  0A84               	incf	4,f
  1980  0553  0876               	movf	??_Tetris_RemovePlayerFromTable+3,w
  1981  0554  0580               	andwf	0,f
  1982                           
  1983                           ;../Tetris/Tetris.c: 126:  }
  1984  0555  3001               	movlw	1
  1985  0556  00F3               	movwf	??_Tetris_RemovePlayerFromTable
  1986  0557  0873               	movf	??_Tetris_RemovePlayerFromTable,w
  1987  0558  07FD               	addwf	Tetris_RemovePlayerFromTable@i,f
  1988  0559  3004               	movlw	4
  1989  055A  027D               	subwf	Tetris_RemovePlayerFromTable@i,w
  1990  055B  1803               	btfsc	3,0
  1991  055C  0008               	return
  1992  055D  2D34               	goto	l1277
  1993  055E                     __end_of_Tetris_RemovePlayerFromTable:	
  1994                           
  1995                           	psect	text12
  1996  0444                     __ptext12:	
  1997 ;; *************** function _Tetris_PlayerTouchingLeftBound *****************
  1998 ;; Defined at:
  1999 ;;		line 98 in file "../Tetris/Tetris.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  player          1    wreg     PTR struct .
  2002 ;;		 -> main@game(78), 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  player          1    4[COMMON] PTR struct .
  2005 ;;		 -> main@game(78), 
  2006 ;;  i               1    5[COMMON] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      unsigned char 
  2009 ;; Registers used:
  2010 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2016 ;;      Params:         0       0       0       0
  2017 ;;      Locals:         2       0       0       0
  2018 ;;      Temps:          4       0       0       0
  2019 ;;      Totals:         6       0       0       0
  2020 ;;Total ram usage:        6 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_Tetris_MovePlayerLeft
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           
  2030                           ;psect for function _Tetris_PlayerTouchingLeftBound
  2031  0444                     _Tetris_PlayerTouchingLeftBound:	
  2032                           
  2033                           ;incstack = 0
  2034                           ; Regs used in _Tetris_PlayerTouchingLeftBound: [wreg-fsr0h+status,2+status,0]
  2035                           ;Tetris_PlayerTouchingLeftBound@player stored from wreg
  2036  0444  00F4               	movwf	Tetris_PlayerTouchingLeftBound@player
  2037                           
  2038                           ;../Tetris/Tetris.c: 98: static uint8_t Tetris_PlayerTouchingLeftBound(Tetris_Player *pl
      +                          ayer);../Tetris/Tetris.c: 99: {;../Tetris/Tetris.c: 100:  for (uint8_t i = 0; i < TETRIS
      +                          _UNIT_HEIGHT; ++i)
  2039  0445  01F5               	clrf	Tetris_PlayerTouchingLeftBound@i
  2040  0446                     l1255:	
  2041                           
  2042                           ;../Tetris/Tetris.c: 101:  {;../Tetris/Tetris.c: 102:   if (player->unitBits[i] & 0x8000
      +                          )
  2043  0446  0875               	movf	Tetris_PlayerTouchingLeftBound@i,w
  2044  0447  00F0               	movwf	??_Tetris_PlayerTouchingLeftBound
  2045  0448  0770               	addwf	??_Tetris_PlayerTouchingLeftBound,w
  2046  0449  0774               	addwf	Tetris_PlayerTouchingLeftBound@player,w
  2047  044A  00F1               	movwf	??_Tetris_PlayerTouchingLeftBound+1
  2048  044B  0871               	movf	??_Tetris_PlayerTouchingLeftBound+1,w
  2049  044C  3E03               	addlw	3
  2050  044D  0084               	movwf	4
  2051  044E  1383               	bcf	3,7	;select IRP bank0
  2052  044F  0800               	movf	0,w
  2053  0450  00F2               	movwf	??_Tetris_PlayerTouchingLeftBound+2
  2054  0451  0A84               	incf	4,f
  2055  0452  0800               	movf	0,w
  2056  0453  00F3               	movwf	??_Tetris_PlayerTouchingLeftBound+3
  2057  0454  1FF3               	btfss	??_Tetris_PlayerTouchingLeftBound+3,7
  2058  0455  2C58               	goto	l1261
  2059                           
  2060                           ;../Tetris/Tetris.c: 103:    return 1;
  2061  0456  3001               	movlw	1
  2062  0457  0008               	return
  2063  0458                     l1261:	
  2064                           
  2065                           ;../Tetris/Tetris.c: 104:  }
  2066  0458  3001               	movlw	1
  2067  0459  00F0               	movwf	??_Tetris_PlayerTouchingLeftBound
  2068  045A  0870               	movf	??_Tetris_PlayerTouchingLeftBound,w
  2069  045B  07F5               	addwf	Tetris_PlayerTouchingLeftBound@i,f
  2070  045C  3004               	movlw	4
  2071  045D  0275               	subwf	Tetris_PlayerTouchingLeftBound@i,w
  2072  045E  1C03               	skipc
  2073  045F  2C46               	goto	l1255
  2074                           
  2075                           ;../Tetris/Tetris.c: 106:  return 0;
  2076  0460  3000               	movlw	0
  2077  0461  0008               	return
  2078  0462                     __end_of_Tetris_PlayerTouchingLeftBound:	
  2079                           
  2080                           	psect	text13
  2081  059D                     __ptext13:	
  2082 ;; *************** function _Tetris_PlayerOverlapsEnvironment *****************
  2083 ;; Defined at:
  2084 ;;		line 86 in file "../Tetris/Tetris.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  game            1    wreg     PTR struct .
  2087 ;;		 -> main@game(78), 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  game            1    4[COMMON] PTR struct .
  2090 ;;		 -> main@game(78), 
  2091 ;;  i               1    5[COMMON] unsigned char 
  2092 ;;  start           1    3[COMMON] unsigned char 
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      unsigned char 
  2095 ;; Registers used:
  2096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2102 ;;      Params:         0       0       0       0
  2103 ;;      Locals:         3       0       0       0
  2104 ;;      Temps:          0      12       0       0
  2105 ;;      Totals:         3      12       0       0
  2106 ;;Total ram usage:       15 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    2
  2109 ;; This function calls:
  2110 ;;		_Tetris_PlayerTopmostY
  2111 ;; This function is called by:
  2112 ;;		_Tetris_MovePlayerLeft
  2113 ;;		_Tetris_RotatePlayer
  2114 ;;		_Tetris_MovePlayerDown
  2115 ;;		_Tetris_MovePlayerRight
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           
  2120                           ;psect for function _Tetris_PlayerOverlapsEnvironment
  2121  059D                     _Tetris_PlayerOverlapsEnvironment:	
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in _Tetris_PlayerOverlapsEnvironment: [wreg-fsr0h+status,2+status,0+pclath+c
      +                          stack]
  2125                           ;Tetris_PlayerOverlapsEnvironment@game stored from wreg
  2126  059D  00F4               	movwf	Tetris_PlayerOverlapsEnvironment@game
  2127                           
  2128                           ;../Tetris/Tetris.c: 86: static uint8_t Tetris_PlayerOverlapsEnvironment(Tetris_Game *ga
      +                          me);../Tetris/Tetris.c: 87: {;../Tetris/Tetris.c: 88:  uint8_t start = Tetris_PlayerTopm
      +                          ostY(&game->player);
  2129  059E  0874               	movf	Tetris_PlayerOverlapsEnvironment@game,w
  2130  059F  3E40               	addlw	64
  2131  05A0  118A  23C6  118A   	fcall	_Tetris_PlayerTopmostY
  2132  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  2133  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  2134  05A5  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  2135  05A6  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  2136  05A7  00F3               	movwf	Tetris_PlayerOverlapsEnvironment@start
  2137                           
  2138                           ;../Tetris/Tetris.c: 89:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  2139  05A8  01F5               	clrf	Tetris_PlayerOverlapsEnvironment@i
  2140  05A9                     l1235:	
  2141                           
  2142                           ;../Tetris/Tetris.c: 90:  {;../Tetris/Tetris.c: 91:   if (game->player.unitBits[i] & gam
      +                          e->table[i + start])
  2143  05A9  0875               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  2144  05AA  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  2145  05AB  0720               	addwf	??_Tetris_PlayerOverlapsEnvironment,w
  2146  05AC  0774               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  2147  05AD  00A1               	movwf	??_Tetris_PlayerOverlapsEnvironment+1
  2148  05AE  0873               	movf	Tetris_PlayerOverlapsEnvironment@start,w
  2149  05AF  00A2               	movwf	??_Tetris_PlayerOverlapsEnvironment+2
  2150  05B0  0722               	addwf	??_Tetris_PlayerOverlapsEnvironment+2,w
  2151  05B1  0721               	addwf	??_Tetris_PlayerOverlapsEnvironment+1,w
  2152  05B2  00A3               	movwf	??_Tetris_PlayerOverlapsEnvironment+3
  2153  05B3  0823               	movf	??_Tetris_PlayerOverlapsEnvironment+3,w
  2154  05B4  0084               	movwf	4
  2155  05B5  1383               	bcf	3,7	;select IRP bank0
  2156  05B6  0800               	movf	0,w
  2157  05B7  00A4               	movwf	??_Tetris_PlayerOverlapsEnvironment+4
  2158  05B8  0A84               	incf	4,f
  2159  05B9  0800               	movf	0,w
  2160  05BA  00A5               	movwf	??_Tetris_PlayerOverlapsEnvironment+5
  2161  05BB  0875               	movf	Tetris_PlayerOverlapsEnvironment@i,w
  2162  05BC  00A6               	movwf	??_Tetris_PlayerOverlapsEnvironment+6
  2163  05BD  0726               	addwf	??_Tetris_PlayerOverlapsEnvironment+6,w
  2164  05BE  0774               	addwf	Tetris_PlayerOverlapsEnvironment@game,w
  2165  05BF  00A7               	movwf	??_Tetris_PlayerOverlapsEnvironment+7
  2166  05C0  0827               	movf	??_Tetris_PlayerOverlapsEnvironment+7,w
  2167  05C1  3E43               	addlw	67
  2168  05C2  0084               	movwf	4
  2169  05C3  0800               	movf	0,w
  2170  05C4  00A8               	movwf	??_Tetris_PlayerOverlapsEnvironment+8
  2171  05C5  0A84               	incf	4,f
  2172  05C6  0800               	movf	0,w
  2173  05C7  00A9               	movwf	??_Tetris_PlayerOverlapsEnvironment+9
  2174  05C8  0824               	movf	??_Tetris_PlayerOverlapsEnvironment+4,w
  2175  05C9  0528               	andwf	??_Tetris_PlayerOverlapsEnvironment+8,w
  2176  05CA  00AA               	movwf	??_Tetris_PlayerOverlapsEnvironment+10
  2177  05CB  0825               	movf	??_Tetris_PlayerOverlapsEnvironment+5,w
  2178  05CC  0529               	andwf	??_Tetris_PlayerOverlapsEnvironment+9,w
  2179  05CD  00AB               	movwf	??_Tetris_PlayerOverlapsEnvironment+11
  2180  05CE  082A               	movf	??_Tetris_PlayerOverlapsEnvironment+10,w
  2181  05CF  042B               	iorwf	??_Tetris_PlayerOverlapsEnvironment+11,w
  2182  05D0  1903               	btfsc	3,2
  2183  05D1  2DD4               	goto	l1241
  2184                           
  2185                           ;../Tetris/Tetris.c: 92:    return 1;
  2186  05D2  3001               	movlw	1
  2187  05D3  0008               	return
  2188  05D4                     l1241:	
  2189                           
  2190                           ;../Tetris/Tetris.c: 93:  }
  2191  05D4  3001               	movlw	1
  2192  05D5  00A0               	movwf	??_Tetris_PlayerOverlapsEnvironment
  2193  05D6  0820               	movf	??_Tetris_PlayerOverlapsEnvironment,w
  2194  05D7  07F5               	addwf	Tetris_PlayerOverlapsEnvironment@i,f
  2195  05D8  3004               	movlw	4
  2196  05D9  0275               	subwf	Tetris_PlayerOverlapsEnvironment@i,w
  2197  05DA  1C03               	skipc
  2198  05DB  2DA9               	goto	l1235
  2199                           
  2200                           ;../Tetris/Tetris.c: 95:  return 0;
  2201  05DC  3000               	movlw	0
  2202  05DD  0008               	return
  2203  05DE                     __end_of_Tetris_PlayerOverlapsEnvironment:	
  2204                           
  2205                           	psect	text14
  2206  04C5                     __ptext14:	
  2207 ;; *************** function _Tetris_ApplyPlayerToTable *****************
  2208 ;; Defined at:
  2209 ;;		line 129 in file "../Tetris/Tetris.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;  game            1    wreg     PTR struct .
  2212 ;;		 -> main@game(78), 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  game            1   13[COMMON] PTR struct .
  2215 ;;		 -> main@game(78), 
  2216 ;;  i               1   12[COMMON] unsigned char 
  2217 ;;  start           1   11[COMMON] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2227 ;;      Params:         0       0       0       0
  2228 ;;      Locals:         3       0       0       0
  2229 ;;      Temps:          8       0       0       0
  2230 ;;      Totals:        11       0       0       0
  2231 ;;Total ram usage:       11 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:    2
  2234 ;; This function calls:
  2235 ;;		_Tetris_PlayerTopmostY
  2236 ;; This function is called by:
  2237 ;;		_Tetris_ResetGame
  2238 ;;		_Tetris_MovePlayerLeft
  2239 ;;		_Tetris_RotatePlayer
  2240 ;;		_Tetris_MovePlayerDown
  2241 ;;		_Tetris_MovePlayerRight
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           
  2246                           ;psect for function _Tetris_ApplyPlayerToTable
  2247  04C5                     _Tetris_ApplyPlayerToTable:	
  2248                           
  2249                           ;incstack = 0
  2250                           ; Regs used in _Tetris_ApplyPlayerToTable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2251                           ;Tetris_ApplyPlayerToTable@game stored from wreg
  2252  04C5  00FD               	movwf	Tetris_ApplyPlayerToTable@game
  2253                           
  2254                           ;../Tetris/Tetris.c: 129: static void Tetris_ApplyPlayerToTable(Tetris_Game *game);../Te
      +                          tris/Tetris.c: 130: {;../Tetris/Tetris.c: 131:  uint8_t start = Tetris_PlayerTopmostY(&g
      +                          ame->player);
  2255  04C6  087D               	movf	Tetris_ApplyPlayerToTable@game,w
  2256  04C7  3E40               	addlw	64
  2257  04C8  118A  23C6  118A   	fcall	_Tetris_PlayerTopmostY
  2258  04CB  00F3               	movwf	??_Tetris_ApplyPlayerToTable
  2259  04CC  0873               	movf	??_Tetris_ApplyPlayerToTable,w
  2260  04CD  00FB               	movwf	Tetris_ApplyPlayerToTable@start
  2261                           
  2262                           ;../Tetris/Tetris.c: 132:  for (uint8_t i = 0; i < TETRIS_UNIT_HEIGHT; ++i)
  2263  04CE  01FC               	clrf	Tetris_ApplyPlayerToTable@i
  2264  04CF                     l1291:	
  2265                           
  2266                           ;../Tetris/Tetris.c: 133:  {;../Tetris/Tetris.c: 134:   game->table[start + i] |= game->
      +                          player.unitBits[i];
  2267  04CF  087C               	movf	Tetris_ApplyPlayerToTable@i,w
  2268  04D0  00F3               	movwf	??_Tetris_ApplyPlayerToTable
  2269  04D1  0773               	addwf	??_Tetris_ApplyPlayerToTable,w
  2270  04D2  077D               	addwf	Tetris_ApplyPlayerToTable@game,w
  2271  04D3  00F4               	movwf	??_Tetris_ApplyPlayerToTable+1
  2272  04D4  0874               	movf	??_Tetris_ApplyPlayerToTable+1,w
  2273  04D5  3E43               	addlw	67
  2274  04D6  0084               	movwf	4
  2275  04D7  1383               	bcf	3,7	;select IRP bank0
  2276  04D8  0800               	movf	0,w
  2277  04D9  00F5               	movwf	??_Tetris_ApplyPlayerToTable+2
  2278  04DA  0A84               	incf	4,f
  2279  04DB  0800               	movf	0,w
  2280  04DC  00F6               	movwf	??_Tetris_ApplyPlayerToTable+3
  2281  04DD  087B               	movf	Tetris_ApplyPlayerToTable@start,w
  2282  04DE  00F7               	movwf	??_Tetris_ApplyPlayerToTable+4
  2283  04DF  0777               	addwf	??_Tetris_ApplyPlayerToTable+4,w
  2284  04E0  077D               	addwf	Tetris_ApplyPlayerToTable@game,w
  2285  04E1  00F8               	movwf	??_Tetris_ApplyPlayerToTable+5
  2286  04E2  087C               	movf	Tetris_ApplyPlayerToTable@i,w
  2287  04E3  00F9               	movwf	??_Tetris_ApplyPlayerToTable+6
  2288  04E4  0779               	addwf	??_Tetris_ApplyPlayerToTable+6,w
  2289  04E5  0778               	addwf	??_Tetris_ApplyPlayerToTable+5,w
  2290  04E6  00FA               	movwf	??_Tetris_ApplyPlayerToTable+7
  2291  04E7  087A               	movf	??_Tetris_ApplyPlayerToTable+7,w
  2292  04E8  0084               	movwf	4
  2293  04E9  0875               	movf	??_Tetris_ApplyPlayerToTable+2,w
  2294  04EA  0480               	iorwf	0,f
  2295  04EB  0A84               	incf	4,f
  2296  04EC  0876               	movf	??_Tetris_ApplyPlayerToTable+3,w
  2297  04ED  0480               	iorwf	0,f
  2298                           
  2299                           ;../Tetris/Tetris.c: 135:  }
  2300  04EE  3001               	movlw	1
  2301  04EF  00F3               	movwf	??_Tetris_ApplyPlayerToTable
  2302  04F0  0873               	movf	??_Tetris_ApplyPlayerToTable,w
  2303  04F1  07FC               	addwf	Tetris_ApplyPlayerToTable@i,f
  2304  04F2  3004               	movlw	4
  2305  04F3  027C               	subwf	Tetris_ApplyPlayerToTable@i,w
  2306  04F4  1803               	btfsc	3,0
  2307  04F5  0008               	return
  2308  04F6  2CCF               	goto	l1291
  2309  04F7                     __end_of_Tetris_ApplyPlayerToTable:	
  2310                           
  2311                           	psect	text15
  2312  03C6                     __ptext15:	
  2313 ;; *************** function _Tetris_PlayerTopmostY *****************
  2314 ;; Defined at:
  2315 ;;		line 81 in file "../Tetris/Tetris.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  player          1    wreg     PTR struct .
  2318 ;;		 -> main@game(78), 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  player          1    2[COMMON] PTR struct .
  2321 ;;		 -> main@game(78), 
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      unsigned char 
  2324 ;; Registers used:
  2325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2331 ;;      Params:         0       0       0       0
  2332 ;;      Locals:         1       0       0       0
  2333 ;;      Temps:          2       0       0       0
  2334 ;;      Totals:         3       0       0       0
  2335 ;;Total ram usage:        3 bytes
  2336 ;; Hardware stack levels used:    2
  2337 ;; This function calls:
  2338 ;;		Nothing
  2339 ;; This function is called by:
  2340 ;;		_Tetris_PlayerOverlapsEnvironment
  2341 ;;		_Tetris_RemovePlayerFromTable
  2342 ;;		_Tetris_ApplyPlayerToTable
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _Tetris_PlayerTopmostY
  2348  03C6                     _Tetris_PlayerTopmostY:	
  2349                           
  2350                           ;incstack = 0
  2351                           ; Regs used in _Tetris_PlayerTopmostY: [wreg-fsr0h+status,2+status,0+pclath]
  2352                           ;Tetris_PlayerTopmostY@player stored from wreg
  2353  03C6  00F2               	movwf	Tetris_PlayerTopmostY@player
  2354                           
  2355                           ;../Tetris/Tetris.c: 81: static uint8_t Tetris_PlayerTopmostY(Tetris_Player *player);../
      +                          Tetris/Tetris.c: 82: {;../Tetris/Tetris.c: 83:  return player->position.y - Tetris_unitP
      +                          ivot.y;
  2356  03C7  3004               	movlw	low (((_Tetris_unitPivot+1)-__stringbase)| (0+32768))
  2357  03C8  0084               	movwf	4
  2358  03C9  118A  200C         	fcall	stringdir
  2359  03CB  00F0               	movwf	??_Tetris_PlayerTopmostY
  2360  03CC  0A72               	incf	Tetris_PlayerTopmostY@player,w
  2361  03CD  0084               	movwf	4
  2362  03CE  1383               	bcf	3,7	;select IRP bank0
  2363  03CF  0800               	movf	0,w
  2364  03D0  00F1               	movwf	??_Tetris_PlayerTopmostY+1
  2365  03D1  0870               	movf	??_Tetris_PlayerTopmostY,w
  2366  03D2  0271               	subwf	??_Tetris_PlayerTopmostY+1,w
  2367  03D3  0008               	return
  2368  03D4                     __end_of_Tetris_PlayerTopmostY:	
  2369                           
  2370                           	psect	text16
  2371  0427                     __ptext16:	
  2372 ;; *************** function _Tetris_GetRandomUnit *****************
  2373 ;; Defined at:
  2374 ;;		line 192 in file "../Tetris/Tetris.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;		None
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;		None
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      PTR const struct .
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0, pclath, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2388 ;;      Params:         0       0       0       0
  2389 ;;      Locals:         0       0       0       0
  2390 ;;      Temps:          0       1       0       0
  2391 ;;      Totals:         0       1       0       0
  2392 ;;Total ram usage:        1 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    2
  2395 ;; This function calls:
  2396 ;;		___awmod
  2397 ;;		___bmul
  2398 ;;		_rand
  2399 ;; This function is called by:
  2400 ;;		_main
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           
  2405                           ;psect for function _Tetris_GetRandomUnit
  2406  0427                     _Tetris_GetRandomUnit:	
  2407                           
  2408                           ;../Tetris/Tetris.c: 195:  return Tetris_units + (rand() % TETRIS_NUM_UNITS);
  2409                           
  2410                           ;incstack = 0
  2411                           ; Regs used in _Tetris_GetRandomUnit: [wreg+status,2+status,0+pclath+cstack]
  2412  0427  3021               	movlw	33
  2413  0428  1283               	bcf	3,5	;RP0=0, select bank0
  2414  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2415  042A  00B1               	movwf	??_Tetris_GetRandomUnit
  2416  042B  0831               	movf	??_Tetris_GetRandomUnit,w
  2417  042C  00AD               	movwf	___bmul@multiplicand
  2418  042D  118A  261F  118A   	fcall	_rand
  2419  0430  1283               	bcf	3,5	;RP0=0, select bank0
  2420  0431  1303               	bcf	3,6	;RP1=0, select bank0
  2421  0432  0821               	movf	?_rand+1,w
  2422  0433  00AA               	movwf	___awmod@dividend+1
  2423  0434  0820               	movf	?_rand,w
  2424  0435  00A9               	movwf	___awmod@dividend
  2425  0436  3003               	movlw	3
  2426  0437  00A7               	movwf	___awmod@divisor
  2427  0438  3000               	movlw	0
  2428  0439  00A8               	movwf	___awmod@divisor+1
  2429  043A  118A  2664  118A   	fcall	___awmod
  2430  043D  1283               	bcf	3,5	;RP0=0, select bank0
  2431  043E  1303               	bcf	3,6	;RP1=0, select bank0
  2432  043F  0827               	movf	?___awmod,w
  2433  0440  118A  23E3         	fcall	___bmul
  2434  0442  3E05               	addlw	low ((_Tetris_units-__stringbase)| (0+32768))
  2435  0443  0008               	return
  2436  0444                     __end_of_Tetris_GetRandomUnit:	
  2437                           
  2438                           	psect	text17
  2439  061F                     __ptext17:	
  2440 ;; *************** function _rand *****************
  2441 ;; Defined at:
  2442 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;		None
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  2    0[BANK0 ] int 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0, pclath, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2456 ;;      Params:         0       2       0       0
  2457 ;;      Locals:         0       0       0       0
  2458 ;;      Temps:          0       5       0       0
  2459 ;;      Totals:         0       7       0       0
  2460 ;;Total ram usage:        7 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    1
  2463 ;; This function calls:
  2464 ;;		___lmul
  2465 ;; This function is called by:
  2466 ;;		_Tetris_GetRandomUnit
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           
  2471                           ;psect for function _rand
  2472  061F                     _rand:	
  2473                           
  2474                           ;incstack = 0
  2475                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  2476  061F  1283               	bcf	3,5	;RP0=0, select bank0
  2477  0620  1303               	bcf	3,6	;RP1=0, select bank0
  2478  0621  0839               	movf	_randx+3,w
  2479  0622  00F3               	movwf	___lmul@multiplier+3
  2480  0623  0838               	movf	_randx+2,w
  2481  0624  00F2               	movwf	___lmul@multiplier+2
  2482  0625  0837               	movf	_randx+1,w
  2483  0626  00F1               	movwf	___lmul@multiplier+1
  2484  0627  0836               	movf	_randx,w
  2485  0628  00F0               	movwf	___lmul@multiplier
  2486  0629  3041               	movlw	65
  2487  062A  00F7               	movwf	___lmul@multiplicand+3
  2488  062B  30C6               	movlw	198
  2489  062C  00F6               	movwf	___lmul@multiplicand+2
  2490  062D  304E               	movlw	78
  2491  062E  00F5               	movwf	___lmul@multiplicand+1
  2492  062F  306D               	movlw	109
  2493  0630  00F4               	movwf	___lmul@multiplicand
  2494  0631  118A  255E  118A   	fcall	___lmul
  2495  0634  0873               	movf	?___lmul+3,w
  2496  0635  1283               	bcf	3,5	;RP0=0, select bank0
  2497  0636  1303               	bcf	3,6	;RP1=0, select bank0
  2498  0637  00B9               	movwf	_randx+3
  2499  0638  0872               	movf	?___lmul+2,w
  2500  0639  00B8               	movwf	_randx+2
  2501  063A  0871               	movf	?___lmul+1,w
  2502  063B  00B7               	movwf	_randx+1
  2503  063C  0870               	movf	?___lmul,w
  2504  063D  00B6               	movwf	_randx
  2505  063E  3039               	movlw	57
  2506  063F  07B6               	addwf	_randx,f
  2507  0640  3030               	movlw	48
  2508  0641  1803               	skipnc
  2509  0642  3031               	movlw	49
  2510  0643  07B7               	addwf	_randx+1,f
  2511  0644  3000               	movlw	0
  2512  0645  1803               	skipnc
  2513  0646  3001               	movlw	1
  2514  0647  07B8               	addwf	_randx+2,f
  2515  0648  3000               	movlw	0
  2516  0649  1803               	skipnc
  2517  064A  3001               	movlw	1
  2518  064B  07B9               	addwf	_randx+3,f
  2519  064C  0836               	movf	_randx,w
  2520  064D  00A2               	movwf	??_rand
  2521  064E  0837               	movf	_randx+1,w
  2522  064F  00A3               	movwf	??_rand+1
  2523  0650  0838               	movf	_randx+2,w
  2524  0651  00A4               	movwf	??_rand+2
  2525  0652  0839               	movf	_randx+3,w
  2526  0653  00A5               	movwf	??_rand+3
  2527  0654  3010               	movlw	16
  2528  0655  00A6               	movwf	??_rand+4
  2529  0656                     u805:	
  2530  0656  0D25               	rlf	??_rand+3,w
  2531  0657  0CA5               	rrf	??_rand+3,f
  2532  0658  0CA4               	rrf	??_rand+2,f
  2533  0659  0CA3               	rrf	??_rand+1,f
  2534  065A  0CA2               	rrf	??_rand,f
  2535  065B  0BA6               	decfsz	??_rand+4,f
  2536  065C  2E56               	goto	u805
  2537  065D  30FF               	movlw	255
  2538  065E  0522               	andwf	??_rand,w
  2539  065F  00A0               	movwf	?_rand
  2540  0660  307F               	movlw	127
  2541  0661  0523               	andwf	??_rand+1,w
  2542  0662  00A1               	movwf	?_rand+1
  2543  0663  0008               	return
  2544  0664                     __end_of_rand:	
  2545                           
  2546                           	psect	text18
  2547  055E                     __ptext18:	
  2548 ;; *************** function ___lmul *****************
  2549 ;; Defined at:
  2550 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  multiplier      4    0[COMMON] unsigned long 
  2553 ;;  multiplicand    4    4[COMMON] unsigned long 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  product         4    9[COMMON] unsigned long 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  4    0[COMMON] unsigned long 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2565 ;;      Params:         8       0       0       0
  2566 ;;      Locals:         4       0       0       0
  2567 ;;      Temps:          1       0       0       0
  2568 ;;      Totals:        13       0       0       0
  2569 ;;Total ram usage:       13 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_rand
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           
  2579                           ;psect for function ___lmul
  2580  055E                     ___lmul:	
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2584  055E  3000               	movlw	0
  2585  055F  00FC               	movwf	___lmul@product+3
  2586  0560  3000               	movlw	0
  2587  0561  00FB               	movwf	___lmul@product+2
  2588  0562  3000               	movlw	0
  2589  0563  00FA               	movwf	___lmul@product+1
  2590  0564  3000               	movlw	0
  2591  0565  00F9               	movwf	___lmul@product
  2592  0566                     l1215:	
  2593  0566  1C70               	btfss	___lmul@multiplier,0
  2594  0567  2D7C               	goto	l1219
  2595  0568  0874               	movf	___lmul@multiplicand,w
  2596  0569  07F9               	addwf	___lmul@product,f
  2597  056A  0875               	movf	___lmul@multiplicand+1,w
  2598  056B  1103               	clrz
  2599  056C  1803               	skipnc
  2600  056D  3E01               	addlw	1
  2601  056E  1D03               	btfss	3,2
  2602  056F  07FA               	addwf	___lmul@product+1,f
  2603  0570  0876               	movf	___lmul@multiplicand+2,w
  2604  0571  1103               	clrz
  2605  0572  1803               	skipnc
  2606  0573  3E01               	addlw	1
  2607  0574  1D03               	btfss	3,2
  2608  0575  07FB               	addwf	___lmul@product+2,f
  2609  0576  0877               	movf	___lmul@multiplicand+3,w
  2610  0577  1103               	clrz
  2611  0578  1803               	skipnc
  2612  0579  3E01               	addlw	1
  2613  057A  1D03               	btfss	3,2
  2614  057B  07FC               	addwf	___lmul@product+3,f
  2615  057C                     l1219:	
  2616  057C  3001               	movlw	1
  2617  057D  00F8               	movwf	??___lmul
  2618  057E                     u685:	
  2619  057E  1003               	clrc
  2620  057F  0DF4               	rlf	___lmul@multiplicand,f
  2621  0580  0DF5               	rlf	___lmul@multiplicand+1,f
  2622  0581  0DF6               	rlf	___lmul@multiplicand+2,f
  2623  0582  0DF7               	rlf	___lmul@multiplicand+3,f
  2624  0583  0BF8               	decfsz	??___lmul,f
  2625  0584  2D7E               	goto	u685
  2626  0585  3001               	movlw	1
  2627  0586                     u695:	
  2628  0586  1003               	clrc
  2629  0587  0CF3               	rrf	___lmul@multiplier+3,f
  2630  0588  0CF2               	rrf	___lmul@multiplier+2,f
  2631  0589  0CF1               	rrf	___lmul@multiplier+1,f
  2632  058A  0CF0               	rrf	___lmul@multiplier,f
  2633  058B  3EFF               	addlw	-1
  2634  058C  1D03               	skipz
  2635  058D  2D86               	goto	u695
  2636  058E  0873               	movf	___lmul@multiplier+3,w
  2637  058F  0472               	iorwf	___lmul@multiplier+2,w
  2638  0590  0471               	iorwf	___lmul@multiplier+1,w
  2639  0591  0470               	iorwf	___lmul@multiplier,w
  2640  0592  1D03               	skipz
  2641  0593  2D66               	goto	l1215
  2642  0594  087C               	movf	___lmul@product+3,w
  2643  0595  00F3               	movwf	?___lmul+3
  2644  0596  087B               	movf	___lmul@product+2,w
  2645  0597  00F2               	movwf	?___lmul+2
  2646  0598  087A               	movf	___lmul@product+1,w
  2647  0599  00F1               	movwf	?___lmul+1
  2648  059A  0879               	movf	___lmul@product,w
  2649  059B  00F0               	movwf	?___lmul
  2650  059C  0008               	return
  2651  059D                     __end_of___lmul:	
  2652                           
  2653                           	psect	text19
  2654  03E3                     __ptext19:	
  2655 ;; *************** function ___bmul *****************
  2656 ;; Defined at:
  2657 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;  multiplier      1    wreg     unsigned char 
  2660 ;;  multiplicand    1   13[BANK0 ] unsigned char 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  multiplier      1   16[BANK0 ] unsigned char 
  2663 ;;  product         1   15[BANK0 ] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      unsigned char 
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2673 ;;      Params:         0       1       0       0
  2674 ;;      Locals:         0       2       0       0
  2675 ;;      Temps:          0       1       0       0
  2676 ;;      Totals:         0       4       0       0
  2677 ;;Total ram usage:        4 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_Tetris_GetRandomUnit
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           
  2687                           ;psect for function ___bmul
  2688  03E3                     ___bmul:	
  2689                           
  2690                           ;incstack = 0
  2691                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2692                           ;___bmul@multiplier stored from wreg
  2693  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2694  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2695  03E5  00B0               	movwf	___bmul@multiplier
  2696  03E6  01AF               	clrf	___bmul@product
  2697  03E7                     l1325:	
  2698  03E7  1C30               	btfss	___bmul@multiplier,0
  2699  03E8  2BED               	goto	l1329
  2700  03E9  082D               	movf	___bmul@multiplicand,w
  2701  03EA  00AE               	movwf	??___bmul
  2702  03EB  082E               	movf	??___bmul,w
  2703  03EC  07AF               	addwf	___bmul@product,f
  2704  03ED                     l1329:	
  2705  03ED  1003               	clrc
  2706  03EE  0DAD               	rlf	___bmul@multiplicand,f
  2707  03EF  1003               	clrc
  2708  03F0  0CB0               	rrf	___bmul@multiplier,f
  2709  03F1  0830               	movf	___bmul@multiplier,w
  2710  03F2  1D03               	btfss	3,2
  2711  03F3  2BE7               	goto	l1325
  2712  03F4  082F               	movf	___bmul@product,w
  2713  03F5  0008               	return
  2714  03F6                     __end_of___bmul:	
  2715                           
  2716                           	psect	text20
  2717  0664                     __ptext20:	
  2718 ;; *************** function ___awmod *****************
  2719 ;; Defined at:
  2720 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  divisor         2    7[BANK0 ] int 
  2723 ;;  dividend        2    9[BANK0 ] int 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  sign            1   12[BANK0 ] unsigned char 
  2726 ;;  counter         1   11[BANK0 ] unsigned char 
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  2    7[BANK0 ] int 
  2729 ;; Registers used:
  2730 ;;		wreg, status,2, status,0
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2736 ;;      Params:         0       4       0       0
  2737 ;;      Locals:         0       2       0       0
  2738 ;;      Temps:          1       0       0       0
  2739 ;;      Totals:         1       6       0       0
  2740 ;;Total ram usage:        7 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_Tetris_GetRandomUnit
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function ___awmod
  2751  0664                     ___awmod:	
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2755  0664  1283               	bcf	3,5	;RP0=0, select bank0
  2756  0665  1303               	bcf	3,6	;RP1=0, select bank0
  2757  0666  01AC               	clrf	___awmod@sign
  2758  0667  1FAA               	btfss	___awmod@dividend+1,7
  2759  0668  2E70               	goto	l1345
  2760  0669  09A9               	comf	___awmod@dividend,f
  2761  066A  09AA               	comf	___awmod@dividend+1,f
  2762  066B  0AA9               	incf	___awmod@dividend,f
  2763  066C  1903               	skipnz
  2764  066D  0AAA               	incf	___awmod@dividend+1,f
  2765  066E  01AC               	clrf	___awmod@sign
  2766  066F  0AAC               	incf	___awmod@sign,f
  2767  0670                     l1345:	
  2768  0670  1FA8               	btfss	___awmod@divisor+1,7
  2769  0671  2E77               	goto	l1349
  2770  0672  09A7               	comf	___awmod@divisor,f
  2771  0673  09A8               	comf	___awmod@divisor+1,f
  2772  0674  0AA7               	incf	___awmod@divisor,f
  2773  0675  1903               	skipnz
  2774  0676  0AA8               	incf	___awmod@divisor+1,f
  2775  0677                     l1349:	
  2776  0677  0827               	movf	___awmod@divisor,w
  2777  0678  0428               	iorwf	___awmod@divisor+1,w
  2778  0679  1903               	btfsc	3,2
  2779  067A  2EA4               	goto	l1367
  2780  067B  01AB               	clrf	___awmod@counter
  2781  067C  0AAB               	incf	___awmod@counter,f
  2782  067D                     l1357:	
  2783  067D  1BA8               	btfsc	___awmod@divisor+1,7
  2784  067E  2E8B               	goto	l1359
  2785  067F  3001               	movlw	1
  2786  0680                     u875:	
  2787  0680  1003               	clrc
  2788  0681  0DA7               	rlf	___awmod@divisor,f
  2789  0682  0DA8               	rlf	___awmod@divisor+1,f
  2790  0683  3EFF               	addlw	-1
  2791  0684  1D03               	skipz
  2792  0685  2E80               	goto	u875
  2793  0686  3001               	movlw	1
  2794  0687  00FD               	movwf	??___awmod
  2795  0688  087D               	movf	??___awmod,w
  2796  0689  07AB               	addwf	___awmod@counter,f
  2797  068A  2E7D               	goto	l1357
  2798  068B                     l1359:	
  2799  068B  0828               	movf	___awmod@divisor+1,w
  2800  068C  022A               	subwf	___awmod@dividend+1,w
  2801  068D  1D03               	skipz
  2802  068E  2E91               	goto	u895
  2803  068F  0827               	movf	___awmod@divisor,w
  2804  0690  0229               	subwf	___awmod@dividend,w
  2805  0691                     u895:	
  2806  0691  1C03               	skipc
  2807  0692  2E99               	goto	l1363
  2808  0693  0827               	movf	___awmod@divisor,w
  2809  0694  02A9               	subwf	___awmod@dividend,f
  2810  0695  0828               	movf	___awmod@divisor+1,w
  2811  0696  1C03               	skipc
  2812  0697  03AA               	decf	___awmod@dividend+1,f
  2813  0698  02AA               	subwf	___awmod@dividend+1,f
  2814  0699                     l1363:	
  2815  0699  3001               	movlw	1
  2816  069A                     u905:	
  2817  069A  1003               	clrc
  2818  069B  0CA8               	rrf	___awmod@divisor+1,f
  2819  069C  0CA7               	rrf	___awmod@divisor,f
  2820  069D  3EFF               	addlw	-1
  2821  069E  1D03               	skipz
  2822  069F  2E9A               	goto	u905
  2823  06A0  3001               	movlw	1
  2824  06A1  02AB               	subwf	___awmod@counter,f
  2825  06A2  1D03               	btfss	3,2
  2826  06A3  2E8B               	goto	l1359
  2827  06A4                     l1367:	
  2828  06A4  082C               	movf	___awmod@sign,w
  2829  06A5  1903               	btfsc	3,2
  2830  06A6  2EAC               	goto	l1371
  2831  06A7  09A9               	comf	___awmod@dividend,f
  2832  06A8  09AA               	comf	___awmod@dividend+1,f
  2833  06A9  0AA9               	incf	___awmod@dividend,f
  2834  06AA  1903               	skipnz
  2835  06AB  0AAA               	incf	___awmod@dividend+1,f
  2836  06AC                     l1371:	
  2837  06AC  082A               	movf	___awmod@dividend+1,w
  2838  06AD  00A8               	movwf	?___awmod+1
  2839  06AE  0829               	movf	___awmod@dividend,w
  2840  06AF  00A7               	movwf	?___awmod
  2841  06B0  0008               	return
  2842  06B1                     __end_of___awmod:	
  2843  007E                     btemp	set	126	;btemp
  2844  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    103
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      26
    BANK1            80     78      78
    BANK2            80      0       0

Pointer List with Targets:

    Tetris_MovePlayerRight@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_MovePlayerDown@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_RotatePlayer@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_MovePlayerLeft@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_ResetGame@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_ApplyPlayerToTable@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_RemovePlayerFromTable@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_PlayerOverlapsEnvironment@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    main@game.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    memset@p1	PTR void  size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    memset@p	PTR unsigned char  size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_RotatePlayer@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_RotatePlayer@game	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_MovePlayerRight@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_MovePlayerLeft@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_MovePlayerLeft@game	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_MovePlayerDown@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_ResetGame@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_ResetGame@playerUnit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    sp__memset	PTR void  size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_ResetGame@game	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    sp__Tetris_GetUnit	PTR const struct . size(1) Largest target is 99
		 -> NULL(NULL[0]), Tetris_units(CODE[99]), 

    Tetris_ResetPlayer@playerUnit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_ResetPlayer@player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_ResetPlayer@player	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_SetPlayerUnit@player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_SetPlayerUnit@unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_SetPlayerUnit@player	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_PlayerUnitBitsAreValid@player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_PlayerUnitBitsAreValid@player	PTR const struct . size(1) Largest target is 79
		 -> game.player(BANK0[13]), main@game(BANK1[78]), 

    Tetris_UpdatePlayerUnitBits@player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_UpdatePlayerUnitBits@player	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_CountUnitBits@unitBits	PTR const unsigned int  size(2) Largest target is 99
		 -> game.player(BANK0[13]), Tetris_units.bits(CODE[32]), Tetris_units(CODE[99]), main@game(BANK1[78]), 

    Tetris_ApplyPlayerToTable@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_ApplyPlayerToTable@game	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_RemovePlayerFromTable@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_RemovePlayerFromTable@game	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_PlayerTouchingRightBound@player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_PlayerTouchingLeftBound@player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_PlayerTouchingLeftBound@player	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_PlayerOverlapsEnvironment@game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_PlayerOverlapsEnvironment@game	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    Tetris_PlayerTopmostY@player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    Tetris_PlayerTopmostY@player	PTR struct . size(1) Largest target is 79
		 -> main@game(BANK1[78]), 

    sp__Tetris_GetRandomUnit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    S29$unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 

    game.player.unit	PTR const struct . size(1) Largest target is 99
		 -> Tetris_units(CODE[99]), 


Critical Paths under _main in COMMON

    _Tetris_RotatePlayer->_Tetris_ApplyPlayerToTable
    _Tetris_RotatePlayer->_Tetris_RemovePlayerFromTable
    _Tetris_PlayerUnitBitsAreValid->_Tetris_CountUnitBits
    _Tetris_ResetGame->_Tetris_ApplyPlayerToTable
    _Tetris_ResetPlayer->_Tetris_SetPlayerUnit
    _Tetris_SetPlayerUnit->_Tetris_UpdatePlayerUnitBits
    _Tetris_MovePlayerLeft->_Tetris_ApplyPlayerToTable
    _Tetris_MovePlayerLeft->_Tetris_RemovePlayerFromTable
    _Tetris_RemovePlayerFromTable->_Tetris_PlayerTopmostY
    _Tetris_PlayerOverlapsEnvironment->_Tetris_PlayerTopmostY
    _Tetris_ApplyPlayerToTable->_Tetris_PlayerTopmostY
    _Tetris_GetRandomUnit->___awmod
    _rand->___lmul
    ___bmul->___awmod

Critical Paths under _main in BANK0

    _main->_Tetris_ResetGame
    _Tetris_RotatePlayer->_Tetris_PlayerOverlapsEnvironment
    _Tetris_ResetGame->_Tetris_GetRandomUnit
    _Tetris_ResetPlayer->_Tetris_SetPlayerUnit
    _Tetris_MovePlayerLeft->_Tetris_PlayerOverlapsEnvironment
    _Tetris_GetRandomUnit->___bmul
    ___bmul->___awmod
    ___awmod->_rand

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                79    79      0    7523
                                             21 BANK0      1     1      0
                                              0 BANK1     78    78      0
               _Tetris_GetRandomUnit
              _Tetris_MovePlayerLeft
                   _Tetris_ResetGame
                _Tetris_RotatePlayer
 ---------------------------------------------------------------------------------
 (1) _Tetris_RotatePlayer                                  4     4      0    2899
                                             12 BANK0      4     4      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
      _Tetris_PlayerUnitBitsAreValid
       _Tetris_RemovePlayerFromTable
        _Tetris_UpdatePlayerUnitBits
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              7     6      1     235
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerUnitBitsAreValid                        5     5      0     435
                                             12 COMMON     1     1      0
                                              0 BANK0      4     4      0
               _Tetris_CountUnitBits
 ---------------------------------------------------------------------------------
 (4) _Tetris_CountUnitBits                                12    10      2     336
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (1) _Tetris_ResetGame                                     3     2      1    1895
                                             18 BANK0      3     2      1
          _Tetris_ApplyPlayerToTable
               _Tetris_GetRandomUnit (ARG)
                 _Tetris_ResetPlayer
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     281
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _Tetris_ResetPlayer                                   4     3      1     919
                                              1 BANK0      4     3      1
               _Tetris_SetPlayerUnit
 ---------------------------------------------------------------------------------
 (3) _Tetris_SetPlayerUnit                                 3     2      1     722
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
        _Tetris_UpdatePlayerUnitBits
 ---------------------------------------------------------------------------------
 (3) _Tetris_UpdatePlayerUnitBits                         12    12      0     547
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_MovePlayerLeft                                5     5      0    1808
                                             12 BANK0      5     5      0
          _Tetris_ApplyPlayerToTable
   _Tetris_PlayerOverlapsEnvironment
     _Tetris_PlayerTouchingLeftBound
       _Tetris_RemovePlayerFromTable
 ---------------------------------------------------------------------------------
 (2) _Tetris_RemovePlayerFromTable                        11    11      0     432
                                              3 COMMON    11    11      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerTouchingLeftBound                       6     6      0     123
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (2) _Tetris_PlayerOverlapsEnvironment                    15    15      0     432
                                              3 COMMON     3     3      0
                                              0 BANK0     12    12      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (2) _Tetris_ApplyPlayerToTable                           11    11      0     498
                                              3 COMMON    11    11      0
              _Tetris_PlayerTopmostY
 ---------------------------------------------------------------------------------
 (4) _Tetris_PlayerTopmostY                                3     3      0     121
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Tetris_GetRandomUnit                                 1     1      0     810
                                             17 BANK0      1     1      0
                            ___awmod
                             ___bmul
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 7     5      2     244
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     118
                                             13 BANK0      4     3      1
                            ___awmod (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Tetris_GetRandomUnit
     ___awmod
       _rand (ARG)
         ___lmul
     ___bmul
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _Tetris_MovePlayerLeft
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerTouchingLeftBound
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
   _Tetris_ResetGame
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_GetRandomUnit (ARG)
       ___awmod
         _rand (ARG)
           ___lmul
       ___bmul
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _Tetris_ResetPlayer (ARG)
       _Tetris_SetPlayerUnit
         _Tetris_UpdatePlayerUnitBits
     _memset (ARG)
   _Tetris_RotatePlayer
     _Tetris_ApplyPlayerToTable
       _Tetris_PlayerTopmostY
     _Tetris_PlayerOverlapsEnvironment
       _Tetris_PlayerTopmostY
     _Tetris_PlayerUnitBitsAreValid
       _Tetris_CountUnitBits
     _Tetris_RemovePlayerFromTable
       _Tetris_PlayerTopmostY
     _Tetris_UpdatePlayerUnitBits
     ___lbmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     4E      4E       5       97.5%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      1A       3       32.5%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      76      10        0.0%
ABS                  0      0      76       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Apr 26 22:33:09 2019

                                        pc 0002                             ___bmul@product 002F  
                                       fsr 0004                                        l425 04BF  
                                      u600 07E2                                        u605 07DD  
                                      u555 0771                                        u635 0607  
                                      u580 07C4                                        u805 0656  
                                      u905 069A                                        u585 07BF  
                                      u780 0528                                        u685 057E  
                                      u695 0586                                        u775 050A  
                                      u935 04AB                                        u875 0680  
                                      u895 0691                                        fsr0 0004  
                                      indf 0000                               ___awmod@sign 002C  
                                     l1215 0566                                       l1241 05D4  
                                     l1161 07D0                                       l1321 0410  
                                     l1219 057C                                       l1235 05A9  
                                     l1155 07B5                                       l1139 076A  
                                     l1325 03E7                                       l1261 0458  
                                     l1413 06C5                                       l1255 0446  
                                     l1345 0670                                       l1329 03ED  
                                     l1433 06FC                                       l1169 07D3  
                                     l1193 05E5                                       l1185 05E0  
                                     l1371 06AC                                       l1363 0699  
                                     l1291 04CF                                       l1435 0704  
                                     l1427 06E5                                       l1357 067D  
                                     l1349 0677                                       l1277 0534  
                                     l1197 0606                                       l1453 0762  
                                     l1359 068B                                       l1367 06A4  
                                     l1449 0753                                       l1379 04A8  
            ?_Tetris_RemovePlayerFromTable 0070               Tetris_ResetPlayer@playerUnit 0021  
               ?_Tetris_ApplyPlayerToTable 0070                                       _main 03F6  
                                     _rand 061F                                       btemp 007E  
                                     start 0000              Tetris_ApplyPlayerToTable@game 007D  
                        ___bmul@multiplier 0030               __end_of_Tetris_CountUnitBits 061F  
    __end_of_Tetris_PlayerUnitBitsAreValid 052A     __size_of_Tetris_PlayerUnitBitsAreValid 0033  
            _Tetris_PlayerUnitBitsAreValid 04F7                                      ?_main 0070  
                   ??_Tetris_GetRandomUnit 0031                                      ?_rand 0020  
                          __end_of___awmod 06B1                            __end_of___lbmod 04C5  
                      ___lmul@multiplicand 0074                  __size_of_Tetris_ResetGame 001F  
              Tetris_PlayerTopmostY@player 0072                                      _randx 0036  
                     Tetris_ResetGame@game 0034                                      pclath 000A  
                                    status 0003                                      wtemp0 007E  
        __end_of_Tetris_ApplyPlayerToTable 04F7        __end_of_Tetris_UpdatePlayerUnitBits 07EE  
              _Tetris_UpdatePlayerUnitBits 0768                            __initialization 07EE  
                             __end_of_main 040B                               __end_of_rand 0664  
                 Tetris_CountUnitBits@mask 0077                      Tetris_CountUnitBits@i 007B  
                    Tetris_CountUnitBits@j 007A                                     ??_main 0035  
                                   ??_rand 0022       Tetris_PlayerOverlapsEnvironment@game 0074  
           __size_of_Tetris_MovePlayerLeft 0057              __end_of_Tetris_MovePlayerLeft 0708  
           __size_of_Tetris_PlayerTopmostY 000E              __end_of_Tetris_PlayerTopmostY 03D4  
           ??_Tetris_RemovePlayerFromTable 0073                         _Tetris_ResetPlayer 0481  
                                   ___bmul 03E3                                     ___lmul 055E  
                                ??___awmod 007D                                  ??___lbmod 0071  
                                   _memset 040B                            ___awmod@divisor 0027  
                      ?_Tetris_ResetPlayer 0021                            ___awmod@counter 002B  
           ?_Tetris_PlayerUnitBitsAreValid 0070               Tetris_UpdatePlayerUnitBits@i 0079  
                     ??_Tetris_ResetPlayer 0022                            ___lbmod@divisor 0070  
                     _Tetris_CountUnitBits 05DE                    __end_of__initialization 07FD  
                          ___lbmod@counter 0075              __size_of_Tetris_SetPlayerUnit 000F  
                      ___bmul@multiplicand 002D                             __pcstackCOMMON 0070  
                             __pidataBANK0 03C2   __end_of_Tetris_PlayerOverlapsEnvironment 05DE  
__size_of_Tetris_PlayerOverlapsEnvironment 0041         ??_Tetris_PlayerOverlapsEnvironment 0020  
        ?_Tetris_PlayerOverlapsEnvironment 0070           _Tetris_PlayerOverlapsEnvironment 059D  
                         _Tetris_ResetGame 0462                      ?_Tetris_CountUnitBits 0070  
              ??_Tetris_ApplyPlayerToTable 0073             Tetris_RotatePlayer@oldRotation 002E  
                               __pmaintext 03F6                                    ?___bmul 002D  
                                  ?___lmul 0070               __size_of_Tetris_RotatePlayer 0060  
                                  ?_memset 0070                             ___lmul@product 0079  
                   Tetris_MovePlayerLeft@i 002E                                 __stringtab 0002  
    __end_of_Tetris_playerStartingPosition 0014              _Tetris_playerStartingPosition 0012  
                          __size_of___bmul 0013                   Tetris_SetPlayerUnit@unit 007C  
                          __size_of___lmul 003F                                    ___awmod 0664  
                                  ___lbmod 04A2            Tetris_PlayerTouchingLeftBound@i 0075  
                          __size_of_memset 001C                  _Tetris_ApplyPlayerToTable 04C5  
                                  __ptext1 0708                                    __ptext2 04A2  
                                  __ptext3 04F7                                    __ptext4 05DE  
                                  __ptext5 0462                                    __ptext6 040B  
                                  __ptext7 0481                                    __ptext8 03D4  
                                  __ptext9 0768              __size_of_Tetris_GetRandomUnit 001D  
     __size_of_Tetris_UpdatePlayerUnitBits 0086                           ___awmod@dividend 0029  
                Tetris_MovePlayerLeft@game 0030                     ??_Tetris_CountUnitBits 0072  
                     end_of_initialization 07FD                                    memset@c 0070  
                                  memset@n 0072                                    memset@p 0076  
                         _Tetris_unitPivot 0014          Tetris_UpdatePlayerUnitBits@player 007B  
                         ___lbmod@dividend 0074              Tetris_RemovePlayerFromTable@i 007D  
                              ___lbmod@rem 0076                      _Tetris_MovePlayerLeft 06B1  
          ??_Tetris_PlayerUnitBitsAreValid 0020                      _Tetris_PlayerTopmostY 03C6  
                 __end_of_Tetris_ResetGame 0481                             __end_of___bmul 03F6  
                           __end_of___lmul 059D                 Tetris_ResetGame@playerUnit 0032  
                           __end_of_memset 0427               __end_of_Tetris_SetPlayerUnit 03E3  
   __end_of_Tetris_PlayerTouchingLeftBound 0462    __size_of_Tetris_PlayerTouchingLeftBound 001E  
           _Tetris_PlayerTouchingLeftBound 0444                        start_initialization 07EE  
      Tetris_PlayerUnitBitsAreValid@player 007C                        _Tetris_RotatePlayer 0708  
              __size_of_Tetris_ResetPlayer 0021                                   ??___bmul 002E  
                     ?_Tetris_RotatePlayer 0070                                   ??___lmul 0078  
         Tetris_RemovePlayerFromTable@game 007C                                __pdataBANK0 0036  
                                 ??_memset 0074                                  ___latbits 0001  
                            __pcstackBANK0 0020                              __pcstackBANK1 00A0  
       __size_of_Tetris_ApplyPlayerToTable 0032                     ?_Tetris_MovePlayerLeft 0070  
                   ?_Tetris_PlayerTopmostY 0070                      ??_Tetris_RotatePlayer 002C  
                     __end_of_Tetris_units 0079               ?_Tetris_UpdatePlayerUnitBits 0070  
                                 ?___awmod 0027                                   ?___lbmod 0070  
                                __pstrings 0002                   __end_of_Tetris_unitPivot 0016  
           Tetris_ApplyPlayerToTable@start 007B               __end_of_Tetris_GetRandomUnit 0444  
                     _Tetris_SetPlayerUnit 03D4              ??_Tetris_UpdatePlayerUnitBits 0070  
               Tetris_CountUnitBits@result 0079                                __stringbase 0011  
             Tetris_CountUnitBits@unitBits 0070                          ___lmul@multiplier 0070  
        Tetris_PlayerOverlapsEnvironment@i 0075              __size_of_Tetris_CountUnitBits 0041  
                    ?_Tetris_SetPlayerUnit 007C                          ?_Tetris_ResetGame 0032  
               Tetris_SetPlayerUnit@player 0020                         ??_Tetris_ResetGame 0033  
                         __size_of___awmod 004D                           __size_of___lbmod 0023  
        Tetris_RemovePlayerFromTable@start 007B                         __end_of__stringtab 0012  
                                 __ptext10 06B1                                   __ptext11 052A  
                                 __ptext20 0664                                   __ptext12 0444  
                                 __ptext13 059D                                   __ptext14 04C5  
                                 __ptext15 03C6                                   __ptext16 0427  
                                 __ptext17 061F                                   __ptext18 055E  
                                 __ptext19 03E3       Tetris_PlayerTouchingLeftBound@player 0074  
         ??_Tetris_PlayerTouchingLeftBound 0070            ?_Tetris_PlayerTouchingLeftBound 0070  
                            __size_of_main 0015                              __size_of_rand 0045  
                  Tetris_RotatePlayer@game 002F                 Tetris_MovePlayerLeft@i_281 002F  
                                 main@game 00A0                       _Tetris_GetRandomUnit 0427  
                  ??_Tetris_MovePlayerLeft 002C                                   memset@p1 0075  
                             _Tetris_units 0016                    ??_Tetris_PlayerTopmostY 0070  
               __end_of_Tetris_ResetPlayer 04A2                   Tetris_ResetPlayer@player 0024  
                   ??_Tetris_SetPlayerUnit 007D                                  stringcode 000C  
    Tetris_PlayerOverlapsEnvironment@start 0073           Tetris_UpdatePlayerUnitBits@i_197 0077  
         Tetris_UpdatePlayerUnitBits@i_198 0078           Tetris_UpdatePlayerUnitBits@shift 007A  
                    ?_Tetris_GetRandomUnit 0070                                   stringdir 000C  
                                 stringtab 0002       __end_of_Tetris_RemovePlayerFromTable 055E  
    __size_of_Tetris_RemovePlayerFromTable 0034               _Tetris_RemovePlayerFromTable 052A  
              __end_of_Tetris_RotatePlayer 0768                 Tetris_ApplyPlayerToTable@i 007C  
